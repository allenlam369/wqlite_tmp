-- DROP SCHEMA WPG;

CREATE SCHEMA WPG;
-- WQPLIS.WPG.BB_PL definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BB_PL;

CREATE TABLE BB_PL (
	PARA_ID decimal(4,0) NOT NULL,
	PARA_CODE nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	PARA_UNIT nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PARA_DESC nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATUS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	UP_DET_LIMIT decimal(22,6) NULL,
	LOW_DET_LIMIT decimal(22,6) NULL,
	TEST_METHOD nvarchar(300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	UP_DATE nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DISPLAY_INT decimal(10,0) NULL,
	DISPLAY_DEC decimal(10,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_BB_PL PRIMARY KEY (PARA_ID)
);


-- WQPLIS.WPG.BB_SL definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BB_SL;

CREATE TABLE BB_SL (
	SP_ID decimal(3,0) NOT NULL,
	PHYLUM nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CLASS nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_ORDER nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FAMILY nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	GENUS nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SPECIES nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_NAME nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SP_GROUP nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COM_NAME nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	REMARK nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	APPEARANCE nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_BB_SL PRIMARY KEY (SP_ID)
);


-- WQPLIS.WPG.BB_STATION definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BB_STATION;

CREATE TABLE BB_STATION (
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_NAME nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WCZ nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EASTING decimal(9,3) NOT NULL,
	NORTHING decimal(9,3) NOT NULL,
	LATITUDE decimal(10,7) NOT NULL,
	LONGITUDE decimal(10,7) NOT NULL,
	ACTIVE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_BB_STATION PRIMARY KEY (STATION_ID)
);


-- WQPLIS.WPG.BENTHIC definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BENTHIC;

CREATE TABLE BENTHIC (
	PROJECT_ID decimal(3,0) NOT NULL,
	TABLE_NAME nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TABLE_DEC nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SECURITY_CODE decimal(2,0) NOT NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL
);


-- WQPLIS.WPG.BM_DISTRICT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_DISTRICT;

CREATE TABLE BM_DISTRICT (
	DISTRICT_CODE nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	DISTRICT_NAME nvarchar(45) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	DISTRICT_NAME_C nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HOTLINE_DISTRICT nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HOTLINE_DISTRICT_C nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DC_DISTRICT_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LCSD_DISTRICT_OFFICE nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DISTRICT_NAME_DISPLAY nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_BM_DISTRICT PRIMARY KEY (DISTRICT_CODE)
);


-- WQPLIS.WPG.BM_FIELD_C_AUX definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_FIELD_C_AUX;

CREATE TABLE BM_FIELD_C_AUX (
	ID int IDENTITY(1,1) NOT NULL,
	BMVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BEACH_CODE nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SAMPLE_DATE smalldatetime NOT NULL,
	SAMPLE_TIME nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TEMPER decimal(3,1) NULL,
	DO decimal(4,2) NULL,
	DOS decimal(4,1) NULL,
	WEATHER_VALUE decimal(1,0) NULL,
	WIND_VALUE decimal(1,0) NULL,
	CLIMATE_VALUE decimal(1,0) NULL,
	SEA_CLARITY_VALUE decimal(1,0) NULL,
	SEA_CONDITION_VALUE decimal(1,0) NULL,
	WIND_DIRECTION nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BATHER_VALUE decimal(1,0) NULL,
	TIDE_VALUE decimal(1,0) NULL,
	TIDE_RATIO decimal(5,2) NULL,
	TIDE_HEIGHT decimal(5,2) NULL,
	ABS_TIDE_HEIGHT decimal(5,2) NULL,
	REMARKS nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHOTO_TAKEN nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LOCATION_CODE nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAMPLE_CODE nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DAYAPPEND smalldatetime NULL,
	DAYEDIT smalldatetime NULL,
	DAYUPLOAD smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_BM_FIELD_C_AUX UNIQUE (ID),
	CONSTRAINT UK_BMVISIT_ID_FIELD_C_AUX UNIQUE (BMVISIT_ID,LOCATION_CODE)
);
CREATE UNIQUE NONCLUSTERED INDEX PK_BM_FIELD_C_AUX ON WQPLIS.WPG.BM_FIELD_C_AUX (ID);
CREATE UNIQUE CLUSTERED INDEX UK_BMVISIT_ID_FIELD_C_AUX ON WQPLIS.WPG.BM_FIELD_C_AUX (BMVISIT_ID, LOCATION_CODE);


-- WQPLIS.WPG.BM_FLOW definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_FLOW;

CREATE TABLE BM_FLOW (
	ID int IDENTITY(1,1) NOT NULL,
	BMVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SOURCE_CODE nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	FLOW_CODE nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL
);


-- WQPLIS.WPG.BM_PARAMETER definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_PARAMETER;

CREATE TABLE BM_PARAMETER (
	PARAMETER_SET nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	PARAMETER_NAME nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	PARAMETER_VALUE decimal(2,0) NOT NULL,
	PARAMETER_CODE nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PARAMETER_LABEL nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_BM_PARAMETER PRIMARY KEY (PARAMETER_SET,PARAMETER_VALUE)
);


-- WQPLIS.WPG.BM_RAIN_STATION definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_RAIN_STATION;

CREATE TABLE BM_RAIN_STATION (
	RAIN_STATION_CODE nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_NAME nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	LOCATION nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SZ_ID nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EASTING decimal(9,3) NULL,
	NORTHING decimal(9,3) NULL,
	LATITUDE decimal(10,7) NULL,
	LONGITUDE decimal(10,7) NULL,
	WCZ_CODE decimal(3,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_RAIN_STATION PRIMARY KEY (RAIN_STATION_CODE)
);


-- WQPLIS.WPG.BM_TIDE2 definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_TIDE2;

CREATE TABLE BM_TIDE2 (
	SDATETIME smalldatetime NOT NULL,
	[DATE] smalldatetime NOT NULL,
	STIME decimal(4,0) NOT NULL,
	[HOUR] decimal(4,2) NULL,
	TIDE_STATION_CODE nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TIDE_HEIGHT decimal(4,1) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL
);


-- WQPLIS.WPG.BM_TIDE3 definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_TIDE3;

CREATE TABLE BM_TIDE3 (
	SDATETIME smalldatetime NOT NULL,
	[DATE] smalldatetime NOT NULL,
	STIME decimal(4,0) NOT NULL,
	[HOUR] decimal(4,2) NULL,
	TIDE_STATION_CODE nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TIDE_HEIGHT decimal(4,1) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL
);


-- WQPLIS.WPG.BM_TIDE_STATION definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_TIDE_STATION;

CREATE TABLE BM_TIDE_STATION (
	TIDE_STATION_CODE nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_NAME nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_FULLNAME nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LOCATION nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATION_HEIGHT decimal(6,2) NULL,
	SZ_ID nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EASTING decimal(9,3) NULL,
	NORTHING decimal(9,3) NULL,
	LATITUDE decimal(10,7) NULL,
	LONGITUDE decimal(10,7) NULL,
	WCZ_CODE decimal(3,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TIDE_STATION PRIMARY KEY (TIDE_STATION_CODE)
);


-- WQPLIS.WPG.BM_VISIT_SUMMARY_TEMP99 definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_VISIT_SUMMARY_TEMP99;

CREATE TABLE BM_VISIT_SUMMARY_TEMP99 (
	BMVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BEACH_CODE nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TEMPER decimal(3,1) NULL,
	DO decimal(4,2) NULL,
	DOS decimal(4,1) NULL,
	PH decimal(4,2) NULL,
	SAL decimal(4,2) NULL,
	SAL_R decimal(4,2) NULL,
	SAL_L decimal(4,2) NULL,
	TURB decimal(6,2) NULL,
	G_MEAN decimal(9,0) NULL,
	R_G_MEAN decimal(9,0) NULL,
	LOG_G_MEAN decimal(12,8) NULL,
	ADJ_LOG_GM decimal(12,8) NULL,
	G_MEAN_FC decimal(9,0) NULL,
	R_G_MEAN_FC decimal(9,0) NULL,
	LOG_G_MEAN_FC decimal(12,8) NULL,
	ADJ_LOG_GM_FC decimal(12,8) NULL,
	RAINFALL decimal(5,1) NULL
);


-- WQPLIS.WPG.BT_O definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BT_O;

CREATE TABLE BT_O (
	BT_O_ID nvarchar(17) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BT_VISIT_ID nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BT_SPCODE_ID nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SAMPLE_MARK nvarchar(17) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PCBS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PAH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_FLUO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PHEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ANTH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_FLUT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PYRE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_CHRY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BBFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BKFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BAPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BGPE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_CP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_HCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_HEPT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ALDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_HEPO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ODDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_END1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PDDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_DIEL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ODDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ENDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_END2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PDDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ODDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_THM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_TCM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_TCE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BDCM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BTCM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_TRCE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_CDBM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BROM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_MDCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ODCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_THMS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ACEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ACPH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BANT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_DAAN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_INPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB28 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB31 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB52 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB101 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB105 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB118 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB128 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB138 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB149 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB153 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB156 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB180 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ABHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_GBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_DWR_O nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_DBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PDDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LIPID decimal(5,3) NULL,
	ABHC decimal(10,4) NULL,
	ACEN decimal(10,4) NULL,
	ACPH decimal(10,4) NULL,
	ALDR decimal(10,4) NULL,
	ANTH decimal(10,4) NULL,
	BANT decimal(10,4) NULL,
	BAPY decimal(10,4) NULL,
	BBFL decimal(10,4) NULL,
	BBHC decimal(10,4) NULL,
	BDCM decimal(10,4) NULL,
	BGPE decimal(10,4) NULL,
	BHC decimal(10,4) NULL,
	BKFL decimal(10,4) NULL,
	BROM decimal(10,4) NULL,
	BTCM decimal(10,4) NULL,
	CDBM decimal(10,4) NULL,
	CHRY decimal(10,4) NULL,
	CP decimal(10,4) NULL,
	DAAN decimal(10,4) NULL,
	DBHC decimal(10,4) NULL,
	DIEL decimal(10,4) NULL,
	DWR_O decimal(5,3) NULL,
	END1 decimal(10,4) NULL,
	END2 decimal(10,4) NULL,
	ENDR decimal(10,4) NULL,
	FLUO decimal(10,4) NULL,
	FLUT decimal(10,4) NULL,
	GBHC decimal(10,4) NULL,
	HCB decimal(10,4) NULL,
	HEPO decimal(10,4) NULL,
	HEPT decimal(10,4) NULL,
	INPY decimal(10,4) NULL,
	MDCB decimal(10,4) NULL,
	ODCB decimal(10,4) NULL,
	ODDD decimal(10,4) NULL,
	ODDE decimal(10,4) NULL,
	ODDT decimal(10,4) NULL,
	PAH decimal(10,4) NULL,
	PCB101 decimal(10,4) NULL,
	PCB105 decimal(10,4) NULL,
	PCB118 decimal(10,4) NULL,
	PCB128 decimal(10,4) NULL,
	PCB138 decimal(10,4) NULL,
	PCB149 decimal(10,4) NULL,
	PCB153 decimal(10,4) NULL,
	PCB156 decimal(10,4) NULL,
	PCB180 decimal(10,4) NULL,
	PCB28 decimal(10,4) NULL,
	PCB31 decimal(10,4) NULL,
	PCB52 decimal(10,4) NULL,
	PCBS decimal(10,4) NULL,
	PDDD decimal(10,4) NULL,
	PDDE decimal(10,4) NULL,
	PDDT decimal(10,4) NULL,
	PHEN decimal(10,4) NULL,
	PYRE decimal(10,4) NULL,
	TCE decimal(10,4) NULL,
	TCM decimal(10,4) NULL,
	THM decimal(10,4) NULL,
	THMS decimal(10,4) NULL,
	TRCE decimal(10,4) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB88 decimal(10,4) NULL,
	PCB18 decimal(10,4) NULL,
	PCB8 decimal(10,4) NULL,
	PCB169 decimal(10,4) NULL,
	PCB44 decimal(10,4) NULL,
	PCB170 decimal(10,4) NULL,
	PCB157 decimal(10,4) NULL,
	PCB167 decimal(10,4) NULL,
	PCB187 decimal(10,4) NULL,
	PCB66 decimal(10,4) NULL,
	PCB77 decimal(10,4) NULL,
	PCB81 decimal(10,4) NULL,
	PCB114 decimal(10,4) NULL,
	PCB123 decimal(10,4) NULL,
	PCB126 decimal(10,4) NULL,
	PCB189 decimal(10,4) NULL,
	L_PCB88 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB18 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB8 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB169 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB44 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB170 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB157 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB167 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB187 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB66 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB77 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB81 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB114 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB123 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB126 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB189 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CONSTRAINT PK_BT_O PRIMARY KEY (BT_O_ID)
);


-- WQPLIS.WPG.BT_PL definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BT_PL;

CREATE TABLE BT_PL (
	PARA_ID decimal(4,0) NOT NULL,
	PARA_CODE nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	PARA_UNIT nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PARA_DESC nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATUS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	UP_DET_LIMIT decimal(22,6) NULL,
	LOW_DET_LIMIT decimal(22,6) NULL,
	TEST_METHOD nvarchar(300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	UP_DATE nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DISPLAY_INT decimal(10,0) NULL,
	DISPLAY_DEC decimal(10,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_BT_PL PRIMARY KEY (PARA_ID)
);


-- WQPLIS.WPG.BT_SL definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BT_SL;

CREATE TABLE BT_SL (
	SP_ID decimal(3,0) NOT NULL,
	PHYLUM nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CLASS nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_ORDER nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FAMILY nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	GENUS nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SPECIES nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_NAME nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SP_GROUP nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COM_NAME nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	REMARK nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	APPEARANCE nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_BT_SL PRIMARY KEY (SP_ID)
);


-- WQPLIS.WPG.BT_SPCODE definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BT_SPCODE;

CREATE TABLE BT_SPCODE (
	BT_SPCODE_ID nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SP_NAME nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TISSUE_TYPE nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAMPLING nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_ID decimal(3,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_BT_SPCODE PRIMARY KEY (BT_SPCODE_ID)
);


-- WQPLIS.WPG.BT_STATION definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BT_STATION;

CREATE TABLE BT_STATION (
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_NAME nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WCZ nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EASTING decimal(9,3) NULL,
	NORTHING decimal(9,3) NULL,
	LATITUDE decimal(10,6) NULL,
	LONGITUDE decimal(10,6) NULL,
	SAMPLING nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACTIVE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAMPLING_AREA nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TRAWL_DIRECTION nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_BT_STATION PRIMARY KEY (STATION_ID)
);


-- WQPLIS.WPG.BT_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BT_VISIT;

CREATE TABLE BT_VISIT (
	BT_VISIT_ID nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	M_DATE smalldatetime NOT NULL,
	S_TIME decimal(4,0) NULL,
	SAMPLING nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_BT_VISIT PRIMARY KEY (BT_VISIT_ID)
);


-- WQPLIS.WPG.COLUMN_INFO definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.COLUMN_INFO;

CREATE TABLE COLUMN_INFO (
	TABLE_NAME nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	COLUMN_NAME nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	DISPLAY bit NULL,
	DESCRIPTION nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	UNIT nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHINESE nvarchar(150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TEST_METHOD nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LOWER_LIMIT decimal(15,3) NULL,
	UPPER_LIMIT decimal(15,3) NULL,
	DECIMAL_PLACE decimal(2,0) NULL,
	EFFECTIVE_DATE smalldatetime NULL,
	STATUS nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_COLUMN_INFO PRIMARY KEY (TABLE_NAME,COLUMN_NAME)
);


-- WQPLIS.WPG.DATASZ definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DATASZ;

CREATE TABLE DATASZ (
	河流名称 nvarchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	监测点位 nvarchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	潮期 nvarchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	水平位置 nvarchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	垂直位置 nvarchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	采样日期 datetime NULL,
	水温 float NULL,
	pH值 float NULL,
	悬浮物 float NULL,
	总硬度 float NULL,
	电导率 float NULL,
	溶解氧 float NULL,
	高锰酸盐指数 float NULL,
	五日生化需氧量 float NULL,
	氨氮 float NULL,
	非离子氨 float NULL,
	亚硝酸盐氮 float NULL,
	硝酸盐氮 float NULL,
	挥发酚 float NULL,
	氰化物 float NULL,
	砷 float NULL,
	汞 float NULL,
	六价铬 float NULL,
	铅 float NULL,
	镉 float NULL,
	石油类 float NULL,
	总氮 float NULL,
	总磷 float NULL,
	化学需氧量 float NULL,
	铜 float NULL,
	硫化物 float NULL,
	氯化物 nvarchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	F33 nvarchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	F34 nvarchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
);


-- WQPLIS.WPG.DATA_CONVERT_INFO definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DATA_CONVERT_INFO;

CREATE TABLE DATA_CONVERT_INFO (
	SOU_COLUMN_NAME nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COLUMN_NAME nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	UNIT nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCALE] decimal(18,0) NULL,
	SOURCE_NAME nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
);


-- WQPLIS.WPG.DATA_INSERT_INFO definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DATA_INSERT_INFO;

CREATE TABLE DATA_INSERT_INFO (
	MATCH_ID decimal(5,0) NOT NULL,
	TABLE_NAME nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COLUMN_NAME nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SOU_TABLE_NAME nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SOU_COLUMN_NAME nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATUS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_DATA_INSERT_INFO PRIMARY KEY (MATCH_ID)
);


-- WQPLIS.WPG.DB_ACTUAL_LOAD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_ACTUAL_LOAD;

CREATE TABLE DB_ACTUAL_LOAD (
	RIVER_ID decimal(3,0) NULL,
	RIVER_NAME nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SDATE smalldatetime NULL,
	EDATE smalldatetime NULL,
	SCODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PL_FLOW decimal(22,6) NULL,
	PL_BOD decimal(22,6) NULL,
	PL_TN decimal(22,6) NULL,
	PL_TP decimal(22,6) NULL,
	PL_CU_TOT decimal(22,6) NULL
);


-- WQPLIS.WPG.DB_CLOUD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_CLOUD;

CREATE TABLE DB_CLOUD (
	MDATE smalldatetime NULL,
	H0 decimal(4,2) NULL,
	H1 decimal(4,2) NULL,
	H2 decimal(4,2) NULL,
	H3 decimal(4,2) NULL,
	H4 decimal(4,2) NULL,
	H5 decimal(4,2) NULL,
	H6 decimal(4,2) NULL,
	H7 decimal(4,2) NULL,
	H8 decimal(4,2) NULL,
	H9 decimal(4,2) NULL,
	H10 decimal(4,2) NULL,
	H11 decimal(4,2) NULL,
	H12 decimal(4,2) NULL,
	H13 decimal(4,2) NULL,
	H14 decimal(4,2) NULL,
	H15 decimal(4,2) NULL,
	H16 decimal(4,2) NULL,
	H17 decimal(4,2) NULL,
	H18 decimal(4,2) NULL,
	H19 decimal(4,2) NULL,
	H20 decimal(4,2) NULL,
	H21 decimal(4,2) NULL,
	H22 decimal(4,2) NULL,
	H23 decimal(4,2) NULL
);


-- WQPLIS.WPG.DB_DAILY definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_DAILY;

CREATE TABLE DB_DAILY (
	STATION_ID decimal(3,0) NULL,
	STATNAME nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MDATE smalldatetime NULL,
	EVAP decimal(4,2) NULL,
	SOLAR decimal(4,2) NULL
);


-- WQPLIS.WPG.DB_MS_QUALITY definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_MS_QUALITY;

CREATE TABLE DB_MS_QUALITY (
	STATION_ID decimal(3,0) NULL,
	MDATE smalldatetime NULL,
	[TIME] decimal(4,0) NULL,
	SCODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EH decimal(22,6) NULL,
	COD decimal(22,6) NULL,
	TN decimal(22,6) NULL,
	TP decimal(22,6) NULL,
	CU_TOT decimal(22,6) NULL,
	TOC decimal(22,6) NULL,
	MICRON63 decimal(22,6) NULL
);


-- WQPLIS.WPG.DB_MS_QUALITY_ADD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_MS_QUALITY_ADD;

CREATE TABLE DB_MS_QUALITY_ADD (
	STATION_ID decimal(3,0) NULL,
	MDATE smalldatetime NULL,
	[TIME] decimal(4,0) NULL,
	SCODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH decimal(22,6) NULL,
	MOISTURE decimal(22,6) NULL,
	CAL_CARBONATE decimal(22,6) NULL,
	QU_CAL_CARBONATE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE decimal(22,6) NULL,
	NO2_NO3 decimal(22,6) NULL,
	QU_NO2_NO3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COD decimal(22,6) NULL,
	ACID_V_SULPHIDE decimal(22,6) NULL,
	QU_ACID nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
);


-- WQPLIS.WPG.DB_MW_INSITU definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_MW_INSITU;

CREATE TABLE DB_MW_INSITU (
	STATION_ID decimal(3,0) NULL,
	STATNAME nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MDATE smalldatetime NULL,
	[TIME] decimal(4,0) NULL,
	SCODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	W_DEPTH decimal(7,2) NULL,
	DEPTH_CODE nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAMPLE_DEPTH decimal(7,2) NULL,
	TEMP decimal(22,6) NULL,
	DO decimal(22,6) NULL,
	PH decimal(22,6) NULL,
	SAL decimal(22,6) NULL,
	TURB decimal(22,6) NULL,
	COND decimal(22,6) NULL,
	COND_TEMP decimal(22,6) NULL
);


-- WQPLIS.WPG.DB_MW_QUALITY definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_MW_QUALITY;

CREATE TABLE DB_MW_QUALITY (
	SAMPLE_NO nvarchar(8) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATION_ID decimal(3,0) NULL,
	MDATE smalldatetime NULL,
	[TIME] decimal(4,0) NULL,
	SCODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAMPLE_DEPTH decimal(7,2) NULL,
	SS decimal(22,6) NULL,
	CL decimal(22,6) NULL,
	CU_DISS decimal(22,6) NULL,
	CU_TOT decimal(22,6) NULL,
	SI decimal(22,6) NULL,
	NH3_N decimal(22,6) NULL,
	NO2_N decimal(22,6) NULL,
	NO3_N decimal(22,6) NULL,
	TKN decimal(22,6) NULL,
	TN decimal(22,6) NULL,
	TP decimal(22,6) NULL,
	PO4_P decimal(22,6) NULL,
	TOC decimal(22,6) NULL,
	CHL_A decimal(22,6) NULL,
	COD decimal(22,6) NULL,
	BOD decimal(22,6) NULL
);


-- WQPLIS.WPG.DB_MW_QUALITY_ADD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_MW_QUALITY_ADD;

CREATE TABLE DB_MW_QUALITY_ADD (
	SAMPLE_NO nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATION_ID decimal(3,0) NULL,
	MDATE smalldatetime NULL,
	[TIME] decimal(4,0) NULL,
	SCODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAMPLE_DEPTH decimal(7,2) NULL,
	QU_CARBONATE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CARBONATE decimal(22,6) NULL,
	BICARBONATE decimal(22,6) NULL,
	ALKALINITY decimal(22,6) NULL,
	S_TOT decimal(22,6) NULL,
	QU_FE_DISS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE_DISS decimal(22,6) NULL,
	QU_FE_SUS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE_SUS decimal(22,6) NULL,
	QU_FE_TOT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE_TOT decimal(22,6) NULL,
	TOC decimal(22,6) NULL,
	TOC_DISS decimal(22,6) NULL,
	QU_TOC_SUS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOC_SUS decimal(22,6) NULL
);


-- WQPLIS.WPG.DB_M_CTD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_M_CTD;

CREATE TABLE DB_M_CTD (
	CTD_ID decimal(6,0) NOT NULL,
	SAMPLE_DEPTH decimal(7,2) NULL,
	TEMP decimal(22,6) NULL,
	SAL decimal(22,6) NULL,
	COND decimal(22,6) NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
);


-- WQPLIS.WPG.DB_M_CURRENT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_M_CURRENT;

CREATE TABLE DB_M_CURRENT (
	STATION_ID decimal(3,0) NULL,
	MDATE smalldatetime NULL,
	[TIME] decimal(4,0) NULL,
	SCODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	W_DEPTH decimal(7,2) NULL,
	DEPTH_CODE nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAMPLE_DEPTH decimal(7,2) NULL,
	SPEED decimal(5,2) NULL,
	DIRECTION decimal(4,1) NULL
);


-- WQPLIS.WPG.DB_M_MCTD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_M_MCTD;

CREATE TABLE DB_M_MCTD (
	STATION_ID decimal(3,0) NULL,
	PROFILE_ID nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MDATE smalldatetime NULL,
	[TIME] decimal(4,0) NULL,
	W_DEPTH decimal(7,2) NULL,
	SCODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CTD_ID decimal(6,0) NULL
);


-- WQPLIS.WPG.DB_M_PARTICLE definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_M_PARTICLE;

CREATE TABLE DB_M_PARTICLE (
	STATION_ID decimal(3,0) NULL,
	MDATE smalldatetime NULL,
	DRY_WT decimal(22,6) NULL,
	MICRON_10 decimal(22,6) NULL,
	MICRON_25 decimal(22,6) NULL,
	MICRON_50 decimal(22,6) NULL,
	MICRON_75 decimal(22,6) NULL,
	MICRON_90 decimal(22,6) NULL,
	MICRON_63 decimal(22,6) NULL
);


-- WQPLIS.WPG.DB_POTENTIAL_LOAD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_POTENTIAL_LOAD;

CREATE TABLE DB_POTENTIAL_LOAD (
	SCENARIO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DESCRIPTION nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SNAME nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	RIVER_ID decimal(3,0) NULL,
	RIVER_NAME nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[YEAR] decimal(4,0) NULL,
	PL_FLOW decimal(22,6) NULL,
	PL_BOD decimal(22,6) NULL,
	PL_TN decimal(22,6) NULL,
	PL_TP decimal(22,6) NULL,
	PL_EC decimal(22,6) NULL
);


-- WQPLIS.WPG.DB_RW_QUALITY definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_RW_QUALITY;

CREATE TABLE DB_RW_QUALITY (
	RIVER_ID decimal(3,0) NULL,
	RIVER_NAME nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MDATE smalldatetime NULL,
	[TIME] decimal(4,0) NULL,
	SCODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TIDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH decimal(22,6) NULL,
	SAL decimal(22,6) NULL,
	SS decimal(22,6) NULL,
	CL decimal(22,6) NULL,
	QU_CU_DISS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU_DISS decimal(22,6) NULL,
	CU_TOT decimal(22,6) NULL,
	SI decimal(22,6) NULL,
	NH3_N decimal(22,6) NULL,
	QU_NO2_N nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2_N decimal(22,6) NULL,
	QU_NO3_N nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3_N decimal(22,6) NULL,
	TKN decimal(22,6) NULL,
	TN decimal(22,6) NULL,
	TP decimal(22,6) NULL,
	PO4_P decimal(22,6) NULL,
	TOC decimal(22,6) NULL,
	QU_CHL_A nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL_A decimal(22,6) NULL,
	COD decimal(22,6) NULL,
	BOD decimal(22,6) NULL,
	COND decimal(22,6) NULL,
	DO decimal(22,6) NULL,
	TEMP decimal(22,6) NULL
);


-- WQPLIS.WPG.DB_R_DISCHARGE definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_R_DISCHARGE;

CREATE TABLE DB_R_DISCHARGE (
	STATION_ID decimal(3,0) NULL,
	MDATE smalldatetime NULL,
	[TIME] decimal(4,0) NULL,
	SCODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	D_VALUE decimal(22,6) NULL
);


-- WQPLIS.WPG.DB_R_DISCHARGE_STATION definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_R_DISCHARGE_STATION;

CREATE TABLE DB_R_DISCHARGE_STATION (
	STATION_ID decimal(3,0) NULL,
	STATNAME nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SCODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	E decimal(10,3) NULL,
	N decimal(10,3) NULL,
	LATITUDE decimal(11,7) NULL,
	LONGITUDE decimal(11,7) NULL
);


-- WQPLIS.WPG.DB_R_FLOW definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_R_FLOW;

CREATE TABLE DB_R_FLOW (
	RIVER_ID decimal(3,0) NULL,
	RIVER_NAME nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MDATE smalldatetime NULL,
	[TIME] decimal(4,0) NULL,
	SCODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DEPTH] decimal(7,2) NULL,
	FLOW decimal(22,6) NULL
);


-- WQPLIS.WPG.DB_SPECIES definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_SPECIES;

CREATE TABLE DB_SPECIES (
	MDATE smalldatetime NULL,
	[TIME] decimal(4,0) NULL,
	CODE nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	GENUS nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DENSITY decimal(5,0) NULL,
	NO_OF_SPECIES decimal(3,0) NULL,
	R_DENSITY decimal(22,6) NULL,
	ABUNDANCE decimal(22,6) NULL
);


-- WQPLIS.WPG.DB_SPLIT_ALOAD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_SPLIT_ALOAD;

CREATE TABLE DB_SPLIT_ALOAD (
	SITE nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SDATE smalldatetime NULL,
	EDATE smalldatetime NULL,
	SCODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PL_FLOW decimal(22,6) NULL,
	PL_BOD decimal(22,6) NULL,
	PL_TN decimal(22,6) NULL,
	PL_TP decimal(22,6) NULL,
	PL_CU_TOT decimal(22,6) NULL
);


-- WQPLIS.WPG.DB_SPLIT_PLOAD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_SPLIT_PLOAD;

CREATE TABLE DB_SPLIT_PLOAD (
	SCENARIO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DESCRIPTION nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[YEAR] decimal(4,0) NULL,
	SITE nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PL_FLOW decimal(22,6) NULL,
	PL_BOD decimal(22,6) NULL,
	PL_TN decimal(22,6) NULL,
	PL_TP decimal(22,6) NULL,
	PL_EC decimal(22,6) NULL
);


-- WQPLIS.WPG.DB_STATION definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_STATION;

CREATE TABLE DB_STATION (
	STATION_ID decimal(3,0) NULL,
	STATNAME nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SCODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PORDER nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	E decimal(10,3) NULL,
	N decimal(10,3) NULL,
	LATITUDE decimal(11,7) NULL,
	LONGITUDE decimal(11,7) NULL
);


-- WQPLIS.WPG.DB_USER_LOG definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DB_USER_LOG;

CREATE TABLE DB_USER_LOG (
	LOG_USER varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LOG_TIME smalldatetime NULL,
	LOG_SIZE decimal(18,0) NULL,
	LOG_TYPE varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LOG_TABLE varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LOG_TIMESTAMP varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LOG_IP varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
);
 CREATE CLUSTERED INDEX name_time ON WPG.DB_USER_LOG (  LOG_TIME DESC  , LOG_TIMESTAMP DESC  , LOG_USER DESC  )  
	 WITH (  PAD_INDEX = ON ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	 ON [PRIMARY ] ;


-- WQPLIS.WPG.DS_GLAB_CDD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DS_GLAB_CDD;

CREATE TABLE DS_GLAB_CDD (
	DSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	DSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS DEFAULT 'X' NOT NULL,
	DSD_DWR decimal(4,2) NULL,
	L_TCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDF1 decimal(7,2) NULL,
	L_TCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDD1 decimal(7,2) NULL,
	L_PECDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF1 decimal(7,2) NULL,
	L_PECDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF2 decimal(7,2) NULL,
	L_PECDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDD1 decimal(7,2) NULL,
	L_HXCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF1 decimal(7,2) NULL,
	L_HXCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF2 decimal(7,2) NULL,
	L_HXCDF3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF3 decimal(7,2) NULL,
	L_HXCDF4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF4 decimal(7,2) NULL,
	L_HXCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD1 decimal(7,2) NULL,
	L_HXCDD2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD2 decimal(7,2) NULL,
	L_HXCDD3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD3 decimal(7,2) NULL,
	L_HPCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF1 decimal(7,2) NULL,
	L_HPCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF2 decimal(7,2) NULL,
	L_HPCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDD1 decimal(7,2) NULL,
	L_OCDF nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDF decimal(7,2) NULL,
	L_OCDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDD decimal(7,2) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_DS_GLAB_CDD PRIMARY KEY (DSVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.DS_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.DS_VISIT;

CREATE TABLE DS_VISIT (
	DSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	DSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	STATION_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_DS_VISIT PRIMARY KEY (DSVISIT_ID)
);


-- WQPLIS.WPG.EB_PL definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.EB_PL;

CREATE TABLE EB_PL (
	PARA_ID decimal(4,0) NOT NULL,
	PARA_CODE nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	PARA_UNIT nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PARA_DESC nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATUS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	UP_DET_LIMIT decimal(22,6) NULL,
	LOW_DET_LIMIT decimal(22,6) NULL,
	TEST_METHOD nvarchar(300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	UP_DATE nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DISPLAY_INT decimal(10,0) NULL,
	DISPLAY_DEC decimal(10,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_EB_PL PRIMARY KEY (PARA_ID)
);


-- WQPLIS.WPG.EB_SL definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.EB_SL;

CREATE TABLE EB_SL (
	SP_ID decimal(5,0) NOT NULL,
	PHYLUM nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CLASS nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_ORDER nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FAMILY nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	GENUS nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SPECIES nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_NAME nvarchar(45) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SP_GROUP nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COM_NAME nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COLOUR nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOXICITY nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	REMARK nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	APPEARANCE nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL
);
 CREATE  UNIQUE NONCLUSTERED INDEX IX_EB_SL ON WPG.EB_SL (  SP_NAME ASC  )  
	 WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	 ON [PRIMARY ] ;


-- WQPLIS.WPG.EUTROPHICATION definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.EUTROPHICATION;

CREATE TABLE EUTROPHICATION (
	PROJECT_ID decimal(3,0) NOT NULL,
	TABLE_NAME nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TABLE_DEC nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SECURITY_CODE decimal(2,0) NOT NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL
);


-- WQPLIS.WPG.E_STATION definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.E_STATION;

CREATE TABLE E_STATION (
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_NAME nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WCZ nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	EASTING decimal(9,3) NOT NULL,
	NORTHING decimal(9,3) NOT NULL,
	LATITUDE decimal(10,7) NOT NULL,
	LONGITUDE decimal(10,7) NOT NULL,
	ACTIVE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_E_STATION PRIMARY KEY (STATION_ID)
);


-- WQPLIS.WPG.FUNC_TREND_TABLE definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.FUNC_TREND_TABLE;

CREATE TABLE FUNC_TREND_TABLE (
	n smallint NULL,
	yr smallint NULL,
	mth smallint NULL,
	wq decimal(19,8) NULL
);


-- WQPLIS.WPG.FUNC_TREND_TABLE_MW definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.FUNC_TREND_TABLE_MW;

CREATE TABLE FUNC_TREND_TABLE_MW (
	n smallint NULL,
	yr smallint NULL,
	mth smallint NULL,
	wq decimal(19,8) NULL
);


-- WQPLIS.WPG.FUNC_TREND_TABLE_RW definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.FUNC_TREND_TABLE_RW;

CREATE TABLE FUNC_TREND_TABLE_RW (
	n smallint NULL,
	yr smallint NULL,
	mth smallint NULL,
	wq decimal(19,8) NULL
);


-- WQPLIS.WPG.HS_SAMPLE_MARK definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.HS_SAMPLE_MARK;

CREATE TABLE HS_SAMPLE_MARK (
	SAMPLE_MARK varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATION varchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
);


-- WQPLIS.WPG.HS_SEACAT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.HS_SEACAT;

CREATE TABLE HS_SEACAT (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DEPTH] decimal(6,2) NOT NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TEMPER decimal(7,3) NULL,
	PH decimal(7,3) NULL,
	SAL decimal(7,3) NULL,
	COND decimal(7,3) NULL,
	DO decimal(7,3) NULL,
	DO_SAT decimal(7,3) NULL,
	FLSCUFA decimal(7,3) NULL,
	TURB decimal(7,3) NULL,
	PAR decimal(18,12) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_HS_SEACAT PRIMARY KEY (MWVISIT_ID,[DEPTH])
);
 CREATE NONCLUSTERED INDEX IX_HS_SEACAT ON WPG.HS_SEACAT (  MWVISIT_ID ASC  , DEPTH_CODE ASC  )  
	 WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	 ON [PRIMARY ] ;


-- WQPLIS.WPG.HS_SIG definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.HS_SIG;

CREATE TABLE HS_SIG (
	FIELDNAME nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIG float NULL,
	REPORT_TYPE nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
);


-- WQPLIS.WPG.Login_Info definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.Login_Info;

CREATE TABLE Login_Info (
	Login_Name nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	Login_Time datetime NULL,
	Application nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
);


-- WQPLIS.WPG.MARINE_SEDIMENT_SUMMARY_REPORT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MARINE_SEDIMENT_SUMMARY_REPORT;

CREATE TABLE MARINE_SEDIMENT_SUMMARY_REPORT (
	[ZONE] nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATION nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	YR int NULL,
	TOTAL int NULL,
	[TYPE] varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SZ_63_AVG decimal(38,6) NULL,
	EH_AVG decimal(38,6) NULL,
	L_TS_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TS_AVG decimal(38,6) NULL,
	L_TVS_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS_AVG decimal(38,6) NULL,
	L_COD_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COD_AVG decimal(38,6) NULL,
	L_TC_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TC_AVG decimal(38,6) NULL,
	L_NH_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH_AVG decimal(38,6) NULL,
	L_TKN_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_AVG decimal(38,6) NULL,
	L_TP_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_AVG decimal(38,6) NULL,
	L_INS_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	INS_AVG decimal(38,6) NULL,
	L_CN_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CN_AVG decimal(38,6) NULL,
	L_AG_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG_AVG decimal(38,6) NULL,
	L_ARS_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARS_AVG decimal(38,6) NULL,
	L_CD_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD_AVG decimal(38,6) NULL,
	L_CR_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR_AVG decimal(38,6) NULL,
	L_CU_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU_AVG decimal(38,6) NULL,
	L_HG_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG_AVG decimal(38,6) NULL,
	L_NI_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI_AVG decimal(38,6) NULL,
	L_PB_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB_AVG decimal(38,6) NULL,
	L_ZN_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN_AVG decimal(38,6) NULL,
	SUM18PCB_AVG decimal(38,6) NULL,
	SUM6LMPAH_AVG decimal(38,6) NULL,
	SUM10HMPAH_AVG decimal(38,6) NULL,
	SZ_63_MIN decimal(38,6) NULL,
	EH_MIN decimal(38,6) NULL,
	L_TS_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TS_MIN decimal(38,6) NULL,
	L_TVS_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS_MIN decimal(38,6) NULL,
	L_COD_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COD_MIN decimal(38,6) NULL,
	L_TC_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TC_MIN decimal(38,6) NULL,
	L_NH_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH_MIN decimal(38,6) NULL,
	L_TKN_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_MIN decimal(38,6) NULL,
	L_TP_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_MIN decimal(38,6) NULL,
	L_INS_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	INS_MIN decimal(38,6) NULL,
	L_CN_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CN_MIN decimal(38,6) NULL,
	L_AG_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG_MIN decimal(38,6) NULL,
	L_ARS_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARS_MIN decimal(38,6) NULL,
	L_CD_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD_MIN decimal(38,6) NULL,
	L_CR_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR_MIN decimal(38,6) NULL,
	L_CU_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU_MIN decimal(38,6) NULL,
	L_HG_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG_MIN decimal(38,6) NULL,
	L_NI_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI_MIN decimal(38,6) NULL,
	L_PB_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB_MIN decimal(38,6) NULL,
	L_ZN_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN_MIN decimal(38,6) NULL,
	SUM18PCB_MIN decimal(38,6) NULL,
	SUM6LMPAH_MIN decimal(38,6) NULL,
	SUM10HMPAH_MIN decimal(38,6) NULL,
	SZ_63_MAX decimal(38,6) NULL,
	EH_MAX decimal(38,6) NULL,
	L_TS_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TS_MAX decimal(38,6) NULL,
	L_TVS_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS_MAX decimal(38,6) NULL,
	L_COD_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COD_MAX decimal(38,6) NULL,
	L_TC_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TC_MAX decimal(38,6) NULL,
	L_NH_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH_MAX decimal(38,6) NULL,
	L_TKN_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_MAX decimal(38,6) NULL,
	L_TP_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_MAX decimal(38,6) NULL,
	L_INS_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	INS_MAX decimal(38,6) NULL,
	L_CN_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CN_MAX decimal(38,6) NULL,
	L_AG_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG_MAX decimal(38,6) NULL,
	L_ARS_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARS_MAX decimal(38,6) NULL,
	L_CD_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD_MAX decimal(38,6) NULL,
	L_CR_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR_MAX decimal(38,6) NULL,
	L_CU_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU_MAX decimal(38,6) NULL,
	L_HG_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG_MAX decimal(38,6) NULL,
	L_NI_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI_MAX decimal(38,6) NULL,
	L_PB_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB_MAX decimal(38,6) NULL,
	L_ZN_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN_MAX decimal(38,6) NULL,
	SUM18PCB_MAX decimal(38,6) NULL,
	SUM6LMPAH_MAX decimal(38,6) NULL,
	SUM10HMPAH_MAX decimal(38,6) NULL,
	VALID_DATE smalldatetime DEFAULT getdate() NULL
);


-- WQPLIS.WPG.MARINE_WATER1_ALERT1 definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MARINE_WATER1_ALERT1;

CREATE TABLE MARINE_WATER1_ALERT1 (
	[ZONE] nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WCZ nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SUBZONE nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATION nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAM_NO decimal(2,0) NULL,
	D_CODE nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PARAMETER] nvarchar(128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MEASURE float NULL,
	[LIMIT] float NULL,
	DISP_STATS nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOTAL int NULL,
	YR int NULL,
	SITE_ID decimal(4,0) NULL,
	DISP_SEQ int NULL
);


-- WQPLIS.WPG.MARINE_WATER_STATISTICS definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MARINE_WATER_STATISTICS;

CREATE TABLE MARINE_WATER_STATISTICS (
	[ZONE] nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WCZ nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SUBZONE nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATION nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	YR int NULL,
	D_CODE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TOTAL int NULL,
	TEMPER float NULL,
	PH_SC float NULL,
	SAL float NULL,
	COND float NULL,
	DO float NULL,
	DO_SAT float NULL,
	FLSCUFA float NULL,
	TURB_SC float NULL,
	PAR float NULL,
	L_BOD5 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5 float NULL,
	L_FC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC float NULL,
	L_ECOLI varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ECOLI float NULL,
	L_PH_M varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH_M float NULL,
	L_TURB_M varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TURB_M float NULL,
	L_NH4 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 float NULL,
	L_NO2 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 float NULL,
	L_NO3 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 float NULL,
	L_TKN_S varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_S float NULL,
	L_TKN_P varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_P float NULL,
	L_TKN_SP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_SP float NULL,
	L_PO4 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 float NULL,
	L_TP_S varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_S float NULL,
	L_TP_P varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_P float NULL,
	L_TP_SP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_SP float NULL,
	L_SIO2 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIO2 float NULL,
	L_SS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS float NULL,
	L_TVS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS float NULL,
	L_CHL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL float NULL,
	L_PHAE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHAE float NULL,
	SOL_RAD float NULL,
	AIR_TEMP float NULL,
	WIND_SP float NULL,
	SD float NULL,
	NH3 float NULL,
	TIN float NULL,
	TN float NULL,
	NH4_NM float NULL,
	NO2_NM float NULL,
	NO3_NM float NULL,
	TKN_NM float NULL,
	NOX_NM float NULL,
	TIN_NM float NULL,
	TN_NM float NULL,
	PO4_PM float NULL,
	TP_PM float NULL,
	TIN_PO4_MMR float NULL,
	TN_TP_MMR float NULL,
	VIEW_NO decimal(2,0) NULL,
	DISP_STATS nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DISP_SEQ int NULL
);


-- WQPLIS.WPG.MARINE_WATER_SUMMARY_REPORT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MARINE_WATER_SUMMARY_REPORT;

CREATE TABLE MARINE_WATER_SUMMARY_REPORT (
	[ZONE] nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATION nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	YR int NULL,
	D_CODE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOTAL int NULL,
	TEMPER_AVG decimal(38,6) NULL,
	PH_SC_AVG decimal(38,6) NULL,
	SAL_AVG decimal(38,6) NULL,
	DO_AVG decimal(38,6) NULL,
	DO_SAT_AVG decimal(38,6) NULL,
	TURB_SC_AVG decimal(38,6) NULL,
	L_BOD5_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5_AVG decimal(38,6) NULL,
	L_FC_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC_AVG decimal(38,6) NULL,
	L_ECOLI_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ECOLI_AVG decimal(38,6) NULL,
	L_NH4_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4_AVG decimal(38,6) NULL,
	L_NO2_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2_AVG decimal(38,6) NULL,
	L_NO3_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3_AVG decimal(38,6) NULL,
	L_TKN_SP_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_SP_AVG decimal(38,6) NULL,
	L_PO4_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4_AVG decimal(38,6) NULL,
	L_TP_SP_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_SP_AVG decimal(38,6) NULL,
	L_SIO2_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIO2_AVG decimal(38,6) NULL,
	L_SS_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS_AVG decimal(38,6) NULL,
	L_TVS_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS_AVG decimal(38,6) NULL,
	L_CHL_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL_AVG decimal(38,6) NULL,
	SD_AVG decimal(38,6) NULL,
	NH3_AVG decimal(38,6) NULL,
	TIN_AVG decimal(38,6) NULL,
	TN_AVG decimal(38,6) NULL,
	TEMPER_MIN decimal(38,6) NULL,
	PH_SC_MIN decimal(38,6) NULL,
	SAL_MIN decimal(38,6) NULL,
	DO_MIN decimal(38,6) NULL,
	DO_SAT_MIN decimal(38,6) NULL,
	TURB_SC_MIN decimal(38,6) NULL,
	L_BOD5_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5_MIN decimal(38,6) NULL,
	L_FC_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC_MIN decimal(38,6) NULL,
	L_ECOLI_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ECOLI_MIN decimal(38,6) NULL,
	L_NH4_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4_MIN decimal(38,6) NULL,
	L_NO2_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2_MIN decimal(38,6) NULL,
	L_NO3_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3_MIN decimal(38,6) NULL,
	L_TKN_SP_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_SP_MIN decimal(38,6) NULL,
	L_PO4_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4_MIN decimal(38,6) NULL,
	L_TP_SP_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_SP_MIN decimal(38,6) NULL,
	L_SIO2_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIO2_MIN decimal(38,6) NULL,
	L_SS_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS_MIN decimal(38,6) NULL,
	L_TVS_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS_MIN decimal(38,6) NULL,
	L_CHL_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL_MIN decimal(38,6) NULL,
	SD_MIN decimal(38,6) NULL,
	NH3_MIN decimal(38,6) NULL,
	TIN_MIN decimal(38,6) NULL,
	TN_MIN decimal(38,6) NULL,
	TEMPER_MAX decimal(38,6) NULL,
	PH_SC_MAX decimal(38,6) NULL,
	SAL_MAX decimal(38,6) NULL,
	DO_MAX decimal(38,6) NULL,
	DO_SAT_MAX decimal(38,6) NULL,
	TURB_SC_MAX decimal(38,6) NULL,
	L_BOD5_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5_MAX decimal(38,6) NULL,
	L_FC_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC_MAX decimal(38,6) NULL,
	L_ECOLI_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ECOLI_MAX decimal(38,6) NULL,
	L_NH4_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4_MAX decimal(38,6) NULL,
	L_NO2_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2_MAX decimal(38,6) NULL,
	L_NO3_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3_MAX decimal(38,6) NULL,
	L_TKN_SP_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_SP_MAX decimal(38,6) NULL,
	L_PO4_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4_MAX decimal(38,6) NULL,
	L_TP_SP_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_SP_MAX decimal(38,6) NULL,
	L_SIO2_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIO2_MAX decimal(38,6) NULL,
	L_SS_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS_MAX decimal(38,6) NULL,
	L_TVS_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS_MAX decimal(38,6) NULL,
	L_CHL_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL_MAX decimal(38,6) NULL,
	SD_MAX decimal(38,6) NULL,
	NH3_MAX decimal(38,6) NULL,
	TIN_MAX decimal(38,6) NULL,
	TN_MAX decimal(38,6) NULL,
	VALID_DATE smalldatetime DEFAULT getdate() NULL
);


-- WQPLIS.WPG.MARINE_WATER_TREND definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MARINE_WATER_TREND;

CREATE TABLE MARINE_WATER_TREND (
	station nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	start_year smallint NULL,
	end_year smallint NULL,
	para_seq smallint NULL,
	WQPara varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	d_code varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	Y1 int NULL,
	Y2 int NULL,
	Stau float NULL,
	P float NULL,
	T smallint NULL,
	M decimal(19,8) NULL,
	C decimal(19,8) NULL,
	VALID_DATE smalldatetime DEFAULT getdate() NULL,
	start_date nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	end_date nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	months nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
);


-- WQPLIS.WPG.MS_SAMPLE_MARK definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MS_SAMPLE_MARK;

CREATE TABLE MS_SAMPLE_MARK (
	SAMPLE_MARK varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATION varchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
);


-- WQPLIS.WPG.MS_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MS_VISIT;

CREATE TABLE MS_VISIT (
	MSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	STATION_ID decimal(4,0) NOT NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MS_VISIT PRIMARY KEY (MSVISIT_ID)
);


-- WQPLIS.WPG.MT_SAMPLE_MARK definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MT_SAMPLE_MARK;

CREATE TABLE MT_SAMPLE_MARK (
	SAMPLE_MARK varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATION varchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
);


-- WQPLIS.WPG.MT_SEACAT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MT_SEACAT;

CREATE TABLE MT_SEACAT (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DEPTH] decimal(6,2) NOT NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TEMPER decimal(7,3) NULL,
	PH decimal(7,3) NULL,
	SAL decimal(7,3) NULL,
	COND decimal(7,3) NULL,
	DO decimal(7,3) NULL,
	DO_SAT decimal(7,3) NULL,
	FLSCUFA decimal(7,3) NULL,
	TURB decimal(7,3) NULL,
	PAR decimal(18,12) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MT_SEACAT PRIMARY KEY (MWVISIT_ID,[DEPTH])
);


-- WQPLIS.WPG.MT_SIG definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MT_SIG;

CREATE TABLE MT_SIG (
	FIELDNAME nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIG float NULL,
	REPORT_TYPE nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
);


-- WQPLIS.WPG.MW_ALERT1 definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_ALERT1;

CREATE TABLE MW_ALERT1 (
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAM_NO decimal(2,0) NULL,
	D_CODE nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PARAMETER] nvarchar(128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MEASURE float NULL,
	[LIMIT] float NULL,
	DISP_STATS nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOTAL int NULL,
	YR int NULL,
	SITE_ID decimal(4,0) NULL,
	DISP_SEQ int NULL,
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
);


-- WQPLIS.WPG.MW_ALERT_A1 definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_ALERT_A1;

CREATE TABLE MW_ALERT_A1 (
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAM_NO decimal(2,0) NULL,
	D_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PARAMETER] nvarchar(11) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_MEASURE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MEASURE float NULL,
	[LIMIT] float NULL,
	DISP_STATS nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOTAL int NULL,
	YR int NULL,
	SITE_ID decimal(4,0) NULL,
	DISP_SEQ int NULL,
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL
);


-- WQPLIS.WPG.MW_FIELD_E definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_FIELD_E;

CREATE TABLE MW_FIELD_E (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SOL_RAD decimal(6,2) NULL,
	AIR_TEMP decimal(4,2) NULL,
	WIND_SP decimal(3,1) NULL,
	WIND_DIR decimal(4,1) NULL,
	SEA_COND nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SEA_COL nvarchar(11) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FISH_KILL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SECCHIDISC decimal(3,1) NULL,
	WEATHER nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MW_FIELD_E PRIMARY KEY (MWVISIT_ID)
);


-- WQPLIS.WPG.MW_GLABN_E definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_GLABN_E;

CREATE TABLE MW_GLABN_E (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DEPTH] decimal(6,2) NULL,
	L_NH4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 decimal(7,3) NULL,
	L_NO2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 decimal(7,3) NULL,
	L_NO3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 decimal(7,3) NULL,
	L_TKN_S nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_S decimal(7,3) NULL,
	L_TKN_P nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_P decimal(7,3) NULL,
	L_TKN_SP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_SP decimal(7,3) NULL,
	L_PO4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 decimal(7,3) NULL,
	L_TP_S nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_S decimal(7,3) NULL,
	L_TP_P nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_P decimal(7,3) NULL,
	L_TP_SP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_SP decimal(7,3) NULL,
	L_SIO2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIO2 decimal(7,3) NULL,
	L_SS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS decimal(7,3) NULL,
	L_TVS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS decimal(7,3) NULL,
	L_CHL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL decimal(7,3) NULL,
	L_PHAE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHAE decimal(7,3) NULL,
	L_TUR nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TUR decimal(7,3) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(8,4) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(8,3) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(8,3) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(8,3) NULL,
	L_AS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AS] decimal(8,3) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(8,3) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(8,3) NULL,
	L_SE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SE decimal(8,3) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(8,3) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MW_GLABN_E PRIMARY KEY (MWVISIT_ID,DEPTH_CODE)
);


-- WQPLIS.WPG.MW_MLAB_E definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_MLAB_E;

CREATE TABLE MW_MLAB_E (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH decimal(7,3) NULL,
	L_BOD5 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5 decimal(7,3) NULL,
	L_TURB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TURB decimal(7,3) NULL,
	L_FC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC decimal(10,0) NULL,
	L_ECOLI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ECOLI decimal(10,0) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MW_MLAB_E PRIMARY KEY (MWVISIT_ID,DEPTH_CODE)
);


-- WQPLIS.WPG.MW_OTHER_E definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_OTHER_E;

CREATE TABLE MW_OTHER_E (
	FIELD_NAME nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DEPTH] decimal(6,2) NOT NULL,
	L_FIELD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FIELD_VALUE decimal(22,6) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL
);


-- WQPLIS.WPG.MW_SAMPLE_MARK definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_SAMPLE_MARK;

CREATE TABLE MW_SAMPLE_MARK (
	SAMPLE_MARK varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATION varchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
);


-- WQPLIS.WPG.MW_SEACAT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_SEACAT;

CREATE TABLE MW_SEACAT (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DEPTH] decimal(6,2) NOT NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TEMPER decimal(7,3) NULL,
	PH decimal(7,3) NULL,
	SAL decimal(7,3) NULL,
	COND decimal(7,3) NULL,
	DO decimal(7,3) NULL,
	DO_SAT decimal(7,3) NULL,
	FLSCUFA decimal(7,3) NULL,
	TURB decimal(7,3) NULL,
	PAR decimal(18,12) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MW_SEACAT PRIMARY KEY (MWVISIT_ID,[DEPTH])
);
 CREATE NONCLUSTERED INDEX IX_MW_SEACAT ON WPG.MW_SEACAT (  MWVISIT_ID ASC  , DEPTH_CODE ASC  )  
	 WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	 ON [PRIMARY ] ;


-- WQPLIS.WPG.MW_SEACAT_E definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_SEACAT_E;

CREATE TABLE MW_SEACAT_E (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DEPTH] decimal(6,2) NOT NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TEMPER decimal(7,3) NULL,
	PH decimal(7,3) NULL,
	SAL decimal(7,3) NULL,
	COND decimal(7,3) NULL,
	DO decimal(7,3) NULL,
	DO_SAT decimal(7,3) NULL,
	FLSCUFA decimal(7,3) NULL,
	TURB decimal(7,3) NULL,
	PAR decimal(18,12) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MW_SEACAT_E PRIMARY KEY (MWVISIT_ID,[DEPTH])
);


-- WQPLIS.WPG.MW_SIG definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_SIG;

CREATE TABLE MW_SIG (
	FIELDNAME nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIG float NULL,
	REPORT_TYPE nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
);


-- WQPLIS.WPG.MW_STATISTICS10A definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_STATISTICS10A;

CREATE TABLE MW_STATISTICS10A (
	SITE_ID decimal(4,0) NULL,
	YR int NULL,
	D_CODE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TOTAL int NULL,
	TEMPER float NULL,
	PH_SC float NULL,
	SAL float NULL,
	COND float NULL,
	DO float NULL,
	DO_SAT float NULL,
	FLSCUFA float NULL,
	TURB_SC float NULL,
	PAR float NULL,
	L_BOD5 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5 float NULL,
	L_FC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC float NULL,
	L_ECOLI varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ECOLI float NULL,
	L_PH_M varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH_M float NULL,
	L_TURB_M varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TURB_M float NULL,
	L_NH4 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 float NULL,
	L_NO2 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 float NULL,
	L_NO3 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 float NULL,
	L_TKN_S varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_S float NULL,
	L_TKN_P varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_P float NULL,
	L_TKN_SP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_SP float NULL,
	L_PO4 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 float NULL,
	L_TP_S varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_S float NULL,
	L_TP_P varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_P float NULL,
	L_TP_SP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_SP float NULL,
	L_SIO2 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIO2 float NULL,
	L_SS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS float NULL,
	L_TVS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS float NULL,
	L_CHL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL float NULL,
	L_PHAE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHAE float NULL,
	SOL_RAD float NULL,
	AIR_TEMP float NULL,
	WIND_SP float NULL,
	SD float NULL,
	NH3 float NULL,
	TIN float NULL,
	TN float NULL,
	NH4_NM float NULL,
	NO2_NM float NULL,
	NO3_NM float NULL,
	TKN_NM float NULL,
	NOX_NM float NULL,
	TIN_NM float NULL,
	TN_NM float NULL,
	PO4_PM float NULL,
	TP_PM float NULL,
	TIN_PO4_MMR float NULL,
	TN_TP_MMR float NULL,
	DISP_STATS nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DISP_SEQ int NULL
);


-- WQPLIS.WPG.MW_VISIT_E definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_VISIT_E;

CREATE TABLE MW_VISIT_E (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	STATION_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MW_VISIT_E PRIMARY KEY (MWVISIT_ID)
);


-- WQPLIS.WPG.PROJECT_INFO definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.PROJECT_INFO;

CREATE TABLE PROJECT_INFO (
	PROJECT_ID nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TITLE nvarchar(300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SUPERVISOR nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	START_DATE nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATUS nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_PROJECT_INFO PRIMARY KEY (PROJECT_ID)
);


-- WQPLIS.WPG.RIVER_WATER1_ALERT1 definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RIVER_WATER1_ALERT1;

CREATE TABLE RIVER_WATER1_ALERT1 (
	[ZONE] nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WCZ nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SUBZONE nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	RIVER nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATION nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO tinyint NULL,
	[PARAMETER] nvarchar(128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MEASURE float NULL,
	[LIMIT] float NULL,
	DISP_STATS nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOTAL int NULL,
	YR int NULL,
	SITE_ID decimal(4,0) NULL,
	DISP_SEQ int NULL
);


-- WQPLIS.WPG.RIVER_WATER_STATISTICS definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RIVER_WATER_STATISTICS;

CREATE TABLE RIVER_WATER_STATISTICS (
	[ZONE] nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WCZ nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SUBZONE nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	RIVER nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATION nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	YR int NULL,
	TOTAL int NULL,
	TEMPER float NULL,
	L_TURB varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TURB float NULL,
	L_SAL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAL float NULL,
	L_COND varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COND float NULL,
	L_PH varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH float NULL,
	L_DO varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DO float NULL,
	L_DOS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DOS float NULL,
	L_FC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC float NULL,
	L_EC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EC float NULL,
	L_BOD5 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5 float NULL,
	L_COD varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COD float NULL,
	L_TOC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOC float NULL,
	L_OIL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OIL float NULL,
	L_SS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS float NULL,
	L_TS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TS float NULL,
	L_TVS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS float NULL,
	L_NH4 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 float NULL,
	L_NO2 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 float NULL,
	L_NO3 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 float NULL,
	L_TKNS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKNS float NULL,
	L_TKNSP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKNSP float NULL,
	L_PO4 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 float NULL,
	L_TPS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TPS float NULL,
	L_TPSP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TPSP float NULL,
	L_SIL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIL float NULL,
	L_TCYN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCYN float NULL,
	L_DETERG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DETERG float NULL,
	L_FL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FL float NULL,
	L_CL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CL float NULL,
	L_H2S varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	H2S float NULL,
	L_SULP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SULP float NULL,
	L_SSP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SSP float NULL,
	L_CHL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL float NULL,
	L_PHEO varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHEO float NULL,
	L_AL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL float NULL,
	L_SB varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SB float NULL,
	L_ARSENIC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARSENIC float NULL,
	L_BA varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BA float NULL,
	L_BE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BE float NULL,
	L_B varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	B float NULL,
	L_CD varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD float NULL,
	L_CR varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR float NULL,
	L_CU varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU float NULL,
	L_FE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE float NULL,
	L_PB varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB float NULL,
	L_MN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN float NULL,
	L_HG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG float NULL,
	L_MO varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MO float NULL,
	L_NI varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI float NULL,
	L_AG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG float NULL,
	L_TL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TL float NULL,
	L_V varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	V float NULL,
	L_ZN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN float NULL,
	[DEPTH] float NULL,
	WIDTH decimal(38,2) NULL,
	VEL float NULL,
	FLOW float NULL,
	L_NH3 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH3 float NULL,
	L_TIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TIN float NULL,
	L_TN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TN float NULL,
	BOD5_PT float NULL,
	NH4_PT float NULL,
	DOS_PT float NULL,
	WQI_PT float NULL,
	WQI_GRADE nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VIEW_NO decimal(2,0) NULL,
	DISP_STATS varchar(13) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	DISP_SEQ int NOT NULL
);


-- WQPLIS.WPG.RIVER_WATER_SUMMARY_REPORT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RIVER_WATER_SUMMARY_REPORT;

CREATE TABLE RIVER_WATER_SUMMARY_REPORT (
	[ZONE] nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	Station nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	yr int NULL,
	L_PH_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH_MED decimal(38,6) NULL,
	L_DO_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DO_MED decimal(38,6) NULL,
	L_FC_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC_AVG decimal(38,6) NULL,
	L_EC_AVG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EC_AVG decimal(38,6) NULL,
	L_BOD5_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5_MED decimal(38,6) NULL,
	L_COD_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COD_MED decimal(38,6) NULL,
	L_OIL_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OIL_MED decimal(38,6) NULL,
	L_SS_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS_MED decimal(38,6) NULL,
	L_NH4_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4_MED decimal(38,6) NULL,
	L_NO3_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3_MED decimal(38,6) NULL,
	L_TKNSP_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKNSP_MED decimal(38,6) NULL,
	L_PO4_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4_MED decimal(38,6) NULL,
	L_TPSP_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TPSP_MED decimal(38,6) NULL,
	L_SSP_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SSP_MED decimal(38,6) NULL,
	L_AL_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL_MED decimal(38,6) NULL,
	L_CD_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD_MED decimal(38,6) NULL,
	L_CR_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR_MED decimal(38,6) NULL,
	L_CU_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU_MED decimal(38,6) NULL,
	L_PB_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB_MED decimal(38,6) NULL,
	L_ZN_MED varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN_MED decimal(38,6) NULL,
	FLOW_MED decimal(38,6) NULL,
	L_PH_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH_MIN decimal(38,6) NULL,
	L_DO_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DO_MIN decimal(38,6) NULL,
	L_FC_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC_MIN decimal(38,6) NULL,
	L_EC_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EC_MIN decimal(38,6) NULL,
	L_BOD5_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5_MIN decimal(38,6) NULL,
	L_COD_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COD_MIN decimal(38,6) NULL,
	L_OIL_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OIL_MIN decimal(38,6) NULL,
	L_SS_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS_MIN decimal(38,6) NULL,
	L_NH4_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4_MIN decimal(38,6) NULL,
	L_NO3_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3_MIN decimal(38,6) NULL,
	L_TKNSP_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKNSP_MIN decimal(38,6) NULL,
	L_PO4_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4_MIN decimal(38,6) NULL,
	L_TPSP_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TPSP_MIN decimal(38,6) NULL,
	L_SSP_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SSP_MIN decimal(38,6) NULL,
	L_AL_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL_MIN decimal(38,6) NULL,
	L_CD_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD_MIN decimal(38,6) NULL,
	L_CR_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR_MIN decimal(38,6) NULL,
	L_CU_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU_MIN decimal(38,6) NULL,
	L_PB_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB_MIN decimal(38,6) NULL,
	L_ZN_MIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN_MIN decimal(38,6) NULL,
	FLOW_MIN decimal(38,6) NULL,
	L_PH_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH_MAX decimal(38,6) NULL,
	L_DO_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DO_MAX decimal(38,6) NULL,
	L_FC_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC_MAX decimal(38,6) NULL,
	L_EC_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EC_MAX decimal(38,6) NULL,
	L_BOD5_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5_MAX decimal(38,6) NULL,
	L_COD_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COD_MAX decimal(38,6) NULL,
	L_OIL_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OIL_MAX decimal(38,6) NULL,
	L_SS_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS_MAX decimal(38,6) NULL,
	L_NH4_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4_MAX decimal(38,6) NULL,
	L_NO3_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3_MAX decimal(38,6) NULL,
	L_TKNSP_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKNSP_MAX decimal(38,6) NULL,
	L_PO4_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4_MAX decimal(38,6) NULL,
	L_TPSP_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TPSP_MAX decimal(38,6) NULL,
	L_SSP_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SSP_MAX decimal(38,6) NULL,
	L_AL_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL_MAX decimal(38,6) NULL,
	L_CD_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD_MAX decimal(38,6) NULL,
	L_CR_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR_MAX decimal(38,6) NULL,
	L_CU_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU_MAX decimal(38,6) NULL,
	L_PB_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB_MAX decimal(38,6) NULL,
	L_ZN_MAX varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN_MAX decimal(38,6) NULL,
	FLOW_MAX decimal(38,6) NULL,
	VALID_DATE smalldatetime DEFAULT getdate() NULL
);


-- WQPLIS.WPG.RIVER_WATER_TREND definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RIVER_WATER_TREND;

CREATE TABLE RIVER_WATER_TREND (
	station nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	start_year smallint NULL,
	end_year smallint NULL,
	para_seq smallint NULL,
	WQPara varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	Y1 int NULL,
	Y2 int NULL,
	Stau float NULL,
	P float NULL,
	T smallint NULL,
	M decimal(19,8) NULL,
	C decimal(19,8) NULL,
	VALID_DATE smalldatetime DEFAULT getdate() NULL
);


-- WQPLIS.WPG.RS_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RS_VISIT;

CREATE TABLE RS_VISIT (
	RSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	RSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	STATION_ID decimal(4,0) NOT NULL,
	MDATE smalldatetime NOT NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_RS_VISIT PRIMARY KEY (RSVISIT_ID)
);


-- WQPLIS.WPG.RTN_TABLE_TEMP definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RTN_TABLE_TEMP;

CREATE TABLE RTN_TABLE_TEMP (

);


-- WQPLIS.WPG.RW_ALERT1 definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_ALERT1;

CREATE TABLE RW_ALERT1 (
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO tinyint NULL,
	[PARAMETER] nvarchar(128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MEASURE float NULL,
	[LIMIT] float NULL,
	DISP_STATS nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOTAL int NULL,
	YR int NULL,
	SITE_ID decimal(4,0) NULL,
	DISP_SEQ int NULL,
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
);


-- WQPLIS.WPG.RW_ALERT_A1 definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_ALERT_A1;

CREATE TABLE RW_ALERT_A1 (
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO tinyint NULL,
	[PARAMETER] nvarchar(7) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_MEASURE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MEASURE decimal(38,2) NULL,
	[LIMIT] float NULL,
	DISP_STATS nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOTAL int NULL,
	YR int NULL,
	SITE_ID decimal(4,0) NULL,
	DISP_SEQ int NULL,
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SAMPLE_MARK varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO varchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL
);


-- WQPLIS.WPG.RW_FIELD_MED_TEST definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_FIELD_MED_TEST;

CREATE TABLE RW_FIELD_MED_TEST (
	SITE_ID decimal(4,0) NOT NULL,
	YYYY int NOT NULL,
	YR int NOT NULL,
	TOTAL int NULL,
	TEMPER_MED decimal(38,6) NULL,
	DO_MED decimal(38,6) NULL,
	DOS_MED decimal(38,6) NULL,
	COND_MED decimal(38,6) NULL,
	SAL_MED decimal(38,6) NULL,
	PH_MED decimal(38,6) NULL,
	TURB_MED decimal(38,6) NULL
);


-- WQPLIS.WPG.RW_FLOW_MED_TEST definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_FLOW_MED_TEST;

CREATE TABLE RW_FLOW_MED_TEST (
	SITE_ID decimal(4,0) NOT NULL,
	YYYY int NOT NULL,
	YR int NOT NULL,
	DEPTH_MED decimal(38,6) NULL,
	VEL_MED decimal(38,6) NULL,
	WIDTH_MED decimal(38,6) NULL,
	FLOW_MED decimal(38,6) NULL
);


-- WQPLIS.WPG.RW_FLOW_bk definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_FLOW_bk;

CREATE TABLE RW_FLOW_bk (
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	DATA_NO decimal(5,0) NOT NULL,
	[DEPTH] decimal(3,2) NULL,
	VEL decimal(3,2) NULL,
	WIDTH decimal(4,2) NULL,
	VALID_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL
);


-- WQPLIS.WPG.RW_GLABM_MED_TEST definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_GLABM_MED_TEST;

CREATE TABLE RW_GLABM_MED_TEST (
	SITE_ID decimal(4,0) NULL,
	YYYY int NULL,
	YR int NULL,
	AL_MED decimal(38,6) NULL,
	ARSENIC_MED decimal(38,6) NULL,
	B_MED decimal(38,6) NULL,
	CD_MED decimal(38,6) NULL,
	CR_MED decimal(38,6) NULL,
	CU_MED decimal(38,6) NULL,
	FE_MED decimal(38,6) NULL,
	HG_MED decimal(38,6) NULL,
	MN_MED decimal(38,6) NULL,
	NI_MED decimal(38,6) NULL,
	PB_MED decimal(38,6) NULL,
	ZN_MED decimal(38,6) NULL,
	V_MED decimal(38,6) NULL,
	BA_MED decimal(38,6) NULL,
	AG_MED decimal(38,6) NULL,
	SB_MED decimal(38,6) NULL,
	BE_MED decimal(38,6) NULL,
	TL_MED decimal(38,6) NULL,
	MO_MED decimal(38,6) NULL
);


-- WQPLIS.WPG.RW_GLABN_MED_TEST definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_GLABN_MED_TEST;

CREATE TABLE RW_GLABN_MED_TEST (
	SITE_ID decimal(4,0) NULL,
	YYYY int NULL,
	YR int NULL,
	NH4_MED decimal(38,6) NULL,
	TKNS_MED decimal(38,6) NULL,
	TKNSP_MED decimal(38,6) NULL,
	NO2_MED decimal(38,6) NULL,
	NO3_MED decimal(38,6) NULL,
	PO4_MED decimal(38,6) NULL,
	TPS_MED decimal(38,6) NULL,
	TPSP_MED decimal(38,6) NULL,
	SIL_MED decimal(38,6) NULL,
	COD_MED decimal(38,6) NULL,
	SS_MED decimal(38,6) NULL,
	OIL_MED decimal(38,6) NULL,
	TVS_MED decimal(38,6) NULL,
	TS_MED decimal(38,6) NULL,
	TCYN_MED decimal(38,6) NULL,
	FL_MED decimal(38,6) NULL,
	H2S_MED decimal(38,6) NULL,
	SULP_MED decimal(38,6) NULL,
	SSP_MED decimal(38,6) NULL,
	DETERG_MED decimal(38,6) NULL,
	TOC_MED decimal(38,6) NULL,
	CL_MED decimal(38,6) NULL,
	CHL_MED decimal(38,6) NULL,
	PHEO_MED decimal(38,6) NULL,
	TIN_MED decimal(38,6) NULL,
	TN_MED decimal(38,6) NULL
);


-- WQPLIS.WPG.RW_MLAB_MED_TEST definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_MLAB_MED_TEST;

CREATE TABLE RW_MLAB_MED_TEST (
	SITE_ID decimal(4,0) NULL,
	YYYY int NULL,
	YR int NULL,
	BOD5_MED decimal(38,6) NULL,
	EC_MED decimal(38,6) NULL,
	FC_MED decimal(38,6) NULL
);


-- WQPLIS.WPG.RW_NH3_MED_TEST definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_NH3_MED_TEST;

CREATE TABLE RW_NH3_MED_TEST (
	SITE_ID decimal(4,0) NULL,
	YYYY int NULL,
	YR int NULL,
	NH3_MED decimal(38,8) NULL
);


-- WQPLIS.WPG.RW_SS_MED_TEST definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_SS_MED_TEST;

CREATE TABLE RW_SS_MED_TEST (
	SITE_ID decimal(4,0) NULL,
	YR int NULL,
	SS decimal(38,6) NULL
);


-- WQPLIS.WPG.RW_STATISTICS10A definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_STATISTICS10A;

CREATE TABLE RW_STATISTICS10A (
	SITE_ID decimal(4,0) NULL,
	YR int NULL,
	TOTAL int NULL,
	TEMPER float NULL,
	L_TURB varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TURB float NULL,
	L_SAL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAL float NULL,
	L_COND varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COND float NULL,
	L_PH varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH float NULL,
	L_DO varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DO float NULL,
	L_DOS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DOS float NULL,
	L_FC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC float NULL,
	L_EC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EC float NULL,
	L_BOD5 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5 float NULL,
	L_COD varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COD float NULL,
	L_TOC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOC float NULL,
	L_OIL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OIL float NULL,
	L_SS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS float NULL,
	L_TS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TS float NULL,
	L_TVS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS float NULL,
	L_NH4 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 float NULL,
	L_NO2 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 float NULL,
	L_NO3 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 float NULL,
	L_TKNS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKNS float NULL,
	L_TKNSP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKNSP float NULL,
	L_PO4 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 float NULL,
	L_TPS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TPS float NULL,
	L_TPSP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TPSP float NULL,
	L_SIL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIL float NULL,
	L_TCYN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCYN float NULL,
	L_DETERG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DETERG float NULL,
	L_FL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FL float NULL,
	L_CL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CL float NULL,
	L_H2S varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	H2S float NULL,
	L_SULP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SULP float NULL,
	L_SSP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SSP float NULL,
	L_CHL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL float NULL,
	L_PHEO varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHEO float NULL,
	L_AL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL float NULL,
	L_SB varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SB float NULL,
	L_ARSENIC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARSENIC float NULL,
	L_BA varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BA float NULL,
	L_BE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BE float NULL,
	L_B varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	B float NULL,
	L_CD varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD float NULL,
	L_CR varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR float NULL,
	L_CU varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU float NULL,
	L_FE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE float NULL,
	L_PB varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB float NULL,
	L_MN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN float NULL,
	L_HG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG float NULL,
	L_MO varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MO float NULL,
	L_NI varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI float NULL,
	L_AG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG float NULL,
	L_TL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TL float NULL,
	L_V varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	V float NULL,
	L_ZN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN float NULL,
	[DEPTH] float NULL,
	WIDTH decimal(38,2) NULL,
	VEL float NULL,
	FLOW float NULL,
	L_NH3 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH3 float NULL,
	L_TIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TIN float NULL,
	L_TN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TN float NULL,
	BOD5_PT float NULL,
	NH4_PT float NULL,
	DOS_PT float NULL,
	WQI_PT float NULL,
	WQI_GRADE nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DISP_STATS nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DISP_SEQ int NULL
);


-- WQPLIS.WPG.RW_WQI_GR_REF definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_WQI_GR_REF;

CREATE TABLE RW_WQI_GR_REF (
	RW_WQI_GR_ID nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	WQI_RANGE nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WQI_GRADE nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_LOW_PT nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LOW_PT decimal(3,1) NULL,
	L_UP_PT nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	UP_PT decimal(3,1) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_RW_WQI_GR_REF PRIMARY KEY (RW_WQI_GR_ID)
);


-- WQPLIS.WPG.RW_WQI_PT_REF definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_WQI_PT_REF;

CREATE TABLE RW_WQI_PT_REF (
	RW_WQI_PT_ID nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PARAMETER] nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[RANGE] nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	POINTS decimal(1,0) NULL,
	L_LOW_VALUE nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LOW_VALUE decimal(4,1) NULL,
	L_UP_VALUE nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	UP_VALUE decimal(4,1) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_RW_WQI_PT_REF PRIMARY KEY (RW_WQI_PT_ID)
);


-- WQPLIS.WPG.SR_BT_DI definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_BT_DI;

CREATE TABLE SR_BT_DI (
	BT_DI_ID nvarchar(17) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BT_VISIT_ID nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BT_SPCODE_ID nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAMPLE_MARK nvarchar(17) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_TCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDF1 decimal(10,4) NULL,
	L_PECDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF1 decimal(10,4) NULL,
	L_PECDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF2 decimal(10,4) NULL,
	L_PECDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDD1 decimal(10,4) NULL,
	L_HXCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF1 decimal(10,4) NULL,
	L_HXCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF2 decimal(10,4) NULL,
	L_HXCDF3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF3 decimal(10,4) NULL,
	L_HXCDF4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF4 decimal(10,4) NULL,
	L_HXCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD1 decimal(10,4) NULL,
	L_HXCDD2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD2 decimal(10,4) NULL,
	L_HXCDD3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD3 decimal(10,4) NULL,
	L_HPCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDD1 decimal(10,4) NULL,
	L_HPCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF1 decimal(10,4) NULL,
	L_HPCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF2 decimal(10,4) NULL,
	L_OCDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDD decimal(10,4) NULL,
	L_OCDF nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDF decimal(10,4) NULL,
	DWR_DI decimal(5,3) NULL,
	L_TCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDD1 decimal(10,4) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_BT_M definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_BT_M;

CREATE TABLE SR_BT_M (
	BT_M_ID nvarchar(17) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BT_VISIT_ID nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BT_SPCODE_ID nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAMPLE_MARK nvarchar(17) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_AL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL decimal(10,4) NULL,
	L_ARSENIC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARSENIC decimal(10,4) NULL,
	L_B nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	B decimal(10,4) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(10,4) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(10,4) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(10,4) NULL,
	L_FE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE decimal(10,4) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(10,4) NULL,
	L_MN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN decimal(10,4) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(10,4) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(10,4) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(10,4) NULL,
	L_V nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	V decimal(10,4) NULL,
	L_AG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG decimal(10,4) NULL,
	L_CO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CO decimal(10,4) NULL,
	DWR_M decimal(5,3) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_BT_O definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_BT_O;

CREATE TABLE SR_BT_O (
	BT_O_ID nvarchar(17) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BT_VISIT_ID nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BT_SPCODE_ID nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAMPLE_MARK nvarchar(17) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCBS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PAH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_FLUO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PHEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ANTH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_FLUT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PYRE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_CHRY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BBFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BKFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BAPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BGPE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_CP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_HCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_HEPT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ALDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_HEPO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ODDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_END1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PDDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_DIEL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ODDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ENDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_END2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PDDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ODDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_THM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_TCM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_TCE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BDCM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BTCM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_TRCE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_CDBM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BROM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_MDCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ODCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_THMS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ACEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ACPH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BANT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_DAAN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_INPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB28 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB31 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB52 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB101 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB105 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB118 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB128 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB138 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB149 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB153 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB156 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB180 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ABHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_GBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_DWR_O nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_DBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PDDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LIPID decimal(5,3) NULL,
	ABHC decimal(10,4) NULL,
	ACEN decimal(10,4) NULL,
	ACPH decimal(10,4) NULL,
	ALDR decimal(10,4) NULL,
	ANTH decimal(10,4) NULL,
	BANT decimal(10,4) NULL,
	BAPY decimal(10,4) NULL,
	BBFL decimal(10,4) NULL,
	BBHC decimal(10,4) NULL,
	BDCM decimal(10,4) NULL,
	BGPE decimal(10,4) NULL,
	BHC decimal(10,4) NULL,
	BKFL decimal(10,4) NULL,
	BROM decimal(10,4) NULL,
	BTCM decimal(10,4) NULL,
	CDBM decimal(10,4) NULL,
	CHRY decimal(10,4) NULL,
	CP decimal(10,4) NULL,
	DAAN decimal(10,4) NULL,
	DBHC decimal(10,4) NULL,
	DIEL decimal(10,4) NULL,
	DWR_O decimal(5,3) NULL,
	END1 decimal(10,4) NULL,
	END2 decimal(10,4) NULL,
	ENDR decimal(10,4) NULL,
	FLUO decimal(10,4) NULL,
	FLUT decimal(10,4) NULL,
	GBHC decimal(10,4) NULL,
	HCB decimal(10,4) NULL,
	HEPO decimal(10,4) NULL,
	HEPT decimal(10,4) NULL,
	INPY decimal(10,4) NULL,
	MDCB decimal(10,4) NULL,
	ODCB decimal(10,4) NULL,
	ODDD decimal(10,4) NULL,
	ODDE decimal(10,4) NULL,
	ODDT decimal(10,4) NULL,
	PAH decimal(10,4) NULL,
	PCB101 decimal(10,4) NULL,
	PCB105 decimal(10,4) NULL,
	PCB118 decimal(10,4) NULL,
	PCB128 decimal(10,4) NULL,
	PCB138 decimal(10,4) NULL,
	PCB149 decimal(10,4) NULL,
	PCB153 decimal(10,4) NULL,
	PCB156 decimal(10,4) NULL,
	PCB180 decimal(10,4) NULL,
	PCB28 decimal(10,4) NULL,
	PCB31 decimal(10,4) NULL,
	PCB52 decimal(10,4) NULL,
	PCBS decimal(10,4) NULL,
	PDDD decimal(10,4) NULL,
	PDDE decimal(10,4) NULL,
	PDDT decimal(10,4) NULL,
	PHEN decimal(10,4) NULL,
	PYRE decimal(10,4) NULL,
	TCE decimal(10,4) NULL,
	TCM decimal(10,4) NULL,
	THM decimal(10,4) NULL,
	THMS decimal(10,4) NULL,
	TRCE decimal(10,4) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB88 decimal(10,4) NULL,
	PCB18 decimal(10,4) NULL,
	PCB8 decimal(10,4) NULL,
	PCB169 decimal(10,4) NULL,
	PCB44 decimal(10,4) NULL,
	PCB170 decimal(10,4) NULL,
	PCB157 decimal(10,4) NULL,
	PCB167 decimal(10,4) NULL,
	PCB187 decimal(10,4) NULL,
	PCB66 decimal(10,4) NULL,
	PCB77 decimal(10,4) NULL,
	PCB81 decimal(10,4) NULL,
	PCB114 decimal(10,4) NULL,
	PCB123 decimal(10,4) NULL,
	PCB126 decimal(10,4) NULL,
	PCB189 decimal(10,4) NULL,
	L_PCB88 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB18 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB8 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB169 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB44 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB170 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB157 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB167 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB187 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB66 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB77 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB81 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB114 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB123 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB126 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PCB189 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_BT_PL definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_BT_PL;

CREATE TABLE SR_BT_PL (
	PARA_ID decimal(4,0) NULL,
	PARA_CODE nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PARA_UNIT nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PARA_DESC nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATUS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	UP_DET_LIMIT decimal(22,6) NULL,
	LOW_DET_LIMIT decimal(22,6) NULL,
	TEST_METHOD nvarchar(300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	UP_DATE nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DISPLAY_INT decimal(10,0) NULL,
	DISPLAY_DEC decimal(10,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_BT_SL definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_BT_SL;

CREATE TABLE SR_BT_SL (
	SP_ID decimal(3,0) NULL,
	PHYLUM nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CLASS nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_ORDER nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FAMILY nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	GENUS nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SPECIES nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_NAME nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_GROUP nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COM_NAME nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	REMARK nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	APPEARANCE nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_BT_SPCODE definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_BT_SPCODE;

CREATE TABLE SR_BT_SPCODE (
	BT_SPCODE_ID nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_NAME nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TISSUE_TYPE nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAMPLING nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_ID decimal(3,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_BT_STATION definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_BT_STATION;

CREATE TABLE SR_BT_STATION (
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATION_NAME nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WCZ nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EASTING decimal(9,3) NULL,
	NORTHING decimal(9,3) NULL,
	LATITUDE decimal(10,6) NULL,
	LONGITUDE decimal(10,6) NULL,
	SAMPLING nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACTIVE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAMPLING_AREA nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TRAWL_DIRECTION nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_BT_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_BT_VISIT;

CREATE TABLE SR_BT_VISIT (
	BT_VISIT_ID nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	M_DATE smalldatetime NULL,
	S_TIME decimal(4,0) NULL,
	SAMPLING nvarchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_HS_FIELD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_HS_FIELD;

CREATE TABLE SR_HS_FIELD (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SOL_RAD decimal(6,2) NULL,
	AIR_TEMP decimal(4,2) NULL,
	WIND_SP decimal(3,1) NULL,
	WIND_DIR decimal(4,1) NULL,
	SEA_COND nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SEA_COL nvarchar(11) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FISH_KILL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SECCHIDISC decimal(3,1) NULL,
	WEATHER nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_HS_GLABN definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_HS_GLABN;

CREATE TABLE SR_HS_GLABN (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DEPTH] decimal(6,2) NULL,
	L_NH4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 decimal(7,3) NULL,
	L_NO2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 decimal(7,3) NULL,
	L_NO3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 decimal(7,3) NULL,
	L_TKN_S nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_S decimal(7,3) NULL,
	L_TKN_P nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_P decimal(7,3) NULL,
	L_TKN_SP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_SP decimal(7,3) NULL,
	L_PO4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 decimal(7,3) NULL,
	L_TP_S nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_S decimal(7,3) NULL,
	L_TP_P nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_P decimal(7,3) NULL,
	L_TP_SP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_SP decimal(7,3) NULL,
	L_SIO2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIO2 decimal(7,3) NULL,
	L_SS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS decimal(7,3) NULL,
	L_TVS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS decimal(7,3) NULL,
	L_CHL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL decimal(7,3) NULL,
	L_PHAE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHAE decimal(7,3) NULL,
	L_TUR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TUR decimal(7,3) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(8,4) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(8,3) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(8,3) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(8,3) NULL,
	L_AS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AS] decimal(8,3) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(8,3) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(8,3) NULL,
	L_SE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SE decimal(8,3) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(8,3) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_HS_MLAB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_HS_MLAB;

CREATE TABLE SR_HS_MLAB (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH decimal(7,3) NULL,
	L_BOD5 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5 decimal(7,3) NULL,
	L_TURB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TURB decimal(7,3) NULL,
	L_FC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC decimal(10,0) NULL,
	L_ECOLI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ECOLI decimal(10,0) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_HS_SEACAT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_HS_SEACAT;

CREATE TABLE SR_HS_SEACAT (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DEPTH] decimal(6,2) NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TEMPER decimal(7,3) NULL,
	PH decimal(7,3) NULL,
	SAL decimal(7,3) NULL,
	COND decimal(7,3) NULL,
	DO decimal(7,3) NULL,
	DO_SAT decimal(7,3) NULL,
	FLSCUFA decimal(7,3) NULL,
	TURB decimal(7,3) NULL,
	PAR decimal(18,12) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_HS_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_HS_VISIT;

CREATE TABLE SR_HS_VISIT (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	STATION_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	MONITOR_STATE nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ANALYSIS_LAB nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MM_GLABM definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MM_GLABM;

CREATE TABLE SR_MM_GLABM (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_AL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL decimal(10,6) NULL,
	L_ARSENIC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARSENIC decimal(10,6) NULL,
	L_BA nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BA decimal(10,6) NULL,
	L_B nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	B decimal(10,6) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(10,6) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(10,6) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(10,6) NULL,
	L_FE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE decimal(10,6) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(10,6) NULL,
	L_MN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN decimal(10,6) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(10,6) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(10,6) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(10,6) NULL,
	L_V nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	V decimal(10,6) NULL,
	L_AG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG decimal(10,6) NULL,
	L_CO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CO decimal(10,6) NULL,
	L_BE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BE decimal(10,6) NULL,
	L_MO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MO decimal(10,6) NULL,
	L_SB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SB decimal(10,6) NULL,
	L_SN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SN decimal(10,6) NULL,
	L_SE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SE decimal(10,6) NULL,
	L_TL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TL decimal(10,6) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MM_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MM_VISIT;

CREATE TABLE SR_MM_VISIT (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	STATION_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MS_GLABM definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MS_GLABM;

CREATE TABLE SR_MS_GLABM (
	MSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_AL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL decimal(10,2) NULL,
	L_ARSENIC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARSENIC decimal(3,1) NULL,
	L_BA nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BA decimal(5,1) NULL,
	L_B nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	B decimal(4,1) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(4,2) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(5,1) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(5,1) NULL,
	L_FE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE decimal(9,2) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(5,2) NULL,
	L_MN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN decimal(8,2) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(4,1) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(8,2) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(8,2) NULL,
	L_V nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	V decimal(5,1) NULL,
	L_AG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG decimal(5,2) NULL,
	L_CO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CO decimal(5,2) NULL,
	MSN_DWR decimal(4,2) NULL,
	L_BE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BE decimal(8,2) NULL,
	L_MO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MO decimal(8,2) NULL,
	L_SB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SB decimal(8,2) NULL,
	L_TL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TL decimal(8,2) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MS_GLABN definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MS_GLABN;

CREATE TABLE SR_MS_GLABN (
	MSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_NH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH decimal(7,3) NULL,
	L_TKN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN decimal(7,3) NULL,
	L_TP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP decimal(7,3) NULL,
	L_TVS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS decimal(5,2) NULL,
	L_TS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TS decimal(5,2) NULL,
	L_COD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COD decimal(9,2) NULL,
	L_SULPHIDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SULPHIDE decimal(6,2) NULL,
	L_TC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TC decimal(5,2) NULL,
	L_CN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CN decimal(4,2) NULL,
	L_SG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SG decimal(5,4) NULL,
	L_PH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH decimal(3,1) NULL,
	MSN_DRW decimal(4,2) NULL,
	L_TOC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOC decimal(5,2) NULL,
	L_TIC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TIC decimal(5,2) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MS_GLAB_OC definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MS_GLAB_OC;

CREATE TABLE SR_MS_GLAB_OC (
	MSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_GBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	GBHC decimal(7,2) NULL,
	L_HCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HCB decimal(7,2) NULL,
	L_HEPT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPT decimal(7,2) NULL,
	L_ALDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ALDR decimal(7,2) NULL,
	L_HEPO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPO decimal(7,2) NULL,
	L_ODDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDE decimal(7,2) NULL,
	L_ENDI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ENDI decimal(7,2) NULL,
	L_PDDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDE decimal(7,2) NULL,
	L_DIEL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DIEL decimal(7,2) NULL,
	L_ODDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDD decimal(7,2) NULL,
	L_ENDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ENDR decimal(7,2) NULL,
	L_END2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	END2 decimal(7,2) NULL,
	L_PDDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDD decimal(7,2) NULL,
	L_ODDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDT decimal(7,2) NULL,
	L_PDDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDT decimal(7,2) NULL,
	L_ABHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ABHC decimal(7,2) NULL,
	L_BBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBHC decimal(7,2) NULL,
	L_DBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DBHC decimal(7,2) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MS_GLAB_PAH definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MS_GLAB_PAH;

CREATE TABLE SR_MS_GLAB_PAH (
	MSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_FLUO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUO decimal(7,2) NULL,
	L_PHEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHEN decimal(7,2) NULL,
	L_ANTH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ANTH decimal(7,2) NULL,
	L_FLUT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUT decimal(9,2) NULL,
	L_PYRE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PYRE decimal(9,2) NULL,
	L_CHRY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHRY decimal(7,2) NULL,
	L_BBFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBFL decimal(7,2) NULL,
	L_BKFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BKFL decimal(7,2) NULL,
	L_BAPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BAPY decimal(9,2) NULL,
	L_BGPE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BGPE decimal(7,2) NULL,
	L_ACPH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACPH decimal(7,2) NULL,
	L_ACEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACEN decimal(7,2) NULL,
	L_DAAN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DAAN decimal(7,2) NULL,
	L_BANT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BANT decimal(7,2) NULL,
	L_INPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	INPY decimal(7,2) NULL,
	L_PAH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PAH decimal(11,2) NULL,
	L_NAPH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NAPH decimal(7,2) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MS_GLAB_PCB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MS_GLAB_PCB;

CREATE TABLE SR_MS_GLAB_PCB (
	MSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MSO_DWR decimal(4,2) NULL,
	L_PCB8 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB8 decimal(7,2) NULL,
	L_PCB18 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB18 decimal(7,2) NULL,
	L_PCB28 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB28 decimal(7,2) NULL,
	L_PCB31 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB31 decimal(7,2) NULL,
	L_PCB44 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB44 decimal(7,2) NULL,
	L_PCB52 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB52 decimal(7,2) NULL,
	L_PCB66 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB66 decimal(7,2) NULL,
	L_PCB77 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB77 decimal(7,2) NULL,
	L_PCB101 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB101 decimal(7,2) NULL,
	L_PCB105 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB105 decimal(7,2) NULL,
	L_PCB118 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB118 decimal(7,2) NULL,
	L_PCB126 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB126 decimal(7,2) NULL,
	L_PCB128 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB128 decimal(7,2) NULL,
	L_PCB138 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB138 decimal(7,2) NULL,
	L_PCB149 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB149 decimal(7,2) NULL,
	L_PCB153 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB153 decimal(7,2) NULL,
	L_PCB156 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB156 decimal(7,2) NULL,
	L_PCB169 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB169 decimal(7,2) NULL,
	L_PCB170 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB170 decimal(7,2) NULL,
	L_PCB180 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB180 decimal(7,2) NULL,
	L_PCB187 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB187 decimal(7,2) NULL,
	L_PCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB decimal(8,2) NULL,
	L_PCB81 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB81 decimal(8,2) NULL,
	L_PCB114 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB114 decimal(8,2) NULL,
	L_PCB123 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB123 decimal(8,2) NULL,
	L_PCB167 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB167 decimal(8,2) NULL,
	L_PCB189 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB189 decimal(8,2) NULL,
	L_PCB157 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB157 decimal(8,2) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MS_PS definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MS_PS;

CREATE TABLE SR_MS_PS (
	MSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EH decimal(4,1) NULL,
	SZ_63 decimal(5,2) NULL,
	SZ_125 decimal(5,2) NULL,
	SZ_250 decimal(5,2) NULL,
	SZ_500 decimal(5,2) NULL,
	SZ_1000 decimal(5,2) NULL,
	SZ_2000 decimal(5,2) NULL,
	SZ_4000 decimal(5,2) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MS_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MS_VISIT;

CREATE TABLE SR_MS_VISIT (
	MSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	STATION_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MT_FIELD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MT_FIELD;

CREATE TABLE SR_MT_FIELD (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SOL_RAD decimal(6,2) NULL,
	AIR_TEMP decimal(4,2) NULL,
	WIND_SP decimal(3,1) NULL,
	WIND_DIR decimal(4,1) NULL,
	SEA_COND nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SEA_COL nvarchar(11) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FISH_KILL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SECCHIDISC decimal(3,1) NULL,
	WEATHER nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MT_GLABN definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MT_GLABN;

CREATE TABLE SR_MT_GLABN (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DEPTH] decimal(6,2) NULL,
	L_NH4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 decimal(7,3) NULL,
	L_NO2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 decimal(7,3) NULL,
	L_NO3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 decimal(7,3) NULL,
	L_TKN_S nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_S decimal(7,3) NULL,
	L_TKN_P nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_P decimal(7,3) NULL,
	L_TKN_SP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_SP decimal(7,3) NULL,
	L_PO4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 decimal(7,3) NULL,
	L_TP_S nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_S decimal(7,3) NULL,
	L_TP_P nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_P decimal(7,3) NULL,
	L_TP_SP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_SP decimal(7,3) NULL,
	L_SIO2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIO2 decimal(7,3) NULL,
	L_SS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS decimal(7,3) NULL,
	L_TVS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS decimal(7,3) NULL,
	L_CHL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL decimal(7,3) NULL,
	L_PHAE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHAE decimal(7,3) NULL,
	L_TUR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TUR decimal(7,3) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(8,4) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(8,3) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(8,3) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(8,3) NULL,
	L_AS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AS] decimal(8,3) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(8,3) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(8,3) NULL,
	L_SE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SE decimal(8,3) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(8,3) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MT_MLAB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MT_MLAB;

CREATE TABLE SR_MT_MLAB (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH decimal(7,3) NULL,
	L_BOD5 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5 decimal(7,3) NULL,
	L_TURB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TURB decimal(7,3) NULL,
	L_FC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC decimal(10,0) NULL,
	L_ECOLI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ECOLI decimal(10,0) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MT_SEACAT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MT_SEACAT;

CREATE TABLE SR_MT_SEACAT (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DEPTH] decimal(6,2) NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TEMPER decimal(7,3) NULL,
	PH decimal(7,3) NULL,
	SAL decimal(7,3) NULL,
	COND decimal(7,3) NULL,
	DO decimal(7,3) NULL,
	DO_SAT decimal(7,3) NULL,
	FLSCUFA decimal(7,3) NULL,
	TURB decimal(7,3) NULL,
	PAR decimal(18,12) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MT_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MT_VISIT;

CREATE TABLE SR_MT_VISIT (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	STATION_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MW_ALERT1 definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MW_ALERT1;

CREATE TABLE SR_MW_ALERT1 (
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAM_NO decimal(2,0) NULL,
	D_CODE nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PARAMETER] nvarchar(128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MEASURE float NULL,
	[LIMIT] float NULL,
	DISP_STATS nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOTAL int NULL,
	YR int NULL,
	SITE_ID decimal(4,0) NULL,
	DISP_SEQ int NULL,
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MW_FIELD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MW_FIELD;

CREATE TABLE SR_MW_FIELD (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SOL_RAD decimal(6,2) NULL,
	AIR_TEMP decimal(4,2) NULL,
	WIND_SP decimal(3,1) NULL,
	WIND_DIR decimal(4,1) NULL,
	SEA_COND nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SEA_COL nvarchar(11) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FISH_KILL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SECCHIDISC decimal(3,1) NULL,
	WEATHER nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MW_GLABN definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MW_GLABN;

CREATE TABLE SR_MW_GLABN (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DEPTH] decimal(6,2) NULL,
	L_NH4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 decimal(7,3) NULL,
	L_NO2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 decimal(7,3) NULL,
	L_NO3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 decimal(7,3) NULL,
	L_TKN_S nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_S decimal(7,3) NULL,
	L_TKN_P nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_P decimal(7,3) NULL,
	L_TKN_SP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_SP decimal(7,3) NULL,
	L_PO4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 decimal(7,3) NULL,
	L_TP_S nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_S decimal(7,3) NULL,
	L_TP_P nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_P decimal(7,3) NULL,
	L_TP_SP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_SP decimal(7,3) NULL,
	L_SIO2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIO2 decimal(7,3) NULL,
	L_SS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS decimal(7,3) NULL,
	L_TVS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS decimal(7,3) NULL,
	L_CHL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL decimal(7,3) NULL,
	L_PHAE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHAE decimal(7,3) NULL,
	L_TUR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TUR decimal(7,3) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(8,4) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(8,3) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(8,3) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(8,3) NULL,
	L_AS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AS] decimal(8,3) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(8,3) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(8,3) NULL,
	L_SE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SE decimal(8,3) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(8,3) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MW_MLAB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MW_MLAB;

CREATE TABLE SR_MW_MLAB (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH decimal(7,3) NULL,
	L_BOD5 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5 decimal(7,3) NULL,
	L_TURB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TURB decimal(7,3) NULL,
	L_FC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC decimal(10,0) NULL,
	L_ECOLI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ECOLI decimal(10,0) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MW_SEACAT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MW_SEACAT;

CREATE TABLE SR_MW_SEACAT (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DEPTH] decimal(6,2) NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TEMPER decimal(7,3) NULL,
	PH decimal(7,3) NULL,
	SAL decimal(7,3) NULL,
	COND decimal(7,3) NULL,
	DO decimal(7,3) NULL,
	DO_SAT decimal(7,3) NULL,
	FLSCUFA decimal(7,3) NULL,
	TURB decimal(7,3) NULL,
	PAR decimal(18,12) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MW_STATISTICS10A definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MW_STATISTICS10A;

CREATE TABLE SR_MW_STATISTICS10A (
	SITE_ID decimal(4,0) NULL,
	YR int NULL,
	D_CODE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TOTAL int NULL,
	TEMPER float NULL,
	PH_SC float NULL,
	SAL float NULL,
	COND float NULL,
	DO float NULL,
	DO_SAT float NULL,
	FLSCUFA float NULL,
	TURB_SC float NULL,
	PAR float NULL,
	L_BOD5 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5 float NULL,
	L_FC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC float NULL,
	L_ECOLI varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ECOLI float NULL,
	L_PH_M varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH_M float NULL,
	L_TURB_M varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TURB_M float NULL,
	L_NH4 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 float NULL,
	L_NO2 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 float NULL,
	L_NO3 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 float NULL,
	L_TKN_S varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_S float NULL,
	L_TKN_P varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_P float NULL,
	L_TKN_SP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_SP float NULL,
	L_PO4 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 float NULL,
	L_TP_S varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_S float NULL,
	L_TP_P varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_P float NULL,
	L_TP_SP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_SP float NULL,
	L_SIO2 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIO2 float NULL,
	L_SS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS float NULL,
	L_TVS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS float NULL,
	L_CHL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL float NULL,
	L_PHAE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHAE float NULL,
	SOL_RAD float NULL,
	AIR_TEMP float NULL,
	WIND_SP float NULL,
	SD float NULL,
	NH3 float NULL,
	TIN float NULL,
	TN float NULL,
	NH4_NM float NULL,
	NO2_NM float NULL,
	NO3_NM float NULL,
	TKN_NM float NULL,
	NOX_NM float NULL,
	TIN_NM float NULL,
	TN_NM float NULL,
	PO4_PM float NULL,
	TP_PM float NULL,
	TIN_PO4_MMR float NULL,
	TN_TP_MMR float NULL,
	DISP_STATS nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DISP_SEQ int NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MW_SZ_WQO definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MW_SZ_WQO;

CREATE TABLE SR_MW_SZ_WQO (
	SZ_ID nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MIN_DOS decimal(2,1) NULL,
	MIN_DOS_PC decimal(3,0) NULL,
	MIN_DOM decimal(2,1) NULL,
	MIN_DOM_PC decimal(3,0) NULL,
	MIN_DOB decimal(2,1) NULL,
	MIN_DOB_PC decimal(3,0) NULL,
	MIN_DOA decimal(2,1) NULL,
	MIN_DOA_PC decimal(3,0) NULL,
	MIN_DOC decimal(2,1) NULL,
	MIN_DOC_PC decimal(3,0) NULL,
	MAX_TIN_AAM decimal(2,1) NULL,
	MAX_NH3_AAM decimal(4,3) NULL,
	MAX_ECOLI_AGM decimal(4,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_MW_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_MW_VISIT;

CREATE TABLE SR_MW_VISIT (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	STATION_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_RS_GLABM definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_RS_GLABM;

CREATE TABLE SR_RS_GLABM (
	RSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	RSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_AL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL decimal(22,6) NULL,
	L_ARSENIC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARSENIC decimal(22,6) NULL,
	L_AG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG decimal(22,6) NULL,
	L_B nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	B decimal(22,6) NULL,
	L_BA nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BA decimal(22,6) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(22,6) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(22,6) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(22,6) NULL,
	L_FE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE decimal(22,6) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(22,6) NULL,
	L_MN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN decimal(22,6) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(22,6) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(22,6) NULL,
	L_V nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	V decimal(22,6) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(22,6) NULL,
	L_SB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SB decimal(22,6) NULL,
	L_BE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BE decimal(22,6) NULL,
	L_TL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TL decimal(22,6) NULL,
	L_MO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MO decimal(22,6) NULL,
	L_DWR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DWR decimal(22,6) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_RS_GLABN definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_RS_GLABN;

CREATE TABLE SR_RS_GLABN (
	RSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	RSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_TS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TS decimal(22,6) NULL,
	L_TVS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS decimal(22,6) NULL,
	L_TC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TC decimal(22,6) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_RS_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_RS_VISIT;

CREATE TABLE SR_RS_VISIT (
	RSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	RSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	STATION_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_RW_ALERT1 definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_RW_ALERT1;

CREATE TABLE SR_RW_ALERT1 (
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO tinyint NULL,
	[PARAMETER] nvarchar(128) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MEASURE float NULL,
	[LIMIT] float NULL,
	DISP_STATS nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOTAL int NULL,
	YR int NULL,
	SITE_ID decimal(4,0) NULL,
	DISP_SEQ int NULL,
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_RW_FIELD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_RW_FIELD;

CREATE TABLE SR_RW_FIELD (
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TEMPER decimal(3,1) NULL,
	L_DO varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DO decimal(4,2) NULL,
	L_DOS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DOS decimal(4,1) NULL,
	L_COND varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COND decimal(7,2) NULL,
	L_SAL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAL decimal(4,2) NULL,
	L_PH varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH decimal(4,2) NULL,
	L_TURB varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TURB decimal(6,2) NULL,
	WEATHER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COLOR nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	RAINFALL nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SMELL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TIDE nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	REMARK nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	DELETE_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_RW_FLOW definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_RW_FLOW;

CREATE TABLE SR_RW_FLOW (
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATA_NO decimal(5,0) NULL,
	[DEPTH] decimal(3,2) NULL,
	VEL decimal(3,2) NULL,
	WIDTH decimal(4,2) NULL,
	VALID_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	DELETE_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_RW_GLABM definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_RW_GLABM;

CREATE TABLE SR_RW_GLABM (
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_AL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL decimal(7,1) NULL,
	L_ARSENIC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARSENIC decimal(6,1) NULL,
	L_B varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	B decimal(5,1) NULL,
	L_CD varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(5,1) NULL,
	L_CR varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(6,1) NULL,
	L_CU varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(6,1) NULL,
	L_FE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE decimal(7,1) NULL,
	L_HG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(4,1) NULL,
	L_MN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN decimal(5,0) NULL,
	L_NI varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(5,1) NULL,
	L_PB varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(7,2) NULL,
	L_ZN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(6,1) NULL,
	L_V varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	V decimal(3,0) NULL,
	L_BA varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BA decimal(4,0) NULL,
	L_AG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG decimal(3,0) NULL,
	L_SB varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SB decimal(3,0) NULL,
	L_BE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BE decimal(3,0) NULL,
	L_TL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TL decimal(3,0) NULL,
	L_MO varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MO decimal(3,0) NULL,
	SAMPLE_MARK varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO varchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	DELETE_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_RW_GLABN definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_RW_GLABN;

CREATE TABLE SR_RW_GLABN (
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_NH4 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 decimal(6,3) NULL,
	L_TKNS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKNS decimal(5,2) NULL,
	L_TKNSP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKNSP decimal(6,2) NULL,
	L_NO2 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 decimal(5,3) NULL,
	L_NO3 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 decimal(6,3) NULL,
	L_PO4 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 decimal(5,3) NULL,
	L_TPS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TPS decimal(4,2) NULL,
	L_TPSP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TPSP decimal(5,2) NULL,
	L_SIL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIL decimal(5,2) NULL,
	L_COD varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COD decimal(7,2) NULL,
	L_SS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS decimal(7,2) NULL,
	L_OIL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OIL decimal(4,1) NULL,
	L_TVS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS decimal(6,1) NULL,
	L_TS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TS decimal(5,0) NULL,
	L_TCYN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCYN decimal(4,2) NULL,
	L_FL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FL decimal(5,1) NULL,
	L_H2S varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	H2S decimal(3,2) NULL,
	L_SULP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SULP decimal(4,2) NULL,
	L_SSP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SSP decimal(4,2) NULL,
	L_DETERG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DETERG decimal(4,2) NULL,
	L_TOC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOC decimal(5,0) NULL,
	L_CL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CL decimal(6,0) NULL,
	L_CHL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL decimal(4,1) NULL,
	L_PHEO varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHEO decimal(4,1) NULL,
	SAMPLE_MARK varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO varchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	DELETE_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_RW_MLAB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_RW_MLAB;

CREATE TABLE SR_RW_MLAB (
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_BOD5 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5 decimal(6,2) NULL,
	L_FC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC decimal(9,0) NULL,
	L_EC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EC decimal(9,0) NULL,
	SAMPLE_MARK varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO varchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_RW_STATISTICS10A definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_RW_STATISTICS10A;

CREATE TABLE SR_RW_STATISTICS10A (
	SITE_ID decimal(4,0) NULL,
	YR int NULL,
	TOTAL int NULL,
	TEMPER float NULL,
	L_TURB varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TURB float NULL,
	L_SAL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAL float NULL,
	L_COND varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COND float NULL,
	L_PH varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH float NULL,
	L_DO varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DO float NULL,
	L_DOS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DOS float NULL,
	L_FC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC float NULL,
	L_EC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EC float NULL,
	L_BOD5 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5 float NULL,
	L_COD varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COD float NULL,
	L_TOC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOC float NULL,
	L_OIL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OIL float NULL,
	L_SS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS float NULL,
	L_TS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TS float NULL,
	L_TVS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS float NULL,
	L_NH4 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 float NULL,
	L_NO2 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 float NULL,
	L_NO3 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 float NULL,
	L_TKNS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKNS float NULL,
	L_TKNSP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKNSP float NULL,
	L_PO4 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 float NULL,
	L_TPS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TPS float NULL,
	L_TPSP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TPSP float NULL,
	L_SIL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIL float NULL,
	L_TCYN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCYN float NULL,
	L_DETERG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DETERG float NULL,
	L_FL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FL float NULL,
	L_CL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CL float NULL,
	L_H2S varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	H2S float NULL,
	L_SULP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SULP float NULL,
	L_SSP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SSP float NULL,
	L_CHL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL float NULL,
	L_PHEO varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHEO float NULL,
	L_AL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL float NULL,
	L_SB varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SB float NULL,
	L_ARSENIC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARSENIC float NULL,
	L_BA varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BA float NULL,
	L_BE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BE float NULL,
	L_B varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	B float NULL,
	L_CD varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD float NULL,
	L_CR varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR float NULL,
	L_CU varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU float NULL,
	L_FE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE float NULL,
	L_PB varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB float NULL,
	L_MN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN float NULL,
	L_HG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG float NULL,
	L_MO varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MO float NULL,
	L_NI varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI float NULL,
	L_AG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG float NULL,
	L_TL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TL float NULL,
	L_V varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	V float NULL,
	L_ZN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN float NULL,
	[DEPTH] float NULL,
	WIDTH decimal(38,2) NULL,
	VEL float NULL,
	FLOW float NULL,
	L_NH3 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH3 float NULL,
	L_TIN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TIN float NULL,
	L_TN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TN float NULL,
	BOD5_PT float NULL,
	NH4_PT float NULL,
	DOS_PT float NULL,
	WQI_PT float NULL,
	WQI_GRADE nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DISP_STATS nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DISP_SEQ int NULL,
	DELETE_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.SR_RW_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.SR_RW_VISIT;

CREATE TABLE SR_RW_VISIT (
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	MDATE smalldatetime NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO tinyint NULL,
	VALID_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	DELETE_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DELETE_DATE smalldatetime NULL
);


-- WQPLIS.WPG.TABLE_INFO definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TABLE_INFO;

CREATE TABLE TABLE_INFO (
	NAME nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	DESCRIPTION nvarchar(300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATUS nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TABLE_INFO PRIMARY KEY (NAME)
);


-- WQPLIS.WPG.TB_CLAB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TB_CLAB;

CREATE TABLE TB_CLAB (
	TBVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TBVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_AS_INORG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AS_INORG decimal(9,5) NULL,
	L_AS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AS] decimal(9,3) NULL,
	L_SE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SE decimal(9,5) NULL,
	L_MEHG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MEHG decimal(9,5) NULL,
	L_PBB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBB decimal(9,5) NULL,
	L_MBT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MBT decimal(9,5) NULL,
	L_DBT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DBT decimal(9,5) NULL,
	L_TBT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TBT decimal(9,5) NULL,
	L_OSN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OSN decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TB_CLAB PRIMARY KEY (TBVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TB_CLAB_BU definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TB_CLAB_BU;

CREATE TABLE TB_CLAB_BU (
	TBVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TBVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_KEPONE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	KEPONE decimal(9,5) NULL,
	L_PFOSF nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PFOSF decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TB_CLAB_BU PRIMARY KEY (TBVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TB_CLAB_CDD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TB_CLAB_CDD;

CREATE TABLE TB_CLAB_CDD (
	TBVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TBVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TEQ_TYPE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_TCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDF1 decimal(9,5) NULL,
	L_TCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDD1 decimal(9,5) NULL,
	L_PECDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF1 decimal(9,5) NULL,
	L_PECDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF2 decimal(9,5) NULL,
	L_PECDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDD1 decimal(9,5) NULL,
	L_HXCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF1 decimal(9,5) NULL,
	L_HXCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF2 decimal(9,5) NULL,
	L_HXCDF3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF3 decimal(9,5) NULL,
	L_HXCDF4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF4 decimal(9,5) NULL,
	L_HXCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD1 decimal(9,5) NULL,
	L_HXCDD2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD2 decimal(9,5) NULL,
	L_HXCDD3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD3 decimal(9,5) NULL,
	L_HPCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF1 decimal(9,5) NULL,
	L_HPCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF2 decimal(9,5) NULL,
	L_HPCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDD1 decimal(9,5) NULL,
	L_OCDF nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDF decimal(9,5) NULL,
	L_OCDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDD decimal(9,5) NULL,
	L_CDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CDD decimal(9,5) NULL,
	TSD_DWR decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TB_CLAB_CDD PRIMARY KEY (TBVISIT_ID,[TYPE],TEQ_TYPE)
);


-- WQPLIS.WPG.TB_CLAB_DLPCB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TB_CLAB_DLPCB;

CREATE TABLE TB_CLAB_DLPCB (
	TBVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TBVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TEQ_TYPE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_DLPCB81 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB81 decimal(9,5) NULL,
	L_DLPCB77 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB77 decimal(9,5) NULL,
	L_DLPCB123 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB123 decimal(9,5) NULL,
	L_DLPCB118 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB118 decimal(12,5) NULL,
	L_DLPCB114 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB114 decimal(9,5) NULL,
	L_DLPCB105 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB105 decimal(9,5) NULL,
	L_DLPCB126 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB126 decimal(9,5) NULL,
	L_DLPCB167 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB167 decimal(9,5) NULL,
	L_DLPCB156 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB156 decimal(9,5) NULL,
	L_DLPCB157 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB157 decimal(9,5) NULL,
	L_DLPCB169 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB169 decimal(9,5) NULL,
	L_DLPCB189 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB189 decimal(9,5) NULL,
	L_DLPCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB decimal(12,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TB_CLAB_DLPCB PRIMARY KEY (TBVISIT_ID,[TYPE],TEQ_TYPE)
);


-- WQPLIS.WPG.TB_CLAB_OC definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TB_CLAB_OC;

CREATE TABLE TB_CLAB_OC (
	TBVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TBVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_GBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	GBHC decimal(9,5) NULL,
	L_ABHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ABHC decimal(9,5) NULL,
	L_BBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBHC decimal(9,5) NULL,
	L_DBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DBHC decimal(9,5) NULL,
	L_HCH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HCH decimal(9,5) NULL,
	L_ALDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ALDR decimal(9,5) NULL,
	L_CH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CH decimal(9,5) NULL,
	L_DIEL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DIEL decimal(9,5) NULL,
	L_ENDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ENDR decimal(9,5) NULL,
	L_HEPT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPT decimal(9,5) NULL,
	L_HCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HCB decimal(9,5) NULL,
	L_MIRX nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MIRX decimal(9,5) NULL,
	L_TOX nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOX decimal(9,5) NULL,
	L_END1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	END1 decimal(9,5) NULL,
	L_END2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	END2 decimal(9,5) NULL,
	L_ENDSS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ENDSS decimal(9,5) NULL,
	L_PECB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECB decimal(9,5) NULL,
	L_ODDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDE decimal(9,5) NULL,
	L_PDDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDE decimal(9,5) NULL,
	L_ODDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDD decimal(9,5) NULL,
	L_PDDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDD decimal(9,5) NULL,
	L_ODDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDT decimal(9,5) NULL,
	L_PDDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDT decimal(9,5) NULL,
	L_DDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DDT decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TB_CLAB_OC PRIMARY KEY (TBVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TB_CLAB_PAH definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TB_CLAB_PAH;

CREATE TABLE TB_CLAB_PAH (
	TBVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TBVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_NAPH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NAPH decimal(9,3) NULL,
	L_ACPH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACPH decimal(9,3) NULL,
	L_ACEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACEN decimal(9,3) NULL,
	L_FLUO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUO decimal(9,3) NULL,
	L_PHEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHEN decimal(9,3) NULL,
	L_ANTH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ANTH decimal(9,3) NULL,
	L_FLUT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUT decimal(9,3) NULL,
	L_PYRE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PYRE decimal(9,3) NULL,
	L_BANT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BANT decimal(9,3) NULL,
	L_CHRY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHRY decimal(9,3) NULL,
	L_BBFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBFL decimal(9,3) NULL,
	L_BKFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BKFL decimal(9,3) NULL,
	L_BAPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BAPY decimal(9,3) NULL,
	L_INPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	INPY decimal(9,3) NULL,
	L_DAAN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DAAN decimal(9,3) NULL,
	L_BGPE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BGPE decimal(9,3) NULL,
	L_PAH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PAH decimal(9,3) NULL,
	L_PFOS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PFOS decimal(9,3) NULL,
	L_PFOA nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PFOA decimal(9,3) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TB_CLAB_PAH PRIMARY KEY (TBVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TB_CLAB_PBDE definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TB_CLAB_PBDE;

CREATE TABLE TB_CLAB_PBDE (
	TBVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TBVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PBDE17 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE17 decimal(9,5) NULL,
	L_PBDE28 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE28 decimal(9,5) NULL,
	L_PBDE47 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE47 decimal(9,5) NULL,
	L_PBDE99 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE99 decimal(9,5) NULL,
	L_PBDE100 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE100 decimal(9,5) NULL,
	L_PBDE153 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE153 decimal(9,5) NULL,
	L_PBDE154 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE154 decimal(9,5) NULL,
	L_PBDE183 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE183 decimal(9,5) NULL,
	L_PBDE197 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE197 decimal(9,5) NULL,
	L_PBDE209 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE209 decimal(9,5) NULL,
	L_PBDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TB_CLAB_PBDE PRIMARY KEY (TBVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TB_CLAB_PCB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TB_CLAB_PCB;

CREATE TABLE TB_CLAB_PCB (
	TBVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TBVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TYPE_PCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB decimal(9,3) NULL,
	L_PCB1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB1 decimal(9,3) NULL,
	L_PCB5 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB5 decimal(9,3) NULL,
	L_PCB8 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB8 decimal(9,3) NULL,
	L_PCB18 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB18 decimal(9,3) NULL,
	L_PCB31 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB31 decimal(9,3) NULL,
	L_PCB28 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB28 decimal(9,3) NULL,
	L_PCB52 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB52 decimal(9,3) NULL,
	L_PCB44 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB44 decimal(9,3) NULL,
	L_PCB66 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB66 decimal(9,3) NULL,
	L_PCB81 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB81 decimal(9,3) NULL,
	L_PCB77 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB77 decimal(9,3) NULL,
	L_PCB101 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB101 decimal(9,3) NULL,
	L_PCB87 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB87 decimal(9,3) NULL,
	L_PCB110 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB110 decimal(9,3) NULL,
	L_PCB123 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB123 decimal(9,3) NULL,
	L_PCB118 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB118 decimal(9,3) NULL,
	L_PCB114 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB114 decimal(9,3) NULL,
	L_PCB105 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB105 decimal(9,3) NULL,
	L_PCB126 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB126 decimal(9,3) NULL,
	L_PCB128 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB128 decimal(9,3) NULL,
	L_PCB151 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB151 decimal(9,3) NULL,
	L_PCB153 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB153 decimal(9,3) NULL,
	L_PCB141 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB141 decimal(9,3) NULL,
	L_PCB149 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB149 decimal(9,3) NULL,
	L_PCB138 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB138 decimal(9,3) NULL,
	L_PCB167 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB167 decimal(9,3) NULL,
	L_PCB156 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB156 decimal(9,3) NULL,
	L_PCB157 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB157 decimal(9,3) NULL,
	L_PCB169 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB169 decimal(9,3) NULL,
	L_PCB187 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB187 decimal(9,3) NULL,
	L_PCB183 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB183 decimal(9,3) NULL,
	L_PCB180 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB180 decimal(9,3) NULL,
	L_PCB170 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB170 decimal(9,3) NULL,
	L_PCB189 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB189 decimal(9,3) NULL,
	L_PCB206 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB206 decimal(9,3) NULL,
	TSO_DWR decimal(9,3) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TB_CLAB_PCB PRIMARY KEY (TBVISIT_ID,[TYPE],TYPE_PCB)
);


-- WQPLIS.WPG.TB_GLAB_CDD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TB_GLAB_CDD;

CREATE TABLE TB_GLAB_CDD (
	TBVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TBVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_TCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDF1 decimal(9,5) NULL,
	L_TCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDD1 decimal(9,5) NULL,
	L_PECDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF1 decimal(9,5) NULL,
	L_PECDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF2 decimal(9,5) NULL,
	L_PECDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDD1 decimal(9,5) NULL,
	L_HXCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF1 decimal(9,5) NULL,
	L_HXCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF2 decimal(9,5) NULL,
	L_HXCDF3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF3 decimal(9,5) NULL,
	L_HXCDF4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF4 decimal(9,5) NULL,
	L_HXCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD1 decimal(9,5) NULL,
	L_HXCDD2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD2 decimal(9,5) NULL,
	L_HXCDD3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD3 decimal(9,5) NULL,
	L_HPCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF1 decimal(9,5) NULL,
	L_HPCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF2 decimal(9,5) NULL,
	L_HPCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDD1 decimal(9,5) NULL,
	L_OCDF nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDF decimal(9,5) NULL,
	L_OCDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDD decimal(9,5) NULL,
	L_CDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CDD decimal(9,5) NULL,
	TSD_DWR decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TB_GLAB_CDD PRIMARY KEY (TBVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TB_GLAB_DLPCB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TB_GLAB_DLPCB;

CREATE TABLE TB_GLAB_DLPCB (
	TBVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TBVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_DLPCB81 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB81 decimal(9,5) NULL,
	L_DLPCB77 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB77 decimal(9,5) NULL,
	L_DLPCB123 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB123 decimal(9,5) NULL,
	L_DLPCB118 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB118 decimal(9,5) NULL,
	L_DLPCB114 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB114 decimal(9,5) NULL,
	L_DLPCB105 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB105 decimal(9,5) NULL,
	L_DLPCB126 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB126 decimal(9,5) NULL,
	L_DLPCB167 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB167 decimal(9,5) NULL,
	L_DLPCB156 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB156 decimal(9,5) NULL,
	L_DLPCB157 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB157 decimal(9,5) NULL,
	L_DLPCB169 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB169 decimal(9,5) NULL,
	L_DLPCB189 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB189 decimal(9,5) NULL,
	L_DLPCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TB_GLAB_DLPCB PRIMARY KEY (TBVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TB_GLAB_HH definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TB_GLAB_HH;

CREATE TABLE TB_GLAB_HH (
	TBVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TBVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_TCM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCM decimal(10,4) NULL,
	L_TCE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCE decimal(10,4) NULL,
	L_BDCM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BDCM decimal(10,4) NULL,
	L_BTCM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BTCM decimal(10,4) NULL,
	L_TRCE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TRCE decimal(10,4) NULL,
	L_CDBM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CDBM decimal(10,4) NULL,
	L_BROM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BROM decimal(10,4) NULL,
	L_MDCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MDCB decimal(10,4) NULL,
	L_ODCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODCB decimal(10,4) NULL,
	L_THMS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	THMS decimal(10,4) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TB_GLAB_HH PRIMARY KEY (TBVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TB_GLAB_OC definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TB_GLAB_OC;

CREATE TABLE TB_GLAB_OC (
	TBVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TBVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_GBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	GBHC decimal(9,5) NULL,
	L_ABHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ABHC decimal(9,5) NULL,
	L_BBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBHC decimal(9,5) NULL,
	L_DBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DBHC decimal(9,5) NULL,
	L_HCH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HCH decimal(9,5) NULL,
	L_ALDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ALDR decimal(9,5) NULL,
	L_CH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CH decimal(9,5) NULL,
	L_DIEL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DIEL decimal(9,5) NULL,
	L_ENDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ENDR decimal(9,5) NULL,
	L_END1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	END1 decimal(9,5) NULL,
	L_END2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	END2 decimal(9,5) NULL,
	L_HEPT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPT decimal(9,5) NULL,
	L_HEPO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPO decimal(9,5) NULL,
	L_HCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HCB decimal(9,5) NULL,
	L_MIRX nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MIRX decimal(9,5) NULL,
	L_TOX nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOX decimal(9,5) NULL,
	L_ODDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDE decimal(9,5) NULL,
	L_PDDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDE decimal(9,5) NULL,
	L_ODDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDD decimal(9,5) NULL,
	L_PDDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDD decimal(9,5) NULL,
	L_ODDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDT decimal(9,5) NULL,
	L_PDDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDT decimal(9,5) NULL,
	L_DDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DDT decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TB_GLAB_OC PRIMARY KEY (TBVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TB_GLAB_PAH definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TB_GLAB_PAH;

CREATE TABLE TB_GLAB_PAH (
	TBVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TBVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_NAPH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NAPH decimal(9,3) NULL,
	L_ACPH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACPH decimal(9,3) NULL,
	L_ACEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACEN decimal(9,3) NULL,
	L_FLUO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUO decimal(9,3) NULL,
	L_PHEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHEN decimal(9,3) NULL,
	L_ANTH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ANTH decimal(9,3) NULL,
	L_FLUT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUT decimal(9,3) NULL,
	L_PYRE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PYRE decimal(9,3) NULL,
	L_BANT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BANT decimal(9,3) NULL,
	L_CHRY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHRY decimal(9,3) NULL,
	L_BBFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBFL decimal(9,3) NULL,
	L_BKFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BKFL decimal(9,3) NULL,
	L_BAPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BAPY decimal(9,3) NULL,
	L_INPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	INPY decimal(9,3) NULL,
	L_DAAN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DAAN decimal(9,3) NULL,
	L_BGPE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BGPE decimal(9,3) NULL,
	L_PAH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PAH decimal(9,3) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TB_GLAB_PAH PRIMARY KEY (TBVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TB_GLAB_PCB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TB_GLAB_PCB;

CREATE TABLE TB_GLAB_PCB (
	TBVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TBVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB decimal(9,3) NULL,
	L_PCB1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB1 decimal(9,3) NULL,
	L_PCB5 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB5 decimal(9,3) NULL,
	L_PCB8 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB8 decimal(9,3) NULL,
	L_PCB18 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB18 decimal(9,3) NULL,
	L_PCB31 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB31 decimal(9,3) NULL,
	L_PCB28 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB28 decimal(9,3) NULL,
	L_PCB52 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB52 decimal(9,3) NULL,
	L_PCB44 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB44 decimal(9,3) NULL,
	L_PCB66 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB66 decimal(9,3) NULL,
	L_PCB81 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB81 decimal(9,3) NULL,
	L_PCB77 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB77 decimal(9,3) NULL,
	L_PCB101 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB101 decimal(9,3) NULL,
	L_PCB87 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB87 decimal(9,3) NULL,
	L_PCB110 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB110 decimal(9,3) NULL,
	L_PCB123 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB123 decimal(9,3) NULL,
	L_PCB118 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB118 decimal(9,3) NULL,
	L_PCB114 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB114 decimal(9,3) NULL,
	L_PCB105 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB105 decimal(9,3) NULL,
	L_PCB126 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB126 decimal(9,3) NULL,
	L_PCB128 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB128 decimal(9,3) NULL,
	L_PCB151 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB151 decimal(9,3) NULL,
	L_PCB153 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB153 decimal(9,3) NULL,
	L_PCB141 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB141 decimal(9,3) NULL,
	L_PCB149 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB149 decimal(9,3) NULL,
	L_PCB138 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB138 decimal(9,3) NULL,
	L_PCB167 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB167 decimal(9,3) NULL,
	L_PCB156 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB156 decimal(9,3) NULL,
	L_PCB157 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB157 decimal(9,3) NULL,
	L_PCB169 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB169 decimal(9,3) NULL,
	L_PCB187 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB187 decimal(9,3) NULL,
	L_PCB183 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB183 decimal(9,3) NULL,
	L_PCB180 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB180 decimal(9,3) NULL,
	L_PCB170 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB170 decimal(9,3) NULL,
	L_PCB189 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB189 decimal(9,3) NULL,
	L_PCB206 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB206 decimal(9,3) NULL,
	TSO_DWR decimal(9,3) NULL,
	LIPID decimal(9,3) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TB_GLAB_PCB PRIMARY KEY (TBVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TB_SPCODE definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TB_SPCODE;

CREATE TABLE TB_SPCODE (
	TB_SPCODE_ID nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SP_NAME nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TISSUE_TYPE nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAMPLING nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_ID decimal(3,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL
);


-- WQPLIS.WPG.TB_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TB_VISIT;

CREATE TABLE TB_VISIT (
	TBVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TBVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WCZ_ID nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TB_SPCODE_ID nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MDATE smalldatetime NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TB_VISIT PRIMARY KEY (TBVISIT_ID)
);


-- WQPLIS.WPG.TEN_ZONE definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TEN_ZONE;

CREATE TABLE TEN_ZONE (
	ZONE_ID nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	ZONE_NAME nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHINESE_NAME nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZONE_ORDER decimal(3,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TEN_ZONE PRIMARY KEY (ZONE_ID)
);


-- WQPLIS.WPG.TISSUE definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TISSUE;

CREATE TABLE TISSUE (
	PROJECT_ID decimal(3,0) NOT NULL,
	TABLE_NAME nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TABLE_DEC nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SECURITY_CODE decimal(2,0) NOT NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL
);


-- WQPLIS.WPG.TPMS_GOV_LAB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TPMS_GOV_LAB;

CREATE TABLE TPMS_GOV_LAB (
	SAMPLE_ID varchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAMPLE_MARK varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BATCH_NO varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_2_3_7_8_TCDF char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[_2_3_7_8_TCDF] float NULL,
	L_2_3_7_8_TCDD char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[_2_3_7_8_TCDD] float NULL,
	L_1_2_3_7_8_PeCDF char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[_1_2_3_7_8_PeCDF] float NULL,
	L_2_3_4_7_8_PeCDF char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[_2_3_4_7_8_PeCDF] float NULL,
	L_1_2_3_7_8_PeCDD char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[_1_2_3_7_8_PeCDD] float NULL,
	L_1_2_3_4_7_8_HxCDF char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[_1_2_3_4_7_8_HxCDF] float NULL,
	L_1_2_3_6_7_8_HxCDF char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[_1_2_3_6_7_8_HxCDF] float NULL,
	L_2_3_4_6_7_8_HxCDF char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[_2_3_4_6_7_8_HxCDF] float NULL,
	L_1_2_3_7_8_9_HxCDF char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[_1_2_3_7_8_9_HxCDF] float NULL,
	L_1_2_3_4_7_8_HxCDD char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[_1_2_3_4_7_8_HxCDD] float NULL,
	L_1_2_3_6_7_8_HxCDD char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[_1_2_3_6_7_8_HxCDD] float NULL,
	L_1_2_3_7_8_9_HxCDD char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[_1_2_3_7_8_9_HxCDD] float NULL,
	L_1_2_3_4_6_7_8_HpCDF char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[_1_2_3_4_6_7_8_HpCDF] float NULL,
	L_1_2_3_4_7_8_9_HpCDF char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[_1_2_3_4_7_8_9_HpCDF] float NULL,
	L_1_2_3_4_6_7_8_HpCDD char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[_1_2_3_4_6_7_8_HpCDD] float NULL,
	L_OCDF char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDF float NULL,
	L_OCDD char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDD float NULL,
	L_PCB_8 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_8 float NULL,
	L_PCB_18 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_18 float NULL,
	L_PCB_31 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_31 float NULL,
	L_PCB_28 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_28 float NULL,
	L_PCB_52 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_52 float NULL,
	L_PCB_44 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_44 float NULL,
	L_PCB_66 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_66 float NULL,
	L_PCB_101 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_101 float NULL,
	L_PCB_81 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_81 float NULL,
	L_PCB_77 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_77 float NULL,
	L_PCB_149 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_149 float NULL,
	L_PCB_123 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_123 float NULL,
	L_PCB_118 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_118 float NULL,
	L_PCB_114 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_114 float NULL,
	L_PCB_153 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_153 float NULL,
	L_PCB_105 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_105 float NULL,
	L_PCB_138 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_138 float NULL,
	L_PCB_187 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_187 float NULL,
	L_PCB_126 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_126 float NULL,
	L_PCB_128 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_128 float NULL,
	L_PCB_167 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_167 float NULL,
	L_PCB_156 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_156 float NULL,
	L_PCB_157 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_157 float NULL,
	L_PCB_180 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_180 float NULL,
	L_PCB_170 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_170 float NULL,
	L_PCB_169 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_169 float NULL,
	L_PCB_189 char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB_189 float NULL,
	L_DWR char(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DWR float NULL
);


-- WQPLIS.WPG.TS_CLAB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TS_CLAB;

CREATE TABLE TS_CLAB (
	TSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PBB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBB decimal(9,5) NULL,
	L_F4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	F4 decimal(9,5) NULL,
	L_PF nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PF decimal(9,5) NULL,
	L_NP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NP decimal(9,5) NULL,
	L_NPME nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NPME decimal(9,5) NULL,
	L_NPDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NPDE decimal(9,5) NULL,
	L_NPE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NPE decimal(9,5) NULL,
	L_MBT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MBT decimal(9,5) NULL,
	L_DBT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DBT decimal(9,5) NULL,
	L_TBT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TBT decimal(9,5) NULL,
	L_OSN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OSN decimal(9,5) NULL,
	L_E1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	E1 decimal(9,5) NULL,
	L_E2_17A nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	E2_17A decimal(9,5) NULL,
	L_E2_17B nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	E2_17B decimal(9,5) NULL,
	L_E3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	E3 decimal(9,5) NULL,
	L_EE2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EE2 decimal(9,5) NULL,
	L_BPA nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BPA decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TS_CLAB PRIMARY KEY (TSVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TS_CLAB_BU definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TS_CLAB_BU;

CREATE TABLE TS_CLAB_BU (
	TSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PFOSF nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PFOSF decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TS_CLAB_BU PRIMARY KEY (TSVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TS_CLAB_OC definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TS_CLAB_OC;

CREATE TABLE TS_CLAB_OC (
	TSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_ALDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ALDR decimal(9,5) NULL,
	L_CH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CH decimal(9,5) NULL,
	L_DIEL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DIEL decimal(9,5) NULL,
	L_ENDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ENDR decimal(9,5) NULL,
	L_HEPT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPT decimal(9,5) NULL,
	L_HCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HCB decimal(9,5) NULL,
	L_MIRX nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MIRX decimal(9,5) NULL,
	L_TOX nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOX decimal(9,5) NULL,
	L_ODDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDD decimal(9,5) NULL,
	L_PDDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDD decimal(9,5) NULL,
	L_ODDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDE decimal(9,5) NULL,
	L_PDDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDE decimal(9,5) NULL,
	L_ODDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDT decimal(9,5) NULL,
	L_PDDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDT decimal(9,5) NULL,
	L_DDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DDT decimal(9,5) NULL,
	L_GBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	GBHC decimal(9,5) NULL,
	L_ABHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ABHC decimal(9,5) NULL,
	L_BBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBHC decimal(9,5) NULL,
	L_DBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DBHC decimal(9,5) NULL,
	L_HCH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HCH decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TS_CLAB_OC PRIMARY KEY (TSVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TS_CLAB_PBDE definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TS_CLAB_PBDE;

CREATE TABLE TS_CLAB_PBDE (
	TSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PBDE17 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE17 decimal(9,5) NULL,
	L_PBDE28 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE28 decimal(9,5) NULL,
	L_PBDE47 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE47 decimal(9,5) NULL,
	L_PBDE99 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE99 decimal(9,5) NULL,
	L_PBDE100 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE100 decimal(9,5) NULL,
	L_PBDE153 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE153 decimal(9,5) NULL,
	L_PBDE154 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE154 decimal(9,5) NULL,
	L_PBDE183 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE183 decimal(9,5) NULL,
	L_PBDE197 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE197 decimal(9,5) NULL,
	L_PBDE209 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE209 decimal(9,5) NULL,
	L_PBDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TS_CLAB_PBDE PRIMARY KEY (TSVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TS_GLABM definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TS_GLABM;

CREATE TABLE TS_GLABM (
	TSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_Al nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	Al decimal(12,3) NULL,
	L_AG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG decimal(9,5) NULL,
	L_AS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AS] decimal(9,5) NULL,
	L_AS_INORG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AS_INORG decimal(9,5) NULL,
	L_BA nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BA decimal(9,5) NULL,
	L_BE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BE decimal(9,5) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(9,5) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(9,5) NULL,
	L_SE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SE decimal(9,5) NULL,
	L_SN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SN decimal(9,5) NULL,
	L_TL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TL decimal(9,5) NULL,
	L_B nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	B decimal(9,5) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(9,5) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(9,5) NULL,
	L_FE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE decimal(12,3) NULL,
	L_MN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN decimal(9,5) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(9,5) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(9,5) NULL,
	L_V nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	V decimal(9,5) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(9,5) NULL,
	L_MO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MO decimal(9,5) NULL,
	L_SB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SB decimal(9,5) NULL,
	TSM_DWR decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TS_GLABM PRIMARY KEY (TSVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TS_GLABN definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TS_GLABN;

CREATE TABLE TS_GLABN (
	TSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_TOC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOC decimal(9,5) NULL,
	L_TIC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TIC decimal(9,5) NULL,
	L_TC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TC decimal(9,5) NULL,
	TSN_DRW decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TS_GLABN PRIMARY KEY (TSVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TS_GLAB_CDD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TS_GLAB_CDD;

CREATE TABLE TS_GLAB_CDD (
	TSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_TCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDF1 decimal(9,5) NULL,
	L_TCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDD1 decimal(9,5) NULL,
	L_PECDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF1 decimal(9,5) NULL,
	L_PECDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF2 decimal(9,5) NULL,
	L_PECDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDD1 decimal(9,5) NULL,
	L_HXCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF1 decimal(9,5) NULL,
	L_HXCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF2 decimal(9,5) NULL,
	L_HXCDF3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF3 decimal(9,5) NULL,
	L_HXCDF4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF4 decimal(9,5) NULL,
	L_HXCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD1 decimal(9,5) NULL,
	L_HXCDD2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD2 decimal(9,5) NULL,
	L_HXCDD3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD3 decimal(9,5) NULL,
	L_HPCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF1 decimal(9,5) NULL,
	L_HPCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF2 decimal(9,5) NULL,
	L_HPCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDD1 decimal(9,5) NULL,
	L_OCDF nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDF decimal(12,3) NULL,
	L_OCDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDD decimal(12,3) NULL,
	L_CDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CDD decimal(12,3) NULL,
	TSD_DWR decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TS_GLAB_CDD PRIMARY KEY (TSVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TS_GLAB_DLPCB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TS_GLAB_DLPCB;

CREATE TABLE TS_GLAB_DLPCB (
	TSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_DLPCB77 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB77 decimal(9,5) NULL,
	L_DLPCB81 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB81 decimal(9,5) NULL,
	L_DLPCB105 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB105 decimal(9,5) NULL,
	L_DLPCB114 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB114 decimal(9,5) NULL,
	L_DLPCB118 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB118 decimal(9,5) NULL,
	L_DLPCB123 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB123 decimal(9,5) NULL,
	L_DLPCB126 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB126 decimal(9,5) NULL,
	L_DLPCB156 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB156 decimal(9,5) NULL,
	L_DLPCB157 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB157 decimal(9,5) NULL,
	L_DLPCB167 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB167 decimal(9,5) NULL,
	L_DLPCB169 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB169 decimal(9,5) NULL,
	L_DLPCB189 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB189 decimal(9,5) NULL,
	L_DLPCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TS_GLAB_DLPCB PRIMARY KEY (TSVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TS_GLAB_OC definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TS_GLAB_OC;

CREATE TABLE TS_GLAB_OC (
	TSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PECB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECB decimal(9,5) NULL,
	L_ALDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ALDR decimal(9,5) NULL,
	L_HEPO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPO decimal(9,5) NULL,
	L_CH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CH decimal(9,5) NULL,
	L_DIEL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DIEL decimal(9,5) NULL,
	L_ENDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ENDR decimal(9,5) NULL,
	L_END1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	END1 decimal(9,5) NULL,
	L_END2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	END2 decimal(9,5) NULL,
	L_HEPT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPT decimal(9,5) NULL,
	L_HCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HCB decimal(9,5) NULL,
	L_MIRX nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MIRX decimal(9,5) NULL,
	L_GBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	GBHC decimal(9,5) NULL,
	L_ABHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ABHC decimal(9,5) NULL,
	L_BBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBHC decimal(9,5) NULL,
	L_DBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DBHC decimal(9,5) NULL,
	L_HCH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HCH decimal(9,5) NULL,
	L_ODDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDE decimal(9,5) NULL,
	L_PDDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDE decimal(9,5) NULL,
	L_ODDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDD decimal(9,5) NULL,
	L_ODDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDT decimal(9,5) NULL,
	L_PDDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDD decimal(9,5) NULL,
	L_PDDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDT decimal(9,5) NULL,
	L_DDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DDT decimal(9,5) NULL,
	L_KEPONE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	KEPONE decimal(9,5) NULL,
	L_TOX nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOX decimal(9,5) NULL,
	L_TOX_P26 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOX_P26 decimal(9,5) NULL,
	L_TOX_P50 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOX_P50 decimal(9,5) NULL,
	L_TOX_P62 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOX_P62 decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TS_GLAB_OC PRIMARY KEY (TSVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TS_GLAB_PAH definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TS_GLAB_PAH;

CREATE TABLE TS_GLAB_PAH (
	TSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_NAPH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NAPH decimal(9,5) NULL,
	L_ACPH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACPH decimal(9,5) NULL,
	L_ACEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACEN decimal(9,5) NULL,
	L_FLUO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUO decimal(9,5) NULL,
	L_PHEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHEN decimal(9,5) NULL,
	L_ANTH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ANTH decimal(9,5) NULL,
	L_FLUT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUT decimal(9,5) NULL,
	L_PYRE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PYRE decimal(9,5) NULL,
	L_BANT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BANT decimal(9,5) NULL,
	L_CHRY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHRY decimal(9,5) NULL,
	L_BBFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBFL decimal(9,5) NULL,
	L_BKFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BKFL decimal(9,5) NULL,
	L_BAPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BAPY decimal(9,5) NULL,
	L_DAAN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DAAN decimal(9,5) NULL,
	L_BGPE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BGPE decimal(9,5) NULL,
	L_INPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	INPY decimal(9,5) NULL,
	L_PAH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PAH decimal(9,5) NULL,
	L_PFOA nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PFOA decimal(9,5) NULL,
	L_PFOS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PFOS decimal(9,5) NULL,
	PFOS_DWR decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TS_GLAB_PAH PRIMARY KEY (TSVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TS_GLAB_PCB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TS_GLAB_PCB;

CREATE TABLE TS_GLAB_PCB (
	TSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB decimal(9,5) NULL,
	L_PCB8 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB8 decimal(9,5) NULL,
	L_PCB18 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB18 decimal(9,5) NULL,
	L_PCB28 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB28 decimal(9,5) NULL,
	L_PCB31 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB31 decimal(9,5) NULL,
	L_PCB44 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB44 decimal(9,5) NULL,
	L_PCB52 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB52 decimal(9,5) NULL,
	L_PCB66 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB66 decimal(9,5) NULL,
	L_PCB77 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB77 decimal(9,5) NULL,
	L_PCB81 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB81 decimal(9,5) NULL,
	L_PCB101 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB101 decimal(9,5) NULL,
	L_PCB105 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB105 decimal(9,5) NULL,
	L_PCB114 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB114 decimal(9,5) NULL,
	L_PCB118 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB118 decimal(9,5) NULL,
	L_PCB123 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB123 decimal(9,5) NULL,
	L_PCB126 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB126 decimal(9,5) NULL,
	L_PCB128 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB128 decimal(9,5) NULL,
	L_PCB138 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB138 decimal(9,5) NULL,
	L_PCB149 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB149 decimal(9,5) NULL,
	L_PCB153 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB153 decimal(9,5) NULL,
	L_PCB156 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB156 decimal(9,5) NULL,
	L_PCB157 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB157 decimal(9,5) NULL,
	L_PCB167 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB167 decimal(9,5) NULL,
	L_PCB169 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB169 decimal(9,5) NULL,
	L_PCB170 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB170 decimal(9,5) NULL,
	L_PCB180 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB180 decimal(9,5) NULL,
	L_PCB187 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB187 decimal(9,5) NULL,
	L_PCB189 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB189 decimal(9,5) NULL,
	TSO_DWR decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TS_GLAB_PCB PRIMARY KEY (TSVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TS_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TS_VISIT;

CREATE TABLE TS_VISIT (
	TSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	STATION_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TS_VISIT PRIMARY KEY (TSVISIT_ID)
);


-- WQPLIS.WPG.TW_CLAB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TW_CLAB;

CREATE TABLE TW_CLAB (
	TWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PBB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBB decimal(9,5) NULL,
	L_PF nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PF decimal(9,5) NULL,
	L_NP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NP decimal(9,5) NULL,
	L_NPME nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NPME decimal(9,5) NULL,
	L_NPDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NPDE decimal(9,5) NULL,
	L_NPE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NPE decimal(9,5) NULL,
	L_MBT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MBT decimal(9,5) NULL,
	L_DBT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DBT decimal(9,5) NULL,
	L_TBT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TBT decimal(9,5) NULL,
	L_OSN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OSN decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TW_CLAB PRIMARY KEY (TWVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TW_CLAB_BU definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TW_CLAB_BU;

CREATE TABLE TW_CLAB_BU (
	TWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PFOSF nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PFOSF decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TW_CLAB_BU PRIMARY KEY (TWVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TW_CLAB_CDD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TW_CLAB_CDD;

CREATE TABLE TW_CLAB_CDD (
	TWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TEQ_TYPE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_TCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDF1 decimal(9,5) NULL,
	L_TCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDD1 decimal(9,5) NULL,
	L_PECDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF1 decimal(9,5) NULL,
	L_PECDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF2 decimal(9,5) NULL,
	L_PECDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDD1 decimal(9,5) NULL,
	L_HXCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF1 decimal(9,5) NULL,
	L_HXCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF2 decimal(9,5) NULL,
	L_HXCDF3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF3 decimal(9,5) NULL,
	L_HXCDF4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF4 decimal(9,5) NULL,
	L_HXCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD1 decimal(9,5) NULL,
	L_HXCDD2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD2 decimal(9,5) NULL,
	L_HXCDD3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD3 decimal(9,5) NULL,
	L_HPCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF1 decimal(9,5) NULL,
	L_HPCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF2 decimal(9,5) NULL,
	L_HPCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDD1 decimal(9,5) NULL,
	L_OCDF nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDF decimal(9,5) NULL,
	L_OCDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDD decimal(9,5) NULL,
	L_CDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CDD decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TW_CLAB_CDD PRIMARY KEY (TWVISIT_ID,[TYPE],TEQ_TYPE)
);


-- WQPLIS.WPG.TW_CLAB_CDD_TMP definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TW_CLAB_CDD_TMP;

CREATE TABLE TW_CLAB_CDD_TMP (
	TWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_TCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDF1 decimal(9,5) NULL,
	L_TCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDD1 decimal(9,5) NULL,
	L_PECDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF1 decimal(9,5) NULL,
	L_PECDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF2 decimal(9,5) NULL,
	L_PECDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDD1 decimal(9,5) NULL,
	L_HXCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF1 decimal(9,5) NULL,
	L_HXCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF2 decimal(9,5) NULL,
	L_HXCDF3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF3 decimal(9,5) NULL,
	L_HXCDF4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF4 decimal(9,5) NULL,
	L_HXCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD1 decimal(9,5) NULL,
	L_HXCDD2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD2 decimal(9,5) NULL,
	L_HXCDD3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD3 decimal(9,5) NULL,
	L_HPCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF1 decimal(9,5) NULL,
	L_HPCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF2 decimal(9,5) NULL,
	L_HPCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDD1 decimal(9,5) NULL,
	L_OCDF nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDF decimal(9,5) NULL,
	L_OCDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDD decimal(9,5) NULL,
	L_CDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CDD decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL
);


-- WQPLIS.WPG.TW_CLAB_DLPCB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TW_CLAB_DLPCB;

CREATE TABLE TW_CLAB_DLPCB (
	TWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_DLPCB81 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB81 decimal(9,5) NULL,
	L_DLPCB77 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB77 decimal(9,5) NULL,
	L_DLPCB123 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB123 decimal(9,5) NULL,
	L_DLPCB118 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB118 decimal(9,5) NULL,
	L_DLPCB114 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB114 decimal(9,5) NULL,
	L_DLPCB105 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB105 decimal(9,5) NULL,
	L_DLPCB126 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB126 decimal(9,5) NULL,
	L_DLPCB167 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB167 decimal(9,5) NULL,
	L_DLPCB156 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB156 decimal(9,5) NULL,
	L_DLPCB157 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB157 decimal(9,5) NULL,
	L_DLPCB169 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB169 decimal(9,5) NULL,
	L_DLPCB189 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB189 decimal(9,5) NULL,
	L_DLPCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TW_CLAB_DLPCB PRIMARY KEY (TWVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TW_CLAB_PBDE definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TW_CLAB_PBDE;

CREATE TABLE TW_CLAB_PBDE (
	TWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PBDE17 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE17 decimal(9,3) NULL,
	L_PBDE28 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE28 decimal(9,3) NULL,
	L_PBDE47 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE47 decimal(9,3) NULL,
	L_PBDE99 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE99 decimal(9,3) NULL,
	L_PBDE100 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE100 decimal(9,3) NULL,
	L_PBDE153 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE153 decimal(9,3) NULL,
	L_PBDE154 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE154 decimal(9,3) NULL,
	L_PBDE183 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE183 decimal(9,3) NULL,
	L_PBDE197 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE197 decimal(9,3) NULL,
	L_PBDE209 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE209 decimal(9,3) NULL,
	L_PBDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PBDE decimal(9,3) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TW_CLAB_PBDE PRIMARY KEY (TWVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TW_GLABM definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TW_GLABM;

CREATE TABLE TW_GLABM (
	TWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(9,5) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(9,5) NULL,
	L_AS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AS] decimal(9,5) NULL,
	L_AS_INORG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AS_INORG decimal(9,5) NULL,
	L_BA nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BA decimal(9,5) NULL,
	L_BE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BE decimal(9,5) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(9,5) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(9,5) NULL,
	L_SE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SE decimal(9,5) NULL,
	L_SN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SN decimal(9,5) NULL,
	L_TL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TL decimal(9,5) NULL,
	TWP_DWR decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TW_GLABM PRIMARY KEY (TWVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TW_GLAB_CDD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TW_GLAB_CDD;

CREATE TABLE TW_GLAB_CDD (
	TWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_TCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDF1 decimal(9,5) NULL,
	L_TCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDD1 decimal(9,5) NULL,
	L_PECDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF1 decimal(9,5) NULL,
	L_PECDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF2 decimal(9,5) NULL,
	L_PECDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDD1 decimal(9,5) NULL,
	L_HXCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF1 decimal(9,5) NULL,
	L_HXCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF2 decimal(9,5) NULL,
	L_HXCDF3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF3 decimal(9,5) NULL,
	L_HXCDF4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF4 decimal(9,5) NULL,
	L_HXCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD1 decimal(9,5) NULL,
	L_HXCDD2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD2 decimal(9,5) NULL,
	L_HXCDD3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD3 decimal(9,5) NULL,
	L_HPCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF1 decimal(9,5) NULL,
	L_HPCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF2 decimal(9,5) NULL,
	L_HPCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDD1 decimal(9,5) NULL,
	L_OCDF nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDF decimal(9,5) NULL,
	L_OCDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDD decimal(9,5) NULL,
	L_CDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CDD decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TW_GLAB_CDD PRIMARY KEY (TWVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TW_GLAB_DLPCB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TW_GLAB_DLPCB;

CREATE TABLE TW_GLAB_DLPCB (
	TWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_DLPCB81 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB81 decimal(9,5) NULL,
	L_DLPCB77 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB77 decimal(9,5) NULL,
	L_DLPCB123 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB123 decimal(9,5) NULL,
	L_DLPCB118 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB118 decimal(9,5) NULL,
	L_DLPCB114 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB114 decimal(9,5) NULL,
	L_DLPCB105 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB105 decimal(9,5) NULL,
	L_DLPCB126 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB126 decimal(9,5) NULL,
	L_DLPCB167 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB167 decimal(9,5) NULL,
	L_DLPCB156 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB156 decimal(9,5) NULL,
	L_DLPCB157 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB157 decimal(9,5) NULL,
	L_DLPCB169 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB169 decimal(9,5) NULL,
	L_DLPCB189 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB189 decimal(9,5) NULL,
	L_DLPCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DLPCB decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TW_GLAB_DLPCB PRIMARY KEY (TWVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TW_GLAB_OC definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TW_GLAB_OC;

CREATE TABLE TW_GLAB_OC (
	TWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PECB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECB decimal(9,5) NULL,
	L_GBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	GBHC decimal(9,5) NULL,
	L_HCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HCB decimal(9,5) NULL,
	L_HEPT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPT decimal(9,5) NULL,
	L_ALDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ALDR decimal(9,5) NULL,
	L_HEPO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPO decimal(9,5) NULL,
	L_ODDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDE decimal(9,5) NULL,
	L_PDDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDE decimal(9,5) NULL,
	L_DIEL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DIEL decimal(9,5) NULL,
	L_ODDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDD decimal(9,5) NULL,
	L_ENDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ENDR decimal(9,5) NULL,
	L_END1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	END1 decimal(9,5) NULL,
	L_END2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	END2 decimal(9,5) NULL,
	L_PDDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDD decimal(9,5) NULL,
	L_ODDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDT decimal(9,5) NULL,
	L_PDDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDT decimal(9,5) NULL,
	L_ABHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ABHC decimal(9,5) NULL,
	L_BBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBHC decimal(9,5) NULL,
	L_DBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DBHC decimal(9,5) NULL,
	L_OCHD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCHD decimal(9,5) NULL,
	L_GCHD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	GCHD decimal(9,5) NULL,
	L_ACHD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACHD decimal(9,5) NULL,
	L_TNON nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TNON decimal(9,5) NULL,
	L_CNON nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CNON decimal(9,5) NULL,
	L_MIRX nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MIRX decimal(9,5) NULL,
	L_KEPONE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	KEPONE decimal(9,5) NULL,
	L_TOX nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOX decimal(9,5) NULL,
	L_TOX_P26 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOX_P26 decimal(9,5) NULL,
	L_TOX_P50 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOX_P50 decimal(9,5) NULL,
	L_TOX_P62 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOX_P62 decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TW_GLAB_OC PRIMARY KEY (TWVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TW_GLAB_PAH definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TW_GLAB_PAH;

CREATE TABLE TW_GLAB_PAH (
	TWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_NAPH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NAPH decimal(9,5) NULL,
	L_ACPH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACPH decimal(9,5) NULL,
	L_ACEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACEN decimal(9,5) NULL,
	L_FLUO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUO decimal(9,5) NULL,
	L_PHEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHEN decimal(9,5) NULL,
	L_ANTH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ANTH decimal(9,5) NULL,
	L_FLUT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUT decimal(9,5) NULL,
	L_PYRE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PYRE decimal(9,5) NULL,
	L_BANT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BANT decimal(9,5) NULL,
	L_CHRY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHRY decimal(9,5) NULL,
	L_BBFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBFL decimal(9,5) NULL,
	L_BKFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BKFL decimal(9,5) NULL,
	L_BAPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BAPY decimal(9,5) NULL,
	L_DAAN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DAAN decimal(9,5) NULL,
	L_BGPE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BGPE decimal(9,5) NULL,
	L_INPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	INPY decimal(9,5) NULL,
	L_PAH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PAH decimal(9,5) NULL,
	L_PFOA nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PFOA decimal(9,5) NULL,
	L_PFOS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PFOS decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TW_GLAB_PAH PRIMARY KEY (TWVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TW_GLAB_PCB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TW_GLAB_PCB;

CREATE TABLE TW_GLAB_PCB (
	TWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB decimal(9,5) NULL,
	L_PCB8 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB8 decimal(9,5) NULL,
	L_PCB18 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB18 decimal(9,5) NULL,
	L_PCB28 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB28 decimal(9,5) NULL,
	L_PCB31 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB31 decimal(9,5) NULL,
	L_PCB44 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB44 decimal(9,5) NULL,
	L_PCB52 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB52 decimal(9,5) NULL,
	L_PCB66 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB66 decimal(9,5) NULL,
	L_PCB77 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB77 decimal(9,5) NULL,
	L_PCB81 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB81 decimal(9,5) NULL,
	L_PCB101 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB101 decimal(9,5) NULL,
	L_PCB105 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB105 decimal(9,5) NULL,
	L_PCB114 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB114 decimal(9,5) NULL,
	L_PCB118 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB118 decimal(9,5) NULL,
	L_PCB123 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB123 decimal(9,5) NULL,
	L_PCB126 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB126 decimal(9,5) NULL,
	L_PCB128 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB128 decimal(9,5) NULL,
	L_PCB138 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB138 decimal(9,5) NULL,
	L_PCB149 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB149 decimal(9,5) NULL,
	L_PCB153 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB153 decimal(9,5) NULL,
	L_PCB156 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB156 decimal(9,5) NULL,
	L_PCB157 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB157 decimal(9,5) NULL,
	L_PCB167 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB167 decimal(9,5) NULL,
	L_PCB169 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB169 decimal(9,5) NULL,
	L_PCB170 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB170 decimal(9,5) NULL,
	L_PCB180 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB180 decimal(9,5) NULL,
	L_PCB187 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB187 decimal(9,5) NULL,
	L_PCB189 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB189 decimal(9,5) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TW_GLAB_PCB PRIMARY KEY (TWVISIT_ID,[TYPE])
);


-- WQPLIS.WPG.TW_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TW_VISIT;

CREATE TABLE TW_VISIT (
	TWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	STATION_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TW_VISIT PRIMARY KEY (TWVISIT_ID)
);


-- WQPLIS.WPG.WAGLAN definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.WAGLAN;

CREATE TABLE WAGLAN (
	PROJECT_ID decimal(3,0) NOT NULL,
	TABLE_NAME nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TABLE_DEC nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SECURITY_CODE decimal(2,0) NOT NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL
);


-- WQPLIS.WPG.WB_SL definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.WB_SL;

CREATE TABLE WB_SL (
	SP_ID decimal(3,0) NULL,
	PHYLUM nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CLASS nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_ORDER nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FAMILY nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	GENUS nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SPECIES nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_NAME nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AUTHORITY nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_GROUP nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COM_NAME nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	REMARK nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	APPEARANCE nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL
);


-- WQPLIS.WPG.W_PL definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.W_PL;

CREATE TABLE W_PL (
	PARA_ID decimal(4,0) NOT NULL,
	SAMPLE_TYPE nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PARA_CODE nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	PARA_UNIT nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PARA_DESC nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATUS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	UP_DET_LIMIT decimal(22,6) NULL,
	LOW_DET_LIMIT decimal(22,6) NULL,
	TEST_METHOD nvarchar(300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	UP_DATE nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DISPLAY_INT decimal(10,0) NULL,
	DISPLAY_DEC decimal(10,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_W_PL PRIMARY KEY (PARA_ID)
);


-- WQPLIS.WPG.W_STATION definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.W_STATION;

CREATE TABLE W_STATION (
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_NAME nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WCZ nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EASTING decimal(9,3) NOT NULL,
	NORTHING decimal(9,3) NULL,
	LATITUDE decimal(10,7) NULL,
	LONGITUDE decimal(10,7) NULL,
	ACTIVE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_W_STATION PRIMARY KEY (STATION_ID)
);


-- WQPLIS.WPG.marine_water1_tmp1 definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.marine_water1_tmp1;

CREATE TABLE marine_water1_tmp1 (
	[ZONE] nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WCZ nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SUBZONE nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	STATION nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAM_NO decimal(2,0) NULL,
	D_CODE nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TEMPER decimal(38,6) NULL,
	PH_SC decimal(38,6) NULL,
	SAL decimal(38,6) NULL,
	COND decimal(38,6) NULL,
	DO decimal(38,6) NULL,
	DO_SAT decimal(38,6) NULL,
	FLSCUFA decimal(38,6) NULL,
	TURB_SC decimal(38,6) NULL,
	PAR decimal(38,12) NULL,
	L_BOD5 nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5 decimal(38,6) NULL,
	L_FC nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC float NULL,
	L_ECOLI nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ECOLI float NULL,
	L_PH_M nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH_M decimal(38,6) NULL,
	L_TURB_M nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TURB_M decimal(38,6) NULL,
	L_NH4 nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 decimal(38,6) NULL,
	L_NO2 nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 decimal(38,6) NULL,
	L_NO3 nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 decimal(38,6) NULL,
	L_TKN_S nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_S decimal(38,6) NULL,
	L_TKN_P nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_P decimal(38,6) NULL,
	L_TKN_SP nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_SP decimal(38,6) NULL,
	L_PO4 nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 decimal(38,6) NULL,
	L_TP_S nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_S decimal(38,6) NULL,
	L_TP_P nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_P decimal(38,6) NULL,
	L_TP_SP nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_SP decimal(38,6) NULL,
	L_SIO2 nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIO2 decimal(38,6) NULL,
	L_SS nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS decimal(38,6) NULL,
	L_TVS nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS decimal(38,6) NULL,
	L_CHL nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL decimal(38,6) NULL,
	L_PHAE nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHAE decimal(38,6) NULL,
	TIN decimal(38,6) NULL,
	TN decimal(38,6) NULL,
	NH3 decimal(38,8) NULL,
	SOL_RAD decimal(6,2) NULL,
	AIR_TEMP decimal(4,2) NULL,
	WIND_SP decimal(3,1) NULL,
	WIND_DIR decimal(4,1) NULL,
	SEA_COND nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SEA_COL nvarchar(11) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FISH_KILL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SD decimal(3,1) NULL,
	WEATHER nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4_NM numeric(38,11) NULL,
	NO2_NM numeric(38,11) NULL,
	NO3_NM numeric(38,11) NULL,
	TKN_NM numeric(38,11) NULL,
	NOX_NM numeric(38,11) NULL,
	TIN_NM numeric(38,11) NULL,
	TN_NM numeric(38,11) NULL,
	PO4_PM numeric(38,11) NULL,
	TP_PM numeric(38,11) NULL,
	TIN_PO4_MMR numeric(38,14) NULL,
	TN_TP_MMR numeric(38,14) NULL,
	VIEW_NO decimal(2,0) NULL
);


-- WQPLIS.WPG.BB_BC_S definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BB_BC_S;

CREATE TABLE BB_BC_S (
	BB_VISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	M_DATE smalldatetime NOT NULL,
	S_TIME decimal(4,0) NULL,
	SP_NAME nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	ABUNDANCE decimal(5,0) NULL,
	WEIGHT decimal(8,3) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_BB_BC_S PRIMARY KEY (BB_VISIT_ID),
	CONSTRAINT FK_BB_BC_S_BB_STATION FOREIGN KEY (STATION_ID) REFERENCES BB_STATION(STATION_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.BB_LB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BB_LB;

CREATE TABLE BB_LB (
	BB_VISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	M_DATE smalldatetime NULL,
	S_TIME decimal(4,0) NOT NULL,
	SAMPLE_NO decimal(2,0) NOT NULL,
	SP_NAME nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SPECIMEN decimal(3,0) NULL,
	SP_LENGTH decimal(6,0) NULL,
	WEIGHT decimal(15,2) NULL,
	SEX nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	REMARK nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_BB_LB PRIMARY KEY (BB_VISIT_ID),
	CONSTRAINT FK_BB_LB_BB_STATION FOREIGN KEY (STATION_ID) REFERENCES BB_STATION(STATION_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.BB_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BB_VISIT;

CREATE TABLE BB_VISIT (
	BB_VISIT_ID decimal(5,0) NOT NULL,
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	M_DATE smalldatetime NULL,
	S_TIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	S_METHOD nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	S_AREA nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	S_DIRECTION nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_BB_VISIT PRIMARY KEY (BB_VISIT_ID),
	CONSTRAINT FK_BB_VISIT_BB_STATION FOREIGN KEY (STATION_ID) REFERENCES BB_STATION(STATION_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.BM_BEACH definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_BEACH;

CREATE TABLE BM_BEACH (
	SITE_ID decimal(4,0) NOT NULL,
	BEACH_CODE nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BEACH_NAME nvarchar(52) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	CHINESE_NAME nvarchar(24) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SC_NAME nvarchar(24) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DISTRICT_CODE nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	RAIN_STATION_CODE nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TIDE_STATION_CODE nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	REMARK nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SZ_ID nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EASTING decimal(9,3) NULL,
	NORTHING decimal(9,3) NULL,
	LATITUDE decimal(10,7) NULL,
	LONGITUDE decimal(10,7) NULL,
	WCZ_CODE decimal(3,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_BEACH PRIMARY KEY (BEACH_CODE),
	CONSTRAINT PK_BEACH_ID UNIQUE (SITE_ID),
	CONSTRAINT FK_BM_BEACH_DISTRICT FOREIGN KEY (DISTRICT_CODE) REFERENCES BM_DISTRICT(DISTRICT_CODE),
	CONSTRAINT FK_BM_BEACH_RAIN_STATION FOREIGN KEY (RAIN_STATION_CODE) REFERENCES BM_RAIN_STATION(RAIN_STATION_CODE),
	CONSTRAINT FK_BM_BEACH_TIDE_STATION FOREIGN KEY (TIDE_STATION_CODE) REFERENCES BM_TIDE_STATION(TIDE_STATION_CODE)
);
CREATE UNIQUE NONCLUSTERED INDEX PK_BEACH_ID ON WQPLIS.WPG.BM_BEACH (SITE_ID);


-- WQPLIS.WPG.BM_BEACH_CONFIG definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_BEACH_CONFIG;

CREATE TABLE BM_BEACH_CONFIG (
	SITE_ID decimal(4,0) NOT NULL,
	BEACH_CODE nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BEACH_GROUP nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CLOSED nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DISTRICT_ORDER nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LIST_ORDER nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WQ_ORDER decimal(1,0) NULL,
	GRADE_CAT decimal(1,0) NULL,
	SOURCE_S1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SOURCE_S2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SOURCE_S3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SOURCE_S4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SOURCE_S5 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FRESHWATER_F1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FRESHWATER_F2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FRESHWATER_F3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FRESHWATER_F4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FRESHWATER_F5 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SPOINT_R nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SPOINT_M nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SPOINT_L nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SPOINT_O nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	LIST_ORDER_2 nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CONSTRAINT PK_BEACH_CONFIG PRIMARY KEY (BEACH_CODE),
	CONSTRAINT FK_BM_BEACH_CONFIG_BEACH FOREIGN KEY (BEACH_CODE) REFERENCES BM_BEACH(BEACH_CODE)
);


-- WQPLIS.WPG.BM_RAINFALL definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_RAINFALL;

CREATE TABLE BM_RAINFALL (
	SDATETIME smalldatetime NOT NULL,
	[DATE] smalldatetime NOT NULL,
	[HOUR] decimal(2,0) NULL,
	RAIN_STATION_CODE nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	RAINFALL decimal(5,1) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_RAINFALL PRIMARY KEY (SDATETIME,RAIN_STATION_CODE),
	CONSTRAINT FK_BM_RAINFALL_RAIN_STATION FOREIGN KEY (RAIN_STATION_CODE) REFERENCES BM_RAIN_STATION(RAIN_STATION_CODE)
);


-- WQPLIS.WPG.BM_TIDE definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_TIDE;

CREATE TABLE BM_TIDE (
	SDATETIME smalldatetime NOT NULL,
	[DATE] smalldatetime NOT NULL,
	STIME decimal(4,0) NOT NULL,
	[HOUR] decimal(4,2) NULL,
	TIDE_STATION_CODE nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TIDE_HEIGHT decimal(4,1) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TIDE PRIMARY KEY (SDATETIME,TIDE_STATION_CODE),
	CONSTRAINT FK_BM_TIDE_TIDE_STATION FOREIGN KEY (TIDE_STATION_CODE) REFERENCES BM_TIDE_STATION(TIDE_STATION_CODE)
);


-- WQPLIS.WPG.BM_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_VISIT;

CREATE TABLE BM_VISIT (
	ID int IDENTITY(1,1) NOT NULL,
	BMVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SITE_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_BM_VISIT UNIQUE (ID),
	CONSTRAINT UK_BMVISIT_ID UNIQUE (BMVISIT_ID),
	CONSTRAINT FK_BM_VISIT_BEACH FOREIGN KEY (SITE_ID) REFERENCES BM_BEACH(SITE_ID)
);
CREATE UNIQUE NONCLUSTERED INDEX PK_BM_VISIT ON WQPLIS.WPG.BM_VISIT (ID);
CREATE UNIQUE CLUSTERED INDEX UK_BMVISIT_ID ON WQPLIS.WPG.BM_VISIT (BMVISIT_ID);


-- WQPLIS.WPG.BM_VISIT_C definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_VISIT_C;

CREATE TABLE BM_VISIT_C (
	ID int IDENTITY(1,1) NOT NULL,
	BMVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SITE_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_BM_VISIT_C UNIQUE (ID),
	CONSTRAINT UK_BMVISIT_ID_C UNIQUE (BMVISIT_ID),
	CONSTRAINT FK_BM_VISIT_BEACH_C FOREIGN KEY (SITE_ID) REFERENCES BM_BEACH(SITE_ID)
);
CREATE UNIQUE NONCLUSTERED INDEX PK_BM_VISIT_C ON WQPLIS.WPG.BM_VISIT_C (ID);
CREATE UNIQUE CLUSTERED INDEX UK_BMVISIT_ID_C ON WQPLIS.WPG.BM_VISIT_C (BMVISIT_ID);


-- WQPLIS.WPG.BT_DI definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BT_DI;

CREATE TABLE BT_DI (
	BT_DI_ID nvarchar(17) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BT_VISIT_ID nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BT_SPCODE_ID nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SAMPLE_MARK nvarchar(17) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_TCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDF1 decimal(10,4) NULL,
	L_PECDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF1 decimal(10,4) NULL,
	L_PECDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDF2 decimal(10,4) NULL,
	L_PECDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PECDD1 decimal(10,4) NULL,
	L_HXCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF1 decimal(10,4) NULL,
	L_HXCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF2 decimal(10,4) NULL,
	L_HXCDF3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF3 decimal(10,4) NULL,
	L_HXCDF4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDF4 decimal(10,4) NULL,
	L_HXCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD1 decimal(10,4) NULL,
	L_HXCDD2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD2 decimal(10,4) NULL,
	L_HXCDD3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HXCDD3 decimal(10,4) NULL,
	L_HPCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDD1 decimal(10,4) NULL,
	L_HPCDF1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF1 decimal(10,4) NULL,
	L_HPCDF2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HPCDF2 decimal(10,4) NULL,
	L_OCDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDD decimal(10,4) NULL,
	L_OCDF nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OCDF decimal(10,4) NULL,
	DWR_DI decimal(5,3) NULL,
	L_TCDD1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCDD1 decimal(10,4) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_BT_DI PRIMARY KEY (BT_DI_ID),
	CONSTRAINT FK_BT_DI_BT_VISIT FOREIGN KEY (BT_VISIT_ID) REFERENCES BT_VISIT(BT_VISIT_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.BT_M definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BT_M;

CREATE TABLE BT_M (
	BT_M_ID nvarchar(17) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BT_VISIT_ID nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BT_SPCODE_ID nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SAMPLE_MARK nvarchar(17) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_AL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL decimal(10,4) NULL,
	L_ARSENIC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARSENIC decimal(10,4) NULL,
	L_B nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	B decimal(10,4) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(10,4) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(10,4) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(10,4) NULL,
	L_FE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE decimal(10,4) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(10,4) NULL,
	L_MN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN decimal(10,4) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(10,4) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(10,4) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(10,4) NULL,
	L_V nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	V decimal(10,4) NULL,
	L_AG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG decimal(10,4) NULL,
	L_CO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CO decimal(10,4) NULL,
	DWR_M decimal(5,3) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_BT_M PRIMARY KEY (BT_M_ID),
	CONSTRAINT FK_BT_M_BT_VISIT FOREIGN KEY (BT_VISIT_ID) REFERENCES BT_VISIT(BT_VISIT_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.EB_BC definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.EB_BC;

CREATE TABLE EB_BC (
	EB_VISIT_ID nvarchar(18) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	M_DATE smalldatetime NOT NULL,
	S_TIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NOT NULL,
	SP_NAME nvarchar(45) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DENSITY decimal(6,0) NULL,
	BIO_VOL decimal(15,2) NULL,
	SCAN nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_EB_BC PRIMARY KEY (EB_VISIT_ID),
	CONSTRAINT FK_EB_BC_E_STATION FOREIGN KEY (STATION_ID) REFERENCES E_STATION(STATION_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.MS_GLABM definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MS_GLABM;

CREATE TABLE MS_GLABM (
	MSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_AL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL decimal(10,2) NULL,
	L_ARSENIC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARSENIC decimal(3,1) NULL,
	L_BA nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BA decimal(5,1) NULL,
	L_B nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	B decimal(4,1) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(4,2) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(5,1) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(5,1) NULL,
	L_FE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE decimal(9,2) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(5,2) NULL,
	L_MN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN decimal(8,2) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(4,1) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(8,2) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(8,2) NULL,
	L_V nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	V decimal(5,1) NULL,
	L_AG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG decimal(5,2) NULL,
	L_CO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CO decimal(5,2) NULL,
	MSM_DWR decimal(4,2) NULL,
	L_BE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BE decimal(8,2) NULL,
	L_MO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MO decimal(8,2) NULL,
	L_SB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SB decimal(8,2) NULL,
	L_TL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TL decimal(8,2) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MS_GLABM PRIMARY KEY (MSVISIT_ID,[TYPE]),
	CONSTRAINT FK_MS_GLABM_MS_VISIT1 FOREIGN KEY (MSVISIT_ID) REFERENCES MS_VISIT(MSVISIT_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.MS_GLABN definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MS_GLABN;

CREATE TABLE MS_GLABN (
	MSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_NH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH decimal(7,3) NULL,
	L_TKN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN decimal(7,3) NULL,
	L_TP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP decimal(7,3) NULL,
	L_TVS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS decimal(5,2) NULL,
	L_TS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TS decimal(5,2) NULL,
	L_COD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COD decimal(9,2) NULL,
	L_SULPHIDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SULPHIDE decimal(6,2) NULL,
	L_TC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TC decimal(5,2) NULL,
	L_CN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CN decimal(4,2) NULL,
	L_SG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SG decimal(5,4) NULL,
	L_PH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH decimal(3,1) NULL,
	MSN_DWR decimal(4,2) NULL,
	L_TOC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOC decimal(5,2) NULL,
	L_TIC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TIC decimal(5,2) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MS_GLABN PRIMARY KEY (MSVISIT_ID,[TYPE]),
	CONSTRAINT FK_MS_GLABN_MS_VISIT1 FOREIGN KEY (MSVISIT_ID) REFERENCES MS_VISIT(MSVISIT_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.MS_GLABO definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MS_GLABO;

CREATE TABLE MS_GLABO (
	MSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB decimal(8,2) NULL,
	L_PAH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PAH decimal(11,2) NULL,
	L_FLUO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUO decimal(7,2) NULL,
	L_PHEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHEN decimal(7,2) NULL,
	L_ANTH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ANTH decimal(7,2) NULL,
	L_FLUT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUT decimal(9,2) NULL,
	L_PYRE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PYRE decimal(9,2) NULL,
	L_CHRY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHRY decimal(7,2) NULL,
	L_BANT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BANT decimal(7,2) NULL,
	L_ACEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACEN decimal(7,2) NULL,
	L_ACPH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACPH decimal(7,2) NULL,
	L_BBFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBFL decimal(7,2) NULL,
	L_BAFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BAFL decimal(7,2) NULL,
	L_BKFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BKFL decimal(7,2) NULL,
	L_BAPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BAPY decimal(9,2) NULL,
	L_BGPE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BGPE decimal(7,2) NULL,
	L_CP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CP decimal(7,2) NULL,
	L_BHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BHC decimal(7,2) NULL,
	L_HCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HCB decimal(7,2) NULL,
	L_HEPT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPT decimal(7,2) NULL,
	L_ALDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ALDR decimal(7,2) NULL,
	L_HEPO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPO decimal(7,2) NULL,
	L_ODDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDE decimal(7,2) NULL,
	L_ENDI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ENDI decimal(7,2) NULL,
	L_PDDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDE decimal(7,2) NULL,
	L_DIEL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DIEL decimal(7,2) NULL,
	L_ODDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDD decimal(7,2) NULL,
	L_ENDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ENDR decimal(7,2) NULL,
	L_END2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	END2 decimal(7,2) NULL,
	L_PDDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDD decimal(7,2) NULL,
	L_ODDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDT decimal(7,2) NULL,
	L_PDDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDT decimal(7,2) NULL,
	L_THM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	THM decimal(7,2) NULL,
	L_TCM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCM decimal(7,2) NULL,
	L_TCE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCE decimal(7,2) NULL,
	L_BDCM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BDCM decimal(7,2) NULL,
	L_BTCM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BTCM decimal(7,2) NULL,
	L_TRCE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TRCE decimal(7,2) NULL,
	L_CDBM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CDBM decimal(7,2) NULL,
	L_BROM nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BROM decimal(7,2) NULL,
	L_MDCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MDCB decimal(7,2) NULL,
	L_ODCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODCB decimal(7,2) NULL,
	L_THMS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	THMS decimal(7,2) NULL,
	L_ABHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ABHC decimal(7,2) NULL,
	L_BBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBHC decimal(7,2) NULL,
	L_GBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	GBHC decimal(7,2) NULL,
	L_DBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DBHC decimal(7,2) NULL,
	L_PCB28 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB28 decimal(7,2) NULL,
	L_PCB31 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB31 decimal(7,2) NULL,
	L_PCB52 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB52 decimal(7,2) NULL,
	L_PCB101 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB101 decimal(7,2) NULL,
	L_PCB105 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB105 decimal(7,2) NULL,
	L_PCB118 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB118 decimal(7,2) NULL,
	L_PCB128 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB128 decimal(7,2) NULL,
	L_PCB138 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB138 decimal(7,2) NULL,
	L_PCB149 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB149 decimal(7,2) NULL,
	L_PCB153 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB153 decimal(7,2) NULL,
	L_PCB156 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB156 decimal(7,2) NULL,
	L_PCB180 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB180 decimal(7,2) NULL,
	L_DAAN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DAAN decimal(7,2) NULL,
	L_INPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	INPY decimal(7,2) NULL,
	MSO_DWR decimal(4,2) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MS_GLABO PRIMARY KEY (MSVISIT_ID,[TYPE]),
	CONSTRAINT FK_MS_GLABO_MS_VISIT1 FOREIGN KEY (MSVISIT_ID) REFERENCES MS_VISIT(MSVISIT_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.MS_GLAB_OC definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MS_GLAB_OC;

CREATE TABLE MS_GLAB_OC (
	MSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_GBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	GBHC decimal(7,2) NULL,
	L_HCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HCB decimal(7,2) NULL,
	L_HEPT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPT decimal(7,2) NULL,
	L_ALDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ALDR decimal(7,2) NULL,
	L_HEPO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPO decimal(7,2) NULL,
	L_ODDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDE decimal(7,2) NULL,
	L_END1 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	END1 decimal(7,2) NULL,
	L_PDDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDE decimal(7,2) NULL,
	L_DIEL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DIEL decimal(7,2) NULL,
	L_ODDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDD decimal(7,2) NULL,
	L_ENDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ENDR decimal(7,2) NULL,
	L_END2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	END2 decimal(7,2) NULL,
	L_PDDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDD decimal(7,2) NULL,
	L_ODDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDT decimal(7,2) NULL,
	L_PDDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDT decimal(7,2) NULL,
	L_ABHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ABHC decimal(7,2) NULL,
	L_BBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBHC decimal(7,2) NULL,
	L_DBHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DBHC decimal(7,2) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MS_GLAB_OC PRIMARY KEY (MSVISIT_ID,[TYPE]),
	CONSTRAINT FK_MS_GLAB_OC_MS_VISIT1 FOREIGN KEY (MSVISIT_ID) REFERENCES MS_VISIT(MSVISIT_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.MS_GLAB_PAH definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MS_GLAB_PAH;

CREATE TABLE MS_GLAB_PAH (
	MSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_FLUO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUO decimal(13,2) NULL,
	L_PHEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHEN decimal(13,2) NULL,
	L_ANTH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ANTH decimal(13,2) NULL,
	L_FLUT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUT decimal(13,2) NULL,
	L_PYRE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PYRE decimal(13,2) NULL,
	L_CHRY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHRY decimal(13,2) NULL,
	L_BBFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBFL decimal(13,2) NULL,
	L_BKFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BKFL decimal(13,2) NULL,
	L_BAPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BAPY decimal(13,2) NULL,
	L_BGPE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BGPE decimal(13,2) NULL,
	L_ACPH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACPH decimal(13,2) NULL,
	L_ACEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ACEN decimal(13,2) NULL,
	L_DAAN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DAAN decimal(13,2) NULL,
	L_BANT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BANT decimal(13,2) NULL,
	L_INPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	INPY decimal(13,2) NULL,
	L_PAH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PAH decimal(13,2) NULL,
	L_NAPH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NAPH decimal(13,2) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MS_GLAB_PAH PRIMARY KEY (MSVISIT_ID,[TYPE]),
	CONSTRAINT FK_MS_GLAB_PAH_MS_VISIT1 FOREIGN KEY (MSVISIT_ID) REFERENCES MS_VISIT(MSVISIT_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.MS_GLAB_PCB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MS_GLAB_PCB;

CREATE TABLE MS_GLAB_PCB (
	MSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MSO_DWR decimal(4,2) NULL,
	L_PCB8 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB8 decimal(7,2) NULL,
	L_PCB18 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB18 decimal(7,2) NULL,
	L_PCB28 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB28 decimal(7,2) NULL,
	L_PCB31 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB31 decimal(7,2) NULL,
	L_PCB44 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB44 decimal(7,2) NULL,
	L_PCB52 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB52 decimal(7,2) NULL,
	L_PCB66 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB66 decimal(7,2) NULL,
	L_PCB77 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB77 decimal(7,2) NULL,
	L_PCB101 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB101 decimal(7,2) NULL,
	L_PCB105 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB105 decimal(7,2) NULL,
	L_PCB118 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB118 decimal(7,2) NULL,
	L_PCB126 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB126 decimal(7,2) NULL,
	L_PCB128 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB128 decimal(7,2) NULL,
	L_PCB138 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB138 decimal(7,2) NULL,
	L_PCB149 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB149 decimal(7,2) NULL,
	L_PCB153 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB153 decimal(7,2) NULL,
	L_PCB156 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB156 decimal(7,2) NULL,
	L_PCB169 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB169 decimal(7,2) NULL,
	L_PCB170 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB170 decimal(7,2) NULL,
	L_PCB180 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB180 decimal(7,2) NULL,
	L_PCB187 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB187 decimal(7,2) NULL,
	L_PCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB decimal(7,2) NULL,
	L_PCB81 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB81 decimal(7,2) NULL,
	L_PCB114 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB114 decimal(7,2) NULL,
	L_PCB123 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB123 decimal(7,2) NULL,
	L_PCB167 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB167 decimal(7,2) NULL,
	L_PCB189 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB189 decimal(7,2) NULL,
	L_PCB157 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB157 decimal(7,2) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MS_GLAB_PCB PRIMARY KEY (MSVISIT_ID,[TYPE]),
	CONSTRAINT FK_MS_GLAB_PCB_MS_VISIT1 FOREIGN KEY (MSVISIT_ID) REFERENCES MS_VISIT(MSVISIT_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.MS_OTHER definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MS_OTHER;

CREATE TABLE MS_OTHER (
	FIELD_NAME nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_FIELD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FIELD_VALUE decimal(22,6) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MS_OTHER PRIMARY KEY (FIELD_NAME,MSVISIT_ID,[TYPE]),
	CONSTRAINT FK_MS_OTHER_MS_VISIT1 FOREIGN KEY (MSVISIT_ID) REFERENCES MS_VISIT(MSVISIT_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.MS_PS definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MS_PS;

CREATE TABLE MS_PS (
	MSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EH decimal(18,1) NULL,
	SZ_63 decimal(5,2) NULL,
	SZ_125 decimal(5,2) NULL,
	SZ_250 decimal(5,2) NULL,
	SZ_500 decimal(5,2) NULL,
	SZ_1000 decimal(5,2) NULL,
	SZ_2000 decimal(5,2) NULL,
	SZ_4000 decimal(5,2) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MS_PS PRIMARY KEY (MSVISIT_ID),
	CONSTRAINT FK_MS_PS_MS_VISIT FOREIGN KEY (MSVISIT_ID) REFERENCES MS_VISIT(MSVISIT_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.RIVER definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RIVER;

CREATE TABLE RIVER (
	R_ID nvarchar(4) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	ZONE_ID nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	RIVER_NAME nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHINESE_NAME nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	RIVER_ID decimal(5,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_RIVER PRIMARY KEY (R_ID),
	CONSTRAINT FK_RIVER_TEN_ZONE FOREIGN KEY (ZONE_ID) REFERENCES TEN_ZONE(ZONE_ID)
);


-- WQPLIS.WPG.RS_GLABM definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RS_GLABM;

CREATE TABLE RS_GLABM (
	RSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	RSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_AL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL decimal(22,6) NULL,
	L_ARSENIC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARSENIC decimal(22,6) NULL,
	L_AG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG decimal(22,6) NULL,
	L_B nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	B decimal(22,6) NULL,
	L_BA nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BA decimal(22,6) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(22,6) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(22,6) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(22,6) NULL,
	L_FE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE decimal(22,6) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(22,6) NULL,
	L_MN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN decimal(22,6) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(22,6) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(22,6) NULL,
	L_V nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	V decimal(22,6) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(22,6) NULL,
	L_SB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SB decimal(22,6) NULL,
	L_BE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BE decimal(22,6) NULL,
	L_TL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TL decimal(22,6) NULL,
	L_MO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MO decimal(22,6) NULL,
	L_DWR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DWR decimal(22,6) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_RS_GLABM PRIMARY KEY (RSVISIT_ID),
	CONSTRAINT FK_RS_GLABM_RS_VISIT1 FOREIGN KEY (RSVISIT_ID) REFERENCES RS_VISIT(RSVISIT_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.RS_GLABN definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RS_GLABN;

CREATE TABLE RS_GLABN (
	RSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	RSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_TS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TS decimal(22,6) NULL,
	L_TVS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS decimal(22,6) NULL,
	L_TC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TC decimal(22,6) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_RS_GLABN PRIMARY KEY (RSVISIT_ID),
	CONSTRAINT FK_RS_GLABN_RS_VISIT1 FOREIGN KEY (RSVISIT_ID) REFERENCES RS_VISIT(RSVISIT_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.RS_OTHER definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RS_OTHER;

CREATE TABLE RS_OTHER (
	FIELD_NAME nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	RSVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	RSVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_FIELD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FIELD_VALUE decimal(22,6) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_RS_OTHER PRIMARY KEY (FIELD_NAME,RSVISIT_ID),
	CONSTRAINT FK_RS_OTHER_RS_VISIT1 FOREIGN KEY (RSVISIT_ID) REFERENCES RS_VISIT(RSVISIT_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.TABLE_PROJECT_RELATION definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.TABLE_PROJECT_RELATION;

CREATE TABLE TABLE_PROJECT_RELATION (
	PROJECT_ID nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TABLE_NAME nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_TABLE_PROJECT_RELATION PRIMARY KEY (PROJECT_ID,TABLE_NAME),
	CONSTRAINT FK_TABLE_PROJECT_RELATION_PROJECT_INFO FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT_INFO(PROJECT_ID),
	CONSTRAINT FK_TABLE_PROJECT_RELATION_TABLE_INFO FOREIGN KEY (TABLE_NAME) REFERENCES TABLE_INFO(NAME) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.WB_BC_B definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.WB_BC_B;

CREATE TABLE WB_BC_B (
	WB_VISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	M_DATE smalldatetime NOT NULL,
	S_TIME decimal(4,0) NULL,
	SAMPLE nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SP_NAME nvarchar(45) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	ABUNDANCE decimal(4,0) NULL,
	WEIGHT decimal(8,3) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT FK_WB_BC_B_W_STATION FOREIGN KEY (STATION_ID) REFERENCES W_STATION(STATION_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.WB_LB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.WB_LB;

CREATE TABLE WB_LB (
	WB_VISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	M_DATE smalldatetime NOT NULL,
	S_TIME decimal(4,0) NULL,
	SAMPLE nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SP_NAME nvarchar(45) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SPEC_NO decimal(3,0) NOT NULL,
	SP_LENGTH decimal(6,0) NULL,
	WEIGHT decimal(15,2) NULL,
	SEX nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	REMARK nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_WB_LB PRIMARY KEY (WB_VISIT_ID),
	CONSTRAINT FK_WB_LB_W_STATION FOREIGN KEY (STATION_ID) REFERENCES W_STATION(STATION_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.WPCO_WCZ definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.WPCO_WCZ;

CREATE TABLE WPCO_WCZ (
	WCZ_ID nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	ZONE_ID nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WCZ_NAME nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHINESE_NAME nvarchar(40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WCZ_LABEL nvarchar(4) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WCZ_ABBR nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FAD smalldatetime NULL,
	WCZ_CODE decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_WPCO_WCZ PRIMARY KEY (WCZ_ID),
	CONSTRAINT FK_WPCO_WCZ_TEN_ZONE FOREIGN KEY (ZONE_ID) REFERENCES TEN_ZONE(ZONE_ID)
);


-- WQPLIS.WPG.WS_NM definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.WS_NM;

CREATE TABLE WS_NM (
	W_VISIT_ID nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	M_DATE smalldatetime NOT NULL,
	S_TIME decimal(4,0) NULL,
	SAMPLES decimal(2,0) NULL,
	[DEPTH] nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	S_TYPE nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PL_4UM decimal(6,3) NULL,
	P4_16UM decimal(6,3) NULL,
	P16_63UM decimal(6,3) NULL,
	P63_500UM decimal(6,3) NULL,
	PG_500UM decimal(6,3) NULL,
	REDOX decimal(8,3) NULL,
	SILT decimal(8,3) NULL,
	POROSITY decimal(8,3) NULL,
	TOC decimal(8,3) NULL,
	TP decimal(8,3) NULL,
	TKN decimal(8,3) NULL,
	L_AL nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL decimal(8,3) NULL,
	L_ARSENIC nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARSENIC decimal(8,3) NULL,
	L_CR nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(8,3) NULL,
	L_CU nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(8,3) NULL,
	L_MN nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN decimal(8,3) NULL,
	L_NI nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(8,3) NULL,
	L_FE nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE decimal(8,3) NULL,
	L_PB nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(8,3) NULL,
	L_ZN nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(8,3) NULL,
	L_CD nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(8,3) NULL,
	L_HG nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(8,3) NULL,
	IGNI decimal(8,3) NULL,
	LAD nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AD decimal(8,3) NULL,
	LCP nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CP decimal(10,3) NULL,
	LECOLI nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ECOLI decimal(8,3) NULL,
	LFCOLI nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FCOLI decimal(8,3) NULL,
	LPH nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH decimal(8,3) NULL,
	TTP decimal(8,3) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT FK_WS_NM_W_STATION FOREIGN KEY (STATION_ID) REFERENCES W_STATION(STATION_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.WS_O definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.WS_O;

CREATE TABLE WS_O (
	W_VISIT_ID nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	M_DATE smalldatetime NOT NULL,
	S_TIME decimal(4,0) NULL,
	SAMPLES decimal(4,0) NULL,
	[DEPTH] nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	S_TYPE nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_PAH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PAH decimal(8,3) NULL,
	L_FLUO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUO decimal(8,3) NULL,
	L_PHEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHEN decimal(8,3) NULL,
	L_ANTH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ANTH decimal(8,3) NULL,
	L_FLUT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUT decimal(8,3) NULL,
	L_PYRE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PYRE decimal(8,3) NULL,
	L_CHRY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHRY decimal(8,3) NULL,
	L_BBFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBFL decimal(8,3) NULL,
	L_BKFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BKFL decimal(8,3) NULL,
	L_BAPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BAPY decimal(8,3) NULL,
	L_BGPE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BGPE decimal(8,3) NULL,
	L_PCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB decimal(8,3) NULL,
	L_BHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BHC decimal(8,3) NULL,
	L_HEPT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPT decimal(8,3) NULL,
	L_HEPO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPO decimal(8,3) NULL,
	L_ODDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDE decimal(8,3) NULL,
	L_PDDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDE decimal(8,3) NULL,
	L_ODDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDD decimal(8,3) NULL,
	L_ODDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDT decimal(8,3) NULL,
	L_PDDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDD decimal(8,3) NULL,
	L_PDDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDT decimal(8,3) NULL,
	L_ENDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ENDR decimal(8,3) NULL,
	L_THMS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	THMS decimal(8,3) NULL,
	L_TTCE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TTCE decimal(8,3) NULL,
	L_TRCE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TRCE decimal(8,3) NULL,
	L_MDCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MDCB decimal(8,3) NULL,
	L_ODCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODCB decimal(8,3) NULL,
	L_ALDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ALDR decimal(8,3) NULL,
	LT_CHS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	T_CHS decimal(8,3) NULL,
	LHCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HCB decimal(8,3) NULL,
	LT_OCPS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	T_OCPS decimal(8,3) NULL,
	TODWR decimal(8,3) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT FK_WS_O_W_STATION FOREIGN KEY (STATION_ID) REFERENCES W_STATION(STATION_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.WT_M definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.WT_M;

CREATE TABLE WT_M (
	W_VISIT_ID nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	M_DATE smalldatetime NOT NULL,
	S_TIME decimal(4,0) NULL,
	SP_NAME nvarchar(45) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TISSUE nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SAMPLE decimal(4,0) NULL,
	L_AL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL decimal(8,3) NULL,
	L_ARSENIC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARSENIC decimal(8,3) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(8,3) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(8,3) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(8,3) NULL,
	L_FE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE decimal(8,3) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(8,3) NULL,
	L_MN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN decimal(8,3) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(8,3) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(8,3) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(8,3) NULL,
	POOLING nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SCODE nvarchar(6) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG decimal(8,3) NULL,
	LV nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	V decimal(8,3) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT FK_WT_M_W_STATION FOREIGN KEY (STATION_ID) REFERENCES W_STATION(STATION_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.WT_O definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.WT_O;

CREATE TABLE WT_O (
	W_VISIT_ID nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	M_DATE smalldatetime NOT NULL,
	S_TIME decimal(4,0) NULL,
	SP_NAME nvarchar(45) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TISSUE nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SAMPLE decimal(4,0) NULL,
	L_PAH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PAH decimal(8,3) NULL,
	L_FLUO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUO decimal(8,3) NULL,
	L_PHEN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHEN decimal(8,3) NULL,
	L_ANTH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ANTH decimal(8,3) NULL,
	L_FLUT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLUT decimal(8,3) NULL,
	L_PYRE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PYRE decimal(8,3) NULL,
	L_CHRY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHRY decimal(8,3) NULL,
	L_BBFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BBFL decimal(8,3) NULL,
	L_BKFL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BKFL decimal(8,3) NULL,
	L_BAPY nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BAPY decimal(8,3) NULL,
	L_BGPE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BGPE decimal(8,3) NULL,
	L_PCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PCB decimal(8,3) NULL,
	L_BHC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BHC decimal(8,3) NULL,
	L_HEPT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPT decimal(8,3) NULL,
	L_HEPO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HEPO decimal(8,3) NULL,
	L_ODDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDE decimal(8,3) NULL,
	L_PDDE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDE decimal(8,3) NULL,
	L_ODDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDD decimal(8,3) NULL,
	L_ODDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODDT decimal(8,3) NULL,
	L_PDDD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDD decimal(8,3) NULL,
	L_PDDT nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PDDT decimal(8,3) NULL,
	L_ENDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ENDR decimal(8,3) NULL,
	L_THMS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	THMS decimal(8,3) NULL,
	L_TTCE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TTCE decimal(8,3) NULL,
	L_TRCE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TRCE decimal(8,3) NULL,
	L_MDCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MDCB decimal(8,3) NULL,
	L_ODCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ODCB decimal(8,3) NULL,
	L_ALDR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ALDR decimal(8,3) NULL,
	LHCB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HCB decimal(8,3) NULL,
	LT_CHS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	T_CHS decimal(8,3) NULL,
	LT_OCPS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	T_OCPS decimal(8,3) NULL,
	LT_PAHS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	T_PAHS decimal(8,3) NULL,
	POOLING nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TODWR decimal(8,3) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT FK_WT_O_W_STATION FOREIGN KEY (STATION_ID) REFERENCES W_STATION(STATION_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.WW_NM definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.WW_NM;

CREATE TABLE WW_NM (
	W_VISIT_ID nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	M_DATE smalldatetime NOT NULL,
	S_TIME decimal(4,0) NULL,
	SAMPLES decimal(2,0) NULL,
	[DEPTH] nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TEMPERATURE decimal(6,2) NULL,
	SALINITY decimal(6,2) NULL,
	DO decimal(6,2) NULL,
	DO_S decimal(6,2) NULL,
	BOD decimal(6,2) NULL,
	PH decimal(6,2) NULL,
	TURB decimal(6,2) NULL,
	L_NH4 nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 decimal(8,3) NULL,
	L_NO2 nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 decimal(8,3) NULL,
	L_NO3 nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 decimal(8,3) NULL,
	L_TKN nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN decimal(8,3) NULL,
	L_TKNSP nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKNSP decimal(8,3) NULL,
	L_PO4 nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 decimal(8,3) NULL,
	L_TPS nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TPS decimal(8,3) NULL,
	L_TPSP nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TPSP decimal(8,3) NULL,
	L_SILICA nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SILICA decimal(8,3) NULL,
	L_SS nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS decimal(8,3) NULL,
	L_TVS nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS decimal(8,3) NULL,
	L_TS nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TS decimal(8,3) NULL,
	CHL decimal(8,3) NULL,
	PHAE decimal(8,3) NULL,
	L_FCOLI nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FCOLI decimal(8,3) NULL,
	L_EC nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EC decimal(8,3) NULL,
	L_AL nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL decimal(8,3) NULL,
	L_ARSENIC nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARSENIC decimal(8,3) NULL,
	L_CD nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(8,3) NULL,
	L_CR nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(8,3) NULL,
	L_CU nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(8,3) NULL,
	L_FE nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE decimal(8,3) NULL,
	L_HG nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(8,3) NULL,
	L_MN nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN decimal(8,3) NULL,
	L_NI nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(8,3) NULL,
	L_PB nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(8,3) NULL,
	L_ZN nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(8,3) NULL,
	LCON nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CON decimal(8,3) NULL,
	LTIN nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TIN decimal(8,3) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT FK_WW_NM_W_STATION FOREIGN KEY (STATION_ID) REFERENCES W_STATION(STATION_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.W_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.W_VISIT;

CREATE TABLE W_VISIT (
	W_VISIT_ID decimal(5,0) NOT NULL,
	STATION_ID nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	M_DATE smalldatetime NOT NULL,
	S_TIME decimal(4,0) NULL,
	SAMPLES nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_W_VISIT PRIMARY KEY (W_VISIT_ID),
	CONSTRAINT FK_W_VISIT_W_STATION FOREIGN KEY (STATION_ID) REFERENCES W_STATION(STATION_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WQPLIS.WPG.BM_ENTRC_SUMMARY_C definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_ENTRC_SUMMARY_C;

CREATE TABLE BM_ENTRC_SUMMARY_C (
	ID int IDENTITY(1,1) NOT NULL,
	BMVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BEACH_CODE nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SAMPLE_DATE smalldatetime NOT NULL,
	G_MEAN decimal(9,0) NULL,
	R_G_MEAN decimal(9,0) NULL,
	LOG_G_MEAN decimal(12,8) NULL,
	ADJ_LOG_GM decimal(12,8) NULL,
	MOVE_AVG decimal(12,8) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_ENTRC_SUMMARY_C UNIQUE (ID),
	CONSTRAINT UK_BMVISIT_ID_ENTRC_SUMMARY_C UNIQUE (BMVISIT_ID),
	CONSTRAINT FK_BM_ENTRC_SUMMARY_VISIT_C FOREIGN KEY (BMVISIT_ID) REFERENCES BM_VISIT_C(BMVISIT_ID)
);
CREATE UNIQUE NONCLUSTERED INDEX PK_ENTRC_SUMMARY_C ON WQPLIS.WPG.BM_ENTRC_SUMMARY_C (ID);
CREATE UNIQUE CLUSTERED INDEX UK_BMVISIT_ID_ENTRC_SUMMARY_C ON WQPLIS.WPG.BM_ENTRC_SUMMARY_C (BMVISIT_ID);


-- WQPLIS.WPG.BM_FIELD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_FIELD;

CREATE TABLE BM_FIELD (
	ID int IDENTITY(1,1) NOT NULL,
	BMVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BEACH_CODE nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SAMPLE_DATE smalldatetime NOT NULL,
	SAMPLE_TIME nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TEMPER decimal(3,1) NULL,
	DO decimal(4,2) NULL,
	DOS decimal(4,1) NULL,
	WEATHER_VALUE decimal(1,0) NULL,
	WIND_VALUE decimal(1,0) NULL,
	CLIMATE_VALUE decimal(1,0) NULL,
	SEA_CLARITY_VALUE decimal(1,0) NULL,
	SEA_CONDITION_VALUE decimal(1,0) NULL,
	WIND_DIRECTION nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BATHER_VALUE decimal(1,0) NULL,
	TIDE_VALUE decimal(1,0) NULL,
	TIDE_RATIO decimal(5,2) NULL,
	TIDE_HEIGHT decimal(5,2) NULL,
	ABS_TIDE_HEIGHT decimal(5,2) NULL,
	REMARKS nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DAYAPPEND smalldatetime NULL,
	DAYEDIT smalldatetime NULL,
	DAYUPLOAD smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	MREFUSE_CLEANLINES_LEVEL decimal(1,0) NULL,
	CONSTRAINT PK_BM_FIELD UNIQUE (ID),
	CONSTRAINT UK_BEACH_CODE_FIELD UNIQUE (BEACH_CODE,SAMPLE_DATE),
	CONSTRAINT UK_BMVISIT_ID_FIELD UNIQUE (BMVISIT_ID),
	CONSTRAINT FK_BM_FIELD_VISIT FOREIGN KEY (BMVISIT_ID) REFERENCES BM_VISIT(BMVISIT_ID)
);
CREATE UNIQUE NONCLUSTERED INDEX PK_BM_FIELD ON WQPLIS.WPG.BM_FIELD (ID);
CREATE UNIQUE NONCLUSTERED INDEX UK_BEACH_CODE_FIELD ON WQPLIS.WPG.BM_FIELD (BEACH_CODE, SAMPLE_DATE);
CREATE UNIQUE CLUSTERED INDEX UK_BMVISIT_ID_FIELD ON WQPLIS.WPG.BM_FIELD (BMVISIT_ID);


-- WQPLIS.WPG.BM_FIELD_C definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_FIELD_C;

CREATE TABLE BM_FIELD_C (
	ID int IDENTITY(1,1) NOT NULL,
	BMVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BEACH_CODE nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SAMPLE_DATE smalldatetime NOT NULL,
	SAMPLE_TIME nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TEMPER decimal(3,1) NULL,
	DO decimal(4,2) NULL,
	DOS decimal(4,1) NULL,
	WEATHER_VALUE decimal(1,0) NULL,
	WIND_VALUE decimal(1,0) NULL,
	CLIMATE_VALUE decimal(1,0) NULL,
	SEA_CLARITY_VALUE decimal(1,0) NULL,
	SEA_CONDITION_VALUE decimal(1,0) NULL,
	WIND_DIRECTION nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BATHER_VALUE decimal(1,0) NULL,
	TIDE_VALUE decimal(1,0) NULL,
	TIDE_RATIO decimal(5,2) NULL,
	TIDE_HEIGHT decimal(5,2) NULL,
	ABS_TIDE_HEIGHT decimal(5,2) NULL,
	REMARKS nvarchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DAYAPPEND smalldatetime NULL,
	DAYEDIT smalldatetime NULL,
	DAYUPLOAD smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_BM_FIELD_C UNIQUE (ID),
	CONSTRAINT UK_BEACH_CODE_FIELD_C UNIQUE (BEACH_CODE,SAMPLE_DATE),
	CONSTRAINT UK_BMVISIT_ID_FIELD_C UNIQUE (BMVISIT_ID),
	CONSTRAINT FK_BM_FIELD_VISIT_C FOREIGN KEY (BMVISIT_ID) REFERENCES BM_VISIT_C(BMVISIT_ID)
);
CREATE UNIQUE NONCLUSTERED INDEX PK_BM_FIELD_C ON WQPLIS.WPG.BM_FIELD_C (ID);
CREATE UNIQUE NONCLUSTERED INDEX UK_BEACH_CODE_FIELD_C ON WQPLIS.WPG.BM_FIELD_C (BEACH_CODE, SAMPLE_DATE);
CREATE UNIQUE CLUSTERED INDEX UK_BMVISIT_ID_FIELD_C ON WQPLIS.WPG.BM_FIELD_C (BMVISIT_ID);


-- WQPLIS.WPG.BM_FLOW_20140102_bak definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_FLOW_20140102_bak;

CREATE TABLE BM_FLOW_20140102_bak (
	ID int IDENTITY(1,1) NOT NULL,
	BMVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SOURCE_CODE nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	FLOW_CODE nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_BM_FLOW UNIQUE (ID),
	CONSTRAINT UK_BMVISIT_ID_FLOW UNIQUE (BMVISIT_ID,SOURCE_CODE),
	CONSTRAINT FK_BM_FLOW_VISIT FOREIGN KEY (BMVISIT_ID) REFERENCES BM_VISIT(BMVISIT_ID)
);
CREATE UNIQUE NONCLUSTERED INDEX PK_BM_FLOW ON WQPLIS.WPG.BM_FLOW_20140102_bak (ID);
CREATE UNIQUE CLUSTERED INDEX UK_BMVISIT_ID_FLOW ON WQPLIS.WPG.BM_FLOW_20140102_bak (BMVISIT_ID, SOURCE_CODE);


-- WQPLIS.WPG.BM_MLAB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_MLAB;

CREATE TABLE BM_MLAB (
	ID int IDENTITY(1,1) NOT NULL,
	BMVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BEACH_CODE nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SAMPLE_DATE smalldatetime NOT NULL,
	LOCATION_CODE nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	PH decimal(4,2) NULL,
	SAL decimal(4,2) NULL,
	TURB decimal(6,2) NULL,
	L_FC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC decimal(9,0) NULL,
	L_EC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EC decimal(9,0) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_BM_MLAB PRIMARY KEY (ID),
	CONSTRAINT UK_BEACH_CODE_MLAB UNIQUE (BEACH_CODE,LOCATION_CODE,SAMPLE_DATE),
	CONSTRAINT UK_BMVISIT_ID_MLAB UNIQUE (BMVISIT_ID,LOCATION_CODE),
	CONSTRAINT FK_BM_MLAB_VISIT FOREIGN KEY (BMVISIT_ID) REFERENCES BM_VISIT(BMVISIT_ID)
);
CREATE UNIQUE NONCLUSTERED INDEX UK_BEACH_CODE_MLAB ON WQPLIS.WPG.BM_MLAB (BEACH_CODE, LOCATION_CODE, SAMPLE_DATE);
CREATE UNIQUE CLUSTERED INDEX UK_BMVISIT_ID_MLAB ON WQPLIS.WPG.BM_MLAB (BMVISIT_ID, LOCATION_CODE);


-- WQPLIS.WPG.BM_MLAB_C definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_MLAB_C;

CREATE TABLE BM_MLAB_C (
	ID int IDENTITY(1,1) NOT NULL,
	BMVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BEACH_CODE nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SAMPLE_DATE smalldatetime NOT NULL,
	LOCATION_CODE nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	PH decimal(4,2) NULL,
	SAL decimal(4,2) NULL,
	TURB decimal(6,2) NULL,
	L_FC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC decimal(9,0) NULL,
	L_EC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EC decimal(9,0) NULL,
	EST_EC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	L_ENTRC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ENTRC decimal(9,0) NULL,
	EST_ENTRC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_BM_MLAB_C PRIMARY KEY (ID),
	CONSTRAINT UK_BMVISIT_ID_MLAB_C UNIQUE (BMVISIT_ID,LOCATION_CODE),
	CONSTRAINT FK_BM_MLAB_VISIT_C FOREIGN KEY (BMVISIT_ID) REFERENCES BM_VISIT_C(BMVISIT_ID)
);
CREATE UNIQUE CLUSTERED INDEX UK_BMVISIT_ID_MLAB_C ON WQPLIS.WPG.BM_MLAB_C (BMVISIT_ID, LOCATION_CODE);


-- WQPLIS.WPG.BM_MLAB_SUMMARY definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_MLAB_SUMMARY;

CREATE TABLE BM_MLAB_SUMMARY (
	ID int IDENTITY(1,1) NOT NULL,
	BMVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BEACH_CODE nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SAMPLE_DATE smalldatetime NOT NULL,
	PH decimal(4,2) NULL,
	SAL decimal(4,2) NULL,
	TURB decimal(6,2) NULL,
	G_MEAN decimal(9,0) NULL,
	R_G_MEAN decimal(9,0) NULL,
	GRADE decimal(2,0) NULL,
	GRADE_CHANGE decimal(1,0) NULL,
	TRG_LIMIT_1 nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TRG_LIMIT_2 nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TRG_LIMIT_3 nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TRG_LIMIT_4 nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LOG_G_MEAN decimal(12,8) NULL,
	ADJ_LOG_GM decimal(12,8) NULL,
	MOVE_AVG decimal(12,8) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	G_MEAN_FC decimal(9,0) NULL,
	R_G_MEAN_FC decimal(9,0) NULL,
	LOG_G_MEAN_FC decimal(12,8) NULL,
	ADJ_LOG_GM_FC decimal(12,8) NULL,
	MOVE_AVG_FC decimal(12,8) NULL,
	SAL_R decimal(4,2) NULL,
	SAL_M decimal(4,2) NULL,
	SAL_L decimal(4,2) NULL,
	SAL_O decimal(4,2) NULL,
	MTH_G_MEAN decimal(9,0) NULL,
	MTH_G_MEAN_FC decimal(9,0) NULL,
	WK_G_MEAN decimal(9,0) NULL,
	WK_G_MEAN_FC decimal(9,0) NULL,
	CONSTRAINT PK_MLAB_SUMMARY UNIQUE (ID),
	CONSTRAINT UK_BEACH_CODE_MLAB_SUMMARY UNIQUE (BEACH_CODE,SAMPLE_DATE),
	CONSTRAINT UK_BMVISIT_ID_MLAB_SUMMARY UNIQUE (BMVISIT_ID),
	CONSTRAINT FK_BM_MLAB_SUMMARY_VISIT FOREIGN KEY (BMVISIT_ID) REFERENCES BM_VISIT(BMVISIT_ID)
);
CREATE UNIQUE NONCLUSTERED INDEX PK_MLAB_SUMMARY ON WQPLIS.WPG.BM_MLAB_SUMMARY (ID);
CREATE UNIQUE NONCLUSTERED INDEX UK_BEACH_CODE_MLAB_SUMMARY ON WQPLIS.WPG.BM_MLAB_SUMMARY (BEACH_CODE, SAMPLE_DATE);
CREATE UNIQUE CLUSTERED INDEX UK_BMVISIT_ID_MLAB_SUMMARY ON WQPLIS.WPG.BM_MLAB_SUMMARY (BMVISIT_ID);


-- WQPLIS.WPG.BM_MLAB_SUMMARY_C definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_MLAB_SUMMARY_C;

CREATE TABLE BM_MLAB_SUMMARY_C (
	ID int IDENTITY(1,1) NOT NULL,
	BMVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BEACH_CODE nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SAMPLE_DATE smalldatetime NOT NULL,
	PH decimal(4,2) NULL,
	SAL decimal(4,2) NULL,
	TURB decimal(6,2) NULL,
	G_MEAN decimal(9,0) NULL,
	R_G_MEAN decimal(9,0) NULL,
	GRADE decimal(2,0) NULL,
	GRADE_CHANGE decimal(1,0) NULL,
	TRG_LIMIT_1 nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TRG_LIMIT_2 nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TRG_LIMIT_3 nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TRG_LIMIT_4 nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LOG_G_MEAN decimal(12,8) NULL,
	ADJ_LOG_GM decimal(12,8) NULL,
	MOVE_AVG decimal(12,8) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_MLAB_SUMMARY_C UNIQUE (ID),
	CONSTRAINT UK_BMVISIT_ID_MLAB_SUMMARY_C UNIQUE (BMVISIT_ID),
	CONSTRAINT FK_BM_MLAB_SUMMARY_VISIT_C FOREIGN KEY (BMVISIT_ID) REFERENCES BM_VISIT_C(BMVISIT_ID)
);
CREATE UNIQUE NONCLUSTERED INDEX PK_MLAB_SUMMARY_C ON WQPLIS.WPG.BM_MLAB_SUMMARY_C (ID);
CREATE UNIQUE CLUSTERED INDEX UK_BMVISIT_ID_MLAB_SUMMARY_C ON WQPLIS.WPG.BM_MLAB_SUMMARY_C (BMVISIT_ID);


-- WQPLIS.WPG.BM_RAIN definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_RAIN;

CREATE TABLE BM_RAIN (
	ID int IDENTITY(1,1) NOT NULL,
	BMVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BEACH_CODE nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SDATETIME smalldatetime NOT NULL,
	RAIN_STATION_CODE nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	RAINFALL decimal(5,1) NULL,
	RAINFALL_MAX_3HR decimal(5,1) NULL,
	RAINFALL_MAX_TIME smalldatetime NULL,
	RAINFALL_LAST_12HR decimal(5,1) NULL,
	RAINFALL_LAST_24HR decimal(5,1) NULL,
	RAINFALL_LAST_72HR decimal(5,1) NULL,
	RISK_RAIN_MAX_3HR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	RISK_RAIN_LAST_12HR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	RISK_RAIN_LAST_24HR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	RISK_RAIN_LAST_72HR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_BM_RAIN UNIQUE (ID),
	CONSTRAINT UK_BEACH_CODE_RAIN UNIQUE (BEACH_CODE,SDATETIME),
	CONSTRAINT UK_BMVISIT_ID_RAIN UNIQUE (BMVISIT_ID),
	CONSTRAINT FK_BM_RAIN_RAIN_STATION FOREIGN KEY (RAIN_STATION_CODE) REFERENCES BM_RAIN_STATION(RAIN_STATION_CODE),
	CONSTRAINT FK_BM_RAIN_VISIT FOREIGN KEY (BMVISIT_ID) REFERENCES BM_VISIT(BMVISIT_ID)
);
CREATE UNIQUE NONCLUSTERED INDEX PK_BM_RAIN ON WQPLIS.WPG.BM_RAIN (ID);
CREATE UNIQUE NONCLUSTERED INDEX UK_BEACH_CODE_RAIN ON WQPLIS.WPG.BM_RAIN (BEACH_CODE, SDATETIME);
CREATE UNIQUE CLUSTERED INDEX UK_BMVISIT_ID_RAIN ON WQPLIS.WPG.BM_RAIN (BMVISIT_ID);


-- WQPLIS.WPG.BM_RAIN_C definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.BM_RAIN_C;

CREATE TABLE BM_RAIN_C (
	ID int IDENTITY(1,1) NOT NULL,
	BMVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	BEACH_CODE nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SDATETIME smalldatetime NOT NULL,
	RAIN_STATION_CODE nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	RAINFALL decimal(5,1) NULL,
	RAINFALL_MAX_3HR decimal(5,1) NULL,
	RAINFALL_MAX_TIME smalldatetime NULL,
	RAINFALL_LAST_12HR decimal(5,1) NULL,
	RAINFALL_LAST_24HR decimal(5,1) NULL,
	RAINFALL_LAST_72HR decimal(5,1) NULL,
	RISK_RAIN_MAX_3HR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	RISK_RAIN_LAST_12HR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	RISK_RAIN_LAST_24HR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	RISK_RAIN_LAST_72HR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_BM_RAIN_C UNIQUE (ID),
	CONSTRAINT UK_BMVISIT_ID_RAIN_C UNIQUE (BMVISIT_ID),
	CONSTRAINT FK_BM_RAIN_RAIN_STATION_C FOREIGN KEY (RAIN_STATION_CODE) REFERENCES BM_RAIN_STATION(RAIN_STATION_CODE),
	CONSTRAINT FK_BM_RAIN_VISIT_C FOREIGN KEY (BMVISIT_ID) REFERENCES BM_VISIT_C(BMVISIT_ID)
);
CREATE UNIQUE NONCLUSTERED INDEX PK_BM_RAIN_C ON WQPLIS.WPG.BM_RAIN_C (ID);
CREATE UNIQUE CLUSTERED INDEX UK_BMVISIT_ID_RAIN_C ON WQPLIS.WPG.BM_RAIN_C (BMVISIT_ID);


-- WQPLIS.WPG.WPCO_SZ definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.WPCO_SZ;

CREATE TABLE WPCO_SZ (
	SZ_ID nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	WCZ_ID nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SZ_NAME nvarchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHINESE_NAME nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MARINE_INLAND nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WPCO_SUBLEG nvarchar(2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	WCSZ_CODE decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_WPCO_SZ PRIMARY KEY (SZ_ID),
	CONSTRAINT FK_WPCO_SZ_WPCO_WCZ FOREIGN KEY (WCZ_ID) REFERENCES WPCO_WCZ(WCZ_ID)
);


-- WQPLIS.WPG.HS_SZ_WQO definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.HS_SZ_WQO;

CREATE TABLE HS_SZ_WQO (
	SZ_ID nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MIN_DOS decimal(2,1) NULL,
	MIN_DOS_PC decimal(3,0) NULL,
	MIN_DOM decimal(2,1) NULL,
	MIN_DOM_PC decimal(3,0) NULL,
	MIN_DOB decimal(2,1) NULL,
	MIN_DOB_PC decimal(3,0) NULL,
	MIN_DOA decimal(2,1) NULL,
	MIN_DOA_PC decimal(3,0) NULL,
	MIN_DOC decimal(2,1) NULL,
	MIN_DOC_PC decimal(3,0) NULL,
	MAX_TIN_AAM decimal(2,1) NULL,
	MAX_NH3_AAM decimal(4,3) NULL,
	MAX_ECOLI_AGM decimal(4,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_HS_SZ_WQO PRIMARY KEY (SZ_ID),
	CONSTRAINT FK_HS_SZ_WQO_WPCO_SZ FOREIGN KEY (SZ_ID) REFERENCES WPCO_SZ(SZ_ID)
);


-- WQPLIS.WPG.MSTATION definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MSTATION;

CREATE TABLE MSTATION (
	SITE_ID decimal(4,0) NOT NULL,
	MW_NAME nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MS_NAME nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MW_TS_NAME nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MS_TS_NAME nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MS_DX_NAME nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HS_NAME nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MT_NAME nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DEPTH] decimal(3,0) NULL,
	SZ_ID nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EASTING decimal(9,3) NULL,
	NORTHING decimal(9,3) NULL,
	LATITUDE decimal(10,7) NULL,
	LONGITUDE decimal(10,7) NULL,
	ENVIRONMENT nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	START_DATE smalldatetime NULL,
	ACTIVE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SHOW nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CMMVIEW decimal(2,0) NULL,
	WCZ_CODE decimal(3,0) NULL,
	MW_ID decimal(3,0) NULL,
	MS_ID decimal(3,0) NULL,
	STATION_ID decimal(3,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	EASTING1 decimal(9,3) NULL,
	NORTHING1 decimal(9,3) NULL,
	CONSTRAINT PK_MSTATION PRIMARY KEY (SITE_ID),
	CONSTRAINT FK_MSTATION_WPCO_SZ FOREIGN KEY (SZ_ID) REFERENCES WPCO_SZ(SZ_ID)
);


-- WQPLIS.WPG.MT_SZ_WQO definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MT_SZ_WQO;

CREATE TABLE MT_SZ_WQO (
	SZ_ID nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MIN_DOS decimal(2,1) NULL,
	MIN_DOS_PC decimal(3,0) NULL,
	MIN_DOM decimal(2,1) NULL,
	MIN_DOM_PC decimal(3,0) NULL,
	MIN_DOB decimal(2,1) NULL,
	MIN_DOB_PC decimal(3,0) NULL,
	MIN_DOA decimal(2,1) NULL,
	MIN_DOA_PC decimal(3,0) NULL,
	MIN_DOC decimal(2,1) NULL,
	MIN_DOC_PC decimal(3,0) NULL,
	MAX_TIN_AAM decimal(2,1) NULL,
	MAX_NH3_AAM decimal(4,3) NULL,
	MAX_ECOLI_AGM decimal(4,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MT_SZ_WQO PRIMARY KEY (SZ_ID),
	CONSTRAINT FK_MT_SZ_WQO_WPCO_SZ FOREIGN KEY (SZ_ID) REFERENCES WPCO_SZ(SZ_ID)
);


-- WQPLIS.WPG.MT_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MT_VISIT;

CREATE TABLE MT_VISIT (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	STATION_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MT_VISIT PRIMARY KEY (MWVISIT_ID),
	CONSTRAINT FK_MT_VISIT_MSTATION FOREIGN KEY (SITE_ID) REFERENCES MSTATION(SITE_ID)
);


-- WQPLIS.WPG.MW_SZ_WQO definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_SZ_WQO;

CREATE TABLE MW_SZ_WQO (
	SZ_ID nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MIN_DOS decimal(2,1) NULL,
	MIN_DOS_PC decimal(3,0) NULL,
	MIN_DOM decimal(2,1) NULL,
	MIN_DOM_PC decimal(3,0) NULL,
	MIN_DOB decimal(2,1) NULL,
	MIN_DOB_PC decimal(3,0) NULL,
	MIN_DOA decimal(2,1) NULL,
	MIN_DOA_PC decimal(3,0) NULL,
	MIN_DOC decimal(2,1) NULL,
	MIN_DOC_PC decimal(3,0) NULL,
	MAX_TIN_AAM decimal(2,1) NULL,
	MAX_NH3_AAM decimal(4,3) NULL,
	MAX_ECOLI_AGM decimal(4,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MW_SZ_WQO PRIMARY KEY (SZ_ID),
	CONSTRAINT FK_MW_SZ_WQO_WPCO_SZ FOREIGN KEY (SZ_ID) REFERENCES WPCO_SZ(SZ_ID)
);


-- WQPLIS.WPG.MW_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_VISIT;

CREATE TABLE MW_VISIT (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	STATION_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MW_VISIT PRIMARY KEY (MWVISIT_ID),
	CONSTRAINT FK_MW_VISIT_MSTATION FOREIGN KEY (SITE_ID) REFERENCES MSTATION(SITE_ID)
);
 CREATE NONCLUSTERED INDEX IX_MW_VISIT_MDATE ON WPG.MW_VISIT (  MDATE ASC  )  
	 WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	 ON [TS_MARINE_WATER_INDEX ] ;
 CREATE NONCLUSTERED INDEX IX_MW_VISIT_SITE_ID ON WPG.MW_VISIT (  SITE_ID ASC  )  
	 WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	 ON [TS_MARINE_WATER_INDEX ] ;


-- WQPLIS.WPG.RSTATION definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RSTATION;

CREATE TABLE RSTATION (
	SITE_ID decimal(4,0) NOT NULL,
	STATNAME nvarchar(5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	R_ID nvarchar(4) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SZ_ID nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EASTING decimal(9,3) NULL,
	NORTHING decimal(9,3) NULL,
	LATITUDE decimal(10,7) NULL,
	LONGITUDE decimal(10,7) NULL,
	START_DATE smalldatetime NULL,
	ACTIVE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SHOW nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CMMVIEW decimal(2,0) NULL,
	WCZ_CODE decimal(3,0) NULL,
	WCSZ_CODE decimal(3,0) NULL,
	RIVERID decimal(3,0) NULL,
	STATION_ID decimal(3,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	EASTING1 decimal(9,3) NULL,
	NORTHING1 decimal(9,3) NULL,
	END_DATE smalldatetime NULL,
	ACTIVE_YEAR numeric(18,0) NULL,
	CONSTRAINT PK_RSTATION PRIMARY KEY (SITE_ID),
	CONSTRAINT FK_RSTATION_RIVER FOREIGN KEY (R_ID) REFERENCES RIVER(R_ID),
	CONSTRAINT FK_RSTATION_WPCO_SZ FOREIGN KEY (SZ_ID) REFERENCES WPCO_SZ(SZ_ID)
);
 CREATE NONCLUSTERED INDEX IX_RSTATION_STATNAME ON WPG.RSTATION (  STATNAME ASC  )  
	 WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	 ON [TS_RIVER_WATER_INDEX ] ;


-- WQPLIS.WPG.RW_SZ_WQO definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_SZ_WQO;

CREATE TABLE RW_SZ_WQO (
	SZ_ID nvarchar(3) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MIN_PH decimal(2,1) NULL,
	MAX_PH decimal(2,1) NULL,
	MAX_BOD5 decimal(3,1) NULL,
	MAX_COD decimal(3,1) NULL,
	MAX_AMD_SS decimal(3,1) NULL,
	MIN_DO decimal(2,1) NULL,
	MAX_NH4 decimal(2,1) NULL,
	MAX_AAM_NH3 decimal(4,3) NULL,
	MAX_5MD_EC decimal(4,0) NULL,
	MAX_5GM_EC decimal(4,0) NULL,
	MAX_AGM_EC decimal(4,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_RW_SZ_WQO PRIMARY KEY (SZ_ID),
	CONSTRAINT FK_RW_SZ_WQO_WPCO_SZ FOREIGN KEY (SZ_ID) REFERENCES WPCO_SZ(SZ_ID)
);


-- WQPLIS.WPG.RW_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_VISIT;

CREATE TABLE RW_VISIT (
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	SITE_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO tinyint NULL,
	VALID_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_RW_VISIT PRIMARY KEY (RWVISIT_ID),
	CONSTRAINT FK_RW_VISIT_RSTATION FOREIGN KEY (SITE_ID) REFERENCES RSTATION(SITE_ID)
);
 CREATE NONCLUSTERED INDEX IDX_MW_VISIT_MDATE ON WPG.RW_VISIT (  MDATE ASC  )  
	 WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	 ON [TS_RIVER_WATER_INDEX ] ;
 CREATE NONCLUSTERED INDEX IDX_RIW_VISIT_SITE_ID ON WPG.RW_VISIT (  SITE_ID ASC  )  
	 WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	 ON [TS_RIVER_WATER_INDEX ] ;


-- WQPLIS.WPG.HS_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.HS_VISIT;

CREATE TABLE HS_VISIT (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	STATION_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	MONITOR_STATE nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ANALYSIS_LAB nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CONSTRAINT PK_HS_VISIT PRIMARY KEY (MWVISIT_ID),
	CONSTRAINT FK_HS_VISIT_MSTATION FOREIGN KEY (SITE_ID) REFERENCES MSTATION(SITE_ID)
);
 CREATE NONCLUSTERED INDEX IX_HS_VISIT_MDATE ON WPG.HS_VISIT (  MDATE ASC  )  
	 WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	 ON [TS_MARINE_WATER_INDEX ] ;
 CREATE NONCLUSTERED INDEX IX_HS_VISIT_SITE_ID ON WPG.HS_VISIT (  SITE_ID ASC  )  
	 WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  )
	 ON [TS_MARINE_WATER_INDEX ] ;


-- WQPLIS.WPG.MM_VISIT definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MM_VISIT;

CREATE TABLE MM_VISIT (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SITE_ID decimal(4,0) NULL,
	STATION_ID decimal(4,0) NULL,
	MDATE smalldatetime NOT NULL,
	STIME decimal(4,0) NULL,
	SAMPLE_NO decimal(2,0) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MM_VISIT PRIMARY KEY (MWVISIT_ID),
	CONSTRAINT FK_MM_VISIT_MSTATION FOREIGN KEY (SITE_ID) REFERENCES MSTATION(SITE_ID)
);


-- WQPLIS.WPG.MT_FIELD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MT_FIELD;

CREATE TABLE MT_FIELD (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SOL_RAD decimal(6,2) NULL,
	AIR_TEMP decimal(4,2) NULL,
	WIND_SP decimal(3,1) NULL,
	WIND_DIR decimal(4,1) NULL,
	SEA_COND nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SEA_COL nvarchar(11) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FISH_KILL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SECCHIDISC decimal(3,1) NULL,
	WEATHER nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MT_FIELD PRIMARY KEY (MWVISIT_ID),
	CONSTRAINT FK_MT_FIELD_MT_VISIT1 FOREIGN KEY (MWVISIT_ID) REFERENCES MT_VISIT(MWVISIT_ID)
);


-- WQPLIS.WPG.MT_GLABN definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MT_GLABN;

CREATE TABLE MT_GLABN (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DEPTH] decimal(6,2) NULL,
	L_NH4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 decimal(7,3) NULL,
	L_NO2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 decimal(7,3) NULL,
	L_NO3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 decimal(7,3) NULL,
	L_TKN_S nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_S decimal(7,3) NULL,
	L_TKN_P nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_P decimal(7,3) NULL,
	L_TKN_SP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_SP decimal(7,3) NULL,
	L_PO4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 decimal(7,3) NULL,
	L_TP_S nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_S decimal(7,3) NULL,
	L_TP_P nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_P decimal(7,3) NULL,
	L_TP_SP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_SP decimal(7,3) NULL,
	L_SIO2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIO2 decimal(7,3) NULL,
	L_SS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS decimal(7,3) NULL,
	L_TVS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS decimal(7,3) NULL,
	L_CHL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL decimal(7,3) NULL,
	L_PHAE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHAE decimal(7,3) NULL,
	L_TUR nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TUR decimal(7,3) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(8,4) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(8,3) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(8,3) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(8,3) NULL,
	L_AS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AS] decimal(8,3) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(8,3) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(8,3) NULL,
	L_SE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SE decimal(8,3) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(8,3) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MT_GLABN PRIMARY KEY (MWVISIT_ID,DEPTH_CODE),
	CONSTRAINT FK_MT_GLABN_MT_VISIT1 FOREIGN KEY (MWVISIT_ID) REFERENCES MT_VISIT(MWVISIT_ID)
);


-- WQPLIS.WPG.MT_MLAB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MT_MLAB;

CREATE TABLE MT_MLAB (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH decimal(7,3) NULL,
	L_BOD5 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5 decimal(7,3) NULL,
	L_TURB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TURB decimal(7,3) NULL,
	L_FC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC decimal(10,0) NULL,
	L_ECOLI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ECOLI decimal(10,0) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MT_MLAB PRIMARY KEY (MWVISIT_ID,DEPTH_CODE),
	CONSTRAINT FK_MT_MLAB_MT_VISIT1 FOREIGN KEY (MWVISIT_ID) REFERENCES MT_VISIT(MWVISIT_ID)
);


-- WQPLIS.WPG.MT_OTHER definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MT_OTHER;

CREATE TABLE MT_OTHER (
	FIELD_NAME nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DEPTH] decimal(6,2) NOT NULL,
	L_FIELD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FIELD_VALUE decimal(22,6) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MT_OTHER PRIMARY KEY (FIELD_NAME,MWVISIT_ID,DEPTH_CODE),
	CONSTRAINT FK_MT_OTHER_MT_VISIT1 FOREIGN KEY (MWVISIT_ID) REFERENCES MT_VISIT(MWVISIT_ID)
);


-- WQPLIS.WPG.MW_FIELD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_FIELD;

CREATE TABLE MW_FIELD (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SOL_RAD decimal(6,2) NULL,
	AIR_TEMP decimal(4,2) NULL,
	WIND_SP decimal(3,1) NULL,
	WIND_DIR decimal(4,1) NULL,
	SEA_COND nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SEA_COL nvarchar(11) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FISH_KILL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SECCHIDISC decimal(3,1) NULL,
	WEATHER nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MW_FIELD PRIMARY KEY (MWVISIT_ID),
	CONSTRAINT FK_MW_FIELD_MW_VISIT1 FOREIGN KEY (MWVISIT_ID) REFERENCES MW_VISIT(MWVISIT_ID)
);


-- WQPLIS.WPG.MW_GLABN definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_GLABN;

CREATE TABLE MW_GLABN (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DEPTH] decimal(6,2) NULL,
	L_NH4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 decimal(7,3) NULL,
	L_NO2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 decimal(7,3) NULL,
	L_NO3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 decimal(7,3) NULL,
	L_TKN_S nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_S decimal(7,3) NULL,
	L_TKN_P nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_P decimal(7,3) NULL,
	L_TKN_SP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_SP decimal(7,3) NULL,
	L_PO4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 decimal(7,3) NULL,
	L_TP_S nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_S decimal(7,3) NULL,
	L_TP_P nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_P decimal(7,3) NULL,
	L_TP_SP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_SP decimal(7,3) NULL,
	L_SIO2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIO2 decimal(7,3) NULL,
	L_SS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS decimal(7,3) NULL,
	L_TVS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS decimal(7,3) NULL,
	L_CHL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL decimal(7,3) NULL,
	L_PHAE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHAE decimal(7,3) NULL,
	L_TUR nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TUR decimal(7,3) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(8,4) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(8,3) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(8,3) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(8,3) NULL,
	L_AS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AS] decimal(8,3) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(8,3) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(8,3) NULL,
	L_SE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SE decimal(8,3) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(8,3) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MW_GLABN PRIMARY KEY (MWVISIT_ID,DEPTH_CODE),
	CONSTRAINT FK_MW_GLABN_MW_VISIT1 FOREIGN KEY (MWVISIT_ID) REFERENCES MW_VISIT(MWVISIT_ID)
);


-- WQPLIS.WPG.MW_MLAB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_MLAB;

CREATE TABLE MW_MLAB (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH decimal(7,3) NULL,
	L_BOD5 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5 decimal(7,3) NULL,
	L_TURB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TURB decimal(7,3) NULL,
	L_FC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC decimal(10,0) NULL,
	L_ECOLI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ECOLI decimal(10,0) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MW_MLAB PRIMARY KEY (MWVISIT_ID,DEPTH_CODE),
	CONSTRAINT FK_MW_MLAB_MW_VISIT1 FOREIGN KEY (MWVISIT_ID) REFERENCES MW_VISIT(MWVISIT_ID)
);


-- WQPLIS.WPG.MW_OTHER definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MW_OTHER;

CREATE TABLE MW_OTHER (
	FIELD_NAME nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DEPTH] decimal(6,2) NOT NULL,
	L_FIELD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FIELD_VALUE decimal(22,6) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MW_OTHER PRIMARY KEY (FIELD_NAME,MWVISIT_ID,DEPTH_CODE),
	CONSTRAINT FK_MW_OTHER_MW_VISIT1 FOREIGN KEY (MWVISIT_ID) REFERENCES MW_VISIT(MWVISIT_ID)
);


-- WQPLIS.WPG.RW_FIELD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_FIELD;

CREATE TABLE RW_FIELD (
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	TEMPER decimal(3,1) NULL,
	L_DO varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DO decimal(4,2) NULL,
	L_DOS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DOS decimal(4,1) NULL,
	L_COND varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COND decimal(7,2) NULL,
	L_SAL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SAL decimal(4,2) NULL,
	L_PH varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH decimal(4,2) NULL,
	L_TURB varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TURB decimal(6,2) NULL,
	WEATHER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COLOR nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	RAINFALL nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SMELL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TIDE nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	REMARK nvarchar(500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_RW_FIELD PRIMARY KEY (RWVISIT_ID),
	CONSTRAINT FK_RW_FIELD_RW_VISIT1 FOREIGN KEY (RWVISIT_ID) REFERENCES RW_VISIT(RWVISIT_ID)
);


-- WQPLIS.WPG.RW_FLOW definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_FLOW;

CREATE TABLE RW_FLOW (
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	DATA_NO decimal(5,0) NOT NULL,
	[DEPTH] decimal(3,2) NULL,
	VEL decimal(3,2) NULL,
	WIDTH decimal(5,2) NULL,
	VALID_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_RW_FLOW PRIMARY KEY (RWVISIT_ID,DATA_NO),
	CONSTRAINT FK_RW_FLOW_RW_VISIT1 FOREIGN KEY (RWVISIT_ID) REFERENCES RW_VISIT(RWVISIT_ID)
);


-- WQPLIS.WPG.RW_GLABM definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_GLABM;

CREATE TABLE RW_GLABM (
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_AL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL decimal(7,1) NULL,
	L_ARSENIC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARSENIC decimal(6,1) NULL,
	L_B varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	B decimal(5,1) NULL,
	L_CD varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(5,1) NULL,
	L_CR varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(6,1) NULL,
	L_CU varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(6,1) NULL,
	L_FE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE decimal(7,1) NULL,
	L_HG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(4,1) NULL,
	L_MN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN decimal(5,0) NULL,
	L_NI varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(5,1) NULL,
	L_PB varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(7,2) NULL,
	L_ZN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(6,1) NULL,
	L_V varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	V decimal(3,0) NULL,
	L_BA varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BA decimal(4,0) NULL,
	L_AG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG decimal(3,0) NULL,
	L_SB varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SB decimal(3,0) NULL,
	L_BE varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BE decimal(3,0) NULL,
	L_TL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TL decimal(3,0) NULL,
	L_MO varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MO decimal(3,0) NULL,
	SAMPLE_MARK varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO varchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_RW_GLABM PRIMARY KEY (RWVISIT_ID),
	CONSTRAINT FK_RW_GLABM_RW_VISIT1 FOREIGN KEY (RWVISIT_ID) REFERENCES RW_VISIT(RWVISIT_ID)
);


-- WQPLIS.WPG.RW_GLABN definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_GLABN;

CREATE TABLE RW_GLABN (
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_NH4 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 decimal(6,3) NULL,
	L_TKNS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKNS decimal(5,2) NULL,
	L_TKNSP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKNSP decimal(6,2) NULL,
	L_NO2 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 decimal(5,3) NULL,
	L_NO3 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 decimal(6,3) NULL,
	L_PO4 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 decimal(5,3) NULL,
	L_TPS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TPS decimal(4,2) NULL,
	L_TPSP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TPSP decimal(5,2) NULL,
	L_SIL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIL decimal(5,2) NULL,
	L_COD varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	COD decimal(7,2) NULL,
	L_SS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS decimal(7,2) NULL,
	L_OIL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	OIL decimal(4,1) NULL,
	L_TVS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS decimal(6,1) NULL,
	L_TS varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TS decimal(5,0) NULL,
	L_TCYN varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TCYN decimal(4,2) NULL,
	L_FL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FL decimal(5,1) NULL,
	L_H2S varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	H2S decimal(3,2) NULL,
	L_SULP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SULP decimal(4,2) NULL,
	L_SSP varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SSP decimal(4,2) NULL,
	L_DETERG varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DETERG decimal(4,2) NULL,
	L_TOC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TOC decimal(5,0) NULL,
	L_CL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CL decimal(6,0) NULL,
	L_CHL varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL decimal(4,1) NULL,
	L_PHEO varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHEO decimal(4,1) NULL,
	SAMPLE_MARK varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO varchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_RW_GLABN PRIMARY KEY (RWVISIT_ID),
	CONSTRAINT FK_RW_GLABN_RW_VISIT1 FOREIGN KEY (RWVISIT_ID) REFERENCES RW_VISIT(RWVISIT_ID)
);


-- WQPLIS.WPG.RW_MLAB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_MLAB;

CREATE TABLE RW_MLAB (
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_BOD5 varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5 decimal(6,2) NULL,
	L_FC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC decimal(9,0) NULL,
	L_EC varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	EC decimal(9,0) NULL,
	SAMPLE_MARK varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO varchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_RW_MLAB PRIMARY KEY (RWVISIT_ID),
	CONSTRAINT FK_RW_MLAB_RW_VISIT1 FOREIGN KEY (RWVISIT_ID) REFERENCES RW_VISIT(RWVISIT_ID)
);


-- WQPLIS.WPG.RW_OTHER definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_OTHER;

CREATE TABLE RW_OTHER (
	FIELD_NAME nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_FIELD varchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FIELD_VALUE decimal(22,6) NULL,
	VALID_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT PK_RW_OTHER PRIMARY KEY (FIELD_NAME,RWVISIT_ID),
	CONSTRAINT FK_RW_OTHER_RW_VISIT1 FOREIGN KEY (RWVISIT_ID) REFERENCES RW_VISIT(RWVISIT_ID)
);


-- WQPLIS.WPG.RW_OTHER_FLOW definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.RW_OTHER_FLOW;

CREATE TABLE RW_OTHER_FLOW (
	RWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FLOW decimal(7,4) NULL,
	VALID_USER varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE tinyint NULL,
	CONSTRAINT FK_RW_OTHER_FLOW_RW_VISIT1 FOREIGN KEY (RWVISIT_ID) REFERENCES RW_VISIT(RWVISIT_ID)
);


-- WQPLIS.WPG.HS_FIELD definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.HS_FIELD;

CREATE TABLE HS_FIELD (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SOL_RAD decimal(6,2) NULL,
	AIR_TEMP decimal(4,2) NULL,
	WIND_SP decimal(3,1) NULL,
	WIND_DIR decimal(4,1) NULL,
	SEA_COND nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SEA_COL nvarchar(11) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FISH_KILL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SECCHIDISC decimal(3,1) NULL,
	WEATHER nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_HS_FIELD PRIMARY KEY (MWVISIT_ID),
	CONSTRAINT FK_HS_FIELD_HS_VISIT1 FOREIGN KEY (MWVISIT_ID) REFERENCES HS_VISIT(MWVISIT_ID)
);


-- WQPLIS.WPG.HS_GLABN definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.HS_GLABN;

CREATE TABLE HS_GLABN (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DEPTH] decimal(6,2) NULL,
	L_NH4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NH4 decimal(7,3) NULL,
	L_NO2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO2 decimal(7,3) NULL,
	L_NO3 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NO3 decimal(7,3) NULL,
	L_TKN_S nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_S decimal(7,3) NULL,
	L_TKN_P nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_P decimal(7,3) NULL,
	L_TKN_SP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TKN_SP decimal(7,3) NULL,
	L_PO4 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PO4 decimal(7,3) NULL,
	L_TP_S nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_S decimal(7,3) NULL,
	L_TP_P nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_P decimal(7,3) NULL,
	L_TP_SP nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TP_SP decimal(7,3) NULL,
	L_SIO2 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SIO2 decimal(7,3) NULL,
	L_SS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SS decimal(7,3) NULL,
	L_TVS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TVS decimal(7,3) NULL,
	L_CHL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CHL decimal(7,3) NULL,
	L_PHAE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PHAE decimal(7,3) NULL,
	L_TUR nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TUR decimal(7,3) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(8,4) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(8,3) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(8,3) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(8,3) NULL,
	L_AS nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AS] decimal(8,3) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(8,3) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(8,3) NULL,
	L_SE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SE decimal(8,3) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(8,3) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_HS_GLABN PRIMARY KEY (MWVISIT_ID,DEPTH_CODE),
	CONSTRAINT FK_HS_GLABN_HS_VISIT1 FOREIGN KEY (MWVISIT_ID) REFERENCES HS_VISIT(MWVISIT_ID)
);


-- WQPLIS.WPG.HS_MLAB definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.HS_MLAB;

CREATE TABLE HS_MLAB (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_PH nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PH decimal(7,3) NULL,
	L_BOD5 nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BOD5 decimal(7,3) NULL,
	L_TURB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TURB decimal(7,3) NULL,
	L_FC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FC decimal(10,0) NULL,
	L_ECOLI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ECOLI decimal(10,0) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_HS_MLAB PRIMARY KEY (MWVISIT_ID,DEPTH_CODE),
	CONSTRAINT FK_HS_MLAB_HS_VISIT1 FOREIGN KEY (MWVISIT_ID) REFERENCES HS_VISIT(MWVISIT_ID)
);


-- WQPLIS.WPG.HS_OTHER definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.HS_OTHER;

CREATE TABLE HS_OTHER (
	FIELD_NAME nvarchar(30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[DEPTH] decimal(6,2) NOT NULL,
	L_FIELD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FIELD_VALUE decimal(22,6) NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_HS_OTHER PRIMARY KEY (FIELD_NAME,MWVISIT_ID,DEPTH_CODE),
	CONSTRAINT FK_HS_OTHER_HS_VISIT1 FOREIGN KEY (MWVISIT_ID) REFERENCES HS_VISIT(MWVISIT_ID)
);


-- WQPLIS.WPG.MM_GLABM definition

-- Drop table

-- DROP TABLE WQPLIS.WPG.MM_GLABM;

CREATE TABLE MM_GLABM (
	MWVISIT_ID nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	MWVISIT_ID_OLD nvarchar(14) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DEPTH_CODE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[TYPE] nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	L_AL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AL decimal(10,6) NULL,
	L_ARSENIC nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ARSENIC decimal(10,6) NULL,
	L_BA nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BA decimal(10,6) NULL,
	L_B nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	B decimal(10,6) NULL,
	L_CD nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CD decimal(10,6) NULL,
	L_CR nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CR decimal(10,6) NULL,
	L_CU nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CU decimal(10,6) NULL,
	L_FE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	FE decimal(10,6) NULL,
	L_HG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	HG decimal(10,6) NULL,
	L_MN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MN decimal(10,6) NULL,
	L_NI nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	NI decimal(10,6) NULL,
	L_PB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	PB decimal(10,6) NULL,
	L_ZN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	ZN decimal(10,6) NULL,
	L_V nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	V decimal(10,6) NULL,
	L_AG nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	AG decimal(10,6) NULL,
	L_CO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	CO decimal(10,6) NULL,
	L_BE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	BE decimal(10,6) NULL,
	L_MO nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	MO decimal(10,6) NULL,
	L_SB nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SB decimal(10,6) NULL,
	L_SN nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SN decimal(10,6) NULL,
	L_SE nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	SE decimal(10,6) NULL,
	L_TL nvarchar(1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	TL decimal(10,6) NULL,
	SAMPLE_MARK nvarchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	LAB_NO nvarchar(60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	DATE_RECEIVED smalldatetime NULL,
	DATE_REPORTED smalldatetime NULL,
	VALID_USER nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	VALID_DATE smalldatetime NULL,
	VALID_CODE decimal(3,0) NULL,
	CONSTRAINT PK_MM_GLABM_1 PRIMARY KEY (MWVISIT_ID,DEPTH_CODE,[TYPE]),
	CONSTRAINT FK_MM_GLABM_MM_VISIT1 FOREIGN KEY (MWVISIT_ID) REFERENCES MM_VISIT(MWVISIT_ID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- WPG.BB_BC_G source

CREATE VIEW WPG.BB_BC_G AS
SELECT	C.STATION_ID,
	C.M_DATE,
	C.S_TIME,
	D.SP_GROUP,
	COUNT(*)									NO_SP,
	(COUNT(*) -1)/E.POPULATION								SP_RICH,
	-SUM(C.ABUNDANCE/E.POPULATION * LOG(C.ABUNDANCE/E.POPULATION))			SP_DIV,
	-SUM(C.ABUNDANCE/E.POPULATION * LOG(C.ABUNDANCE/E.POPULATION))/E.POPULATION	SP_EVEN,
	E.POPULATION									POPULATION,
	SUM(C.WEIGHT)									BIOMASS
FROM	WPG.BB_BC_S	C
JOIN	WPG.BB_SL	D	ON	C.SP_NAME = D.SP_NAME
JOIN	(-- GROUP POPULATION
	SELECT 	A.STATION_ID,
		A.M_DATE,
		A.S_TIME,
		B.SP_GROUP,
		SUM(A.ABUNDANCE)	POPULATION
	FROM	WPG.BB_BC_S	A
	JOIN	WPG.BB_SL	B	ON A.SP_NAME = B.SP_NAME
	GROUP BY	A.STATION_ID, A.M_DATE, A.S_TIME, B.SP_GROUP
	)	E		ON	C.STATION_ID	= E.STATION_ID
				AND	C.M_DATE	= E.M_DATE
				AND	C.S_TIME		= E.S_TIME
				AND	D.SP_GROUP	 = E.SP_GROUP	
GROUP BY C.STATION_ID, C.M_DATE, C.S_TIME, D.SP_GROUP, E.POPULATION;


-- WPG.BM_BEACH_ANN_GRADE_VIEW source

CREATE VIEW [WPG].[BM_BEACH_ANN_GRADE_VIEW]
AS
SELECT  DST.DISTRICT_NAME, DST.DISTRICT_NAME_C, DST.HOTLINE_DISTRICT, DST.HOTLINE_DISTRICT_C, 
		BCH.BEACH_NAME, BCH.CHINESE_NAME, BCC.BEACH_GROUP, BCC.DISTRICT_ORDER, 
		AG.BEACH_CODE, YEAR, TOTAL_GRADE_COUNT, GRADE_1_COUNT, GRADE_2_COUNT, GRADE_3_COUNT, GRADE_4_COUNT, RAINY_GRADE_4_COUNT,BCC.LIST_ORDER_2
FROM
(SELECT  BEACH_CODE, YEAR(SAMPLE_DATE) AS YEAR, COUNT(GRADE) TOTAL_GRADE_COUNT,
		SUM(CASE WHEN GRADE = 1 THEN 1 ELSE 0 END) GRADE_1_COUNT,
		SUM(CASE WHEN GRADE = 2 THEN 1 ELSE 0 END) GRADE_2_COUNT,
		SUM(CASE WHEN GRADE = 3 THEN 1 ELSE 0 END) GRADE_3_COUNT,
		SUM(CASE WHEN GRADE = 4 THEN 1 ELSE 0 END) GRADE_4_COUNT,
		SUM(CASE WHEN GRADE = 4 AND RAINFALL_LAST_72HR > Rainfall_Limit THEN 1 ELSE 0 END) RAINY_GRADE_4_COUNT
FROM	WPG.BM_VISIT_SUMMARY  AS  SMRY,
(SELECT CAST(PARAMETER_LABEL AS Decimal) as Rainfall_Limit from WPG.BM_PARAMETER where PARAMETER_SET = 'raineffect' and PARAMETER_VALUE = 1) AS RLimit
WHERE   MONTH(SAMPLE_DATE) BETWEEN 3 AND 10
GROUP BY BEACH_CODE, YEAR(SAMPLE_DATE) ) AS AG
INNER JOIN  WPG.BM_BEACH                 AS BCH  ON AG.BEACH_CODE = BCH.BEACH_CODE
INNER JOIN  WPG.BM_DISTRICT              AS DST  ON BCH.DISTRICT_CODE = DST.DISTRICT_CODE
INNER JOIN  WPG.BM_BEACH_CONFIG          AS BCC  ON BCH.BEACH_CODE = BCC.BEACH_CODE;


-- WPG.BM_BEACH_ANN_SAMPLE_COUNT source

CREATE VIEW [WPG].[BM_BEACH_ANN_SAMPLE_COUNT]
AS
SELECT  DST.DISTRICT_NAME_DISPLAY AS DISTRICT_NAME, DST.DISTRICT_NAME_C,
		BCH.BEACH_NAME, BCH.CHINESE_NAME, BCC.BEACH_GROUP, BCC.DISTRICT_ORDER, 
        CNT.BEACH_CODE, CNT.YEAR, TOTAL, SUN_COUNT, MON_COUNT, TUE_COUNT, WED_COUNT, THU_COUNT, FRI_COUNT, SAT_COUNT, BCC.LIST_ORDER_2, HOTLINE_DISTRICT
FROM (SELECT BEACH_CODE, YEAR, SUM(SAMPLE_COUNT) AS TOTAL,
            SUM(CASE WHEN WEEKDAY = 1 THEN SAMPLE_COUNT ELSE 0 END)  SUN_COUNT,
            SUM(CASE WHEN WEEKDAY = 2 THEN SAMPLE_COUNT ELSE 0 END)  MON_COUNT,
            SUM(CASE WHEN WEEKDAY = 3 THEN SAMPLE_COUNT ELSE 0 END)  TUE_COUNT,
            SUM(CASE WHEN WEEKDAY = 4 THEN SAMPLE_COUNT ELSE 0 END)  WED_COUNT,
            SUM(CASE WHEN WEEKDAY = 5 THEN SAMPLE_COUNT ELSE 0 END)  THU_COUNT,
            SUM(CASE WHEN WEEKDAY = 6 THEN SAMPLE_COUNT ELSE 0 END)  FRI_COUNT,
            SUM(CASE WHEN WEEKDAY = 7 THEN SAMPLE_COUNT ELSE 0 END)  SAT_COUNT
    FROM (SELECT BEACH_CODE, YEAR(SAMPLE_DATE) AS YEAR, DATEPART(WEEKDAY, SAMPLE_DATE) AS WEEKDAY, COUNT(*) AS SAMPLE_COUNT
            FROM  WPG.BM_MLAB_SUMMARY  GROUP BY BEACH_CODE, YEAR(SAMPLE_DATE), DATEPART(WEEKDAY, SAMPLE_DATE) ) AS SPLIT_CNT
        GROUP BY SPLIT_CNT.BEACH_CODE, SPLIT_CNT.YEAR ) AS CNT
INNER JOIN  WPG.BM_BEACH                 AS BCH  ON CNT.BEACH_CODE = BCH.BEACH_CODE
INNER JOIN  WPG.BM_DISTRICT              AS DST  ON BCH.DISTRICT_CODE = DST.DISTRICT_CODE
INNER JOIN  WPG.BM_BEACH_CONFIG          AS BCC  ON BCH.BEACH_CODE = BCC.BEACH_CODE;


-- WPG.BM_BEACH_EC_AGM source

CREATE VIEW [WPG].[BM_BEACH_EC_AGM]
AS
SELECT  BEACH_CODE, YEAR, TYPE, ANNUAL_LOG_G_MEAN, POWER(10.000, ANNUAL_LOG_G_MEAN) AS ANNUAL_G_MEAN, SAMPLE_COUNT
FROM    (SELECT  MS.BEACH_CODE, YEAR(MS.SAMPLE_DATE) AS YEAR, N'FY' AS TYPE,
                AVG(LOG_G_MEAN) AS ANNUAL_LOG_G_MEAN, COUNT(*) AS SAMPLE_COUNT 
            FROM [WPG].[BM_MLAB_SUMMARY] AS MS
            ----INNER JOIN  WPG.BM_BEACH        AS BCH  ON MS.BEACH_CODE = BCH.BEACH_CODE
            WHERE MONTH(MS.SAMPLE_DATE) BETWEEN 3 AND 10 
            --AND LOG_G_MEAN IS NOT NULL
            ----AND BCH.REMARK NOT LIKE '%@%' AND BCH.REMARK NOT LIKE '%*%'
            GROUP BY MS.BEACH_CODE, YEAR(MS.SAMPLE_DATE)  )  AS ALGM
        UNION
SELECT  BEACH_CODE, YEAR, TYPE, ANNUAL_LOG_G_MEAN, POWER(10.000, ANNUAL_LOG_G_MEAN) AS ANNUAL_G_MEAN, SAMPLE_COUNT
FROM    (SELECT  MS.BEACH_CODE, YEAR(MS.SAMPLE_DATE) AS YEAR, N'TD' AS TYPE,
                AVG(LOG_G_MEAN) AS ANNUAL_LOG_G_MEAN, COUNT(*) AS SAMPLE_COUNT 
            FROM [WPG].[BM_MLAB_SUMMARY] AS MS
            WHERE MONTH(MS.SAMPLE_DATE) >= 3 
            AND (MONTH(SAMPLE_DATE) * 31 + DAY(SAMPLE_DATE)) < (MONTH(GETDATE()) * 31 + DAY(GETDATE())) 
            --AND LOG_G_MEAN IS NOT NULL
            GROUP BY MS.BEACH_CODE, YEAR(MS.SAMPLE_DATE)  )  AS CLGM;


-- WPG.BM_BEACH_EC_AGM_RANK_REPORT source

CREATE VIEW WPG.BM_BEACH_EC_AGM_RANK_REPORT
AS
SELECT          DST.DISTRICT_NAME_DISPLAY AS DISTRICT_NAME, DST.DISTRICT_NAME_C, DST.HOTLINE_DISTRICT, 
                            DST.HOTLINE_DISTRICT_C, BCH.BEACH_NAME, BCH.CHINESE_NAME, BCH.SC_NAME, BCC.BEACH_GROUP, 
                            BCC.DISTRICT_ORDER, AGM.BEACH_CODE, AGM.YEAR, AGM.ANNUAL_LOG_G_MEAN, AGM.ANNUAL_G_MEAN, 
                            AGM.SAMPLE_COUNT, AGM.RANK, BCC.LIST_ORDER_2
FROM              (SELECT          BEACH_CODE, YEAR, TYPE, ANNUAL_LOG_G_MEAN, ANNUAL_G_MEAN, SAMPLE_COUNT,
                                                            (SELECT          ISNULL(MIN(PARAMETER_VALUE), 4) AS RANK
                                                              FROM               WPG.BM_PARAMETER AS PA
                                                              WHERE           (PARAMETER_SET = 'ranklimit') AND 
                                                                                          (WPG.BM_BEACH_EC_AGM.ANNUAL_G_MEAN < PARAMETER_LABEL)) AS RANK
                            FROM               WPG.BM_BEACH_EC_AGM
                            WHERE           (TYPE = 'FY')) AS AGM INNER JOIN
                            WPG.BM_BEACH AS BCH ON AGM.BEACH_CODE = BCH.BEACH_CODE INNER JOIN
                            WPG.BM_DISTRICT AS DST ON BCH.DISTRICT_CODE = DST.DISTRICT_CODE INNER JOIN
                            WPG.BM_BEACH_CONFIG AS BCC ON BCH.BEACH_CODE = BCC.BEACH_CODE;


-- WPG.BM_BEACH_EC_AGM_RANK_REPORT_BAK source

CREATE VIEW [WPG].[BM_BEACH_EC_AGM_RANK_REPORT_BAK]
AS
SELECT  DST.DISTRICT_NAME_DISPLAY AS DISTRICT_NAME, DST.DISTRICT_NAME_C, DST.HOTLINE_DISTRICT, DST.HOTLINE_DISTRICT_C,
		BCH.BEACH_NAME, BCH.CHINESE_NAME, BCC.BEACH_GROUP, BCC.DISTRICT_ORDER, 
		AGM.BEACH_CODE, AGM.YEAR, ANNUAL_LOG_G_MEAN, ANNUAL_G_MEAN, SAMPLE_COUNT, RANK, BCC.LIST_ORDER_2
FROM (SELECT BEACH_CODE, YEAR, TYPE, ANNUAL_LOG_G_MEAN, ANNUAL_G_MEAN, SAMPLE_COUNT,
        (SELECT ISNULL(MIN(PA.PARAMETER_VALUE), 4) AS RANK  FROM WPG.BM_PARAMETER AS PA
            WHERE PARAMETER_SET = 'ranklimit' and ANNUAL_G_MEAN < CAST(PARAMETER_LABEL AS DECIMAL)) AS RANK
      FROM WPG.BM_BEACH_EC_AGM  WHERE TYPE = 'FY' )  AS AGM   
INNER JOIN  WPG.BM_BEACH                 AS BCH  ON AGM.BEACH_CODE = BCH.BEACH_CODE
INNER JOIN  WPG.BM_DISTRICT              AS DST  ON BCH.DISTRICT_CODE = DST.DISTRICT_CODE
INNER JOIN  WPG.BM_BEACH_CONFIG          AS BCC  ON BCH.BEACH_CODE = BCC.BEACH_CODE;


-- WPG.BM_BEACH_EC_AGM_VIEW source

CREATE VIEW [WPG].[BM_BEACH_EC_AGM_VIEW]
AS
SELECT  DST.DISTRICT_NAME_DISPLAY AS DISTRICT_NAME, DST.DISTRICT_NAME_C, DST.HOTLINE_DISTRICT, DST.HOTLINE_DISTRICT_C,
		BCH.BEACH_NAME, BCH.CHINESE_NAME, BCC.BEACH_GROUP, BCC.DISTRICT_ORDER, 
		AGM.BEACH_CODE, AGM.YEAR, CY_AGM, CY_COUNT, LY_AGM, LY_COUNT, LY_YEAR_AGM, LY_YEAR_COUNT
FROM
(SELECT CAGM.BEACH_CODE, CAGM.YEAR, CAGM.ANNUAL_G_MEAN CY_AGM, CAGM.SAMPLE_COUNT CY_COUNT, LAGM.ANNUAL_G_MEAN LY_AGM, 
	LAGM.SAMPLE_COUNT LY_COUNT, LYAGM.ANNUAL_G_MEAN LY_YEAR_AGM, LYAGM.SAMPLE_COUNT LY_YEAR_COUNT
FROM
(SELECT BEACH_CODE, YEAR, TYPE, ANNUAL_LOG_G_MEAN, ANNUAL_G_MEAN, SAMPLE_COUNT
 FROM WPG.BM_BEACH_EC_AGM  WHERE TYPE = 'TD')  AS CAGM 
INNER JOIN  
(SELECT BEACH_CODE, YEAR, TYPE, ANNUAL_LOG_G_MEAN, ANNUAL_G_MEAN, SAMPLE_COUNT
 FROM WPG.BM_BEACH_EC_AGM  WHERE TYPE = 'TD')  AS LAGM
ON CAGM.BEACH_CODE = LAGM.BEACH_CODE AND CAGM.YEAR = LAGM.YEAR + 1
INNER JOIN  
(SELECT BEACH_CODE, YEAR, TYPE, ANNUAL_LOG_G_MEAN, ANNUAL_G_MEAN, SAMPLE_COUNT
 FROM WPG.BM_BEACH_EC_AGM  WHERE TYPE = 'FY')  AS LYAGM
ON CAGM.BEACH_CODE = LYAGM.BEACH_CODE AND CAGM.YEAR = LYAGM.YEAR + 1 ) AS AGM
INNER JOIN  WPG.BM_BEACH                 AS BCH  ON AGM.BEACH_CODE = BCH.BEACH_CODE
INNER JOIN  WPG.BM_DISTRICT              AS DST  ON BCH.DISTRICT_CODE = DST.DISTRICT_CODE
INNER JOIN  WPG.BM_BEACH_CONFIG          AS BCC  ON BCH.BEACH_CODE = BCC.BEACH_CODE;


-- WPG.BM_BEACH_FC_AGM source

CREATE VIEW [WPG].[BM_BEACH_FC_AGM]
AS
SELECT  BEACH_CODE, YEAR, TYPE, ANNUAL_LOG_G_MEAN_FC, POWER(10.000, ANNUAL_LOG_G_MEAN_FC) AS ANNUAL_G_MEAN_FC, SAMPLE_COUNT
FROM    (SELECT  MS.BEACH_CODE, YEAR(MS.SAMPLE_DATE) AS YEAR, N'FY' AS TYPE,
                AVG(LOG_G_MEAN_FC) AS ANNUAL_LOG_G_MEAN_FC, COUNT(*) AS SAMPLE_COUNT 
            FROM [WPG].[BM_MLAB_SUMMARY] AS MS
            ----INNER JOIN  WPG.BM_BEACH        AS BCH  ON MS.BEACH_CODE = BCH.BEACH_CODE
            WHERE MONTH(MS.SAMPLE_DATE) BETWEEN 3 AND 10 
            --AND LOG_G_MEAN IS NOT NULL
            ----AND BCH.REMARK NOT LIKE '%@%' AND BCH.REMARK NOT LIKE '%*%'
            GROUP BY MS.BEACH_CODE, YEAR(MS.SAMPLE_DATE)  )  AS ALGM
        UNION
SELECT  BEACH_CODE, YEAR, TYPE, ANNUAL_LOG_G_MEAN_FC, POWER(10.000, ANNUAL_LOG_G_MEAN_FC) AS ANNUAL_G_MEAN_FC, SAMPLE_COUNT
FROM    (SELECT  MS.BEACH_CODE, YEAR(MS.SAMPLE_DATE) AS YEAR, N'TD' AS TYPE,
                AVG(LOG_G_MEAN_FC) AS ANNUAL_LOG_G_MEAN_FC, COUNT(*) AS SAMPLE_COUNT 
            FROM [WPG].[BM_MLAB_SUMMARY] AS MS
            WHERE MONTH(MS.SAMPLE_DATE) >= 3 
            AND (MONTH(SAMPLE_DATE) * 31 + DAY(SAMPLE_DATE)) < (MONTH(GETDATE()) * 31 + DAY(GETDATE())) 
            --AND LOG_G_MEAN IS NOT NULL
            GROUP BY MS.BEACH_CODE, YEAR(MS.SAMPLE_DATE)  )  AS CLGM;


-- WPG.BM_BEACH_FC_AGM_RANK_REPORT source

CREATE VIEW [WPG].[BM_BEACH_FC_AGM_RANK_REPORT]
AS
SELECT  DST.DISTRICT_NAME_DISPLAY AS DISTRICT_NAME, DST.DISTRICT_NAME_C, DST.HOTLINE_DISTRICT, DST.HOTLINE_DISTRICT_C,
		BCH.BEACH_NAME, BCH.CHINESE_NAME, BCC.BEACH_GROUP, BCC.DISTRICT_ORDER, 
		AGM.BEACH_CODE, AGM.YEAR, ANNUAL_LOG_G_MEAN_FC, ANNUAL_G_MEAN_FC, SAMPLE_COUNT, RANK, BCC.LIST_ORDER_2
FROM (SELECT BEACH_CODE, YEAR, TYPE, ANNUAL_LOG_G_MEAN_FC, ANNUAL_G_MEAN_FC, SAMPLE_COUNT,
        (SELECT ISNULL(MIN(PA.PARAMETER_VALUE), 4) AS RANK  FROM WPG.BM_PARAMETER AS PA
            WHERE PARAMETER_SET = 'ranklimit' and ANNUAL_G_MEAN_FC < CAST(PARAMETER_LABEL AS DECIMAL)) AS RANK
      FROM WPG.BM_BEACH_FC_AGM  WHERE TYPE = 'FY' )  AS AGM   
INNER JOIN  WPG.BM_BEACH                 AS BCH  ON AGM.BEACH_CODE = BCH.BEACH_CODE
INNER JOIN  WPG.BM_DISTRICT              AS DST  ON BCH.DISTRICT_CODE = DST.DISTRICT_CODE
INNER JOIN  WPG.BM_BEACH_CONFIG          AS BCC  ON BCH.BEACH_CODE = BCC.BEACH_CODE;


-- WPG.BM_BEACH_FC_AGM_VIEW source

CREATE VIEW [WPG].[BM_BEACH_FC_AGM_VIEW]
AS
SELECT  DST.DISTRICT_NAME_DISPLAY AS DISTRICT_NAME, DST.DISTRICT_NAME_C, DST.HOTLINE_DISTRICT, DST.HOTLINE_DISTRICT_C,
		BCH.BEACH_NAME, BCH.CHINESE_NAME, BCC.BEACH_GROUP, BCC.DISTRICT_ORDER, 
		AGM.BEACH_CODE, AGM.YEAR, CY_AGM, CY_COUNT, LY_AGM, LY_COUNT, LY_YEAR_AGM, LY_YEAR_COUNT
FROM
(SELECT CAGM.BEACH_CODE, CAGM.YEAR, CAGM.ANNUAL_G_MEAN_FC CY_AGM, CAGM.SAMPLE_COUNT CY_COUNT, LAGM.ANNUAL_G_MEAN_FC LY_AGM, 
	LAGM.SAMPLE_COUNT LY_COUNT, LYAGM.ANNUAL_G_MEAN_FC LY_YEAR_AGM, LYAGM.SAMPLE_COUNT LY_YEAR_COUNT
FROM
(SELECT BEACH_CODE, YEAR, TYPE, ANNUAL_LOG_G_MEAN_FC, ANNUAL_G_MEAN_FC, SAMPLE_COUNT
 FROM WPG.BM_BEACH_FC_AGM  WHERE TYPE = 'TD')  AS CAGM 
INNER JOIN  
(SELECT BEACH_CODE, YEAR, TYPE, ANNUAL_LOG_G_MEAN_FC, ANNUAL_G_MEAN_FC, SAMPLE_COUNT
 FROM WPG.BM_BEACH_FC_AGM  WHERE TYPE = 'TD')  AS LAGM
ON CAGM.BEACH_CODE = LAGM.BEACH_CODE AND CAGM.YEAR = LAGM.YEAR + 1
INNER JOIN  
(SELECT BEACH_CODE, YEAR, TYPE, ANNUAL_LOG_G_MEAN_FC, ANNUAL_G_MEAN_FC, SAMPLE_COUNT
 FROM WPG.BM_BEACH_FC_AGM  WHERE TYPE = 'FY')  AS LYAGM
ON CAGM.BEACH_CODE = LYAGM.BEACH_CODE AND CAGM.YEAR = LYAGM.YEAR + 1 ) AS AGM
INNER JOIN  WPG.BM_BEACH                 AS BCH  ON AGM.BEACH_CODE = BCH.BEACH_CODE
INNER JOIN  WPG.BM_DISTRICT              AS DST  ON BCH.DISTRICT_CODE = DST.DISTRICT_CODE
INNER JOIN  WPG.BM_BEACH_CONFIG          AS BCC  ON BCH.BEACH_CODE = BCC.BEACH_CODE;


-- WPG.BM_BEACH_GRADE_VIEW source

CREATE VIEW WPG.BM_BEACH_GRADE_VIEW
AS
SELECT         DST.DISTRICT_NAME_DISPLAY AS DISTRICT_NAME, DST.DISTRICT_NAME_C, 
                          DST.HOTLINE_DISTRICT, DST.HOTLINE_DISTRICT_C, 
                          DST.DC_DISTRICT_CODE, DST.LCSD_DISTRICT_OFFICE, BCH.BEACH_NAME, 
                          BCH.CHINESE_NAME, BCC.BEACH_GROUP, BCC.DISTRICT_ORDER, 
                          AGM.BEACH_CODE, AGM.G_MEAN, AGM.R_G_MEAN, AGM.GRADE, 
                          GRADE.QUALITY, GRADE.QUALITY_C, AGM.SAMPLE_DATE, 
                          AGM.GRADE_CHANGE, AGM.TRG_LIMIT_1, AGM.TRG_LIMIT_2, 
                          AGM.TRG_LIMIT_3, AGM.TRG_LIMIT_4, BCC.LIST_ORDER_2, 
                          CASE WHEN AGM.GRADE_CHANGE <> 0 THEN CAST(AGM.GRADE + AGM.GRADE_CHANGE
                           AS varchar(10)) + '>' + CAST(AGM.GRADE AS varchar(10)) ELSE NULL 
                          END AS [GRADE_C], 
                          CASE WHEN AGM.GRADE_CHANGE <> 0 THEN AGM.SAMPLE_DATE ELSE NULL
                           END AS [GRADE_C_REF_SAMPLING_DATE]
FROM             WPG.BM_MLAB_SUMMARY AGM INNER JOIN
                              (SELECT         BEACH_CODE, MAX(BMVISIT_ID) AS BMVISIT_ID
                                FROM              WPG.BM_MLAB_SUMMARY
                                GROUP BY   BEACH_CODE) LAST_GRADE ON 
                          AGM.BMVISIT_ID = LAST_GRADE.BMVISIT_ID INNER JOIN
                              (SELECT         GRADE_E.PARAMETER_VALUE, 
                                                           GRADE_E.PARAMETER_LABEL QUALITY, 
                                                           GRADE_C.PARAMETER_LABEL QUALITY_C
                                FROM              (SELECT         PARAMETER_VALUE, PARAMETER_LABEL
                                                            FROM              WPG.BM_PARAMETER
                                                            WHERE          PARAMETER_SET = 'grade') 
                                                           AS GRADE_E INNER JOIN
                                                               (SELECT         PARAMETER_VALUE, PARAMETER_LABEL
                                                                 FROM              WPG.BM_PARAMETER
                                                                 WHERE          PARAMETER_SET = 'grade_c') AS GRADE_C ON 
                                                           GRADE_E.PARAMETER_VALUE = GRADE_C.PARAMETER_VALUE)
                           GRADE ON AGM.GRADE = GRADE.PARAMETER_VALUE INNER JOIN
                          WPG.BM_BEACH BCH ON AGM.BEACH_CODE = BCH.BEACH_CODE INNER JOIN
                          WPG.BM_DISTRICT DST ON 
                          BCH.DISTRICT_CODE = DST.DISTRICT_CODE INNER JOIN
                          WPG.BM_BEACH_CONFIG BCC ON BCH.BEACH_CODE = BCC.BEACH_CODE;


-- WPG.BM_BEACH_INFORMATION source

CREATE VIEW [WPG].[BM_BEACH_INFORMATION]
AS
SELECT  BCH.SITE_ID, BCH.BEACH_CODE, BCH.BEACH_NAME, BCH.CHINESE_NAME, BCH.SC_NAME, BCH.DISTRICT_CODE, BCH.RAIN_STATION_CODE, BCH.TIDE_STATION_CODE, BCH.REMARK, 
        BCH.SZ_ID, BCH.EASTING, BCH.NORTHING, BCH.LATITUDE, BCH.LONGITUDE, BCH.WCZ_CODE, 
        DST.DISTRICT_NAME, DST.DISTRICT_NAME_C, DST.HOTLINE_DISTRICT, DST.HOTLINE_DISTRICT_C, DST.DC_DISTRICT_CODE, DST.LCSD_DISTRICT_OFFICE, DST.DISTRICT_NAME_DISPLAY, 
        BCC.BEACH_GROUP, BCC.CLOSED, BCC.DISTRICT_ORDER, BCC.LIST_ORDER, BCC.WQ_ORDER, BCC.GRADE_CAT, BCC.SOURCE_S1, BCC.SOURCE_S2, 
        BCC.SOURCE_S3, BCC.SOURCE_S4, BCC.SOURCE_S5, BCC.FRESHWATER_F1, BCC.FRESHWATER_F2, BCC.FRESHWATER_F3, BCC.FRESHWATER_F4, BCC.FRESHWATER_F5, 
        BCC.SPOINT_R, BCC.SPOINT_M, BCC.SPOINT_L, BCC.SPOINT_O, LIST_ORDER_2
FROM  WPG.BM_BEACH AS BCH
INNER JOIN  WPG.BM_DISTRICT AS DST  ON BCH.DISTRICT_CODE = DST.DISTRICT_CODE
INNER JOIN  WPG.BM_BEACH_CONFIG AS BCC  ON BCH.SITE_ID = BCC.SITE_ID;


-- WPG.BM_CHECK_DRY_SF_VIEW source

CREATE VIEW WPG.BM_CHECK_DRY_SF_VIEW
AS
SELECT         BEACH_NAME, BMVISIT_ID, CONVERT(VARCHAR(10), SAMPLE_DATE, 103) 
                          AS DATE, EC_S1, EC_S2, EC_S3, EC_S4, EC_S5, EC_F1, EC_F2, EC_F3, EC_F4, 
                          EC_F5, FLOW_LABEL_S1, FLOW_LABEL_S2, FLOW_LABEL_S3, 
                          FLOW_LABEL_S4, FLOW_LABEL_S5, FLOW_LABEL_F1, FLOW_LABEL_F2, 
                          FLOW_LABEL_F3, FLOW_LABEL_F4, FLOW_LABEL_F5
FROM             WPG.BM_VISIT_LABEL_SUMMARY
WHERE         (((EC_F1 > 0) AND (FLOW_LABEL_F1 = 'Dry')) OR
                          ((EC_F2 > 0) AND (FLOW_LABEL_F2 = 'Dry')) OR
                          ((EC_F3 > 0) AND (FLOW_LABEL_F3 = 'Dry')) OR
                          ((EC_F4 > 0) AND (FLOW_LABEL_F4 = 'Dry')) OR
                          ((EC_F5 > 0) AND (FLOW_LABEL_F5 = 'Dry')) OR
                          ((EC_S1 IS NOT NULL) AND (FLOW_LABEL_S1 IS NULL)) OR
                          ((FLOW_LABEL_S1 IS NOT NULL) AND ((EC_S1 IS NULL) OR
                          (FLOW_LABEL_S1 <> 'N/A'))) OR
                          ((EC_S2 IS NOT NULL) AND (FLOW_LABEL_S2 IS NULL)) OR
                          ((FLOW_LABEL_S2 IS NOT NULL) AND ((EC_S2 IS NULL) OR
                          (FLOW_LABEL_S2 <> 'N/A'))) OR
                          ((EC_S3 IS NOT NULL) AND (FLOW_LABEL_S3 IS NULL)) OR
                          ((FLOW_LABEL_S3 IS NOT NULL) AND ((EC_S3 IS NULL) OR
                          (FLOW_LABEL_S3 <> 'N/A'))) OR
                          ((EC_S4 IS NOT NULL) AND (FLOW_LABEL_S4 IS NULL)) OR
                          ((FLOW_LABEL_S4 IS NOT NULL) AND ((EC_S4 IS NULL) OR
                          (FLOW_LABEL_S4 <> 'N/A'))) OR
                          ((EC_S5 IS NOT NULL) AND (FLOW_LABEL_S5 IS NULL)) OR
                          ((FLOW_LABEL_S5 IS NOT NULL) AND ((EC_S5 IS NULL) OR
                          (FLOW_LABEL_S5 <> 'N/A')))) AND substring(bmvisit_id, 1, 4) >= '2014'
UNION
SELECT         BEACH_NAME, BMVISIT_ID, CONVERT(VARCHAR(10), SAMPLE_DATE, 103) 
                          AS DATE, EC_S1, EC_S2, EC_S3, EC_S4, EC_S5, EC_F1, EC_F2, EC_F3, EC_F4, 
                          EC_F5, FLOW_LABEL_S1, FLOW_LABEL_S2, FLOW_LABEL_S3, 
                          FLOW_LABEL_S4, FLOW_LABEL_S5, FLOW_LABEL_F1, FLOW_LABEL_F2, 
                          FLOW_LABEL_F3, FLOW_LABEL_F4, FLOW_LABEL_F5
FROM             WPG.BM_VISIT_LABEL_SUMMARY
WHERE         (((EC_F1 IS NULL) AND (FLOW_LABEL_F1 <> 'Dry' AND 
                          FLOW_LABEL_F1 <> 'N/A')) OR
                          ((EC_F2 IS NULL) AND (FLOW_LABEL_F2 <> 'Dry' AND 
                          FLOW_LABEL_F2 <> 'N/A')) OR
                          ((EC_F3 IS NULL) AND (FLOW_LABEL_F3 <> 'Dry' AND 
                          FLOW_LABEL_F3 <> 'N/A')) OR
                          ((EC_F4 IS NULL) AND (FLOW_LABEL_F4 <> 'Dry' AND 
                          FLOW_LABEL_F4 <> 'N/A')) OR
                          ((EC_F5 IS NULL) AND (FLOW_LABEL_F5 <> 'Dry' AND 
                          FLOW_LABEL_F5 <> 'N/A')) OR
                          ((EC_S1 IS NOT NULL) AND (FLOW_LABEL_S1 IS NULL)) OR
                          ((FLOW_LABEL_S1 IS NOT NULL) AND ((EC_S1 IS NULL) OR
                          (FLOW_LABEL_S1 <> 'N/A'))) OR
                          ((EC_S2 IS NOT NULL) AND (FLOW_LABEL_S2 IS NULL)) OR
                          ((FLOW_LABEL_S2 IS NOT NULL) AND ((EC_S2 IS NULL) OR
                          (FLOW_LABEL_S2 <> 'N/A'))) OR
                          ((EC_S3 IS NOT NULL) AND (FLOW_LABEL_S3 IS NULL)) OR
                          ((FLOW_LABEL_S3 IS NOT NULL) AND ((EC_S3 IS NULL) OR
                          (FLOW_LABEL_S3 <> 'N/A'))) OR
                          ((EC_S4 IS NOT NULL) AND (FLOW_LABEL_S4 IS NULL)) OR
                          ((FLOW_LABEL_S4 IS NOT NULL) AND ((EC_S4 IS NULL) OR
                          (FLOW_LABEL_S4 <> 'N/A'))) OR
                          ((EC_S5 IS NOT NULL) AND (FLOW_LABEL_S5 IS NULL)) OR
                          ((FLOW_LABEL_S5 IS NOT NULL) AND ((EC_S5 IS NULL) OR
                          (FLOW_LABEL_S5 <> 'N/A')))) AND substring(bmvisit_id, 1, 4) >= '2014';


-- WPG.BM_FLOW_LST source

CREATE VIEW [WPG].[BM_FLOW_LST]
AS

select BMVISIT_ID,
    MAX(CASE WHEN SOURCE_CODE = 'S1' THEN FLOW_CODE ELSE NULL END)  [FLOW_S1],
    MAX(CASE WHEN SOURCE_CODE = 'S2' THEN FLOW_CODE ELSE NULL END)  [FLOW_S2],
    MAX(CASE WHEN SOURCE_CODE = 'S3' THEN FLOW_CODE ELSE NULL END)  [FLOW_S3],
    MAX(CASE WHEN SOURCE_CODE = 'S4' THEN FLOW_CODE ELSE NULL END)  [FLOW_S4],
    MAX(CASE WHEN SOURCE_CODE = 'S5' THEN FLOW_CODE ELSE NULL END)  [FLOW_S5],
    MAX(CASE WHEN SOURCE_CODE = 'F1' THEN FLOW_CODE ELSE NULL END)  [FLOW_F1],
    MAX(CASE WHEN SOURCE_CODE = 'F2' THEN FLOW_CODE ELSE NULL END)  [FLOW_F2],
    MAX(CASE WHEN SOURCE_CODE = 'F3' THEN FLOW_CODE ELSE NULL END)  [FLOW_F3],
    MAX(CASE WHEN SOURCE_CODE = 'F4' THEN FLOW_CODE ELSE NULL END)  [FLOW_F4],
    MAX(CASE WHEN SOURCE_CODE = 'F5' THEN FLOW_CODE ELSE NULL END)  [FLOW_F5]
FROM wpg.BM_FLOW AS FL
GROUP BY BMVISIT_ID


/*
select BMVISIT_ID,
    MAX(CASE WHEN SOURCE_CODE = 'S1' THEN FLOW_CODE ELSE NULL END)  [FLOW_S1],
    MAX(CASE WHEN SOURCE_CODE = 'S2' THEN FLOW_CODE ELSE NULL END)  [FLOW_S2],
    MAX(CASE WHEN SOURCE_CODE = 'S3' THEN FLOW_CODE ELSE NULL END)  [FLOW_S3],
    MAX(CASE WHEN SOURCE_CODE = 'S4' THEN FLOW_CODE ELSE NULL END)  [FLOW_S4],
    MAX(CASE WHEN SOURCE_CODE = 'S5' THEN FLOW_CODE ELSE NULL END)  [FLOW_S5],
    MAX(CASE WHEN SOURCE_CODE = 'F1' THEN FLOW_CODE ELSE NULL END)  [FLOW_F1],
    MAX(CASE WHEN SOURCE_CODE = 'F2' THEN FLOW_CODE ELSE NULL END)  [FLOW_F2],
    MAX(CASE WHEN SOURCE_CODE = 'F3' THEN FLOW_CODE ELSE NULL END)  [FLOW_F3],
    MAX(CASE WHEN SOURCE_CODE = 'F4' THEN FLOW_CODE ELSE NULL END)  [FLOW_F4],
    MAX(CASE WHEN SOURCE_CODE = 'F5' THEN FLOW_CODE ELSE NULL END)  [FLOW_F5]
FROM wpg.BM_FLOW AS FL
GROUP BY BMVISIT_ID
*/;


-- WPG.BM_MLAB_COMPARE_C source

CREATE VIEW [WPG].[BM_MLAB_COMPARE_C]
AS
SELECT      
    DST.[DISTRICT_NAME],
    BCH.[BEACH_NAME],
    BC.[BEACH_GROUP],
    BC.[CLOSED],
    BC.[DISTRICT_ORDER],
    BC.[LIST_ORDER],
    VI.BMVISIT, VI.BEACH_CODE, VI.SAMPLE_DATE, VI.LOCATION_CODE, 
        ML.EC MLAB_EC, MC.L_EC CL_L_EC, MC.EC CL_EC, MC.EST_EC CL_EST_EC, 
        MC.L_ENTRC CL_L_ENTRC, MC.ENTRC CL_ENTRC, MC.EST_ENTRC CL_EST_ENTRC 
FROM (
    SELECT LEFT(BMVISIT_ID,12) BMVISIT, BEACH_CODE, SAMPLE_DATE, LOCATION_CODE FROM WPG.BM_MLAB
    UNION
    SELECT LEFT(BMVISIT_ID,12) BMVISIT, BEACH_CODE, SAMPLE_DATE, LOCATION_CODE FROM WPG.BM_MLAB_C) AS VI
LEFT OUTER JOIN WPG.BM_MLAB AS ML
    ON LEFT(ML.BMVISIT_ID, 12) = VI.BMVISIT AND ML.LOCATION_CODE=VI.LOCATION_CODE 
LEFT OUTER JOIN WPG.BM_MLAB_C AS MC
    ON LEFT(MC.BMVISIT_ID, 12) = VI.BMVISIT AND MC.LOCATION_CODE=VI.LOCATION_CODE
LEFT OUTER JOIN [WPG].[BM_BEACH] AS BCH ON VI.BEACH_CODE = BCH.BEACH_CODE
LEFT OUTER JOIN [WPG].[BM_DISTRICT] AS DST ON BCH.DISTRICT_CODE = DST.DISTRICT_CODE
LEFT OUTER JOIN [WPG].[BM_BEACH_CONFIG] AS BC ON VI.BEACH_CODE = BC.BEACH_CODE;


-- WPG.BM_MLAB_LST source

CREATE VIEW WPG.BM_MLAB_LST
AS
SELECT         BMVISIT_ID, SUM(CASE WHEN LOCATION_CODE = 'R' THEN EC ELSE NULL 
                          END) [EC_R], SUM(CASE WHEN LOCATION_CODE = 'M' THEN EC ELSE NULL 
                          END) [EC_M], SUM(CASE WHEN LOCATION_CODE = 'L' THEN EC ELSE NULL 
                          END) [EC_L], SUM(CASE WHEN LOCATION_CODE = 'O' THEN EC ELSE NULL 
                          END) [EC_O], SUM(CASE WHEN LOCATION_CODE = 'S1' THEN EC ELSE NULL 
                          END) [EC_S1], SUM(CASE WHEN LOCATION_CODE = 'S2' THEN EC ELSE NULL 
                          END) [EC_S2], SUM(CASE WHEN LOCATION_CODE = 'S3' THEN EC ELSE NULL 
                          END) [EC_S3], SUM(CASE WHEN LOCATION_CODE = 'S4' THEN EC ELSE NULL 
                          END) [EC_S4], SUM(CASE WHEN LOCATION_CODE = 'S5' THEN EC ELSE NULL 
                          END) [EC_S5], SUM(CASE WHEN LOCATION_CODE = 'F1' THEN EC ELSE NULL 
                          END) [EC_F1], SUM(CASE WHEN LOCATION_CODE = 'F2' THEN EC ELSE NULL 
                          END) [EC_F2], SUM(CASE WHEN LOCATION_CODE = 'F3' THEN EC ELSE NULL 
                          END) [EC_F3], SUM(CASE WHEN LOCATION_CODE = 'F4' THEN EC ELSE NULL 
                          END) [EC_F4], SUM(CASE WHEN LOCATION_CODE = 'F5' THEN EC ELSE NULL 
                          END) [EC_F5], SUM(CASE WHEN (LOCATION_CODE = 'S1' OR
                          LOCATION_CODE = 'F1') THEN SAL ELSE NULL END) [SAL_S1], 
                          SUM(CASE WHEN (LOCATION_CODE = 'S2' OR
                          LOCATION_CODE = 'F2') THEN SAL ELSE NULL END) [SAL_S2], 
                          SUM(CASE WHEN (LOCATION_CODE = 'S3' OR
                          LOCATION_CODE = 'F3') THEN SAL ELSE NULL END) [SAL_S3], 
                          SUM(CASE WHEN (LOCATION_CODE = 'S4' OR
                          LOCATION_CODE = 'F4') THEN SAL ELSE NULL END) [SAL_S4], 
                          SUM(CASE WHEN (LOCATION_CODE = 'S5' OR
                          LOCATION_CODE = 'F5') THEN SAL ELSE NULL END) [SAL_S5], 
                          SUM(CASE WHEN LOCATION_CODE = 'R' THEN FC ELSE NULL END) [FC_R], 
                          SUM(CASE WHEN LOCATION_CODE = 'M' THEN FC ELSE NULL END) [FC_M], 
                          SUM(CASE WHEN LOCATION_CODE = 'L' THEN FC ELSE NULL END) [FC_L], 
                          SUM(CASE WHEN LOCATION_CODE = 'O' THEN FC ELSE NULL END) [FC_O], 
                          SUM(CASE WHEN LOCATION_CODE = 'S1' THEN FC ELSE NULL END) [FC_S1], 
                          SUM(CASE WHEN LOCATION_CODE = 'S2' THEN FC ELSE NULL END) [FC_S2], 
                          SUM(CASE WHEN LOCATION_CODE = 'S3' THEN FC ELSE NULL END) [FC_S3], 
                          SUM(CASE WHEN LOCATION_CODE = 'S4' THEN FC ELSE NULL END) [FC_S4], 
                          SUM(CASE WHEN LOCATION_CODE = 'S5' THEN FC ELSE NULL END) [FC_S5], 
                          SUM(CASE WHEN LOCATION_CODE = 'F1' THEN FC ELSE NULL END) [FC_F1], 
                          SUM(CASE WHEN LOCATION_CODE = 'F2' THEN FC ELSE NULL END) [FC_F2], 
                          SUM(CASE WHEN LOCATION_CODE = 'F3' THEN FC ELSE NULL END) [FC_F3], 
                          SUM(CASE WHEN LOCATION_CODE = 'F4' THEN FC ELSE NULL END) [FC_F4], 
                          SUM(CASE WHEN LOCATION_CODE = 'F5' THEN FC ELSE NULL END) [FC_F5], 
                          SUM(CASE WHEN LOCATION_CODE = 'S1' THEN SAL ELSE NULL END) 
                          [SAL_S1_2], SUM(CASE WHEN LOCATION_CODE = 'S2' THEN SAL ELSE NULL 
                          END) [SAL_S2_2], 
                          SUM(CASE WHEN LOCATION_CODE = 'S3' THEN SAL ELSE NULL END) 
                          [SAL_S3_2], SUM(CASE WHEN LOCATION_CODE = 'S4' THEN SAL ELSE NULL 
                          END) [SAL_S4_2], 
                          SUM(CASE WHEN LOCATION_CODE = 'S5' THEN SAL ELSE NULL END) 
                          [SAL_S5_2], SUM(CASE WHEN LOCATION_CODE = 'F1' THEN SAL ELSE NULL 
                          END) [SAL_F1_2], 
                          SUM(CASE WHEN LOCATION_CODE = 'F2' THEN SAL ELSE NULL END) 
                          [SAL_F2_2], SUM(CASE WHEN LOCATION_CODE = 'F3' THEN SAL ELSE NULL 
                          END) [SAL_F3_2], 
                          SUM(CASE WHEN LOCATION_CODE = 'F4' THEN SAL ELSE NULL END) 
                          [SAL_F4_2], SUM(CASE WHEN LOCATION_CODE = 'F5' THEN SAL ELSE NULL 
                          END) [SAL_F5_2], SUM(PH) [PH], MAX(CASE WHEN BEACH_CODE = 'LMN' AND 
                          LOCATION_CODE = 'M' THEN SAL WHEN BEACH_CODE <> 'LMN' AND 
                          LOCATION_CODE = 'M' THEN SAL WHEN BEACH_CODE <> 'LMN' AND 
                          LOCATION_CODE = 'R' THEN SAL WHEN BEACH_CODE <> 'LMN' AND 
                          LOCATION_CODE = 'L' THEN SAL WHEN BEACH_CODE <> 'LMN' AND 
                          LOCATION_CODE = 'O' THEN SAL ELSE NULL END) [SAL], 
                          SUM(CASE WHEN LOCATION_CODE = 'R' THEN SAL ELSE NULL END) [SAL_R], 
                          SUM(CASE WHEN LOCATION_CODE = 'M' THEN SAL ELSE NULL END) [SAL_M], 
                          SUM(CASE WHEN LOCATION_CODE = 'L' THEN SAL ELSE NULL END) [SAL_L], 
                          SUM(CASE WHEN LOCATION_CODE = 'O' THEN SAL ELSE NULL END) [SAL_O], 
                          SUM(TURB) [TURB]
FROM             WPG.BM_MLAB AS ML
GROUP BY  BMVISIT_ID;


-- WPG.BM_MLAB_LST_C source

CREATE VIEW [WPG].[BM_MLAB_LST_C]
AS
select BMVISIT_ID,
    SUM(CASE WHEN LOCATION_CODE = 'R' THEN EC ELSE NULL END)   [EC_R],
    SUM(CASE WHEN LOCATION_CODE = 'M' THEN EC ELSE NULL END)   [EC_M],
    SUM(CASE WHEN LOCATION_CODE = 'L' THEN EC ELSE NULL END)   [EC_L],
    SUM(CASE WHEN LOCATION_CODE = 'O' THEN EC ELSE NULL END)   [EC_O],
    SUM(CASE WHEN LOCATION_CODE = 'A1' THEN EC ELSE NULL END)  [EC_A1],
    SUM(CASE WHEN LOCATION_CODE = 'A2' THEN EC ELSE NULL END)  [EC_A2],
    SUM(CASE WHEN LOCATION_CODE = 'A3' THEN EC ELSE NULL END)  [EC_A3],
    SUM(CASE WHEN LOCATION_CODE = 'A4' THEN EC ELSE NULL END)  [EC_A4],
    SUM(CASE WHEN LOCATION_CODE = 'A5' THEN EC ELSE NULL END)  [EC_A5],
    SUM(CASE WHEN LOCATION_CODE = 'R' THEN ENTRC ELSE NULL END)   [ENTRC_R],
    SUM(CASE WHEN LOCATION_CODE = 'M' THEN ENTRC ELSE NULL END)   [ENTRC_M],
    SUM(CASE WHEN LOCATION_CODE = 'L' THEN ENTRC ELSE NULL END)   [ENTRC_L],
    SUM(CASE WHEN LOCATION_CODE = 'O' THEN ENTRC ELSE NULL END)   [ENTRC_O],
    SUM(CASE WHEN LOCATION_CODE = 'A1' THEN ENTRC ELSE NULL END)  [ENTRC_A1],
    SUM(CASE WHEN LOCATION_CODE = 'A2' THEN ENTRC ELSE NULL END)  [ENTRC_A2],
    SUM(CASE WHEN LOCATION_CODE = 'A3' THEN ENTRC ELSE NULL END)  [ENTRC_A3],
    SUM(CASE WHEN LOCATION_CODE = 'A4' THEN ENTRC ELSE NULL END)  [ENTRC_A4],
    SUM(CASE WHEN LOCATION_CODE = 'A5' THEN ENTRC ELSE NULL END)  [ENTRC_A5],
    MAX(CASE WHEN LOCATION_CODE = 'R' THEN L_EC ELSE NULL END)   [L_EC_R],
    MAX(CASE WHEN LOCATION_CODE = 'M' THEN L_EC ELSE NULL END)   [L_EC_M],
    MAX(CASE WHEN LOCATION_CODE = 'L' THEN L_EC ELSE NULL END)   [L_EC_L],
    MAX(CASE WHEN LOCATION_CODE = 'O' THEN L_EC ELSE NULL END)   [L_EC_O],
    MAX(CASE WHEN LOCATION_CODE = 'A1' THEN L_EC ELSE NULL END)  [L_EC_A1],
    MAX(CASE WHEN LOCATION_CODE = 'A2' THEN L_EC ELSE NULL END)  [L_EC_A2],
    MAX(CASE WHEN LOCATION_CODE = 'A3' THEN L_EC ELSE NULL END)  [L_EC_A3],
    MAX(CASE WHEN LOCATION_CODE = 'A4' THEN L_EC ELSE NULL END)  [L_EC_A4],
    MAX(CASE WHEN LOCATION_CODE = 'A5' THEN L_EC ELSE NULL END)  [L_EC_A5],
    MAX(CASE WHEN LOCATION_CODE = 'R' THEN L_ENTRC ELSE NULL END)   [L_ENTRC_R],
    MAX(CASE WHEN LOCATION_CODE = 'M' THEN L_ENTRC ELSE NULL END)   [L_ENTRC_M],
    MAX(CASE WHEN LOCATION_CODE = 'L' THEN L_ENTRC ELSE NULL END)   [L_ENTRC_L],
    MAX(CASE WHEN LOCATION_CODE = 'O' THEN L_ENTRC ELSE NULL END)   [L_ENTRC_O],
    MAX(CASE WHEN LOCATION_CODE = 'A1' THEN L_ENTRC ELSE NULL END)  [L_ENTRC_A1],
    MAX(CASE WHEN LOCATION_CODE = 'A2' THEN L_ENTRC ELSE NULL END)  [L_ENTRC_A2],
    MAX(CASE WHEN LOCATION_CODE = 'A3' THEN L_ENTRC ELSE NULL END)  [L_ENTRC_A3],
    MAX(CASE WHEN LOCATION_CODE = 'A4' THEN L_ENTRC ELSE NULL END)  [L_ENTRC_A4],
    MAX(CASE WHEN LOCATION_CODE = 'A5' THEN L_ENTRC ELSE NULL END)  [L_ENTRC_A5],
    MAX(CASE WHEN LOCATION_CODE = 'R' THEN EST_EC ELSE NULL END)   [EST_EC_R],
    MAX(CASE WHEN LOCATION_CODE = 'M' THEN EST_EC ELSE NULL END)   [EST_EC_M],
    MAX(CASE WHEN LOCATION_CODE = 'L' THEN EST_EC ELSE NULL END)   [EST_EC_L],
    MAX(CASE WHEN LOCATION_CODE = 'O' THEN EST_EC ELSE NULL END)   [EST_EC_O],
    MAX(CASE WHEN LOCATION_CODE = 'A1' THEN EST_EC ELSE NULL END)  [EST_EC_A1],
    MAX(CASE WHEN LOCATION_CODE = 'A2' THEN EST_EC ELSE NULL END)  [EST_EC_A2],
    MAX(CASE WHEN LOCATION_CODE = 'A3' THEN EST_EC ELSE NULL END)  [EST_EC_A3],
    MAX(CASE WHEN LOCATION_CODE = 'A4' THEN EST_EC ELSE NULL END)  [EST_EC_A4],
    MAX(CASE WHEN LOCATION_CODE = 'A5' THEN EST_EC ELSE NULL END)  [EST_EC_A5],
    MAX(CASE WHEN LOCATION_CODE = 'R' THEN EST_ENTRC ELSE NULL END)   [EST_ENTRC_R],
    MAX(CASE WHEN LOCATION_CODE = 'M' THEN EST_ENTRC ELSE NULL END)   [EST_ENTRC_M],
    MAX(CASE WHEN LOCATION_CODE = 'L' THEN EST_ENTRC ELSE NULL END)   [EST_ENTRC_L],
    MAX(CASE WHEN LOCATION_CODE = 'O' THEN EST_ENTRC ELSE NULL END)   [EST_ENTRC_O],
    MAX(CASE WHEN LOCATION_CODE = 'A1' THEN EST_ENTRC ELSE NULL END)  [EST_ENTRC_A1],
    MAX(CASE WHEN LOCATION_CODE = 'A2' THEN EST_ENTRC ELSE NULL END)  [EST_ENTRC_A2],
    MAX(CASE WHEN LOCATION_CODE = 'A3' THEN EST_ENTRC ELSE NULL END)  [EST_ENTRC_A3],
    MAX(CASE WHEN LOCATION_CODE = 'A4' THEN EST_ENTRC ELSE NULL END)  [EST_ENTRC_A4],
    MAX(CASE WHEN LOCATION_CODE = 'A5' THEN EST_ENTRC ELSE NULL END)  [EST_ENTRC_A5]
FROM WPG.BM_MLAB_C  AS ML
GROUP BY BMVISIT_ID;


-- WPG.BM_PHY source

CREATE VIEW WPG.BM_PHY
AS
SELECT          VI.BMVISIT_ID, VI.SITE_ID, VI.MDATE, VI.STIME, VI.SAMPLE_NO, FI.BEACH_CODE, FI.SAMPLE_DATE, 
                            FI.SAMPLE_TIME, FI.TEMPER, FI.DO, FI.DOS, MS.SAL, ML.SAL_R, ML.SAL_M, ML.SAL_L, ML.SAL_O, MS.PH, 
                            MS.TURB, FI.WEATHER_VALUE, FI.WIND_VALUE, FI.CLIMATE_VALUE, FI.SEA_CLARITY_VALUE, 
                            FI.SEA_CONDITION_VALUE, FI.WIND_DIRECTION, FI.BATHER_VALUE, FI.TIDE_VALUE, FI.TIDE_RATIO, 
                            FI.TIDE_HEIGHT, FI.ABS_TIDE_HEIGHT, ML.EC_R, ML.EC_M, ML.EC_L, ML.EC_O, ML.EC_S1, ML.EC_S2, ML.EC_S3, 
                            ML.EC_S4, ML.EC_S5, ML.SAL_S1, ML.SAL_S2, ML.SAL_S3, ML.SAL_S4, ML.SAL_S5, FL.FLOW_S1, FL.FLOW_S2, 
                            FL.FLOW_S3, FL.FLOW_S4, FL.FLOW_S5, FL.FLOW_F1, FL.FLOW_F2, FL.FLOW_F3, FL.FLOW_F4, FL.FLOW_F5, 
                            ML.EC_F1, ML.EC_F2, ML.EC_F3, ML.EC_F4, ML.EC_F5, MS.G_MEAN, MS.R_G_MEAN, MS.GRADE, FI.REMARKS, 
                            FI.DAYAPPEND, FI.DAYEDIT, FI.DAYUPLOAD, VI.VALID_USER, VI.VALID_DATE, VI.VALID_CODE, ML.FC_R, ML.FC_M, 
                            ML.FC_L, ML.FC_O, ML.FC_S1, ML.FC_S2, ML.FC_S3, ML.FC_S4, ML.FC_S5, ML.FC_F1, ML.FC_F2, ML.FC_F3, 
                            ML.FC_F4, ML.FC_F5, MS.G_MEAN_FC, MS.R_G_MEAN_FC, ML.SAL_S1_2, ML.SAL_S2_2, ML.SAL_S3_2, 
                            ML.SAL_S4_2, ML.SAL_S5_2, ML.SAL_F1_2, ML.SAL_F2_2, ML.SAL_F3_2, ML.SAL_F4_2, ML.SAL_F5_2, 
                            FI.MREFUSE_CLEANLINES_LEVEL
FROM              WPG.BM_VISIT AS VI LEFT OUTER JOIN
                            WPG.BM_FIELD AS FI ON VI.BMVISIT_ID = FI.BMVISIT_ID LEFT OUTER JOIN
                            WPG.BM_FLOW_LST AS FL ON VI.BMVISIT_ID = FL.BMVISIT_ID LEFT OUTER JOIN
                            WPG.BM_MLAB_SUMMARY AS MS ON VI.BMVISIT_ID = MS.BMVISIT_ID LEFT OUTER JOIN
                            WPG.BM_MLAB_LST AS ML ON VI.BMVISIT_ID = ML.BMVISIT_ID;


-- WPG.BM_RAINFALL_LST source

CREATE VIEW WPG.BM_RAINFALL_LST
AS
SELECT        SDATETIME, DATE, HOUR, SUM(CASE WHEN RAIN_STATION_CODE = 'H15' THEN RAINFALL ELSE NULL END) AS H15, SUM(CASE WHEN RAIN_STATION_CODE = 'N07' THEN RAINFALL ELSE NULL END) AS N07, 
                         SUM(CASE WHEN RAIN_STATION_CODE = 'N10' THEN RAINFALL ELSE NULL END) AS N10, SUM(CASE WHEN RAIN_STATION_CODE = 'N15' THEN RAINFALL ELSE NULL END) AS N15, 
                         SUM(CASE WHEN RAIN_STATION_CODE = 'N18' THEN RAINFALL ELSE NULL END) AS N18, SUM(CASE WHEN RAIN_STATION_CODE = 'R18' THEN RAINFALL ELSE NULL END) AS R18, 
                         SUM(CASE WHEN RAIN_STATION_CODE = 'R31' THEN RAINFALL ELSE NULL END) AS R31, SUM(CASE WHEN RAIN_STATION_CODE = 'LAM' OR
                         RAIN_STATION_CODE = 'R13' THEN RAINFALL ELSE NULL END) AS LAM, SUM(CASE WHEN RAIN_STATION_CODE = 'H21' THEN RAINFALL ELSE NULL END) AS H21, 
                         SUM(CASE WHEN RAIN_STATION_CODE = 'H30' THEN RAINFALL ELSE NULL END) AS H30
FROM            WPG.BM_RAINFALL
GROUP BY SDATETIME, DATE, HOUR;


-- WPG.BM_RAINFALL_LST_CHECK source

CREATE VIEW WPG.BM_RAINFALL_LST_CHECK
AS
SELECT        DATE, HOUR, H15, H21, N07, N10, N15, N18, R18, R31, LAM, H30
FROM            WPG.BM_RAINFALL_LST;


-- WPG.BM_VISIT_DATA_C source

CREATE VIEW [WPG].[BM_VISIT_DATA_C]
AS
SELECT
	VI.[BMVISIT_ID],
	VI.[SITE_ID],
	VI.[MDATE],
	VI.[STIME],
	VI.[SAMPLE_NO],
	FI.[BEACH_CODE],
    FI.[SAMPLE_DATE],
	FI.[SAMPLE_TIME],
	FI.[TEMPER],
	FI.[DO],
	FI.[DOS],
	ML.[SAL],
    ML.[PH],
	ML.[TURB],
    FI.[WEATHER_VALUE],
    FI.[WIND_VALUE],
	FI.[CLIMATE_VALUE],
	FI.[SEA_CLARITY_VALUE],
	FI.[SEA_CONDITION_VALUE],
	FI.[WIND_DIRECTION],
    FI.[BATHER_VALUE],
	FI.[TIDE_VALUE],
	FI.[TIDE_RATIO],
	FI.[TIDE_HEIGHT],
	FI.[ABS_TIDE_HEIGHT],
    ML.[L_FC],
    ML.[FC],
    ML.[L_EC],
    ML.[EC],
    ML.[EST_EC],
	ML.[L_ENTRC],
	ML.[ENTRC],
    ML.[EST_ENTRC],
	ML.[SAMPLE_MARK],
	ML.[LAB_NO],
	FI.[REMARKS],
    FI.[PHOTO_TAKEN],
    FI.[LOCATION_CODE],
    FI.[SAMPLE_CODE]
FROM [WPG].[BM_FIELD_C_AUX] AS FI 
LEFT OUTER JOIN [WPG].[BM_VISIT_C] AS VI ON FI.BMVISIT_ID = VI.BMVISIT_ID 
LEFT OUTER JOIN [WPG].[BM_MLAB_C] AS ML ON FI.BMVISIT_ID = ML.BMVISIT_ID AND FI.LOCATION_CODE = ML.LOCATION_CODE;


-- WPG.BM_VISIT_LABEL_SUMMARY source

CREATE VIEW WPG.BM_VISIT_LABEL_SUMMARY
AS
SELECT          DST.DISTRICT_NAME, BCH.BEACH_NAME, BC.BEACH_GROUP, BC.CLOSED, BC.DISTRICT_ORDER, BC.LIST_ORDER,
                             VI.BMVISIT_ID, VI.SITE_ID, VI.MDATE, VI.STIME, VI.SAMPLE_NO, FI.BEACH_CODE, FI.SAMPLE_DATE, 
                            FI.SAMPLE_TIME, FI.TEMPER, FI.DO, FI.DOS, MS.SAL, ML.SAL_R, ML.SAL_M, ML.SAL_L, ML.SAL_O, MS.PH, 
                            MS.TURB, FI.WEATHER_VALUE, FI.WIND_VALUE, FI.CLIMATE_VALUE, FI.SEA_CLARITY_VALUE, 
                            FI.SEA_CONDITION_VALUE, FI.WIND_DIRECTION, FI.BATHER_VALUE, FI.TIDE_VALUE, FI.TIDE_RATIO, 
                            FI.TIDE_HEIGHT, FI.ABS_TIDE_HEIGHT, ML.EC_R, ML.EC_M, ML.EC_L, ML.EC_O, ML.EC_S1, ML.EC_S2, ML.EC_S3, 
                            ML.EC_S4, ML.EC_S5, ML.SAL_S1, ML.SAL_S2, ML.SAL_S3, ML.SAL_S4, ML.SAL_S5, ML.SAL_S1_2, ML.SAL_S2_2, 
                            ML.SAL_S3_2, ML.SAL_S4_2, ML.SAL_S5_2, ML.SAL_F1_2, ML.SAL_F2_2, ML.SAL_F3_2, ML.SAL_F4_2, 
                            ML.SAL_F5_2, FL.FLOW_S1, FL.FLOW_S2, FL.FLOW_S3, FL.FLOW_S4, FL.FLOW_S5, FL.FLOW_F1, FL.FLOW_F2, 
                            FL.FLOW_F3, FL.FLOW_F4, FL.FLOW_F5, ML.EC_F1, ML.EC_F2, ML.EC_F3, ML.EC_F4, ML.EC_F5, ML_FC.FC_R, 
                            ML_FC.FC_M, ML_FC.FC_L, ML_FC.FC_O, ML_FC.FC_S1, ML_FC.FC_S2, ML_FC.FC_S3, ML_FC.FC_S4, 
                            ML_FC.FC_S5, ML_FC.FC_F1, ML_FC.FC_F2, ML_FC.FC_F3, ML_FC.FC_F4, ML_FC.FC_F5, MS.G_MEAN, 
                            MS.R_G_MEAN, MS.LOG_G_MEAN, MS.ADJ_LOG_GM, MS.MTH_G_MEAN, MS.WK_G_MEAN, MS.G_MEAN_FC, 
                            MS.R_G_MEAN_FC, MS.LOG_G_MEAN_FC, MS.ADJ_LOG_GM_FC, MS.MTH_G_MEAN_FC, MS.WK_G_MEAN_FC, 
                            MS.GRADE, MS.GRADE_CHANGE, MS.MOVE_AVG, MS.MOVE_AVG_FC, FI.REMARKS, FI.DAYAPPEND, FI.DAYEDIT, 
                            FI.DAYUPLOAD, RF.RAIN_STATION_CODE, RF.SDATETIME, RF.RAINFALL, RF.RAINFALL_MAX_3HR, 
                            RF.RAINFALL_MAX_TIME, RF.RAINFALL_LAST_12HR, RF.RAINFALL_LAST_24HR, RF.RAINFALL_LAST_72HR, 
                            RF.RISK_RAIN_MAX_3HR, RF.RISK_RAIN_LAST_12HR, RF.RISK_RAIN_LAST_24HR, RF.RISK_RAIN_LAST_72HR, 
                            P1.WEATHER, P2.WIND, P3.CLIMATE, P4.SEA_CLARITY, P5.SEA_CONDITION, P6.BATHER, P7.TIDE, 
                            S1.FLOW_LABEL AS FLOW_LABEL_S1, S2.FLOW_LABEL AS FLOW_LABEL_S2, 
                            S3.FLOW_LABEL AS FLOW_LABEL_S3, S4.FLOW_LABEL AS FLOW_LABEL_S4, 
                            S5.FLOW_LABEL AS FLOW_LABEL_S5, F1.FLOW_LABEL AS FLOW_LABEL_F1, 
                            F2.FLOW_LABEL AS FLOW_LABEL_F2, F3.FLOW_LABEL AS FLOW_LABEL_F3, 
                            F4.FLOW_LABEL AS FLOW_LABEL_F4, F5.FLOW_LABEL AS FLOW_LABEL_F5, BCH.TIDE_STATION_CODE, 
                            FI.MREFUSE_CLEANLINES_LEVEL
FROM              WPG.BM_VISIT AS VI LEFT OUTER JOIN
                            WPG.BM_FIELD AS FI ON VI.BMVISIT_ID = FI.BMVISIT_ID LEFT OUTER JOIN
                            WPG.BM_FLOW_LST AS FL ON VI.BMVISIT_ID = FL.BMVISIT_ID LEFT OUTER JOIN
                            WPG.BM_MLAB_SUMMARY AS MS ON VI.BMVISIT_ID = MS.BMVISIT_ID LEFT OUTER JOIN
                            WPG.BM_MLAB_LST AS ML ON VI.BMVISIT_ID = ML.BMVISIT_ID LEFT OUTER JOIN
                            WPG.BM_MLAB_LST AS ML_FC ON VI.BMVISIT_ID = ML_FC.BMVISIT_ID LEFT OUTER JOIN
                            WPG.BM_BEACH AS BCH ON VI.SITE_ID = BCH.SITE_ID LEFT OUTER JOIN
                            WPG.BM_DISTRICT AS DST ON BCH.DISTRICT_CODE = DST.DISTRICT_CODE LEFT OUTER JOIN
                            WPG.BM_BEACH_CONFIG AS BC ON VI.SITE_ID = BC.SITE_ID LEFT OUTER JOIN
                            WPG.BM_RAIN AS RF ON VI.BMVISIT_ID = RF.BMVISIT_ID LEFT OUTER JOIN
                                (SELECT          PARAMETER_VALUE AS WEATHER_VALUE, PARAMETER_LABEL AS WEATHER
FROM               WPG.BM_PARAMETER
                                  WHERE           (PARAMETER_NAME = 'Weather')) AS P1 ON 
                            FI.WEATHER_VALUE = P1.WEATHER_VALUE LEFT OUTER JOIN
                                (SELECT          PARAMETER_VALUE AS WIND_VALUE, PARAMETER_LABEL AS WIND
                                  FROM               WPG.BM_PARAMETER AS BM_PARAMETER_16
                                  WHERE           (PARAMETER_NAME = 'Wind Intensity')) AS P2 ON 
                            FI.WIND_VALUE = P2.WIND_VALUE LEFT OUTER JOIN
                                (SELECT          PARAMETER_VALUE AS CLIMATE_VALUE, PARAMETER_LABEL AS CLIMATE
                                  FROM               WPG.BM_PARAMETER AS BM_PARAMETER_15
                                  WHERE           (PARAMETER_NAME = 'Climate')) AS P3 ON 
                            FI.CLIMATE_VALUE = P3.CLIMATE_VALUE LEFT OUTER JOIN
                                (SELECT          PARAMETER_VALUE AS SEA_CLARITY_VALUE, PARAMETER_LABEL AS SEA_CLARITY
                                  FROM               WPG.BM_PARAMETER AS BM_PARAMETER_14
                                  WHERE           (PARAMETER_NAME = 'Sea Clarity')) AS P4 ON 
                            FI.SEA_CLARITY_VALUE = P4.SEA_CLARITY_VALUE LEFT OUTER JOIN
                                (SELECT          PARAMETER_VALUE AS SEA_CONDITION_VALUE, PARAMETER_LABEL AS SEA_CONDITION
                                  FROM               WPG.BM_PARAMETER AS BM_PARAMETER_13
                                  WHERE           (PARAMETER_NAME = 'Sea Condition')) AS P5 ON 
                            FI.SEA_CONDITION_VALUE = P5.SEA_CONDITION_VALUE LEFT OUTER JOIN
                                (SELECT          PARAMETER_VALUE AS BATHER_VALUE, PARAMETER_LABEL AS BATHER
                                  FROM               WPG.BM_PARAMETER AS BM_PARAMETER_12
                                  WHERE           (PARAMETER_NAME = 'Bather')) AS P6 ON FI.BATHER_VALUE = P6.BATHER_VALUE LEFT OUTER JOIN
                                (SELECT          PARAMETER_VALUE AS TIDE_VALUE, PARAMETER_LABEL AS TIDE
                                  FROM               WPG.BM_PARAMETER AS BM_PARAMETER_11
                                  WHERE           (PARAMETER_NAME = 'Tide')) AS P7 ON FI.TIDE_VALUE = P7.TIDE_VALUE LEFT OUTER JOIN
                                (SELECT          PARAMETER_CODE AS FLOW_CODE, PARAMETER_LABEL AS FLOW_LABEL
                                  FROM               WPG.BM_PARAMETER AS BM_PARAMETER_10
                                  WHERE           (PARAMETER_NAME = 'Flow')) AS S1 ON FL.FLOW_S1 = S1.FLOW_CODE LEFT OUTER JOIN
                                (SELECT          PARAMETER_CODE AS FLOW_CODE, PARAMETER_LABEL AS FLOW_LABEL
                                  FROM               WPG.BM_PARAMETER AS BM_PARAMETER_9
                                  WHERE           (PARAMETER_NAME = 'Flow')) AS S2 ON FL.FLOW_S2 = S2.FLOW_CODE LEFT OUTER JOIN
                                (SELECT          PARAMETER_CODE AS FLOW_CODE, PARAMETER_LABEL AS FLOW_LABEL
                                  FROM               WPG.BM_PARAMETER AS BM_PARAMETER_8
                                  WHERE           (PARAMETER_NAME = 'Flow')) AS S3 ON FL.FLOW_S3 = S3.FLOW_CODE LEFT OUTER JOIN
                                (SELECT          PARAMETER_CODE AS FLOW_CODE, PARAMETER_LABEL AS FLOW_LABEL
                                  FROM               WPG.BM_PARAMETER AS BM_PARAMETER_7
                                  WHERE           (PARAMETER_NAME = 'Flow')) AS S4 ON FL.FLOW_S4 = S4.FLOW_CODE LEFT OUTER JOIN
                                (SELECT          PARAMETER_CODE AS FLOW_CODE, PARAMETER_LABEL AS FLOW_LABEL
                                  FROM               WPG.BM_PARAMETER AS BM_PARAMETER_6
                                  WHERE           (PARAMETER_NAME = 'Flow')) AS S5 ON FL.FLOW_S5 = S5.FLOW_CODE LEFT OUTER JOIN
                                (SELECT          PARAMETER_CODE AS FLOW_CODE, PARAMETER_LABEL AS FLOW_LABEL
                                  FROM               WPG.BM_PARAMETER AS BM_PARAMETER_5
                                  WHERE           (PARAMETER_NAME = 'Flow')) AS F1 ON FL.FLOW_F1 = F1.FLOW_CODE LEFT OUTER JOIN
                                (SELECT          PARAMETER_CODE AS FLOW_CODE, PARAMETER_LABEL AS FLOW_LABEL
                                  FROM               WPG.BM_PARAMETER AS BM_PARAMETER_4
                                  WHERE           (PARAMETER_NAME = 'Flow')) AS F2 ON FL.FLOW_F2 = F2.FLOW_CODE LEFT OUTER JOIN
                                (SELECT          PARAMETER_CODE AS FLOW_CODE, PARAMETER_LABEL AS FLOW_LABEL
                                  FROM               WPG.BM_PARAMETER AS BM_PARAMETER_3
                                  WHERE           (PARAMETER_NAME = 'Flow')) AS F3 ON FL.FLOW_F3 = F3.FLOW_CODE LEFT OUTER JOIN
                                (SELECT          PARAMETER_CODE AS FLOW_CODE, PARAMETER_LABEL AS FLOW_LABEL
                                  FROM               WPG.BM_PARAMETER AS BM_PARAMETER_2
                                  WHERE           (PARAMETER_NAME = 'Flow')) AS F4 ON FL.FLOW_F4 = F4.FLOW_CODE LEFT OUTER JOIN
                                (SELECT          PARAMETER_CODE AS FLOW_CODE, PARAMETER_LABEL AS FLOW_LABEL
                                  FROM               WPG.BM_PARAMETER AS BM_PARAMETER_1
                                  WHERE           (PARAMETER_NAME = 'Flow')) AS F5 ON FL.FLOW_F5 = F5.FLOW_CODE;


-- WPG.BM_VISIT_LABEL_SUMMARY_C source

CREATE VIEW WPG.BM_VISIT_LABEL_SUMMARY_C
AS
SELECT         DST.DISTRICT_NAME, BCH.BEACH_NAME, BC.BEACH_GROUP, BC.CLOSED, 
                          BC.DISTRICT_ORDER, BC.LIST_ORDER, VI.BMVISIT_ID, VI.SITE_ID, VI.MDATE, 
                          VI.STIME, VI.SAMPLE_NO, FI.BEACH_CODE, FI.SAMPLE_DATE, 
                          FI.SAMPLE_TIME, FI.TEMPER, FI.DO, FI.DOS, MS.SAL, MS.PH, MS.TURB, 
                          FI.WEATHER_VALUE, FI.WIND_VALUE, FI.CLIMATE_VALUE, 
                          FI.SEA_CLARITY_VALUE, FI.SEA_CONDITION_VALUE, FI.WIND_DIRECTION, 
                          FI.BATHER_VALUE, FI.TIDE_VALUE, FI.TIDE_RATIO, FI.TIDE_HEIGHT, 
                          FI.ABS_TIDE_HEIGHT, ML.L_EC_R, ML.EC_R, ML.EST_EC_R, ML.L_EC_M, 
                          ML.EC_M, ML.EST_EC_M, ML.L_EC_L, ML.EC_L, ML.EST_EC_L, ML.L_EC_O, 
                          ML.EC_O, ML.EST_EC_O, ML.L_EC_A1, ML.EC_A1, ML.EST_EC_A1, 
                          ML.L_EC_A2, ML.EC_A2, ML.EST_EC_A2, ML.L_EC_A3, ML.EC_A3, 
                          ML.EST_EC_A3, ML.L_EC_A4, ML.EC_A4, ML.EST_EC_A4, ML.L_EC_A5, 
                          ML.EC_A5, ML.EST_EC_A5, ML.L_ENTRC_R, ML.ENTRC_R, ML.EST_ENTRC_R, 
                          ML.L_ENTRC_M, ML.ENTRC_M, ML.EST_ENTRC_M, ML.L_ENTRC_L, 
                          ML.ENTRC_L, ML.EST_ENTRC_L, ML.L_ENTRC_O, ML.ENTRC_O, 
                          ML.EST_ENTRC_O, ML.L_ENTRC_A1, ML.ENTRC_A1, ML.EST_ENTRC_A1, 
                          ML.L_ENTRC_A2, ML.ENTRC_A2, ML.EST_ENTRC_A2, ML.L_ENTRC_A3, 
                          ML.ENTRC_A3, ML.EST_ENTRC_A3, ML.L_ENTRC_A4, ML.ENTRC_A4, 
                          ML.EST_ENTRC_A4, ML.L_ENTRC_A5, ML.ENTRC_A5, ML.EST_ENTRC_A5, 
                          MS.G_MEAN, MS.R_G_MEAN, MS.LOG_G_MEAN, MS.ADJ_LOG_GM, 
                          MS.GRADE, MS.GRADE_CHANGE, MS1.G_MEAN AS ENTRC_G_MEAN, 
                          MS1.R_G_MEAN AS ENTRC_R_G_MEAN, 
                          MS1.LOG_G_MEAN AS ENTRC_LOG_G_MEAN, 
                          MS1.ADJ_LOG_GM AS ENTRC_ADJ_LOG_GM, FI.REMARKS, FI.DAYAPPEND, 
                          FI.DAYEDIT, FI.DAYUPLOAD, RF.RAIN_STATION_CODE, RF.SDATETIME, 
                          RF.RAINFALL, RF.RAINFALL_MAX_3HR, RF.RAINFALL_MAX_TIME, 
                          RF.RAINFALL_LAST_12HR, RF.RAINFALL_LAST_24HR, 
                          RF.RAINFALL_LAST_72HR, RF.RISK_RAIN_MAX_3HR, 
                          RF.RISK_RAIN_LAST_12HR, RF.RISK_RAIN_LAST_24HR, 
                          RF.RISK_RAIN_LAST_72HR, P1.WEATHER, P2.WIND, P3.CLIMATE, 
                          P4.SEA_CLARITY, P5.SEA_CONDITION, P6.BATHER, P7.TIDE
FROM             WPG.BM_VISIT_C VI LEFT OUTER JOIN
                          WPG.BM_FIELD_C FI ON VI.BMVISIT_ID = FI.BMVISIT_ID LEFT OUTER JOIN
                          WPG.BM_MLAB_SUMMARY_C MS ON 
                          VI.BMVISIT_ID = MS.BMVISIT_ID LEFT OUTER JOIN
                          WPG.BM_ENTRC_SUMMARY_C MS1 ON 
                          VI.BMVISIT_ID = MS1.BMVISIT_ID LEFT OUTER JOIN
                          WPG.BM_MLAB_LST_C ML ON 
                          VI.BMVISIT_ID = ML.BMVISIT_ID LEFT OUTER JOIN
                          WPG.BM_BEACH BCH ON VI.SITE_ID = BCH.SITE_ID LEFT OUTER JOIN
                          WPG.BM_DISTRICT DST ON 
                          BCH.DISTRICT_CODE = DST.DISTRICT_CODE LEFT OUTER JOIN
                          WPG.BM_BEACH_CONFIG BC ON VI.SITE_ID = BC.SITE_ID LEFT OUTER JOIN
                          WPG.BM_RAIN_C RF ON VI.BMVISIT_ID = RF.BMVISIT_ID LEFT OUTER JOIN
                              (SELECT         PARAMETER_VALUE AS WEATHER_VALUE, 
                                                           PARAMETER_LABEL AS WEATHER
                                FROM              WPG.BM_PARAMETER
                                WHERE          PARAMETER_NAME = 'Weather') P1 ON 
                          FI.WEATHER_VALUE = P1.WEATHER_VALUE LEFT OUTER JOIN
                              (SELECT         PARAMETER_VALUE AS WIND_VALUE, 
                                                           PARAMETER_LABEL AS WIND
                                FROM              WPG.BM_PARAMETER
                                WHERE          PARAMETER_NAME = 'Wind Intensity') P2 ON 
                          FI.WIND_VALUE = P2.WIND_VALUE LEFT OUTER JOIN
                              (SELECT         PARAMETER_VALUE AS CLIMATE_VALUE, 
                                                           PARAMETER_LABEL AS CLIMATE
                                FROM              WPG.BM_PARAMETER
                                WHERE          PARAMETER_NAME = 'Climate') P3 ON 
                          FI.CLIMATE_VALUE = P3.CLIMATE_VALUE LEFT OUTER JOIN
                              (SELECT         PARAMETER_VALUE AS SEA_CLARITY_VALUE, 
                                                           PARAMETER_LABEL AS SEA_CLARITY
                                FROM              WPG.BM_PARAMETER
                                WHERE          PARAMETER_NAME = 'Sea Clarity') P4 ON 
                          FI.SEA_CLARITY_VALUE = P4.SEA_CLARITY_VALUE LEFT OUTER JOIN
                              (SELECT         PARAMETER_VALUE AS SEA_CONDITION_VALUE, 
                                                           PARAMETER_LABEL AS SEA_CONDITION
                                FROM              WPG.BM_PARAMETER
                                WHERE          PARAMETER_NAME = 'Sea Condition') P5 ON 
                          FI.SEA_CONDITION_VALUE = P5.SEA_CONDITION_VALUE LEFT OUTER JOIN
                              (SELECT         PARAMETER_VALUE AS BATHER_VALUE, 
                                                           PARAMETER_LABEL AS BATHER
                                FROM              WPG.BM_PARAMETER
                                WHERE          PARAMETER_NAME = 'Bather') P6 ON 
                          FI.BATHER_VALUE = P6.BATHER_VALUE LEFT OUTER JOIN
                              (SELECT         PARAMETER_VALUE AS TIDE_VALUE, 
                                                           PARAMETER_LABEL AS TIDE
                                FROM              WPG.BM_PARAMETER
                                WHERE          PARAMETER_NAME = 'Tide') P7 ON 
                          FI.TIDE_VALUE = P7.TIDE_VALUE;


-- WPG.BM_VISIT_SUMMARY source

CREATE VIEW WPG.BM_VISIT_SUMMARY
AS
SELECT          DST.DISTRICT_NAME, BCH.BEACH_NAME, BC.BEACH_GROUP, BC.CLOSED, BC.DISTRICT_ORDER, BC.LIST_ORDER,
                             BC.LIST_ORDER_2, DST.HOTLINE_DISTRICT, VI.BMVISIT_ID, VI.SITE_ID, VI.MDATE, VI.STIME, VI.SAMPLE_NO, 
                            FI.BEACH_CODE, FI.SAMPLE_DATE, FI.SAMPLE_TIME, FI.TEMPER, FI.DO, FI.DOS, MS.SAL, ML.SAL_R, ML.SAL_M, 
                            ML.SAL_L, ML.SAL_O, MS.PH, MS.TURB, FI.WEATHER_VALUE, FI.WIND_VALUE, FI.CLIMATE_VALUE, 
                            FI.SEA_CLARITY_VALUE, FI.SEA_CONDITION_VALUE, FI.WIND_DIRECTION, FI.BATHER_VALUE, FI.TIDE_VALUE, 
                            FI.TIDE_RATIO, FI.TIDE_HEIGHT, FI.ABS_TIDE_HEIGHT, ML.EC_R, ML.EC_M, ML.EC_L, ML.EC_O, ML.EC_S1, 
                            ML.EC_S2, ML.EC_S3, ML.EC_S4, ML.EC_S5, ML.SAL_S1, ML.SAL_S2, ML.SAL_S3, ML.SAL_S4, ML.SAL_S5, 
                            ML.SAL_S1_2, ML.SAL_S2_2, ML.SAL_S3_2, ML.SAL_S4_2, ML.SAL_S5_2, ML.SAL_F1_2, ML.SAL_F2_2, 
                            ML.SAL_F3_2, ML.SAL_F4_2, ML.SAL_F5_2, FL.FLOW_S1, FL.FLOW_S2, FL.FLOW_S3, FL.FLOW_S4, FL.FLOW_S5, 
                            FL.FLOW_F1, FL.FLOW_F2, FL.FLOW_F3, FL.FLOW_F4, FL.FLOW_F5, ML.EC_F1, ML.EC_F2, ML.EC_F3, ML.EC_F4, 
                            ML.EC_F5, MS.G_MEAN, MS.R_G_MEAN, MS.LOG_G_MEAN, MS.ADJ_LOG_GM, MS.GRADE, MS.GRADE_CHANGE, 
                            FI.REMARKS, FI.DAYAPPEND, FI.DAYEDIT, FI.DAYUPLOAD, RF.RAIN_STATION_CODE, RF.SDATETIME, RF.RAINFALL, 
                            RF.RAINFALL_MAX_3HR, RF.RAINFALL_MAX_TIME, RF.RAINFALL_LAST_12HR, RF.RAINFALL_LAST_24HR, 
                            RF.RAINFALL_LAST_72HR, RF.RISK_RAIN_MAX_3HR, RF.RISK_RAIN_LAST_12HR, RF.RISK_RAIN_LAST_24HR, 
                            RF.RISK_RAIN_LAST_72HR, ML.FC_R, ML.FC_M, ML.FC_L, ML.FC_O, ML.FC_S1, ML.FC_S2, ML.FC_S3, ML.FC_S4, 
                            ML.FC_S5, ML.FC_F1, ML.FC_F2, ML.FC_F3, ML.FC_F4, ML.FC_F5, MS.G_MEAN_FC, MS.R_G_MEAN_FC, 
                            MS.LOG_G_MEAN_FC, MS.ADJ_LOG_GM_FC, MS.MTH_G_MEAN, MS.MTH_G_MEAN_FC, 
                            FI.MREFUSE_CLEANLINES_LEVEL
FROM              WPG.BM_VISIT AS VI LEFT OUTER JOIN
                            WPG.BM_FIELD AS FI ON VI.BMVISIT_ID = FI.BMVISIT_ID LEFT OUTER JOIN
                            WPG.BM_FLOW_LST AS FL ON VI.BMVISIT_ID = FL.BMVISIT_ID LEFT OUTER JOIN
                            WPG.BM_MLAB_SUMMARY AS MS ON VI.BMVISIT_ID = MS.BMVISIT_ID LEFT OUTER JOIN
                            WPG.BM_MLAB_LST AS ML ON VI.BMVISIT_ID = ML.BMVISIT_ID LEFT OUTER JOIN
                            WPG.BM_BEACH AS BCH ON VI.SITE_ID = BCH.SITE_ID LEFT OUTER JOIN
                            WPG.BM_DISTRICT AS DST ON BCH.DISTRICT_CODE = DST.DISTRICT_CODE LEFT OUTER JOIN
                            WPG.BM_BEACH_CONFIG AS BC ON VI.SITE_ID = BC.SITE_ID LEFT OUTER JOIN
                            WPG.BM_RAIN AS RF ON VI.BMVISIT_ID = RF.BMVISIT_ID;


-- WPG.BM_VISIT_SUMMARY_C source

CREATE VIEW [WPG].[BM_VISIT_SUMMARY_C]
AS
SELECT
    DST.[DISTRICT_NAME],
    BCH.[BEACH_NAME],
    BC.[BEACH_GROUP],
    BC.[CLOSED],
    BC.[DISTRICT_ORDER],
    BC.[LIST_ORDER],
	VI.[BMVISIT_ID],
	VI.[SITE_ID],
	VI.[MDATE],
	VI.[STIME],
	VI.[SAMPLE_NO],
	FI.[BEACH_CODE],
    FI.[SAMPLE_DATE],
	FI.[SAMPLE_TIME],
	FI.[TEMPER],
	FI.[DO],
	FI.[DOS],
	MS.[SAL],
    MS.[PH],
	MS.[TURB],
    FI.[WEATHER_VALUE],
    FI.[WIND_VALUE],
	FI.[CLIMATE_VALUE],
	FI.[SEA_CLARITY_VALUE],
	FI.[SEA_CONDITION_VALUE],
	FI.[WIND_DIRECTION],
    FI.[BATHER_VALUE],
	FI.[TIDE_VALUE],
	FI.[TIDE_RATIO],
	FI.[TIDE_HEIGHT],
	FI.[ABS_TIDE_HEIGHT],
	ML.[L_EC_R],	ML.[EC_R],	ML.[EST_EC_R],
	ML.[L_EC_M],	ML.[EC_M],	ML.[EST_EC_M],
	ML.[L_EC_L],	ML.[EC_L],	ML.[EST_EC_L],
	ML.[L_EC_O],	ML.[EC_O],	ML.[EST_EC_O],
	ML.[L_EC_A1],	ML.[EC_A1],	ML.[EST_EC_A1],
	ML.[L_EC_A2],	ML.[EC_A2],	ML.[EST_EC_A2],
	ML.[L_EC_A3],	ML.[EC_A3],	ML.[EST_EC_A3],
	ML.[L_EC_A4],	ML.[EC_A4],	ML.[EST_EC_A4],
	ML.[L_EC_A5],	ML.[EC_A5],	ML.[EST_EC_A5],
	ML.[L_ENTRC_R],	ML.[ENTRC_R],	ML.[EST_ENTRC_R],
	ML.[L_ENTRC_M],	ML.[ENTRC_M],	ML.[EST_ENTRC_M],
	ML.[L_ENTRC_L],	ML.[ENTRC_L],	ML.[EST_ENTRC_L],
	ML.[L_ENTRC_O],	ML.[ENTRC_O],	ML.[EST_ENTRC_O],
	ML.[L_ENTRC_A1],	ML.[ENTRC_A1],	ML.[EST_ENTRC_A1],
	ML.[L_ENTRC_A2],	ML.[ENTRC_A2],	ML.[EST_ENTRC_A2],
	ML.[L_ENTRC_A3],	ML.[ENTRC_A3],	ML.[EST_ENTRC_A3],
	ML.[L_ENTRC_A4],	ML.[ENTRC_A4],	ML.[EST_ENTRC_A4],
	ML.[L_ENTRC_A5],	ML.[ENTRC_A5],	ML.[EST_ENTRC_A5],
    MS.[G_MEAN],
	MS.[R_G_MEAN],
    MS.[LOG_G_MEAN],
    MS.[ADJ_LOG_GM],
	MS.[GRADE],
	MS.[GRADE_CHANGE],
    MS1.[G_MEAN]     [ENTRC_G_MEAN],
	MS1.[R_G_MEAN]   [ENTRC_R_G_MEAN],
    MS1.[LOG_G_MEAN] [ENTRC_LOG_G_MEAN],
    MS1.[ADJ_LOG_GM] [ENTRC_ADJ_LOG_GM],
	FI.[REMARKS],
	FI.[DAYAPPEND],
	FI.[DAYEDIT],
	FI.[DAYUPLOAD],
    RF.[RAIN_STATION_CODE],
    RF.[SDATETIME],
    RF.[RAINFALL],
    RF.[RAINFALL_MAX_3HR],
    RF.[RAINFALL_MAX_TIME],
    RF.[RAINFALL_LAST_12HR],
    RF.[RAINFALL_LAST_24HR],
    RF.[RAINFALL_LAST_72HR],
    RF.[RISK_RAIN_MAX_3HR],
    RF.[RISK_RAIN_LAST_12HR],
    RF.[RISK_RAIN_LAST_24HR],
    RF.[RISK_RAIN_LAST_72HR]
FROM [WPG].[BM_VISIT_C] AS VI
LEFT OUTER JOIN [WPG].[BM_FIELD_C] AS FI ON VI.BMVISIT_ID = FI.BMVISIT_ID 
--LEFT OUTER JOIN [WPG].[BM_FLOW_LST] AS FL ON VI.BMVISIT_ID = FL.BMVISIT_ID 
LEFT OUTER JOIN [WPG].[BM_MLAB_SUMMARY_C] AS MS ON VI.BMVISIT_ID = MS.BMVISIT_ID 
LEFT OUTER JOIN [WPG].[BM_ENTRC_SUMMARY_C] AS MS1 ON VI.BMVISIT_ID = MS1.BMVISIT_ID 
LEFT OUTER JOIN [WPG].[BM_MLAB_LST_C] AS ML ON VI.BMVISIT_ID = ML.BMVISIT_ID 
LEFT OUTER JOIN [WPG].[BM_BEACH] AS BCH ON VI.SITE_ID = BCH.SITE_ID
LEFT OUTER JOIN [WPG].[BM_DISTRICT] AS DST ON BCH.DISTRICT_CODE = DST.DISTRICT_CODE
LEFT OUTER JOIN [WPG].[BM_BEACH_CONFIG] AS BC ON VI.SITE_ID = BC.SITE_ID
LEFT OUTER JOIN [WPG].[BM_RAIN_C] AS RF ON VI.BMVISIT_ID = RF.BMVISIT_ID;


-- WPG.COLUMN_INFORMATION source

CREATE VIEW WPG.COLUMN_INFORMATION
AS
SELECT         *
FROM             WPG.COLUMN_INFO
WHERE         (TABLE_NAME IN
                              (SELECT         name
                                FROM              wpg.table_information));


-- WPG.DIOXIN_SEDIMENT1 source

CREATE VIEW WPG.DIOXIN_SEDIMENT1 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	TYPE,
	DSD_DWR,
	L_TCDF1, TCDF1,
	L_TCDD1, TCDD1,
	L_PECDF1, PECDF1,
	L_PECDF2, PECDF2,
	L_PECDD1, PECDD1,
	L_HXCDF1, HXCDF1,
	L_HXCDF2, HXCDF2,
	L_HXCDF3, HXCDF3,
	L_HXCDF4, HXCDF4,
	L_HXCDD1, HXCDD1,
	L_HXCDD2, HXCDD2,
	L_HXCDD3, HXCDD3,
	L_HPCDF1, HPCDF1,
	L_HPCDF2, HPCDF2,
	L_HPCDD1, HPCDD1,
	L_OCDF, OCDF,
	L_OCDD, OCDD,
	VIEW_NO
FROM	WPG.DIOXIN_SEDIMENT_X1
UNION ALL
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	TYPE,
	DSD_DWR,
	L_TCDF1, TCDF1,
	L_TCDD1, TCDD1,
	L_PECDF1, PECDF1,
	L_PECDF2, PECDF2,
	L_PECDD1, PECDD1,
	L_HXCDF1, HXCDF1,
	L_HXCDF2, HXCDF2,
	L_HXCDF3, HXCDF3,
	L_HXCDF4, HXCDF4,
	L_HXCDD1, HXCDD1,
	L_HXCDD2, HXCDD2,
	L_HXCDD3, HXCDD3,
	L_HPCDF1, HPCDF1,
	L_HPCDF2, HPCDF2,
	L_HPCDD1, HPCDD1,
	L_OCDF, OCDF,
	L_OCDD, OCDD,
	VIEW_NO
FROM	WPG.DIOXIN_SEDIMENT_Y1;


-- WPG.DIOXIN_SEDIMENT2 source

CREATE VIEW WPG.DIOXIN_SEDIMENT2 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	TYPE,
	DSD_DWR,
	L_TCDF1, TCDF1,
	L_TCDD1, TCDD1,
	L_PECDF1, PECDF1,
	L_PECDF2, PECDF2,
	L_PECDD1, PECDD1,
	L_HXCDF1, HXCDF1,
	L_HXCDF2, HXCDF2,
	L_HXCDF3, HXCDF3,
	L_HXCDF4, HXCDF4,
	L_HXCDD1, HXCDD1,
	L_HXCDD2, HXCDD2,
	L_HXCDD3, HXCDD3,
	L_HPCDF1, HPCDF1,
	L_HPCDF2, HPCDF2,
	L_HPCDD1, HPCDD1,
	L_OCDF, OCDF,
	L_OCDD, OCDD
FROM 	WPG.DIOXIN_SEDIMENT_X1
WHERE	VIEW_NO >= 2
and mdate <= getdate();


-- WPG.DIOXIN_SEDIMENT_AVG2 source

CREATE VIEW WPG.DIOXIN_SEDIMENT_AVG2 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	YR,
	TOTAL,
	TYPE,
	DSD_DWR,
	TCDF1,
	TCDD1,
	PECDF1,
	PECDF2,
	PECDD1,
	HXCDF1,
	HXCDF2,
	HXCDF3,
	HXCDF4,
	HXCDD1,
	HXCDD2,
	HXCDD3,
	HPCDF1,
	HPCDF2,
	HPCDD1,
	OCDF,
	OCDD
FROM 	WPG.DIOXIN_SEDIMENT_X_AVG1
WHERE	VIEW_NO >= 2
AND		YR <= YEAR(GETDATE());


-- WPG.DIOXIN_SEDIMENT_CDD1 source

CREATE VIEW WPG.DIOXIN_SEDIMENT_CDD1 AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_DX_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	CD.TYPE	 	TYPE,
	CD.DSD_DWR   DSD_DWR,
	CD.L_TCDF1, CD.TCDF1,
	CD.L_TCDD1, CD.TCDD1,
	CD.L_PECDF1, CD.PECDF1,
	CD.L_PECDF2, CD.PECDF2,
	CD.L_PECDD1, CD.PECDD1,
	CD.L_HXCDF1, CD.HXCDF1,
	CD.L_HXCDF2, CD.HXCDF2,
	CD.L_HXCDF3, CD.HXCDF3,
	CD.L_HXCDF4, CD.HXCDF4,
	CD.L_HXCDD1, CD.HXCDD1,
	CD.L_HXCDD2, CD.HXCDD2,
	CD.L_HXCDD3, CD.HXCDD3,
	CD.L_HPCDF1, CD.HPCDF1,
	CD.L_HPCDF2, CD.HPCDF2,
	CD.L_HPCDD1, CD.HPCDD1,
	CD.L_OCDF, CD.OCDF,
	CD.L_OCDD, CD.OCDD,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.DS_VISIT	V
LEFT OUTER JOIN	WPG.DS_GLAB_CDD	CD	ON V.DSVISIT_ID = CD.DSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.DIOXIN_SEDIMENT_VISIT1 source

CREATE VIEW WPG.DIOXIN_SEDIMENT_VISIT1 AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_DX_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO
FROM		WPG.DS_VISIT	V
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.DIOXIN_SEDIMENT_X1 source

CREATE VIEW WPG.DIOXIN_SEDIMENT_X1 AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_DX_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	'X'	 	TYPE,
	CD.DSD_DWR   DSD_DWR,
	CD.L_TCDF1, CD.TCDF1,
	CD.L_TCDD1, CD.TCDD1,
	CD.L_PECDF1, CD.PECDF1,
	CD.L_PECDF2, CD.PECDF2,
	CD.L_PECDD1, CD.PECDD1,
	CD.L_HXCDF1, CD.HXCDF1,
	CD.L_HXCDF2, CD.HXCDF2,
	CD.L_HXCDF3, CD.HXCDF3,
	CD.L_HXCDF4, CD.HXCDF4,
	CD.L_HXCDD1, CD.HXCDD1,
	CD.L_HXCDD2, CD.HXCDD2,
	CD.L_HXCDD3, CD.HXCDD3,
	CD.L_HPCDF1, CD.HPCDF1,
	CD.L_HPCDF2, CD.HPCDF2,
	CD.L_HPCDD1, CD.HPCDD1,
	CD.L_OCDF, CD.OCDF,
	CD.L_OCDD, CD.OCDD,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.DS_VISIT					V
LEFT OUTER JOIN	(SELECT * FROM WPG.DS_GLAB_CDD WHERE TYPE = 'X') CD
	ON V.DSVISIT_ID = CD.DSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION					ST
	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ					SZ
	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ					CZ
	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE					TZ
	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.DIOXIN_SEDIMENT_X_AVG1 source

CREATE VIEW WPG.DIOXIN_SEDIMENT_X_AVG1 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	YEAR(MDATE)	YR,
	COUNT(*)	TOTAL,
	TYPE,
	AVG(DSD_DWR)	DSD_DWR,
	AVG(TCDF1)	TCDF1,
	AVG(TCDD1)	TCDD1,
	AVG(PECDF1)	PECDF1,
	AVG(PECDF2)	PECDF2,
	AVG(PECDD1)	PECDD1,
	AVG(HXCDF1)	HXCDF1,
	AVG(HXCDF2)	HXCDF2,
	AVG(HXCDF3)	HXCDF3,
	AVG(HXCDF4)	HXCDF4,
	AVG(HXCDD1)	HXCDD1,
	AVG(HXCDD2)	HXCDD2,
	AVG(HXCDD3)	HXCDD3,
	AVG(HPCDF1)	HPCDF1,
	AVG(HPCDF2)	HPCDF2,
	AVG(HPCDD1)	HPCDD1,
	AVG(OCDF)	OCDF,
	AVG(OCDD)	OCDD,
	VIEW_NO
FROM	WPG.DIOXIN_SEDIMENT_X1
GROUP BY ZONE, WCZ, SUBZONE, STATION, YEAR(MDATE), TYPE, VIEW_NO;


-- WPG.DIOXIN_SEDIMENT_Y1 source

CREATE VIEW WPG.DIOXIN_SEDIMENT_Y1 AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_DX_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	'Y'	 	TYPE,
	CD.DSD_DWR   DSD_DWR,
	CD.L_TCDF1, CD.TCDF1,
	CD.L_TCDD1, CD.TCDD1,
	CD.L_PECDF1, CD.PECDF1,
	CD.L_PECDF2, CD.PECDF2,
	CD.L_PECDD1, CD.PECDD1,
	CD.L_HXCDF1, CD.HXCDF1,
	CD.L_HXCDF2, CD.HXCDF2,
	CD.L_HXCDF3, CD.HXCDF3,
	CD.L_HXCDF4, CD.HXCDF4,
	CD.L_HXCDD1, CD.HXCDD1,
	CD.L_HXCDD2, CD.HXCDD2,
	CD.L_HXCDD3, CD.HXCDD3,
	CD.L_HPCDF1, CD.HPCDF1,
	CD.L_HPCDF2, CD.HPCDF2,
	CD.L_HPCDD1, CD.HPCDD1,
	CD.L_OCDF, CD.OCDF,
	CD.L_OCDD, CD.OCDD,
	ST.CMMVIEW	VIEW_NO
FROM	WPG.DS_VISIT						V
LEFT OUTER JOIN	(SELECT * FROM WPG.DS_GLAB_CDD WHERE TYPE = 'Y') CD
	ON V.DSVISIT_ID = CD.DSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION					ST
	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ					SZ
	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ					CZ
	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE					TZ
	ON CZ.ZONE_ID = TZ.ZONE_ID
WHERE CD.TYPE IS NOT NULL;


-- WPG.EB_BC_G_S source

CREATE VIEW WPG.EB_BC_G_S AS
SELECT	100*DATEPART(YYYY, A.M_DATE )+DATEPART(MM, A.M_DATE)	MONTH,
	A.STATION_ID						STATION_ID, 
	B.SP_GROUP						SP_GROUP,
	COUNT(A.SP_NAME) 					NO_SP,
	SUM(A.DENSITY) 						DENSITY,
	SUM(A.BIO_VOL) 						BIO_VOL,
	AVG(CASE A.SCAN WHEN 'Y' THEN 1 ELSE 0 END)		SCAN
FROM 	WPG.EB_BC A
JOIN 	WPG.EB_SL B 	ON A.SP_NAME = B.SP_NAME
GROUP BY 100*DATEPART(YYYY, M_DATE)+DATEPART(MM, M_DATE), STATION_ID, SP_GROUP;


-- WPG.EB_BC_G_WCZ source

CREATE VIEW WPG.EB_BC_G_WCZ AS
SELECT	100*DATEPART(YYYY, A.M_DATE)+DATEPART(MM, A.M_DATE) 	MONTH,
 	B.WCZ,
	C.SP_GROUP,
	COUNT(A.SP_NAME)  					NO_SP,
	COUNT(A.SP_NAME)/D.N_SP 					P_SP,
	SUM(A.DENSITY)						DENSITY,
	SUM(A.BIO_VOL)						BIO_VOL,
	AVG(CASE A.SCAN WHEN 'Y' THEN 1 ELSE 0 END) 		SCAN
FROM  	WPG.EB_BC 	A
JOIN 	WPG.E_STATION 	B	ON A.STATION_ID = B.STATION_ID
JOIN	WPG.EB_SL 	C	ON  A.SP_NAME = C.SP_NAME
JOIN	(SELECT 	SP_GROUP, 
		COUNT(DISTINCT SP_NAME) N_SP 
	FROM 	WPG.EB_SL 
	GROUP BY SP_GROUP
	) 		D	ON C.SP_GROUP = D.SP_GROUP
GROUP BY 100*DATEPART(YYYY, A.M_DATE)+DATEPART(MM, A.M_DATE), WCZ, C.SP_GROUP, D.N_SP;


-- WPG.EB_BC_S_WCZ source

CREATE VIEW WPG.EB_BC_S_WCZ AS
SELECT	100*DATEPART(YYYY, A.M_DATE)+DATEPART(MM, A.M_DATE) 	MONTH,
	B.WCZ,
	A.SP_NAME,
	SUM(A.DENSITY)			 			DENSITY,
	SUM(A.BIO_VOL) 						BIO_VOL,
	AVG(CASE A.SCAN WHEN 'Y' THEN 1 ELSE 0 END)		SCAN
FROM 	WPG.EB_BC 	A
JOIN	WPG.E_STATION 	B	ON A.STATION_ID = B.STATION_ID
GROUP BY 100*DATEPART(YYYY, A.M_DATE)+DATEPART(MM, A.M_DATE), WCZ, SP_NAME;


-- WPG.HATS_2A1 source

CREATE VIEW WPG.HATS_2A1
AS
SELECT          ZONE, WCZ, SUBZONE, STATION, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, ANALYSIS_LAB, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, 
                            FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, 
                            L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, 
                            L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, 
                            TIN, TN, NH3, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, 
                            NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR, 
                            VIEW_NO
FROM              WPG.HATS_2A_SMB1
UNION ALL
SELECT          ZONE, WCZ, SUBZONE, STATION, MDATE, STIME, SAM_NO, 'A' D_CODE, MONITOR_STATE, ANALYSIS_LAB, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, 
                            FLSCUFA, TURB_SC, PAR, NULL L_BOD5, BOD5, NULL L_FC, FC, NULL L_ECOLI, ECOLI, NULL L_PH_M, 
                            PH_M, NULL L_TURB_M, TURB_M, NULL L_NH4, NH4, NULL L_NO2, NO2, NULL L_NO3, NO3, NULL L_TKN_S, 
                            TKN_S, NULL L_TKN_P, TKN_P, NULL L_TKN_SP, TKN_SP, NULL L_PO4, PO4, NULL L_TP_S, TP_S, NULL L_TP_P, 
                            TP_P, NULL L_TP_SP, TP_SP, NULL L_SIO2, SIO2, NULL L_SS, SS, NULL L_TVS, TVS, NULL L_CHL, CHL, NULL 
                            L_PHAE, PHAE, TIN, TN, NH3, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, FISH_KILL, SD, 
                            WEATHER, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                            TN_TP_MMR, VIEW_NO
FROM              WPG.HATS_2A_A1;


-- WPG.HATS_2A2 source

CREATE VIEW WPG.HATS_2A2
AS
SELECT          ZONE, WCZ, SUBZONE, STATION, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, ANALYSIS_LAB, TEMPER, 
                            PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_NH4, 
                            NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, L_TP_S, 
                            TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, 
                            AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN
FROM              WPG.HATS_2A1
WHERE          (VIEW_NO >= 2) AND (MDATE <= GETDATE());


-- WPG.HATS_2A_A1 source

CREATE VIEW WPG.HATS_2A_A1
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.HS_NAME AS STATION, 
                            AA.MDATE, AA.STIME, AA.SAM_NO, AA.MONITOR_STATE, AA.ANALYSIS_LAB, AA.TEMPER, AA.PH_SC, AA.SAL, 
                            AA.COND, AA.DO, AA.DO_SAT, AA.FLSCUFA, AA.TURB_SC, AA.PAR, AA.BOD5, AA.FC, AA.ECOLI, AA.PH_M, AA.TURB_M, 
                            AA.NH4, AA.NO2, AA.NO3, AA.TKN_S, AA.TKN_P, AA.TKN_SP, AA.PO4, AA.TP_S, AA.TP_P, AA.TP_SP, AA.SIO2, AA.SS, 
                            AA.TVS, AA.CHL, AA.PHAE, AA.SOL_RAD, AA.AIR_TEMP, AA.WIND_SP, AA.WIND_DIR, AA.SEA_COND, AA.SEA_COL, 
                            AA.FISH_KILL, AA.SD, AA.WEATHER, AA.NH3, AA.TIN, AA.TN, AA.NH4_NM, AA.NO2_NM, AA.NO3_NM, AA.TKN_NM, 
                            AA.NOX_NM, AA.TIN_NM, AA.TN_NM, AA.PO4_PM, AA.TP_PM, AA.TIN_PO4_MMR, AA.TN_TP_MMR, 
                            ST.CMMVIEW AS VIEW_NO
FROM              WPG.HS_A AS AA INNER JOIN
                            WPG.MSTATION AS ST ON AA.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.HATS_2A_AVG1 source

CREATE VIEW [WPG].[HATS_2A_AVG1] AS 
SELECT * FROM WPG.HATS_2A_SMB_AVG1
UNION ALL 
SELECT * FROM WPG.HATS_2A_A_AVG1;


-- WPG.HATS_2A_AVG1A source

CREATE   VIEW [WPG].[HATS_2A_AVG1A] AS 
SELECT * FROM WPG.HATS_2A_SMB_AVG1A
UNION ALL 
SELECT * FROM WPG.HATS_2A_A_AVG1A;


-- WPG.HATS_2A_AVG2 source

CREATE VIEW [WPG].[HATS_2A_AVG2] AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	YR,
	D_CODE,
	TOTAL,
	TEMPER,
	PH_SC,
	SAL,
	COND,
	DO,
	DO_SAT,
	FLSCUFA,		TURB_SC,
    PAR,
	BOD5,
	FC,
	ECOLI,
	NH4,
	NO2,
	NO3,
	TKN_S,
	TKN_P,
	TKN_SP,
	PO4,
	TP_S,
	TP_P,
	TP_SP,
	SIO2,
	SS,
	TVS,
	CHL,
	PHAE,
	SOL_RAD,
	AIR_TEMP,
	WIND_SP,
	SD,
	NH3,
	TIN,
	TN
FROM 	WPG.HATS_2A_AVG1
WHERE	VIEW_NO >= 2
AND		YR <= YEAR(GETDATE());


-- WPG.HATS_2A_A_AVG1 source

CREATE VIEW WPG.HATS_2A_A_AVG1
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.HS_NAME AS STATION, 
                            SMB_1.YR, 'A' AS D_CODE, SMB_1.TOTAL, SMB_1.TEMPER, SMB_1.PH_SC, SMB_1.SAL, SMB_1.COND, SMB_1.DO, 
                            SMB_1.DO_SAT, SMB_1.FLSCUFA, SMB_1.TURB_SC, SMB_1.PAR, SMB_1.BOD5, SMB_1.FC, SMB_1.ECOLI, 
                            SMB_1.PH_M, SMB_1.TURB_M, SMB_1.NH4, SMB_1.NO2, SMB_1.NO3, SMB_1.TKN_S, SMB_1.TKN_P, 
                            SMB_1.TKN_SP, SMB_1.PO4, SMB_1.TP_S, SMB_1.TP_P, SMB_1.TP_SP, SMB_1.SIO2, SMB_1.SS, SMB_1.TVS, 
                            SMB_1.CHL, SMB_1.PHAE, SMB_1.SOL_RAD, SMB_1.AIR_TEMP, SMB_1.WIND_SP, SMB_1.SD, SMB_1.NH3, 
                            SMB_1.TIN, SMB_1.TN, SMB_1.NH4_NM, SMB_1.NO2_NM, SMB_1.NO3_NM, SMB_1.TKN_NM, SMB_1.NOX_NM, 
                            SMB_1.TIN_NM, SMB_1.TN_NM, SMB_1.PO4_PM, SMB_1.TP_PM, SMB_1.TIN_PO4_MMR, SMB_1.TN_TP_MMR, 
                            ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YR, COUNT(*) AS TOTAL, AVG(TEMPER) AS TEMPER, AVG(PH_SC) AS PH_SC, 
                                                        AVG(SAL) AS SAL, AVG(COND) AS COND, AVG(DO) AS DO, AVG(DO_SAT) AS DO_SAT, AVG(FLSCUFA) 
                                                        AS FLSCUFA, AVG(TURB_SC) AS TURB_SC, AVG(PAR) AS PAR, AVG(BOD5) AS BOD5, 
                                                        EXP(AVG(LOG (CASE FC WHEN 0 THEN NULL ELSE FC END))) AS FC, 
                                                        EXP(AVG(LOG (CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))) AS ECOLI, AVG(PH_M) AS PH_M, 
                                                        AVG(TURB_M) AS TURB_M, AVG(NH4) AS NH4, AVG(NO2) AS NO2, AVG(NO3) AS NO3, AVG(TKN_S) 
                                                        AS TKN_S, AVG(TKN_P) AS TKN_P, AVG(TKN_SP) AS TKN_SP, AVG(PO4) AS PO4, AVG(TP_S) AS TP_S, 
                                                        AVG(TP_P) AS TP_P, AVG(TP_SP) AS TP_SP, AVG(SIO2) AS SIO2, AVG(SS) AS SS, AVG(TVS) AS TVS, 
                                                        AVG(CHL) AS CHL, AVG(PHAE) AS PHAE, AVG(SOL_RAD) AS SOL_RAD, AVG(AIR_TEMP) AS AIR_TEMP, 
                                                        AVG(WIND_SP) AS WIND_SP, AVG(SD) AS SD, AVG(NH3) AS NH3, AVG(TIN) AS TIN, AVG(TN) AS TN, 
                                                        AVG(NH4_NM) AS NH4_NM, AVG(NO2_NM) AS NO2_NM, AVG(NO3_NM) AS NO3_NM, AVG(TKN_NM) 
                                                        AS TKN_NM, AVG(NOX_NM) AS NOX_NM, AVG(TIN_NM) AS TIN_NM, AVG(TN_NM) AS TN_NM, 
                                                        AVG(PO4_PM) AS PO4_PM, AVG(TP_PM) AS TP_PM, AVG(TIN_PO4_MMR) AS TIN_PO4_MMR, 
                                                        AVG(TN_TP_MMR) AS TN_TP_MMR
                            FROM               WPG.HS_A AS SMB
                            GROUP BY    SITE_ID, YEAR(MDATE)) AS SMB_1 INNER JOIN
                            WPG.MSTATION AS ST ON SMB_1.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.HATS_2A_A_AVG1A source

CREATE VIEW WPG.HATS_2A_A_AVG1A
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.HS_NAME AS STATION, 
                            SMB_1.YR, 'A' AS D_CODE, SMB_1.TOTAL, SMB_1.TEMPER_AVG, SMB_1.PH_SC_AVG, SMB_1.SAL_AVG, 
                            SMB_1.COND_AVG, SMB_1.DO_AVG, SMB_1.DO_SAT_AVG, SMB_1.FLSCUFA_AVG, SMB_1.TURB_SC_AVG, 
                            SMB_1.PAR_AVG, CASE WHEN L_BOD5_CNT = 0 THEN NULL ELSE '<' END AS L_BOD5_AVG, SMB_1.BOD5_AVG, 
                            CASE WHEN L_FC_CNT = 0 THEN NULL ELSE '<' END AS L_FC_AVG, SMB_1.FC_AVG, 
                            CASE WHEN L_ECOLI_CNT = 0 THEN NULL ELSE '<' END AS L_ECOLI_AVG, SMB_1.ECOLI_AVG, 
                            CASE WHEN L_PH_M_CNT = 0 THEN NULL ELSE '<' END AS L_PH_M_AVG, SMB_1.PH_M_AVG, 
                            CASE WHEN L_TURB_M_CNT = 0 THEN NULL ELSE '<' END AS L_TURB_M_AVG, SMB_1.TURB_M_AVG, 
                            CASE WHEN L_NH4_CNT = 0 THEN NULL ELSE '<' END AS L_NH4_AVG, SMB_1.NH4_AVG, 
                            CASE WHEN L_NO2_CNT = 0 THEN NULL ELSE '<' END AS L_NO2_AVG, SMB_1.NO2_AVG, 
                            CASE WHEN L_NO3_CNT = 0 THEN NULL ELSE '<' END AS L_NO3_AVG, SMB_1.NO3_AVG, 
                            CASE WHEN L_TKN_S_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_S_AVG, SMB_1.TKN_S_AVG, 
                            CASE WHEN L_TKN_P_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_P_AVG, SMB_1.TKN_P_AVG, 
                            CASE WHEN L_TKN_SP_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_SP_AVG, SMB_1.TKN_SP_AVG, 
                            CASE WHEN L_PO4_CNT = 0 THEN NULL ELSE '<' END AS L_PO4_AVG, SMB_1.PO4_AVG, 
                            CASE WHEN L_TP_S_CNT = 0 THEN NULL ELSE '<' END AS L_TP_S_AVG, SMB_1.TP_S_AVG, 
                            CASE WHEN L_TP_P_CNT = 0 THEN NULL ELSE '<' END AS L_TP_P_AVG, SMB_1.TP_P_AVG, 
                            CASE WHEN L_TP_SP_CNT = 0 THEN NULL ELSE '<' END AS L_TP_SP_AVG, SMB_1.TP_SP_AVG, 
                            CASE WHEN L_SIO2_CNT = 0 THEN NULL ELSE '<' END AS L_SIO2_AVG, SMB_1.SIO2_AVG, 
                            CASE WHEN L_SS_CNT = 0 THEN NULL ELSE '<' END AS L_SS_AVG, SMB_1.SS_AVG, 
                            CASE WHEN L_TVS_CNT = 0 THEN NULL ELSE '<' END AS L_TVS_AVG, SMB_1.TVS_AVG, 
                            CASE WHEN L_CHL_CNT = 0 THEN NULL ELSE '<' END AS L_CHL_AVG, SMB_1.CHL_AVG, 
                            CASE WHEN L_PHAE_CNT = 0 THEN NULL ELSE '<' END AS L_PHAE_AVG, SMB_1.PHAE_AVG, 
                            SMB_1.SOL_RAD_AVG, SMB_1.AIR_TEMP_AVG, SMB_1.WIND_SP_AVG, SMB_1.SD_AVG, SMB_1.NH3_AVG, 
                            SMB_1.TIN_AVG, SMB_1.TN_AVG, SMB_1.NH4_NM_AVG, SMB_1.NO2_NM_AVG, SMB_1.NO3_NM_AVG, 
                            SMB_1.TKN_NM_AVG, SMB_1.NOX_NM_AVG, SMB_1.TIN_NM_AVG, SMB_1.TN_NM_AVG, SMB_1.PO4_PM_AVG, 
                            SMB_1.TP_PM_AVG, SMB_1.TIN_PO4_MMR_AVG, SMB_1.TN_TP_MMR_AVG, ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YR, COUNT(*) AS TOTAL, AVG(TEMPER) AS TEMPER_AVG, AVG(PH_SC) 
                                                        AS PH_SC_AVG, AVG(SAL) AS SAL_AVG, AVG(COND) AS COND_AVG, AVG(DO) AS DO_AVG, AVG(DO_SAT) 
                                                        AS DO_SAT_AVG, AVG(FLSCUFA) AS FLSCUFA_AVG, AVG(TURB_SC) AS TURB_SC_AVG, AVG(PAR) 
                                                        AS PAR_AVG, AVG(BOD5) AS BOD5_AVG, EXP(AVG(LOG (CASE FC WHEN 0 THEN NULL ELSE FC END))) 
                                                        AS FC_AVG, EXP(AVG(LOG (CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))) AS ECOLI_AVG, 
                                                        AVG(PH_M) AS PH_M_AVG, AVG(TURB_M) AS TURB_M_AVG, AVG(NH4) AS NH4_AVG, AVG(NO2) 
                                                        AS NO2_AVG, AVG(NO3) AS NO3_AVG, AVG(TKN_S) AS TKN_S_AVG, AVG(TKN_P) AS TKN_P_AVG, 
                                                        AVG(TKN_SP) AS TKN_SP_AVG, AVG(PO4) AS PO4_AVG, AVG(TP_S) AS TP_S_AVG, AVG(TP_P) 
                                                        AS TP_P_AVG, AVG(TP_SP) AS TP_SP_AVG, AVG(SIO2) AS SIO2_AVG, AVG(SS) AS SS_AVG, AVG(TVS) 
                                                        AS TVS_AVG, AVG(CHL) AS CHL_AVG, AVG(PHAE) AS PHAE_AVG, AVG(SOL_RAD) AS SOL_RAD_AVG, 
                                                        AVG(AIR_TEMP) AS AIR_TEMP_AVG, AVG(WIND_SP) AS WIND_SP_AVG, AVG(SD) AS SD_AVG, AVG(NH3) 
                                                        AS NH3_AVG, AVG(TIN) AS TIN_AVG, AVG(TN) AS TN_AVG, AVG(NH4_NM) AS NH4_NM_AVG, 
                                                        AVG(NO2_NM) AS NO2_NM_AVG, AVG(NO3_NM) AS NO3_NM_AVG, AVG(TKN_NM) AS TKN_NM_AVG, 
                                                        AVG(NOX_NM) AS NOX_NM_AVG, AVG(TIN_NM) AS TIN_NM_AVG, AVG(TN_NM) AS TN_NM_AVG, 
                                                        AVG(PO4_PM) AS PO4_PM_AVG, AVG(TP_PM) AS TP_PM_AVG, AVG(TIN_PO4_MMR) 
                                                        AS TIN_PO4_MMR_AVG, AVG(TN_TP_MMR) AS TN_TP_MMR_AVG, COUNT(L_BOD5) AS L_BOD5_CNT, 
                                                        COUNT(L_FC) AS L_FC_CNT, COUNT(L_ECOLI) AS L_ECOLI_CNT, COUNT(L_PH_M) AS L_PH_M_CNT, 
                                                        COUNT(L_TURB_M) AS L_TURB_M_CNT, COUNT(L_NH4) AS L_NH4_CNT, COUNT(L_NO2) 
                                                        AS L_NO2_CNT, COUNT(L_NO3) AS L_NO3_CNT, COUNT(L_TKN_S) AS L_TKN_S_CNT, COUNT(L_TKN_P) 
                                                        AS L_TKN_P_CNT, COUNT(L_TKN_SP) AS L_TKN_SP_CNT, COUNT(L_PO4) AS L_PO4_CNT, 
                                                        COUNT(L_TP_S) AS L_TP_S_CNT, COUNT(L_TP_P) AS L_TP_P_CNT, COUNT(L_TP_SP) 
                                                        AS L_TP_SP_CNT, COUNT(L_SIO2) AS L_SIO2_CNT, COUNT(L_SS) AS L_SS_CNT, COUNT(L_TVS) 
                                                        AS L_TVS_CNT, COUNT(L_CHL) AS L_CHL_CNT, COUNT(L_PHAE) AS L_PHAE_CNT
                            FROM               WPG.HS_AA AS SMB
                            GROUP BY    SITE_ID, YEAR(MDATE)) AS SMB_1 INNER JOIN
                            WPG.MSTATION AS ST ON SMB_1.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.HATS_2A_A_MAX1A source

CREATE VIEW WPG.HATS_2A_A_MAX1A
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.HS_NAME AS STATION, 
                            SMB_1.YR, 'A' AS D_CODE, SMB_1.TOTAL, SMB_1.TEMPER_MAX, SMB_1.PH_SC_MAX, SMB_1.SAL_MAX, 
                            SMB_1.COND_MAX, SMB_1.DO_MAX, SMB_1.DO_SAT_MAX, SMB_1.FLSCUFA_MAX, SMB_1.TURB_SC_MAX, 
                            SMB_1.PAR_MAX, CASE WHEN L_BOD5_CNT = TOTAL THEN '<' ELSE NULL END AS L_BOD5_MAX, 
                            SMB_1.BOD5_MAX, CASE WHEN L_FC_CNT = TOTAL THEN '<' ELSE NULL END AS L_FC_MAX, SMB_1.FC_MAX, 
                            CASE WHEN L_ECOLI_CNT = TOTAL THEN '<' ELSE NULL END AS L_ECOLI_MAX, SMB_1.ECOLI_MAX, 
                            CASE WHEN L_PH_M_CNT = TOTAL THEN '<' ELSE NULL END AS L_PH_M_MAX, SMB_1.PH_M_MAX, 
                            CASE WHEN L_TURB_M_CNT = TOTAL THEN '<' ELSE NULL END AS L_TURB_M_MAX, SMB_1.TURB_M_MAX, 
                            CASE WHEN L_NH4_CNT = TOTAL THEN '<' ELSE NULL END AS L_NH4_MAX, SMB_1.NH4_MAX, 
                            CASE WHEN L_NO2_CNT = TOTAL THEN '<' ELSE NULL END AS L_NO2_MAX, SMB_1.NO2_MAX, 
                            CASE WHEN L_NO3_CNT = TOTAL THEN '<' ELSE NULL END AS L_NO3_MAX, SMB_1.NO3_MAX, 
                            CASE WHEN L_TKN_S_CNT = TOTAL THEN '<' ELSE NULL END AS L_TKN_S_MAX, SMB_1.TKN_S_MAX, 
                            CASE WHEN L_TKN_P_CNT = TOTAL THEN '<' ELSE NULL END AS L_TKN_P_MAX, SMB_1.TKN_P_MAX, 
                            CASE WHEN L_TKN_SP_CNT = TOTAL THEN '<' ELSE NULL END AS L_TKN_SP_MAX, SMB_1.TKN_SP_MAX, 
                            CASE WHEN L_PO4_CNT = TOTAL THEN '<' ELSE NULL END AS L_PO4_MAX, SMB_1.PO4_MAX, 
                            CASE WHEN L_TP_S_CNT = TOTAL THEN '<' ELSE NULL END AS L_TP_S_MAX, SMB_1.TP_S_MAX, 
                            CASE WHEN L_TP_P_CNT = TOTAL THEN '<' ELSE NULL END AS L_TP_P_MAX, SMB_1.TP_P_MAX, 
                            CASE WHEN L_TP_SP_CNT = TOTAL THEN '<' ELSE NULL END AS L_TP_SP_MAX, SMB_1.TP_SP_MAX, 
                            CASE WHEN L_SIO2_CNT = TOTAL THEN '<' ELSE NULL END AS L_SIO2_MAX, SMB_1.SIO2_MAX, 
                            CASE WHEN L_SS_CNT = TOTAL THEN '<' ELSE NULL END AS L_SS_MAX, SMB_1.SS_MAX, 
                            CASE WHEN L_TVS_CNT = TOTAL THEN '<' ELSE NULL END AS L_TVS_MAX, SMB_1.TVS_MAX, 
                            CASE WHEN L_CHL_CNT = TOTAL THEN '<' ELSE NULL END AS L_CHL_MAX, SMB_1.CHL_MAX, 
                            CASE WHEN L_PHAE_CNT = TOTAL THEN '<' ELSE NULL END AS L_PHAE_MAX, SMB_1.PHAE_MAX, 
                            SMB_1.SOL_RAD_MAX, SMB_1.AIR_TEMP_MAX, SMB_1.WIND_SP_MAX, SMB_1.SD_MAX, SMB_1.NH3_MAX, 
                            SMB_1.TIN_MAX, SMB_1.TN_MAX, SMB_1.NH4_NM_MAX, SMB_1.NO2_NM_MAX, SMB_1.NO3_NM_MAX, 
                            SMB_1.TKN_NM_MAX, SMB_1.NOX_NM_MAX, SMB_1.TIN_NM_MAX, SMB_1.TN_NM_MAX, SMB_1.PO4_PM_MAX, 
                            SMB_1.TP_PM_MAX, SMB_1.TIN_PO4_MMR_MAX, SMB_1.TN_TP_MMR_MAX, ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YR, COUNT(*) AS TOTAL, MAX(TEMPER) AS TEMPER_MAX, MAX(PH_SC) 
                                                        AS PH_SC_MAX, MAX(SAL) AS SAL_MAX, MAX(COND) AS COND_MAX, MAX(DO) AS DO_MAX, 
                                                        MAX(DO_SAT) AS DO_SAT_MAX, MAX(FLSCUFA) AS FLSCUFA_MAX, MAX(TURB_SC) AS TURB_SC_MAX, 
                                                        MAX(PAR) AS PAR_MAX, MAX(BOD5) AS BOD5_MAX, EXP(MAX(LOG (CASE FC WHEN 0 THEN NULL 
                                                        ELSE FC END))) AS FC_MAX, EXP(MAX(LOG (CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))) 
                                                        AS ECOLI_MAX, MAX(PH_M) AS PH_M_MAX, MAX(TURB_M) AS TURB_M_MAX, MAX(NH4) AS NH4_MAX, 
                                                        MAX(NO2) AS NO2_MAX, MAX(NO3) AS NO3_MAX, MAX(TKN_S) AS TKN_S_MAX, MAX(TKN_P) 
                                                        AS TKN_P_MAX, MAX(TKN_SP) AS TKN_SP_MAX, MAX(PO4) AS PO4_MAX, MAX(TP_S) AS TP_S_MAX, 
                                                        MAX(TP_P) AS TP_P_MAX, MAX(TP_SP) AS TP_SP_MAX, MAX(SIO2) AS SIO2_MAX, MAX(SS) AS SS_MAX, 
                                                        MAX(TVS) AS TVS_MAX, MAX(CHL) AS CHL_MAX, MAX(PHAE) AS PHAE_MAX, MAX(SOL_RAD) 
                                                        AS SOL_RAD_MAX, MAX(AIR_TEMP) AS AIR_TEMP_MAX, MAX(WIND_SP) AS WIND_SP_MAX, MAX(SD) 
                                                        AS SD_MAX, MAX(NH3) AS NH3_MAX, MAX(TIN) AS TIN_MAX, MAX(TN) AS TN_MAX, MAX(NH4_NM) 
                                                        AS NH4_NM_MAX, MAX(NO2_NM) AS NO2_NM_MAX, MAX(NO3_NM) AS NO3_NM_MAX, MAX(TKN_NM) 
                                                        AS TKN_NM_MAX, MAX(NOX_NM) AS NOX_NM_MAX, MAX(TIN_NM) AS TIN_NM_MAX, MAX(TN_NM) 
                                                        AS TN_NM_MAX, MAX(PO4_PM) AS PO4_PM_MAX, MAX(TP_PM) AS TP_PM_MAX, MAX(TIN_PO4_MMR) 
                                                        AS TIN_PO4_MMR_MAX, MAX(TN_TP_MMR) AS TN_TP_MMR_MAX, COUNT(L_BOD5) AS L_BOD5_CNT, 
                                                        COUNT(L_FC) AS L_FC_CNT, COUNT(L_ECOLI) AS L_ECOLI_CNT, COUNT(L_PH_M) AS L_PH_M_CNT, 
                                                        COUNT(L_TURB_M) AS L_TURB_M_CNT, COUNT(L_NH4) AS L_NH4_CNT, COUNT(L_NO2) 
                                                        AS L_NO2_CNT, COUNT(L_NO3) AS L_NO3_CNT, COUNT(L_TKN_S) AS L_TKN_S_CNT, COUNT(L_TKN_P) 
                                                        AS L_TKN_P_CNT, COUNT(L_TKN_SP) AS L_TKN_SP_CNT, COUNT(L_PO4) AS L_PO4_CNT, 
                                                        COUNT(L_TP_S) AS L_TP_S_CNT, COUNT(L_TP_P) AS L_TP_P_CNT, COUNT(L_TP_SP) 
                                                        AS L_TP_SP_CNT, COUNT(L_SIO2) AS L_SIO2_CNT, COUNT(L_SS) AS L_SS_CNT, COUNT(L_TVS) 
                                                        AS L_TVS_CNT, COUNT(L_CHL) AS L_CHL_CNT, COUNT(L_PHAE) AS L_PHAE_CNT
                            FROM               WPG.HS_AA AS SMB
                            GROUP BY    SITE_ID, YEAR(MDATE)) AS SMB_1 INNER JOIN
                            WPG.MSTATION AS ST ON SMB_1.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.HATS_2A_A_MIN1A source

CREATE VIEW WPG.HATS_2A_A_MIN1A
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.HS_NAME AS STATION, 
                            SMB_1.YR, 'A' AS D_CODE, SMB_1.TOTAL, SMB_1.TEMPER_MIN, SMB_1.PH_SC_MIN, SMB_1.SAL_MIN, 
                            SMB_1.COND_MIN, SMB_1.DO_MIN, SMB_1.DO_SAT_MIN, SMB_1.FLSCUFA_MIN, SMB_1.TURB_SC_MIN, 
                            SMB_1.PAR_MIN, CASE WHEN L_BOD5_CNT = 0 THEN NULL ELSE '<' END AS L_BOD5_MIN, SMB_1.BOD5_MIN, 
                            CASE WHEN L_FC_CNT = 0 THEN NULL ELSE '<' END AS L_FC_MIN, SMB_1.FC_MIN, 
                            CASE WHEN L_ECOLI_CNT = 0 THEN NULL ELSE '<' END AS L_ECOLI_MIN, SMB_1.ECOLI_MIN, 
                            CASE WHEN L_PH_M_CNT = 0 THEN NULL ELSE '<' END AS L_PH_M_MIN, SMB_1.PH_M_MIN, 
                            CASE WHEN L_TURB_M_CNT = 0 THEN NULL ELSE '<' END AS L_TURB_M_MIN, SMB_1.TURB_M_MIN, 
                            CASE WHEN L_NH4_CNT = 0 THEN NULL ELSE '<' END AS L_NH4_MIN, SMB_1.NH4_MIN, 
                            CASE WHEN L_NO2_CNT = 0 THEN NULL ELSE '<' END AS L_NO2_MIN, SMB_1.NO2_MIN, 
                            CASE WHEN L_NO3_CNT = 0 THEN NULL ELSE '<' END AS L_NO3_MIN, SMB_1.NO3_MIN, 
                            CASE WHEN L_TKN_S_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_S_MIN, SMB_1.TKN_S_MIN, 
                            CASE WHEN L_TKN_P_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_P_MIN, SMB_1.TKN_P_MIN, 
                            CASE WHEN L_TKN_SP_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_SP_MIN, SMB_1.TKN_SP_MIN, 
                            CASE WHEN L_PO4_CNT = 0 THEN NULL ELSE '<' END AS L_PO4_MIN, SMB_1.PO4_MIN, 
                            CASE WHEN L_TP_S_CNT = 0 THEN NULL ELSE '<' END AS L_TP_S_MIN, SMB_1.TP_S_MIN, 
                            CASE WHEN L_TP_P_CNT = 0 THEN NULL ELSE '<' END AS L_TP_P_MIN, SMB_1.TP_P_MIN, 
                            CASE WHEN L_TP_SP_CNT = 0 THEN NULL ELSE '<' END AS L_TP_SP_MIN, SMB_1.TP_SP_MIN, 
                            CASE WHEN L_SIO2_CNT = 0 THEN NULL ELSE '<' END AS L_SIO2_MIN, SMB_1.SIO2_MIN, 
                            CASE WHEN L_SS_CNT = 0 THEN NULL ELSE '<' END AS L_SS_MIN, SMB_1.SS_MIN, 
                            CASE WHEN L_TVS_CNT = 0 THEN NULL ELSE '<' END AS L_TVS_MIN, SMB_1.TVS_MIN, 
                            CASE WHEN L_CHL_CNT = 0 THEN NULL ELSE '<' END AS L_CHL_MIN, SMB_1.CHL_MIN, 
                            CASE WHEN L_PHAE_CNT = 0 THEN NULL ELSE '<' END AS L_PHAE_MIN, SMB_1.PHAE_MIN, 
                            SMB_1.SOL_RAD_MIN, SMB_1.AIR_TEMP_MIN, SMB_1.WIND_SP_MIN, SMB_1.SD_MIN, SMB_1.NH3_MIN, 
                            SMB_1.TIN_MIN, SMB_1.TN_MIN, SMB_1.NH4_NM_MIN, SMB_1.NO2_NM_MIN, SMB_1.NO3_NM_MIN, 
                            SMB_1.TKN_NM_MIN, SMB_1.NOX_NM_MIN, SMB_1.TIN_NM_MIN, SMB_1.TN_NM_MIN, SMB_1.PO4_PM_MIN, 
                            SMB_1.TP_PM_MIN, SMB_1.TIN_PO4_MMR_MIN, SMB_1.TN_TP_MMR_MIN, ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YR, COUNT(*) AS TOTAL, MIN(TEMPER) AS TEMPER_MIN, MIN(PH_SC) 
                                                        AS PH_SC_MIN, MIN(SAL) AS SAL_MIN, MIN(COND) AS COND_MIN, MIN(DO) AS DO_MIN, MIN(DO_SAT) 
                                                        AS DO_SAT_MIN, MIN(FLSCUFA) AS FLSCUFA_MIN, MIN(TURB_SC) AS TURB_SC_MIN, MIN(PAR) 
                                                        AS PAR_MIN, MIN(BOD5) AS BOD5_MIN, EXP(MIN(LOG (CASE FC WHEN 0 THEN NULL ELSE FC END))) 
                                                        AS FC_MIN, EXP(MIN(LOG (CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))) AS ECOLI_MIN, 
                                                        MIN(PH_M) AS PH_M_MIN, MIN(TURB_M) AS TURB_M_MIN, MIN(NH4) AS NH4_MIN, MIN(NO2) 
                                                        AS NO2_MIN, MIN(NO3) AS NO3_MIN, MIN(TKN_S) AS TKN_S_MIN, MIN(TKN_P) AS TKN_P_MIN, 
                                                        MIN(TKN_SP) AS TKN_SP_MIN, MIN(PO4) AS PO4_MIN, MIN(TP_S) AS TP_S_MIN, MIN(TP_P) 
                                                        AS TP_P_MIN, MIN(TP_SP) AS TP_SP_MIN, MIN(SIO2) AS SIO2_MIN, MIN(SS) AS SS_MIN, MIN(TVS) 
                                                        AS TVS_MIN, MIN(CHL) AS CHL_MIN, MIN(PHAE) AS PHAE_MIN, MIN(SOL_RAD) AS SOL_RAD_MIN, 
                                                        MIN(AIR_TEMP) AS AIR_TEMP_MIN, MIN(WIND_SP) AS WIND_SP_MIN, MIN(SD) AS SD_MIN, MIN(NH3) 
                                                        AS NH3_MIN, MIN(TIN) AS TIN_MIN, MIN(TN) AS TN_MIN, MIN(NH4_NM) AS NH4_NM_MIN, 
                                                        MIN(NO2_NM) AS NO2_NM_MIN, MIN(NO3_NM) AS NO3_NM_MIN, MIN(TKN_NM) AS TKN_NM_MIN, 
                                                        MIN(NOX_NM) AS NOX_NM_MIN, MIN(TIN_NM) AS TIN_NM_MIN, MIN(TN_NM) AS TN_NM_MIN, 
                                                        MIN(PO4_PM) AS PO4_PM_MIN, MIN(TP_PM) AS TP_PM_MIN, MIN(TIN_PO4_MMR) 
                                                        AS TIN_PO4_MMR_MIN, MIN(TN_TP_MMR) AS TN_TP_MMR_MIN, COUNT(L_BOD5) AS L_BOD5_CNT, 
                                                        COUNT(L_FC) AS L_FC_CNT, COUNT(L_ECOLI) AS L_ECOLI_CNT, COUNT(L_PH_M) AS L_PH_M_CNT, 
                                                        COUNT(L_TURB_M) AS L_TURB_M_CNT, COUNT(L_NH4) AS L_NH4_CNT, COUNT(L_NO2) 
                                                        AS L_NO2_CNT, COUNT(L_NO3) AS L_NO3_CNT, COUNT(L_TKN_S) AS L_TKN_S_CNT, COUNT(L_TKN_P) 
                                                        AS L_TKN_P_CNT, COUNT(L_TKN_SP) AS L_TKN_SP_CNT, COUNT(L_PO4) AS L_PO4_CNT, 
                                                        COUNT(L_TP_S) AS L_TP_S_CNT, COUNT(L_TP_P) AS L_TP_P_CNT, COUNT(L_TP_SP) 
                                                        AS L_TP_SP_CNT, COUNT(L_SIO2) AS L_SIO2_CNT, COUNT(L_SS) AS L_SS_CNT, COUNT(L_TVS) 
                                                        AS L_TVS_CNT, COUNT(L_CHL) AS L_CHL_CNT, COUNT(L_PHAE) AS L_PHAE_CNT
                            FROM               WPG.HS_AA AS SMB
                            GROUP BY    SITE_ID, YEAR(MDATE)) AS SMB_1 INNER JOIN
                            WPG.MSTATION AS ST ON SMB_1.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.HATS_2A_MAX1A source

CREATE  VIEW [WPG].[HATS_2A_MAX1A] AS 
SELECT * FROM WPG.HATS_2A_SMB_MAX1A
UNION ALL 
SELECT * FROM WPG.HATS_2A_A_MAX1A;


-- WPG.HATS_2A_MIN1A source

CREATE  VIEW [WPG].[HATS_2A_MIN1A] AS 
SELECT * FROM WPG.HATS_2A_SMB_MIN1A
UNION ALL 
SELECT * FROM WPG.HATS_2A_A_MIN1A;


-- WPG.HATS_2A_SMB1 source

CREATE VIEW WPG.HATS_2A_SMB1
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.HS_NAME AS STATION, 
                            SMB.MDATE, SMB.STIME, SMB.SAM_NO, SMB.D_CODE, SMB.MONITOR_STATE, SMB.ANALYSIS_LAB, 
                            SMB.TEMPER, SMB.PH_SC, SMB.SAL, SMB.COND, SMB.DO, SMB.DO_SAT, SMB.FLSCUFA, SMB.TURB_SC, 
                            SMB.PAR, SMB.L_BOD5, SMB.BOD5, SMB.L_FC, SMB.FC, SMB.L_ECOLI, SMB.ECOLI, SMB.L_PH_M, SMB.PH_M, 
                            SMB.L_TURB_M, SMB.TURB_M, SMB.L_NH4, SMB.NH4, SMB.L_NO2, SMB.NO2, SMB.L_NO3, SMB.NO3, 
                            SMB.L_TKN_S, SMB.TKN_S, SMB.L_TKN_P, SMB.TKN_P, SMB.L_TKN_SP, SMB.TKN_SP, SMB.L_PO4, SMB.PO4, 
                            SMB.L_TP_S, SMB.TP_S, SMB.L_TP_P, SMB.TP_P, SMB.L_TP_SP, SMB.TP_SP, SMB.L_SIO2, SMB.SIO2, 
                            SMB.L_SS, SMB.SS, SMB.L_TVS, SMB.TVS, SMB.L_CHL, SMB.CHL, SMB.L_PHAE, SMB.PHAE, SMB.SOL_RAD, 
                            SMB.AIR_TEMP, SMB.WIND_SP, SMB.WIND_DIR, SMB.SEA_COND, SMB.SEA_COL, SMB.FISH_KILL, SMB.SD, 
                            SMB.WEATHER, SMB.NH3, SMB.TIN, SMB.TN, SMB.NH4_NM, SMB.NO2_NM, SMB.NO3_NM, SMB.TKN_NM, 
                            SMB.NOX_NM, SMB.TIN_NM, SMB.TN_NM, SMB.PO4_PM, SMB.TP_PM, SMB.TIN_PO4_MMR, SMB.TN_TP_MMR, 
                            ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, ANALYSIS_LAB, TEMPER, 
                                                        PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI,
                                                         L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, 
                                                        L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, 
                                                        L_SIO2, SIO2, L_SS, SS, L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, 
                                                        WIND_DIR, SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                        NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR
                            FROM               WPG.HS_S
                            UNION ALL
                            SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, ANALYSIS_LAB, TEMPER, 
                                                        PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI,
                                                         L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, 
                                                        L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, 
                                                        L_SIO2, SIO2, L_SS, SS, L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, 
                                                        WIND_DIR, SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                        NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR
                            FROM              WPG.HS_M
                            UNION ALL
                            SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, ANALYSIS_LAB, TEMPER, 
                                                        PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI,
                                                         L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, 
                                                 L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, 
                                                        L_SIO2, SIO2, L_SS, SS, L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, 
                                                        WIND_DIR, SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                        NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR
                            FROM              WPG.HS_B
                            UNION ALL
                            SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, ANALYSIS_LAB, TEMPER, 
                                                        PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI,
                                                         L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, 
                                                        L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, 
                                                        L_SIO2, SIO2, L_SS, SS, L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, 
                                                        WIND_DIR, SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                        NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR
                            FROM              WPG.HS_N) AS SMB INNER JOIN
                            WPG.MSTATION AS ST ON SMB.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.HATS_2A_SMB_AVG1 source

CREATE VIEW WPG.HATS_2A_SMB_AVG1
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.HS_NAME AS STATION, SMB.YR,
                             SMB.D_CODE, SMB.TOTAL, SMB.TEMPER, SMB.PH_SC, SMB.SAL, SMB.COND, SMB.DO, SMB.DO_SAT, 
                            SMB.FLSCUFA, SMB.TURB_SC, SMB.PAR, SMB.BOD5, SMB.FC, SMB.ECOLI, SMB.PH_M, SMB.TURB_M, SMB.NH4, 
                            SMB.NO2, SMB.NO3, SMB.TKN_S, SMB.TKN_P, SMB.TKN_SP, SMB.PO4, SMB.TP_S, SMB.TP_P, SMB.TP_SP, 
                            SMB.SIO2, SMB.SS, SMB.TVS, SMB.CHL, SMB.PHAE, SMB.SOL_RAD, SMB.AIR_TEMP, SMB.WIND_SP, SMB.SD, 
                            SMB.NH3, SMB.TIN, SMB.TN, SMB.NH4_NM, SMB.NO2_NM, SMB.NO3_NM, SMB.TKN_NM, SMB.NOX_NM, 
                            SMB.TIN_NM, SMB.TN_NM, SMB.PO4_PM, SMB.TP_PM, SMB.TIN_PO4_MMR, SMB.TN_TP_MMR, 
                            ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YR, D_CODE, COUNT(*) AS TOTAL, AVG(TEMPER) AS TEMPER, AVG(PH_SC) 
                                                        AS PH_SC, AVG(SAL) AS SAL, AVG(COND) AS COND, AVG(DO) AS DO, AVG(DO_SAT) AS DO_SAT, 
                                                        AVG(FLSCUFA) AS FLSCUFA, AVG(TURB_SC) AS TURB_SC, AVG(PAR) AS PAR, AVG(BOD5) AS BOD5, 
                                                        EXP(AVG(LOG (CASE FC WHEN 0 THEN NULL ELSE FC END))) AS FC, 
                                                        EXP(AVG(LOG (CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))) AS ECOLI, AVG(PH_M) AS PH_M, 
                                                        AVG(TURB_M) AS TURB_M, AVG(NH4) AS NH4, AVG(NO2) AS NO2, AVG(NO3) AS NO3, AVG(TKN_S) 
                                                        AS TKN_S, AVG(TKN_P) AS TKN_P, AVG(TKN_SP) AS TKN_SP, AVG(PO4) AS PO4, AVG(TP_S) AS TP_S, 
                                                        AVG(TP_P) AS TP_P, AVG(TP_SP) AS TP_SP, AVG(SIO2) AS SIO2, AVG(SS) AS SS, AVG(TVS) AS TVS, 
                                                        AVG(CHL) AS CHL, AVG(PHAE) AS PHAE, AVG(SOL_RAD) AS SOL_RAD, AVG(AIR_TEMP) AS AIR_TEMP, 
                                                        AVG(WIND_SP) AS WIND_SP, AVG(SD) AS SD, AVG(NH3) AS NH3, AVG(TIN) AS TIN, AVG(TN) AS TN, 
                                                        AVG(NH4_NM) AS NH4_NM, AVG(NO2_NM) AS NO2_NM, AVG(NO3_NM) AS NO3_NM, AVG(TKN_NM) 
                                                        AS TKN_NM, AVG(NOX_NM) AS NOX_NM, AVG(TIN_NM) AS TIN_NM, AVG(TN_NM) AS TN_NM, 
                                                        AVG(PO4_PM) AS PO4_PM, AVG(TP_PM) AS TP_PM, AVG(TIN_PO4_MMR) AS TIN_PO4_MMR, 
                                                        AVG(TN_TP_MMR) AS TN_TP_MMR
                            FROM               (SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, 
                                                                                     ANALYSIS_LAB, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                  NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM               WPG.HS_S
                                                         UNION ALL
                                                         SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, 
                                                                                     ANALYSIS_LAB, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM              WPG.HS_M
                                                         UNION ALL
                                                         SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, 
                                                                                     ANALYSIS_LAB, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM              WPG.HS_B) AS SMB_1
                            GROUP BY    SITE_ID, YEAR(MDATE), D_CODE) AS SMB INNER JOIN
                            WPG.MSTATION AS ST ON SMB.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.HATS_2A_SMB_AVG1A source

CREATE VIEW WPG.HATS_2A_SMB_AVG1A
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.HS_NAME AS STATION, SMB.YR,
                             SMB.D_CODE, SMB.TOTAL, SMB.TEMPER_AVG, SMB.PH_SC_AVG, SMB.SAL_AVG, SMB.COND_AVG, SMB.DO_AVG, 
                            SMB.DO_SAT_AVG, SMB.FLSCUFA_AVG, SMB.TURB_SC_AVG, SMB.PAR_AVG, 
                            CASE WHEN L_BOD5_CNT = 0 THEN NULL ELSE '<' END AS L_BOD5_AVG, SMB.BOD5_AVG, 
                            CASE WHEN L_FC_CNT = 0 THEN NULL ELSE '<' END AS L_FC_AVG, SMB.FC_AVG, 
                            CASE WHEN L_ECOLI_CNT = 0 THEN NULL ELSE '<' END AS L_ECOLI_AVG, SMB.ECOLI_AVG, 
                            CASE WHEN L_PH_M_CNT = 0 THEN NULL ELSE '<' END AS L_PH_M_AVG, SMB.PH_M_AVG, 
                            CASE WHEN L_TURB_M_CNT = 0 THEN NULL ELSE '<' END AS L_TURB_M_AVG, SMB.TURB_M_AVG, 
                            CASE WHEN L_NH4_CNT = 0 THEN NULL ELSE '<' END AS L_NH4_AVG, SMB.NH4_AVG, 
                            CASE WHEN L_NO2_CNT = 0 THEN NULL ELSE '<' END AS L_NO2_AVG, SMB.NO2_AVG, 
                            CASE WHEN L_NO3_CNT = 0 THEN NULL ELSE '<' END AS L_NO3_AVG, SMB.NO3_AVG, 
                            CASE WHEN L_TKN_S_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_S_AVG, SMB.TKN_S_AVG, 
                            CASE WHEN L_TKN_P_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_P_AVG, SMB.TKN_P_AVG, 
                            CASE WHEN L_TKN_SP_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_SP_AVG, SMB.TKN_SP_AVG, 
                            CASE WHEN L_PO4_CNT = 0 THEN NULL ELSE '<' END AS L_PO4_AVG, SMB.PO4_AVG, 
                            CASE WHEN L_TP_S_CNT = 0 THEN NULL ELSE '<' END AS L_TP_S_AVG, SMB.TP_S_AVG, 
                            CASE WHEN L_TP_P_CNT = 0 THEN NULL ELSE '<' END AS L_TP_P_AVG, SMB.TP_P_AVG, 
                            CASE WHEN L_TP_SP_CNT = 0 THEN NULL ELSE '<' END AS L_TP_SP_AVG, SMB.TP_SP_AVG, 
                            CASE WHEN L_SIO2_CNT = 0 THEN NULL ELSE '<' END AS L_SIO2_AVG, SMB.SIO2_AVG, 
                            CASE WHEN L_SS_CNT = 0 THEN NULL ELSE '<' END AS L_SS_AVG, SMB.SS_AVG, 
                            CASE WHEN L_TVS_CNT = 0 THEN NULL ELSE '<' END AS L_TVS_AVG, SMB.TVS_AVG, 
                            CASE WHEN L_CHL_CNT = 0 THEN NULL ELSE '<' END AS L_CHL_AVG, SMB.CHL_AVG, 
                            CASE WHEN L_PHAE_CNT = 0 THEN NULL ELSE '<' END AS L_PHAE_AVG, SMB.PHAE_AVG, SMB.SOL_RAD_AVG, 
                            SMB.AIR_TEMP_AVG, SMB.WIND_SP_AVG, SMB.SD_AVG, SMB.NH3_AVG, SMB.TIN_AVG, SMB.TN_AVG, 
                            SMB.NH4_NM_AVG, SMB.NO2_NM_AVG, SMB.NO3_NM_AVG, SMB.TKN_NM_AVG, SMB.NOX_NM_AVG, 
                            SMB.TIN_NM_AVG, SMB.TN_NM_AVG, SMB.PO4_PM_AVG, SMB.TP_PM_AVG, SMB.TIN_PO4_MMR_AVG, 
                            SMB.TN_TP_MMR_AVG, ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YR, D_CODE, COUNT(*) AS TOTAL, AVG(TEMPER) AS TEMPER_AVG, 
                                                        AVG(PH_SC) AS PH_SC_AVG, AVG(SAL) AS SAL_AVG, AVG(COND) AS COND_AVG, AVG(DO) AS DO_AVG, 
                                                        AVG(DO_SAT) AS DO_SAT_AVG, AVG(FLSCUFA) AS FLSCUFA_AVG, AVG(TURB_SC) AS TURB_SC_AVG, 
                                                        AVG(PAR) AS PAR_AVG, AVG(BOD5) AS BOD5_AVG, EXP(AVG(LOG (CASE FC WHEN 0 THEN NULL 
                                                        ELSE FC END))) AS FC_AVG, EXP(AVG(LOG (CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))) 
                                                        AS ECOLI_AVG, AVG(PH_M) AS PH_M_AVG, AVG(TURB_M) AS TURB_M_AVG, AVG(NH4) AS NH4_AVG, 
                                                        AVG(NO2) AS NO2_AVG, AVG(NO3) AS NO3_AVG, AVG(TKN_S) AS TKN_S_AVG, AVG(TKN_P) 
                                                        AS TKN_P_AVG, AVG(TKN_SP) AS TKN_SP_AVG, AVG(PO4) AS PO4_AVG, AVG(TP_S) AS TP_S_AVG, 
                                                        AVG(TP_P) AS TP_P_AVG, AVG(TP_SP) AS TP_SP_AVG, AVG(SIO2) AS SIO2_AVG, AVG(SS) AS SS_AVG, 
                                                        AVG(TVS) AS TVS_AVG, AVG(CHL) AS CHL_AVG, AVG(PHAE) AS PHAE_AVG, AVG(SOL_RAD) 
                                                        AS SOL_RAD_AVG, AVG(AIR_TEMP) AS AIR_TEMP_AVG, AVG(WIND_SP) AS WIND_SP_AVG, AVG(SD) 
                                                        AS SD_AVG, AVG(NH3) AS NH3_AVG, AVG(TIN) AS TIN_AVG, AVG(TN) AS TN_AVG, AVG(NH4_NM) 
                                                        AS NH4_NM_AVG, AVG(NO2_NM) AS NO2_NM_AVG, AVG(NO3_NM) AS NO3_NM_AVG, AVG(TKN_NM) 
                                                        AS TKN_NM_AVG, AVG(NOX_NM) AS NOX_NM_AVG, AVG(TIN_NM) AS TIN_NM_AVG, AVG(TN_NM) 
                                                        AS TN_NM_AVG, AVG(PO4_PM) AS PO4_PM_AVG, AVG(TP_PM) AS TP_PM_AVG, AVG(TIN_PO4_MMR) 
                                                        AS TIN_PO4_MMR_AVG, AVG(TN_TP_MMR) AS TN_TP_MMR_AVG, COUNT(L_BOD5) AS L_BOD5_CNT, 
                                                        COUNT(L_FC) AS L_FC_CNT, COUNT(L_ECOLI) AS L_ECOLI_CNT, COUNT(L_PH_M) AS L_PH_M_CNT, 
                                                        COUNT(L_TURB_M) AS L_TURB_M_CNT, COUNT(L_NH4) AS L_NH4_CNT, COUNT(L_NO2) 
                                                        AS L_NO2_CNT, COUNT(L_NO3) AS L_NO3_CNT, COUNT(L_TKN_S) AS L_TKN_S_CNT, COUNT(L_TKN_P) 
                                                        AS L_TKN_P_CNT, COUNT(L_TKN_SP) AS L_TKN_SP_CNT, COUNT(L_PO4) AS L_PO4_CNT, 
                                                        COUNT(L_TP_S) AS L_TP_S_CNT, COUNT(L_TP_P) AS L_TP_P_CNT, COUNT(L_TP_SP) 
                                                        AS L_TP_SP_CNT, COUNT(L_SIO2) AS L_SIO2_CNT, COUNT(L_SS) AS L_SS_CNT, COUNT(L_TVS) 
                                                        AS L_TVS_CNT, COUNT(L_CHL) AS L_CHL_CNT, COUNT(L_PHAE) AS L_PHAE_CNT
                            FROM               (SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, 
                                                                                     ANALYSIS_LAB, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM               WPG.HS_S
                                                         UNION ALL
                                                         SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, 
                                                                                     ANALYSIS_LAB, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                          L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM              WPG.HS_M
                                                         UNION ALL
                                                         SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, 
                                                                                     ANALYSIS_LAB, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM              WPG.HS_B) AS SMB_1
                            GROUP BY    SITE_ID, YEAR(MDATE), D_CODE) AS SMB INNER JOIN
                            WPG.MSTATION AS ST ON SMB.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.HATS_2A_SMB_MAX1A source

CREATE VIEW WPG.HATS_2A_SMB_MAX1A
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.HS_NAME AS STATION, SMB.YR,
                             SMB.D_CODE, SMB.TOTAL, SMB.TEMPER_MAX, SMB.PH_SC_MAX, SMB.SAL_MAX, SMB.COND_MAX, 
                            SMB.DO_MAX, SMB.DO_SAT_MAX, SMB.FLSCUFA_MAX, SMB.TURB_SC_MAX, SMB.PAR_MAX, 
                            CASE WHEN L_BOD5_CNT = TOTAL THEN '<' ELSE NULL END AS L_BOD5_MAX, SMB.BOD5_MAX, 
                            CASE WHEN L_FC_CNT = TOTAL THEN '<' ELSE NULL END AS L_FC_MAX, SMB.FC_MAX, 
                            CASE WHEN L_ECOLI_CNT = TOTAL THEN '<' ELSE NULL END AS L_ECOLI_MAX, SMB.ECOLI_MAX, 
                            CASE WHEN L_PH_M_CNT = TOTAL THEN '<' ELSE NULL END AS L_PH_M_MAX, SMB.PH_M_MAX, 
                            CASE WHEN L_TURB_M_CNT = TOTAL THEN '<' ELSE NULL END AS L_TURB_M_MAX, SMB.TURB_M_MAX, 
                            CASE WHEN L_NH4_CNT = TOTAL THEN '<' ELSE NULL END AS L_NH4_MAX, SMB.NH4_MAX, 
                            CASE WHEN L_NO2_CNT = TOTAL THEN '<' ELSE NULL END AS L_NO2_MAX, SMB.NO2_MAX, 
                            CASE WHEN L_NO3_CNT = TOTAL THEN '<' ELSE NULL END AS L_NO3_MAX, SMB.NO3_MAX, 
                            CASE WHEN L_TKN_S_CNT = TOTAL THEN '<' ELSE NULL END AS L_TKN_S_MAX, SMB.TKN_S_MAX, 
                            CASE WHEN L_TKN_P_CNT = TOTAL THEN '<' ELSE NULL END AS L_TKN_P_MAX, SMB.TKN_P_MAX, 
                            CASE WHEN L_TKN_SP_CNT = TOTAL THEN '<' ELSE NULL END AS L_TKN_SP_MAX, SMB.TKN_SP_MAX, 
                            CASE WHEN L_PO4_CNT = TOTAL THEN '<' ELSE NULL END AS L_PO4_MAX, SMB.PO4_MAX, 
                            CASE WHEN L_TP_S_CNT = TOTAL THEN '<' ELSE NULL END AS L_TP_S_MAX, SMB.TP_S_MAX, 
                            CASE WHEN L_TP_P_CNT = TOTAL THEN '<' ELSE NULL END AS L_TP_P_MAX, SMB.TP_P_MAX, 
                            CASE WHEN L_TP_SP_CNT = TOTAL THEN '<' ELSE NULL END AS L_TP_SP_MAX, SMB.TP_SP_MAX, 
                            CASE WHEN L_SIO2_CNT = TOTAL THEN '<' ELSE NULL END AS L_SIO2_MAX, SMB.SIO2_MAX, 
                            CASE WHEN L_SS_CNT = TOTAL THEN '<' ELSE NULL END AS L_SS_MAX, SMB.SS_MAX, 
                            CASE WHEN L_TVS_CNT = TOTAL THEN '<' ELSE NULL END AS L_TVS_MAX, SMB.TVS_MAX, 
                            CASE WHEN L_CHL_CNT = TOTAL THEN '<' ELSE NULL END AS L_CHL_MAX, SMB.CHL_MAX, 
                            CASE WHEN L_PHAE_CNT = TOTAL THEN '<' ELSE NULL END AS L_PHAE_MAX, SMB.PHAE_MAX, 
                            SMB.SOL_RAD_MAX, SMB.AIR_TEMP_MAX, SMB.WIND_SP_MAX, SMB.SD_MAX, SMB.NH3_MAX, SMB.TIN_MAX, 
                            SMB.TN_MAX, SMB.NH4_NM_MAX, SMB.NO2_NM_MAX, SMB.NO3_NM_MAX, SMB.TKN_NM_MAX, 
                            SMB.NOX_NM_MAX, SMB.TIN_NM_MAX, SMB.TN_NM_MAX, SMB.PO4_PM_MAX, SMB.TP_PM_MAX, 
                            SMB.TIN_PO4_MMR_MAX, SMB.TN_TP_MMR_MAX, ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YR, D_CODE, COUNT(*) AS TOTAL, MAX(TEMPER) AS TEMPER_MAX, 
                                                        MAX(PH_SC) AS PH_SC_MAX, MAX(SAL) AS SAL_MAX, MAX(COND) AS COND_MAX, MAX(DO) 
                                                        AS DO_MAX, MAX(DO_SAT) AS DO_SAT_MAX, MAX(FLSCUFA) AS FLSCUFA_MAX, MAX(TURB_SC) 
                                                        AS TURB_SC_MAX, MAX(PAR) AS PAR_MAX, MAX(BOD5) AS BOD5_MAX, 
                                                        EXP(MAX(LOG (CASE FC WHEN 0 THEN NULL ELSE FC END))) AS FC_MAX, 
                                                        EXP(MAX(LOG (CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))) AS ECOLI_MAX, MAX(PH_M) 
                                                        AS PH_M_MAX, MAX(TURB_M) AS TURB_M_MAX, MAX(NH4) AS NH4_MAX, MAX(NO2) AS NO2_MAX, 
                                                        MAX(NO3) AS NO3_MAX, MAX(TKN_S) AS TKN_S_MAX, MAX(TKN_P) AS TKN_P_MAX, MAX(TKN_SP) 
                                                        AS TKN_SP_MAX, MAX(PO4) AS PO4_MAX, MAX(TP_S) AS TP_S_MAX, MAX(TP_P) AS TP_P_MAX, 
                                                        MAX(TP_SP) AS TP_SP_MAX, MAX(SIO2) AS SIO2_MAX, MAX(SS) AS SS_MAX, MAX(TVS) AS TVS_MAX, 
                                                        MAX(CHL) AS CHL_MAX, MAX(PHAE) AS PHAE_MAX, MAX(SOL_RAD) AS SOL_RAD_MAX, MAX(AIR_TEMP) 
                                                        AS AIR_TEMP_MAX, MAX(WIND_SP) AS WIND_SP_MAX, MAX(SD) AS SD_MAX, MAX(NH3) AS NH3_MAX, 
                                                        MAX(TIN) AS TIN_MAX, MAX(TN) AS TN_MAX, MAX(NH4_NM) AS NH4_NM_MAX, MAX(NO2_NM) 
                                                        AS NO2_NM_MAX, MAX(NO3_NM) AS NO3_NM_MAX, MAX(TKN_NM) AS TKN_NM_MAX, MAX(NOX_NM) 
                                                        AS NOX_NM_MAX, MAX(TIN_NM) AS TIN_NM_MAX, MAX(TN_NM) AS TN_NM_MAX, MAX(PO4_PM) 
                                                        AS PO4_PM_MAX, MAX(TP_PM) AS TP_PM_MAX, MAX(TIN_PO4_MMR) AS TIN_PO4_MMR_MAX, 
                                                        MAX(TN_TP_MMR) AS TN_TP_MMR_MAX, COUNT(L_BOD5) AS L_BOD5_CNT, COUNT(L_FC) 
                                                        AS L_FC_CNT, COUNT(L_ECOLI) AS L_ECOLI_CNT, COUNT(L_PH_M) AS L_PH_M_CNT, 
                                                        COUNT(L_TURB_M) AS L_TURB_M_CNT, COUNT(L_NH4) AS L_NH4_CNT, COUNT(L_NO2) 
                                                        AS L_NO2_CNT, COUNT(L_NO3) AS L_NO3_CNT, COUNT(L_TKN_S) AS L_TKN_S_CNT, COUNT(L_TKN_P) 
                                                        AS L_TKN_P_CNT, COUNT(L_TKN_SP) AS L_TKN_SP_CNT, COUNT(L_PO4) AS L_PO4_CNT, 
                                                        COUNT(L_TP_S) AS L_TP_S_CNT, COUNT(L_TP_P) AS L_TP_P_CNT, COUNT(L_TP_SP) 
                                                        AS L_TP_SP_CNT, COUNT(L_SIO2) AS L_SIO2_CNT, COUNT(L_SS) AS L_SS_CNT, COUNT(L_TVS) 
                                                        AS L_TVS_CNT, COUNT(L_CHL) AS L_CHL_CNT, COUNT(L_PHAE) AS L_PHAE_CNT
                            FROM               (SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, 
                                                                                     ANALYSIS_LAB, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM               WPG.HS_S
                                                         UNION ALL
                                                         SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, 
  ANALYSIS_LAB, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM              WPG.HS_M
                                                         UNION ALL
                                                         SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, 
                                                                                     ANALYSIS_LAB, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM              WPG.HS_B) AS SMB_1
                            GROUP BY    SITE_ID, YEAR(MDATE), D_CODE) AS SMB INNER JOIN
                            WPG.MSTATION AS ST ON SMB.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.HATS_2A_SMB_MIN1A source

CREATE VIEW WPG.HATS_2A_SMB_MIN1A
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.HS_NAME AS STATION, SMB.YR,
                             SMB.D_CODE, SMB.TOTAL, SMB.TEMPER_MIN, SMB.PH_SC_MIN, SMB.SAL_MIN, SMB.COND_MIN, SMB.DO_MIN, 
                            SMB.DO_SAT_MIN, SMB.FLSCUFA_MIN, SMB.TURB_SC_MIN, SMB.PAR_MIN, 
                            CASE WHEN L_BOD5_CNT = 0 THEN NULL ELSE '<' END AS L_BOD5_MIN, SMB.BOD5_MIN, 
                            CASE WHEN L_FC_CNT = 0 THEN NULL ELSE '<' END AS L_FC_MIN, SMB.FC_MIN, 
                            CASE WHEN L_ECOLI_CNT = 0 THEN NULL ELSE '<' END AS L_ECOLI_MIN, SMB.ECOLI_MIN, 
                            CASE WHEN L_PH_M_CNT = 0 THEN NULL ELSE '<' END AS L_PH_M_MIN, SMB.PH_M_MIN, 
                            CASE WHEN L_TURB_M_CNT = 0 THEN NULL ELSE '<' END AS L_TURB_M_MIN, SMB.TURB_M_MIN, 
                            CASE WHEN L_NH4_CNT = 0 THEN NULL ELSE '<' END AS L_NH4_MIN, SMB.NH4_MIN, 
                            CASE WHEN L_NO2_CNT = 0 THEN NULL ELSE '<' END AS L_NO2_MIN, SMB.NO2_MIN, 
                            CASE WHEN L_NO3_CNT = 0 THEN NULL ELSE '<' END AS L_NO3_MIN, SMB.NO3_MIN, 
                            CASE WHEN L_TKN_S_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_S_MIN, SMB.TKN_S_MIN, 
                            CASE WHEN L_TKN_P_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_P_MIN, SMB.TKN_P_MIN, 
                            CASE WHEN L_TKN_SP_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_SP_MIN, SMB.TKN_SP_MIN, 
                            CASE WHEN L_PO4_CNT = 0 THEN NULL ELSE '<' END AS L_PO4_MIN, SMB.PO4_MIN, 
                            CASE WHEN L_TP_S_CNT = 0 THEN NULL ELSE '<' END AS L_TP_S_MIN, SMB.TP_S_MIN, 
                            CASE WHEN L_TP_P_CNT = 0 THEN NULL ELSE '<' END AS L_TP_P_MIN, SMB.TP_P_MIN, 
                            CASE WHEN L_TP_SP_CNT = 0 THEN NULL ELSE '<' END AS L_TP_SP_MIN, SMB.TP_SP_MIN, 
                            CASE WHEN L_SIO2_CNT = 0 THEN NULL ELSE '<' END AS L_SIO2_MIN, SMB.SIO2_MIN, 
                            CASE WHEN L_SS_CNT = 0 THEN NULL ELSE '<' END AS L_SS_MIN, SMB.SS_MIN, 
                            CASE WHEN L_TVS_CNT = 0 THEN NULL ELSE '<' END AS L_TVS_MIN, SMB.TVS_MIN, 
                            CASE WHEN L_CHL_CNT = 0 THEN NULL ELSE '<' END AS L_CHL_MIN, SMB.CHL_MIN, 
                            CASE WHEN L_PHAE_CNT = 0 THEN NULL ELSE '<' END AS L_PHAE_MIN, SMB.PHAE_MIN, SMB.SOL_RAD_MIN, 
                            SMB.AIR_TEMP_MIN, SMB.WIND_SP_MIN, SMB.SD_MIN, SMB.NH3_MIN, SMB.TIN_MIN, SMB.TN_MIN, 
                            SMB.NH4_NM_MIN, SMB.NO2_NM_MIN, SMB.NO3_NM_MIN, SMB.TKN_NM_MIN, SMB.NOX_NM_MIN, 
                            SMB.TIN_NM_MIN, SMB.TN_NM_MIN, SMB.PO4_PM_MIN, SMB.TP_PM_MIN, SMB.TIN_PO4_MMR_MIN, 
                            SMB.TN_TP_MMR_MIN, ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YR, D_CODE, COUNT(*) AS TOTAL, MIN(TEMPER) AS TEMPER_MIN, 
                                                        MIN(PH_SC) AS PH_SC_MIN, MIN(SAL) AS SAL_MIN, MIN(COND) AS COND_MIN, MIN(DO) AS DO_MIN, 
                                                        MIN(DO_SAT) AS DO_SAT_MIN, MIN(FLSCUFA) AS FLSCUFA_MIN, MIN(TURB_SC) AS TURB_SC_MIN, 
                                                        MIN(PAR) AS PAR_MIN, MIN(BOD5) AS BOD5_MIN, EXP(MIN(LOG (CASE FC WHEN 0 THEN NULL 
                                                        ELSE FC END))) AS FC_MIN, EXP(MIN(LOG (CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))) 
                                                        AS ECOLI_MIN, MIN(PH_M) AS PH_M_MIN, MIN(TURB_M) AS TURB_M_MIN, MIN(NH4) AS NH4_MIN, 
                                                        MIN(NO2) AS NO2_MIN, MIN(NO3) AS NO3_MIN, MIN(TKN_S) AS TKN_S_MIN, MIN(TKN_P) 
                                                        AS TKN_P_MIN, MIN(TKN_SP) AS TKN_SP_MIN, MIN(PO4) AS PO4_MIN, MIN(TP_S) AS TP_S_MIN, 
                                                        MIN(TP_P) AS TP_P_MIN, MIN(TP_SP) AS TP_SP_MIN, MIN(SIO2) AS SIO2_MIN, MIN(SS) AS SS_MIN, 
                                                        MIN(TVS) AS TVS_MIN, MIN(CHL) AS CHL_MIN, MIN(PHAE) AS PHAE_MIN, MIN(SOL_RAD) 
                                                        AS SOL_RAD_MIN, MIN(AIR_TEMP) AS AIR_TEMP_MIN, MIN(WIND_SP) AS WIND_SP_MIN, MIN(SD) 
                                                        AS SD_MIN, MIN(NH3) AS NH3_MIN, MIN(TIN) AS TIN_MIN, MIN(TN) AS TN_MIN, MIN(NH4_NM) 
                                                        AS NH4_NM_MIN, MIN(NO2_NM) AS NO2_NM_MIN, MIN(NO3_NM) AS NO3_NM_MIN, MIN(TKN_NM) 
                                                        AS TKN_NM_MIN, MIN(NOX_NM) AS NOX_NM_MIN, MIN(TIN_NM) AS TIN_NM_MIN, MIN(TN_NM) 
                                                        AS TN_NM_MIN, MIN(PO4_PM) AS PO4_PM_MIN, MIN(TP_PM) AS TP_PM_MIN, MIN(TIN_PO4_MMR) 
                                                        AS TIN_PO4_MMR_MIN, MIN(TN_TP_MMR) AS TN_TP_MMR_MIN, COUNT(L_BOD5) AS L_BOD5_CNT, 
                                                        COUNT(L_FC) AS L_FC_CNT, COUNT(L_ECOLI) AS L_ECOLI_CNT, COUNT(L_PH_M) AS L_PH_M_CNT, 
                                                        COUNT(L_TURB_M) AS L_TURB_M_CNT, COUNT(L_NH4) AS L_NH4_CNT, COUNT(L_NO2) 
                                                        AS L_NO2_CNT, COUNT(L_NO3) AS L_NO3_CNT, COUNT(L_TKN_S) AS L_TKN_S_CNT, COUNT(L_TKN_P) 
                                                        AS L_TKN_P_CNT, COUNT(L_TKN_SP) AS L_TKN_SP_CNT, COUNT(L_PO4) AS L_PO4_CNT, 
                                                        COUNT(L_TP_S) AS L_TP_S_CNT, COUNT(L_TP_P) AS L_TP_P_CNT, COUNT(L_TP_SP) 
                                                        AS L_TP_SP_CNT, COUNT(L_SIO2) AS L_SIO2_CNT, COUNT(L_SS) AS L_SS_CNT, COUNT(L_TVS) 
                                                        AS L_TVS_CNT, COUNT(L_CHL) AS L_CHL_CNT, COUNT(L_PHAE) AS L_PHAE_CNT
                            FROM               (SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, 
                                                                                     ANALYSIS_LAB, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM               WPG.HS_S
                                                         UNION ALL
                                                         SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, 
                                                                                     ANALYSIS_LAB, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                          L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM              WPG.HS_M
                                                         UNION ALL
                                                         SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, MONITOR_STATE, 
                                                                                     ANALYSIS_LAB, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM              WPG.HS_B) AS SMB_1
                            GROUP BY    SITE_ID, YEAR(MDATE), D_CODE) AS SMB INNER JOIN
                            WPG.MSTATION AS ST ON SMB.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.HATS_2A_SUMMARY1 source

CREATE VIEW WPG.HATS_2A_SUMMARY1
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, AV.STATION, AV.YR, AV.D_CODE, 
                            AV.TOTAL, AV.TEMPER_AVG, AV.PH_SC_AVG, AV.SAL_AVG, AV.COND_AVG, AV.DO_AVG, AV.DO_SAT_AVG, 
                            AV.FLSCUFA_AVG, AV.TURB_SC_AVG, AV.PAR_AVG, AV.L_BOD5_AVG, AV.BOD5_AVG, AV.L_FC_AVG, AV.FC_AVG, 
                            AV.L_ECOLI_AVG, AV.ECOLI_AVG, AV.L_PH_M_AVG, AV.PH_M_AVG, AV.L_TURB_M_AVG, AV.TURB_M_AVG, 
                            AV.L_NH4_AVG, AV.NH4_AVG, AV.L_NO2_AVG, AV.NO2_AVG, AV.L_NO3_AVG, AV.NO3_AVG, AV.L_TKN_S_AVG, 
                            AV.TKN_S_AVG, AV.L_TKN_P_AVG, AV.TKN_P_AVG, AV.L_TKN_SP_AVG, AV.TKN_SP_AVG, AV.L_PO4_AVG, 
                            AV.PO4_AVG, AV.L_TP_S_AVG, AV.TP_S_AVG, AV.L_TP_P_AVG, AV.TP_P_AVG, AV.L_TP_SP_AVG, AV.TP_SP_AVG, 
                            AV.L_SIO2_AVG, AV.SIO2_AVG, AV.L_SS_AVG, AV.SS_AVG, AV.L_TVS_AVG, AV.TVS_AVG, AV.L_CHL_AVG, AV.CHL_AVG, 
                            AV.L_PHAE_AVG, AV.PHAE_AVG, AV.SOL_RAD_AVG, AV.AIR_TEMP_AVG, AV.WIND_SP_AVG, AV.SD_AVG, AV.NH3_AVG, 
                            AV.TIN_AVG, AV.TN_AVG, AV.NH4_NM_AVG, AV.NO2_NM_AVG, AV.NO3_NM_AVG, AV.TKN_NM_AVG, AV.NOX_NM_AVG, 
                            AV.TIN_NM_AVG, AV.TN_NM_AVG, AV.PO4_PM_AVG, AV.TP_PM_AVG, AV.TIN_PO4_MMR_AVG, AV.TN_TP_MMR_AVG, 
                            MI.TEMPER_MIN, MI.PH_SC_MIN, MI.SAL_MIN, MI.COND_MIN, MI.DO_MIN, MI.DO_SAT_MIN, MI.FLSCUFA_MIN, 
                            MI.TURB_SC_MIN, MI.PAR_MIN, MI.L_BOD5_MIN, MI.BOD5_MIN, MI.L_FC_MIN, MI.FC_MIN, MI.L_ECOLI_MIN, 
                            MI.ECOLI_MIN, MI.L_PH_M_MIN, MI.PH_M_MIN, MI.L_TURB_M_MIN, MI.TURB_M_MIN, MI.L_NH4_MIN, 
                            MI.NH4_MIN, MI.L_NO2_MIN, MI.NO2_MIN, MI.L_NO3_MIN, MI.NO3_MIN, MI.L_TKN_S_MIN, MI.TKN_S_MIN, 
                            MI.L_TKN_P_MIN, MI.TKN_P_MIN, MI.L_TKN_SP_MIN, MI.TKN_SP_MIN, MI.L_PO4_MIN, MI.PO4_MIN, 
                            MI.L_TP_S_MIN, MI.TP_S_MIN, MI.L_TP_P_MIN, MI.TP_P_MIN, MI.L_TP_SP_MIN, MI.TP_SP_MIN, MI.L_SIO2_MIN, 
                            MI.SIO2_MIN, MI.L_SS_MIN, MI.SS_MIN, MI.L_TVS_MIN, MI.TVS_MIN, MI.L_CHL_MIN, MI.CHL_MIN, MI.L_PHAE_MIN,
                             MI.PHAE_MIN, MI.SOL_RAD_MIN, MI.AIR_TEMP_MIN, MI.WIND_SP_MIN, MI.SD_MIN, MI.NH3_MIN, MI.TIN_MIN, 
                            MI.TN_MIN, MI.NH4_NM_MIN, MI.NO2_NM_MIN, MI.NO3_NM_MIN, MI.TKN_NM_MIN, MI.NOX_NM_MIN, 
                            MI.TIN_NM_MIN, MI.TN_NM_MIN, MI.PO4_PM_MIN, MI.TP_PM_MIN, MI.TIN_PO4_MMR_MIN, MI.TN_TP_MMR_MIN, 
                            MX.TEMPER_MAX, MX.PH_SC_MAX, MX.SAL_MAX, MX.COND_MAX, MX.DO_MAX, MX.DO_SAT_MAX, 
                            MX.FLSCUFA_MAX, MX.TURB_SC_MAX, MX.PAR_MAX, MX.L_BOD5_MAX, MX.BOD5_MAX, MX.L_FC_MAX, 
                            MX.FC_MAX, MX.L_ECOLI_MAX, MX.ECOLI_MAX, MX.L_PH_M_MAX, MX.PH_M_MAX, MX.L_TURB_M_MAX, 
                            MX.TURB_M_MAX, MX.L_NH4_MAX, MX.NH4_MAX, MX.L_NO2_MAX, MX.NO2_MAX, MX.L_NO3_MAX, MX.NO3_MAX, 
                            MX.L_TKN_S_MAX, MX.TKN_S_MAX, MX.L_TKN_P_MAX, MX.TKN_P_MAX, MX.L_TKN_SP_MAX, MX.TKN_SP_MAX, 
                            MX.L_PO4_MAX, MX.PO4_MAX, MX.L_TP_S_MAX, MX.TP_S_MAX, MX.L_TP_P_MAX, MX.TP_P_MAX, 
                            MX.L_TP_SP_MAX, MX.TP_SP_MAX, MX.L_SIO2_MAX, MX.SIO2_MAX, MX.L_SS_MAX, MX.SS_MAX, MX.L_TVS_MAX, 
                            MX.TVS_MAX, MX.L_CHL_MAX, MX.CHL_MAX, MX.L_PHAE_MAX, MX.PHAE_MAX, MX.SOL_RAD_MAX, 
                            MX.AIR_TEMP_MAX, MX.WIND_SP_MAX, MX.SD_MAX, MX.NH3_MAX, MX.TIN_MAX, MX.TN_MAX, MX.NH4_NM_MAX,
                             MX.NO2_NM_MAX, MX.NO3_NM_MAX, MX.TKN_NM_MAX, MX.NOX_NM_MAX, MX.TIN_NM_MAX, MX.TN_NM_MAX, 
                            MX.PO4_PM_MAX, MX.TP_PM_MAX, MX.TIN_PO4_MMR_MAX, MX.TN_TP_MMR_MAX, 
                            ST.CMMVIEW AS VIEW_NO
FROM              WPG.HATS_2A_AVG1A AS AV LEFT OUTER JOIN
                            WPG.HATS_2A_MIN1A AS MI ON AV.STATION = MI.STATION AND AV.YR = MI.YR AND 
                            AV.D_CODE = MI.D_CODE LEFT OUTER JOIN
                            WPG.HATS_2A_MAX1A AS MX ON AV.STATION = MX.STATION AND AV.YR = MX.YR AND 
                            AV.D_CODE = MX.D_CODE INNER JOIN
                            WPG.MSTATION AS ST ON AV.STATION = ST.HS_NAME INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.HATS_2A_VISIT1 source

CREATE VIEW WPG.HATS_2A_VISIT1
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.HS_NAME AS STATION, 
                            VI.MDATE, VI.STIME, VI.SAMPLE_NO AS SAM_NO
FROM              WPG.HS_VISIT AS VI INNER JOIN
                            WPG.MSTATION AS ST ON VI.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.HATS_2A_WQO_RAW1 source

CREATE VIEW WPG.HATS_2A_WQO_RAW1
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.HS_NAME AS STATION, 
                            V.MDATE, V.STIME, V.SAMPLE_NO, S.DOS, M.DOM, B.DOB, C.DOC, A.DOA, N.TIN, U.NH3, E.ECOLI, OB.MIN_DOS, 
                            OB.MIN_DOS_PC, OB.MIN_DOM, OB.MIN_DOM_PC, OB.MIN_DOB, OB.MIN_DOB_PC, OB.MIN_DOC, 
                            OB.MIN_DOC_PC, OB.MIN_DOA, OB.MIN_DOA_PC, OB.MAX_TIN_AAM, OB.MAX_NH3_AAM, OB.MAX_ECOLI_AGM, 
                            CASE SIGN(S.DOS - MIN_DOS) WHEN 1 THEN 'YES' WHEN 0 THEN 'YES' WHEN - 1 THEN 'NO' ELSE NULL 
                            END AS MEET_DOS, CASE SIGN(M.DOM - MIN_DOM) 
                            WHEN 1 THEN 'YES' WHEN 0 THEN 'YES' WHEN - 1 THEN 'NO' ELSE NULL END AS MEET_DOM, 
                            CASE SIGN(B.DOB - MIN_DOB) WHEN 1 THEN 'YES' WHEN 0 THEN 'YES' WHEN - 1 THEN 'NO' ELSE NULL 
                            END AS MEET_DOB, CASE SIGN(C.DOC - MIN_DOC) 
                            WHEN 1 THEN 'YES' WHEN 0 THEN 'YES' WHEN - 1 THEN 'NO' ELSE NULL END AS MEET_DOC, 
                            CASE SIGN(A.DOA - MIN_DOA) WHEN 1 THEN 'YES' WHEN 0 THEN 'YES' WHEN - 1 THEN 'NO' ELSE NULL 
                            END AS MEET_DOA
FROM              WPG.HS_VISIT AS V LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DO AS DOS
                                  FROM               WPG.HS_SEACAT
                                  WHERE           (DEPTH_CODE = 'S')) AS S ON V.MWVISIT_ID = S.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DO AS DOM
                                  FROM               WPG.HS_SEACAT AS HS_SEACAT_4
                                  WHERE           (DEPTH_CODE = 'M')) AS M ON V.MWVISIT_ID = M.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DO AS DOB
                                  FROM               WPG.HS_SEACAT AS HS_SEACAT_3
                                  WHERE           (DEPTH_CODE = 'B')) AS B ON V.MWVISIT_ID = B.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, AVG(DO) AS DOC
                                  FROM               WPG.HS_SEACAT AS HS_SEACAT_2
                                  WHERE           (DEPTH_CODE IN ('S', 'M'))
                                  GROUP BY    MWVISIT_ID) AS C ON V.MWVISIT_ID = C.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, AVG(DO) AS DOA
                                  FROM               WPG.HS_SEACAT AS HS_SEACAT_1
                                  WHERE           (DEPTH_CODE IN ('S', 'M', 'B'))
                                  GROUP BY    MWVISIT_ID) AS A ON V.MWVISIT_ID = A.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, AVG(TIN) AS TIN
                                  FROM               WPG.HS_GLABN_CAL
                                  WHERE           (DEPTH_CODE IN ('S', 'M', 'B'))
                                  GROUP BY    MWVISIT_ID) AS N ON V.MWVISIT_ID = N.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, AVG(NH3) AS NH3
                                  FROM               WPG.HS_NH3
                                  WHERE           (DEPTH_CODE IN ('S', 'M', 'B'))
                                  GROUP BY    MWVISIT_ID) AS U ON V.MWVISIT_ID = U.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, EXP(AVG(LOG (CASE ECOLI WHEN 0 THEN 1 ELSE ECOLI END))) AS ECOLI
                                  FROM               WPG.HS_MLAB
                                  WHERE           (DEPTH_CODE IN ('S', 'M', 'B'))
                                  GROUP BY    MWVISIT_ID) AS E ON V.MWVISIT_ID = E.MWVISIT_ID INNER JOIN
                            WPG.MSTATION AS ST ON V.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.HS_SZ_WQO AS OB ON ST.SZ_ID = OB.SZ_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.HATS_2A_WQO_SUM1 source

CREATE VIEW [WPG].[HATS_2A_WQO_SUM1] AS
SELECT	ZONE, 
	WCZ, 
	SUBZONE, 
	STATION,
	YR,
	TOTAL,
	N_DOS,
	M_DOS,
	PC_DOS,
	MIN_DOS,
	MIN_DOS_PC,
	COMPLY_DOS,
	N_DOM,
	M_DOM,
	PC_DOM,
	MIN_DOM,
	MIN_DOM_PC,
	COMPLY_DOM,
	N_DOB,
	M_DOB,
	PC_DOB,
	MIN_DOB,
	MIN_DOB_PC,
	COMPLY_DOB,
	N_DOC,
	M_DOC,
	PC_DOC,
	MIN_DOC,
	MIN_DOC_PC,
	COMPLY_DOC,
	N_DOA,
	M_DOA,
	PC_DOA,
	MIN_DOA
	MIN_DOA_PC,
	COMPLY_DOA,
	CASE 	WHEN COMPLY_DOS = 'FALSE'  
			OR COMPLY_DOM = 'FALSE' 
			OR COMPLY_DOB = 'FALSE' 
			OR COMPLY_DOC = 'FALSE' 
			OR COMPLY_DOA = 'FALSE' THEN 'FALSE' 
		 WHEN COMPLY_DOS = 'TRUE'  
			OR COMPLY_DOM = 'TRUE' 
			OR COMPLY_DOB = 'TRUE' 
			OR COMPLY_DOC = 'TRUE' 
			OR COMPLY_DOA = 'TRUE' THEN 'TRUE' 
	ELSE NULL END	COMPLY_DO,
	TIN,
	MAX_TIN_AAM,
	CASE SIGN(MAX_TIN_AAM - TIN) WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END	COMPLY_TIN,
	NH3,
	MAX_NH3_AAM,
	CASE SIGN(MAX_NH3_AAM - NH3) WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END	COMPLY_NH3,
	ECOLI,
	MAX_ECOLI_AGM,
	CASE SIGN(MAX_ECOLI_AGM - ECOLI) WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END	COMPLY_ECOLI
FROM	(
	SELECT	ZONE, 
		WCZ, 
		SUBZONE, 
		STATION,
		YR,
		TOTAL,
		N_DOS,
		CASE WHEN MIN_DOS IS NULL THEN NULL ELSE M_DOS END		M_DOS,
		CASE WHEN N_DOS <> 0 AND MIN_DOS IS NOT NULL THEN 100 * M_DOS / N_DOS ELSE NULL END	PC_DOS,
		CASE WHEN N_DOS <> 0 THEN 
			CASE SIGN(100 * M_DOS / N_DOS - MIN_DOS_PC) 
				WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END
			ELSE NULL END						COMPLY_DOS,
		N_DOM,
		CASE WHEN MIN_DOM IS NULL THEN NULL ELSE M_DOM END		M_DOM,
		CASE WHEN N_DOM <> 0 AND MIN_DOM IS NOT NULL THEN 100 * M_DOM / N_DOM ELSE NULL END	PC_DOM,
		CASE WHEN N_DOM <> 0 THEN 
			CASE SIGN(100 * M_DOM / N_DOM - MIN_DOM_PC) 
				WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END
			ELSE NULL END						COMPLY_DOM,
		N_DOB,
		CASE WHEN MIN_DOB IS NULL THEN NULL ELSE M_DOB END		M_DOB,
		CASE WHEN N_DOB <> 0 AND MIN_DOB IS NOT NULL THEN 100 * M_DOB / N_DOB ELSE NULL END	PC_DOB,
		CASE WHEN N_DOB <> 0 THEN 
			CASE SIGN(100 * M_DOB / N_DOB - MIN_DOB_PC) 
				WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END
			ELSE NULL END						COMPLY_DOB,
		N_DOC,
		CASE WHEN MIN_DOC IS NULL THEN NULL ELSE M_DOC END		M_DOC,
		CASE WHEN N_DOC <> 0 AND MIN_DOC IS NOT NULL THEN 100 * M_DOC / N_DOC ELSE NULL END	PC_DOC,
		CASE WHEN N_DOC <> 0 THEN 
			CASE SIGN(100 * M_DOC / N_DOC - MIN_DOC_PC) 
				WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END
			ELSE NULL END						COMPLY_DOC,
		N_DOA,
		CASE WHEN MIN_DOS IS NULL THEN NULL ELSE M_DOA END		M_DOA,
		CASE WHEN N_DOA <> 0 AND MIN_DOA IS NOT NULL THEN 100 * M_DOA / N_DOA ELSE NULL END	PC_DOA,
		CASE WHEN N_DOA <> 0 THEN 
			CASE SIGN(100 * M_DOA / N_DOA - MIN_DOA_PC) 
				WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END
			ELSE NULL END						COMPLY_DOA,
		TIN,
		NH3,
		ECOLI,
		MIN_DOS,
		MIN_DOS_PC,
		MIN_DOM,
		MIN_DOM_PC,
		MIN_DOB,
		MIN_DOB_PC,
		MIN_DOC,
		MIN_DOC_PC,
		MIN_DOA,
		MIN_DOA_PC,
		MAX_TIN_AAM,
		MAX_NH3_AAM,
		MAX_ECOLI_AGM	
	FROM	(
		SELECT	MAX(ZONE)	ZONE, 
			MAX(WCZ)	WCZ, 
			MAX(SUBZONE)	SUBZONE, 
			STATION,
			YEAR(MDATE)		YR,
			COUNT(*)		TOTAL,
			COUNT(DOS)		N_DOS,
			COUNT(CASE MEET_DOS WHEN 'YES' THEN 1 ELSE NULL END)	M_DOS,
			COUNT(DOM)		N_DOM,
			COUNT(CASE MEET_DOM WHEN 'YES' THEN 1 ELSE NULL END)	M_DOM,
			COUNT(DOB)		N_DOB,
			COUNT(CASE MEET_DOB WHEN 'YES' THEN 1 ELSE NULL END)	M_DOB,
			COUNT(DOC)		N_DOC,
			COUNT(CASE MEET_DOC WHEN 'YES' THEN 1 ELSE NULL END)	M_DOC,
			COUNT(DOA)		N_DOA,
			COUNT(CASE MEET_DOA WHEN 'YES' THEN 1 ELSE NULL END)	M_DOA,
			AVG(TIN)			TIN,
			AVG(NH3)		NH3,
			EXP(AVG(LOG10(CASE ECOLI WHEN 0 THEN 1 ELSE ECOLI END)))	ECOLI,
			MIN_DOS,
			MIN_DOS_PC,
			MIN_DOM,
			MIN_DOM_PC,
			MIN_DOB,
			MIN_DOB_PC,
			MIN_DOC,
			MIN_DOC_PC,
			MIN_DOA,
			MIN_DOA_PC,
			MAX_TIN_AAM,
			MAX_NH3_AAM,
			MAX_ECOLI_AGM
		FROM	WPG.HATS_2A_WQO_RAW1
		GROUP BY 	ZONE, WCZ, SUBZONE, STATION, YEAR(MDATE), MIN_DOS, MIN_DOS_PC, 
				MIN_DOM, MIN_DOM_PC, MIN_DOB, MIN_DOB_PC, MIN_DOC, MIN_DOC_PC, 
				MIN_DOA, MIN_DOA_PC, MAX_TIN_AAM, MAX_NH3_AAM, MAX_ECOLI_AGM
		)	A
	)	B;


-- WPG.HS_A source

CREATE VIEW WPG.HS_A
AS
SELECT          VI.MWVISIT_ID, VI.SITE_ID, VI.MDATE, VI.STIME, VI.SAMPLE_NO AS SAM_NO, 'A' AS D_CODE, VI.MONITOR_STATE, 
                            VI.ANALYSIS_LAB, SC.TEMPER, SC.PH AS PH_SC, SC.SAL, SC.COND, SC.DO, SC.DO_SAT, SC.FLSCUFA, 
                            SC.TURB AS TURB_SC, CASE WHEN SC.PAR < 0.14 THEN 0 ELSE SC.PAR END AS PAR, ML.BOD5, ML.FC, ML.ECOLI, 
                            ML.PH AS PH_M, ML.TURB AS TURB_M, GL.NH4, GL.NO2, GL.NO3, GL.TKN_S, GL.TKN_P, GL.TKN_SP, GL.PO4, 
                            GL.TP_S, GL.TP_P, GL.TP_SP, GL.SIO2, GL.SS, GL.TVS, GL.CHL, GL.PHAE, FD.SOL_RAD, FD.AIR_TEMP, 
                            FD.WIND_SP, FD.WIND_DIR, FD.SEA_COND, FD.SEA_COL, FD.FISH_KILL, FD.SECCHIDISC AS SD, FD.WEATHER, 
                            CA.NH3, GL.TIN, GL.TN, GL.NH4_NM, GL.NO2_NM, GL.NO3_NM, GL.TKN_NM, GL.NOX_NM, GL.TIN_NM, GL.TN_NM, 
                            GL.PO4_PM, GL.TP_PM, GL.TIN_PO4_MMR, GL.TN_TP_MMR
FROM              WPG.HS_VISIT AS VI LEFT OUTER JOIN
                            WPG.HS_GLABN_CAL_A AS GL ON VI.MWVISIT_ID = GL.MWVISIT_ID LEFT OUTER JOIN
                            WPG.HS_MLAB_A AS ML ON VI.MWVISIT_ID = ML.MWVISIT_ID LEFT OUTER JOIN
                            WPG.HS_SEACAT_A AS SC ON VI.MWVISIT_ID = SC.MWVISIT_ID LEFT OUTER JOIN
                            WPG.HS_NH3_A AS CA ON VI.MWVISIT_ID = CA.MWVISIT_ID LEFT OUTER JOIN
                            WPG.HS_FIELD AS FD ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE          (SC.MWVISIT_ID IS NOT NULL) OR
                            (GL.MWVISIT_ID IS NOT NULL) OR
                            (ML.MWVISIT_ID IS NOT NULL);


-- WPG.HS_AA source

CREATE   VIEW [WPG].[HS_AA] AS
SELECT
	VI.MWVISIT_ID,
	VI.SITE_ID,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO	SAM_NO,
	'A'		D_CODE,
	SC.TEMPER,
	SC.PH 		PH_SC,
	SC.SAL,
	SC.COND,
	SC.DO,
	SC.DO_SAT,
	SC.FLSCUFA,	-- Cyril Leung 20090224 For Chlorophyll Column
	SC.TURB		TURB_SC,
	'PAR' = Case when 	SC.PAR < 0.14 then 0 else SC.PAR end ,
	ML.L_BOD5,
	ML.BOD5,
	ML.L_FC,
	ML.FC,
	ML.L_ECOLI,
	ML.ECOLI,
	ML.L_PH 	L_PH_M,
	ML.PH 		PH_M,
	ML.L_TURB 	L_TURB_M,
	ML.TURB 	TURB_M,
	GL.L_NH4,
	GL.NH4,
	GL.L_NO2,
	GL.NO2,
	GL.L_NO3,
	GL.NO3,
	GL.L_TKN_S,
	GL.TKN_S,
	GL.L_TKN_P,
	GL.TKN_P,
	GL.L_TKN_SP,
	GL.TKN_SP,
	GL.L_PO4,
	GL.PO4,
	GL.L_TP_S,
	GL.TP_S,
	GL.L_TP_P,
	GL.TP_P,
	GL.L_TP_SP,
	GL.TP_SP,
	GL.L_SIO2,
	GL.SIO2,
	GL.L_SS,
	GL.SS,
	GL.L_TVS,
	GL.TVS,
	GL.L_CHL,
	GL.CHL,
	GL.L_PHAE,
	GL.PHAE,
	FD.SOL_RAD,
	FD.AIR_TEMP,
	FD.WIND_SP,
	FD.WIND_DIR,
	FD.SEA_COND,
	FD.SEA_COL,
	FD.FISH_KILL,
	FD.SECCHIDISC	SD,
	FD.WEATHER,
	CA.NH3,
	GL.TIN,
	GL.TN,
	GL.NH4_NM,
 	GL.NO2_NM,
 	GL.NO3_NM,
 	GL.TKN_NM,
 	GL.NOX_NM,
 	GL.TIN_NM,
 	GL.TN_NM,
 	GL.PO4_PM,
 	GL.TP_PM,
 	GL.TIN_PO4_MMR,
	GL.TN_TP_MMR
FROM 	WPG.HS_VISIT	VI
LEFT OUTER JOIN	WPG.HS_GLABN_CAL_AA	GL	ON VI.MWVISIT_ID = GL.MWVISIT_ID
LEFT OUTER JOIN	WPG.HS_MLAB_AA 		ML	ON VI.MWVISIT_ID = ML.MWVISIT_ID
LEFT OUTER JOIN	WPG.HS_SEACAT_A 	SC	ON VI.MWVISIT_ID = SC.MWVISIT_ID
LEFT OUTER JOIN	WPG.HS_NH3_A		CA	ON VI.MWVISIT_ID = CA.MWVISIT_ID
LEFT OUTER JOIN	WPG.HS_FIELD		FD	ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE SC.MWVISIT_ID IS NOT NULL OR GL.MWVISIT_ID IS NOT NULL OR ML.MWVISIT_ID IS NOT NULL;


-- WPG.HS_B source

CREATE VIEW WPG.HS_B
AS
SELECT          VI.MWVISIT_ID, VI.SITE_ID, VI.MDATE, VI.STIME, VI.SAMPLE_NO AS SAM_NO, 'B' AS D_CODE, VI.MONITOR_STATE, 
                            VI.ANALYSIS_LAB, SC.TEMPER, SC.PH AS PH_SC, SC.SAL, SC.COND, SC.DO, SC.DO_SAT, SC.FLSCUFA, 
                            SC.TURB AS TURB_SC, CASE WHEN SC.PAR < 0.14 THEN 0 ELSE SC.PAR END AS PAR, ML.L_BOD5, ML.BOD5, 
                            ML.L_FC, ML.FC, ML.L_ECOLI, ML.ECOLI, ML.L_PH AS L_PH_M, ML.PH AS PH_M, ML.L_TURB AS L_TURB_M, 
                            ML.TURB AS TURB_M, GL.L_NH4, GL.NH4, GL.L_NO2, GL.NO2, GL.L_NO3, GL.NO3, GL.L_TKN_S, GL.TKN_S, 
                            GL.L_TKN_P, GL.TKN_P, GL.L_TKN_SP, GL.TKN_SP, GL.L_PO4, GL.PO4, GL.L_TP_S, GL.TP_S, GL.L_TP_P, GL.TP_P, 
                            GL.L_TP_SP, GL.TP_SP, GL.L_SIO2, GL.SIO2, GL.L_SS, GL.SS, GL.L_TVS, GL.TVS, GL.L_CHL, GL.CHL, GL.L_PHAE, 
                            GL.PHAE, FD.SOL_RAD, FD.AIR_TEMP, FD.WIND_SP, FD.WIND_DIR, FD.SEA_COND, FD.SEA_COL, FD.FISH_KILL, 
                            FD.SECCHIDISC AS SD, FD.WEATHER, CA.NH3, GL.TIN, GL.TN, GL.NH4_NM, GL.NO2_NM, GL.NO3_NM, GL.TKN_NM, 
                            GL.NOX_NM, GL.TIN_NM, GL.TN_NM, GL.PO4_PM, GL.TP_PM, GL.TIN_PO4_MMR, GL.TN_TP_MMR
FROM              WPG.HS_VISIT AS VI LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DEPTH_CODE, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, 
                                                              TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, 
                                                              SIO2, L_SS, SS, L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, TIN, TN, NH4_NM, NO2_NM, NO3_NM, 
                                                              TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR, L_TUR, 
                                                              TUR
                                  FROM               WPG.HS_GLABN_CAL
                                  WHERE           (DEPTH_CODE = 'B')) AS GL ON VI.MWVISIT_ID = GL.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, DEPTH_CODE, L_PH, PH, L_BOD5, BOD5, L_TURB, TURB, L_FC, 
                                                              FC, L_ECOLI, ECOLI, SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, 
                                                              VALID_DATE, VALID_CODE
                                  FROM               WPG.HS_MLAB
                                  WHERE           (DEPTH_CODE = 'B')) AS ML ON VI.MWVISIT_ID = ML.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, DEPTH, DEPTH_CODE, TEMPER, PH, SAL, COND, DO, DO_SAT, 
                                                              FLSCUFA, TURB, PAR, VALID_USER, VALID_DATE, VALID_CODE
                                  FROM               WPG.HS_SEACAT
                                  WHERE           (DEPTH_CODE = 'B')) AS SC ON VI.MWVISIT_ID = SC.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DEPTH_CODE, SAL, TEMPER, PH, L_NH4, NH4, L_NH3, NH3
                                  FROM               WPG.HS_NH3
                                  WHERE           (DEPTH_CODE = 'B')) AS CA ON VI.MWVISIT_ID = CA.MWVISIT_ID LEFT OUTER JOIN
                            WPG.HS_FIELD AS FD ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE          (GL.DEPTH_CODE IS NOT NULL) OR
                            (ML.DEPTH_CODE IS NOT NULL) OR
                            (SC.DEPTH_CODE IS NOT NULL);


-- WPG.HS_C source

CREATE VIEW WPG.HS_C
AS
SELECT          VI.MWVISIT_ID, VI.SITE_ID, VI.MDATE, VI.STIME, VI.SAMPLE_NO AS SAM_NO, 'C' AS D_CODE, VI.MONITOR_STATE, 
                            VI.ANALYSIS_LAB, SC.TEMPER, SC.PH AS PH_SC, SC.SAL, SC.COND, SC.DO, SC.DO_SAT, SC.FLSCUFA, 
                            SC.TURB AS TURB_SC, CASE WHEN SC.PAR < 0.14 THEN 0 ELSE SC.PAR END AS PAR, ML.L_BOD5, ML.BOD5, 
                            ML.L_FC, ML.FC, ML.L_ECOLI, ML.ECOLI, ML.L_PH AS L_PH_M, ML.PH AS PH_M, ML.L_TURB AS L_TURB_M, 
                            ML.TURB AS TURB_M, GL.L_NH4, GL.NH4, GL.L_NO2, GL.NO2, GL.L_NO3, GL.NO3, GL.L_TKN_S, GL.TKN_S, 
                            GL.L_TKN_P, GL.TKN_P, GL.L_TKN_SP, GL.TKN_SP, GL.L_PO4, GL.PO4, GL.L_TP_S, GL.TP_S, GL.L_TP_P, GL.TP_P, 
                            GL.L_TP_SP, GL.TP_SP, GL.L_SIO2, GL.SIO2, GL.L_SS, GL.SS, GL.L_TVS, GL.TVS, GL.L_CHL, GL.CHL, GL.L_PHAE, 
                            GL.PHAE, FD.SOL_RAD, FD.AIR_TEMP, FD.WIND_SP, FD.WIND_DIR, FD.SEA_COND, FD.SEA_COL, FD.FISH_KILL, 
                            FD.SECCHIDISC AS SD, FD.WEATHER, CA.NH3, GL.TIN, GL.TN, GL.NH4_NM, GL.NO2_NM, GL.NO3_NM, GL.TKN_NM, 
                            GL.NOX_NM, GL.TIN_NM, GL.TN_NM, GL.PO4_PM, GL.TP_PM, GL.TIN_PO4_MMR, GL.TN_TP_MMR
FROM              WPG.HS_VISIT AS VI LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DEPTH_CODE, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, 
                                                              TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, 
                                                              SIO2, L_SS, SS, L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, TIN, TN, NH4_NM, NO2_NM, NO3_NM, 
                                                              TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR, L_TUR, 
                                                              TUR
                                  FROM               WPG.HS_GLABN_CAL
                                  WHERE           (DEPTH_CODE = 'C')) AS GL ON VI.MWVISIT_ID = GL.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, DEPTH_CODE, L_PH, PH, L_BOD5, BOD5, L_TURB, TURB, L_FC, 
                                                              FC, L_ECOLI, ECOLI, SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, 
                                                              VALID_DATE, VALID_CODE
                                  FROM               WPG.HS_MLAB
                                  WHERE           (DEPTH_CODE = 'C')) AS ML ON VI.MWVISIT_ID = ML.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, DEPTH, DEPTH_CODE, TEMPER, PH, SAL, COND, DO, DO_SAT, 
                                                              FLSCUFA, TURB, PAR, VALID_USER, VALID_DATE, VALID_CODE
                                  FROM               WPG.HS_SEACAT
                                  WHERE           (DEPTH_CODE = 'C')) AS SC ON VI.MWVISIT_ID = SC.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DEPTH_CODE, SAL, TEMPER, PH, L_NH4, NH4, L_NH3, NH3
                                  FROM               WPG.HS_NH3
                                  WHERE           (DEPTH_CODE = 'C')) AS CA ON VI.MWVISIT_ID = CA.MWVISIT_ID LEFT OUTER JOIN
                            WPG.HS_FIELD AS FD ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE          (GL.DEPTH_CODE IS NOT NULL) OR
                            (ML.DEPTH_CODE IS NOT NULL) OR
                            (SC.DEPTH_CODE IS NOT NULL);


-- WPG.HS_GLABN_CAL source

CREATE VIEW [WPG].[HS_GLABN_CAL] AS
SELECT
 	MWVISIT_ID,	
	DEPTH_CODE,
	L_NH4,
	NH4,
	L_NO2,
	NO2,
	L_NO3,
	NO3,
	L_TKN_S,
	TKN_S,
	L_TKN_P,
	TKN_P,
	L_TKN_SP,
	TKN_SP,
	L_PO4,
	PO4,
	L_TP_S,
	TP_S,
	L_TP_P,
	TP_P,
	L_TP_SP,
	TP_SP,
	L_SIO2,
	SIO2,
	L_SS,
	SS,
	L_TVS,
	TVS,
	L_CHL,
	CHL,
	L_PHAE,
	PHAE,
	NH4 + NO2 + NO3			TIN,
	TKN_SP + NO2 + NO3		TN,
	NH4 / NMMW			NH4_NM,
	NO2 / NMMW			NO2_NM,
	NO3 / NMMW			NO3_NM,
	TKN_SP / NMMW			TKN_NM,
	NO2 + NO3 / NMMW	 	NOX_NM,
	(NH4 + NO2 + NO3) / NMMW		TIN_NM,
	(TKN_SP + NO2 + NO3) / NMMW	TN_NM,
	PO4 / PMMW			PO4_PM,
	TP_SP / PMMW			TP_PM,
	CASE WHEN PO4 = 0 THEN NULL 
		ELSE((NH4 + NO2 + NO3) / NMMW) /  (PO4 / PMMW) END		TIN_PO4_MMR,
	CASE WHEN TP_SP = 0 THEN NULL 
		ELSE((TKN_SP + NO2 + NO3) / NMMW)/(TP_SP / PMMW) END 	TN_TP_MMR,
	L_TUR,
	TUR
FROM 	(SELECT	*,
		0.0140067		NMMW,	/*NITROGEN MILLIMOLAR WEIGHT*/
		0.0309738		PMMW	/*PHOSPHROUS MILLIMOLAR WEIGHT*/
	FROM	WPG.HS_GLABN
	)	GN;


-- WPG.HS_GLABN_CAL_A source

CREATE VIEW [WPG].[HS_GLABN_CAL_A] AS
SELECT
	MWVISIT_ID,	
	AVG(NH4)		NH4,
	AVG(NO2)		NO2,
	AVG(NO3)		NO3,
	AVG(TKN_S)		TKN_S,
	AVG(TKN_P)		TKN_P,
	AVG(TKN_SP)		TKN_SP,
	AVG(PO4)		PO4,
	AVG(TP_S)		TP_S,
	AVG(TP_P)		TP_P,
	AVG(TP_SP)		TP_SP,
	AVG(SIO2)		SIO2,
	AVG(SS)			SS,
	AVG(TVS)		TVS,
	AVG(CHL)		CHL,
	AVG(PHAE)		PHAE,
	AVG(TIN)		TIN,
	AVG(TN)			TN,
	AVG(NH4_NM)		NH4_NM,
	AVG(NO2_NM)		NO2_NM,
	AVG(NO3_NM)		NO3_NM,
	AVG(TKN_NM)		TKN_NM,
	AVG(NOX_NM)		NOX_NM,
	AVG(TIN_NM)		TIN_NM,
	AVG(TN_NM) 		TN_NM,
	AVG(PO4_PM)		PO4_PM,
	AVG(TP_PM)		TP_PM,
	AVG(TIN_PO4_MMR)	TIN_PO4_MMR,
	AVG(TN_TP_MMR) 		TN_TP_MMR
FROM 	WPG.HS_GLABN_CAL
WHERE DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID;


-- WPG.HS_GLABN_CAL_AA source

CREATE VIEW [WPG].[HS_GLABN_CAL_AA] AS
SELECT
	MWVISIT_ID,
	CASE WHEN L_NH4_CNT = TOTAL THEN '<' ELSE NULL END	L_NH4,	NH4,
	CASE WHEN L_NO2_CNT = TOTAL THEN '<' ELSE NULL END	L_NO2,	NO2,
	CASE WHEN L_NO3_CNT = TOTAL THEN '<' ELSE NULL END	L_NO3,	NO3,
	CASE WHEN L_TKN_S_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_S,	TKN_S,
	CASE WHEN L_TKN_P_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_P,	TKN_P,
	CASE WHEN L_TKN_SP_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_SP,	TKN_SP,
	CASE WHEN L_PO4_CNT = TOTAL THEN '<' ELSE NULL END	L_PO4,	PO4,
	CASE WHEN L_TP_S_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_S,	TP_S,
	CASE WHEN L_TP_P_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_P,	TP_P,
	CASE WHEN L_TP_SP_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_SP,	TP_SP,
	CASE WHEN L_SIO2_CNT = TOTAL THEN '<' ELSE NULL END	L_SIO2,	SIO2,
	CASE WHEN L_SS_CNT = TOTAL THEN '<' ELSE NULL END	L_SS,	SS,
	CASE WHEN L_TVS_CNT = TOTAL THEN '<' ELSE NULL END	L_TVS,	TVS,
	CASE WHEN L_CHL_CNT = TOTAL THEN '<' ELSE NULL END	L_CHL,	CHL,
	CASE WHEN L_PHAE_CNT = TOTAL THEN '<' ELSE NULL END	L_PHAE,	PHAE,
			TIN,
			TN,
			NH4_NM,
			NO2_NM,
			NO3_NM,
			TKN_NM,
			NOX_NM,
			TIN_NM,
			TN_NM,
			PO4_PM,
			TP_PM,
			TIN_PO4_MMR,
			TN_TP_MMR
FROM
(SELECT
	MWVISIT_ID,	
    COUNT(*)        TOTAL,
	AVG(NH4)		NH4,
	AVG(NO2)		NO2,
	AVG(NO3)		NO3,
	AVG(TKN_S)		TKN_S,
	AVG(TKN_P)		TKN_P,
	AVG(TKN_SP)		TKN_SP,
	AVG(PO4)		PO4,
	AVG(TP_S)		TP_S,
	AVG(TP_P)		TP_P,
	AVG(TP_SP)		TP_SP,
	AVG(SIO2)		SIO2,
	AVG(SS)			SS,
	AVG(TVS)		TVS,
	AVG(CHL)		CHL,
	AVG(PHAE)		PHAE,
	AVG(TIN)		TIN,
	AVG(TN)			TN,
	AVG(NH4_NM)		NH4_NM,
	AVG(NO2_NM)		NO2_NM,
	AVG(NO3_NM)		NO3_NM,
	AVG(TKN_NM)		TKN_NM,
	AVG(NOX_NM)		NOX_NM,
	AVG(TIN_NM)		TIN_NM,
	AVG(TN_NM) 		TN_NM,
	AVG(PO4_PM)		PO4_PM,
	AVG(TP_PM)		TP_PM,
	AVG(TIN_PO4_MMR)	TIN_PO4_MMR,
	AVG(TN_TP_MMR) 		TN_TP_MMR,
	COUNT(L_NH4)	L_NH4_CNT,
	COUNT(L_NO2)	L_NO2_CNT,
	COUNT(L_NO3)	L_NO3_CNT,
	COUNT(L_TKN_S)	L_TKN_S_CNT,
	COUNT(L_TKN_P)	L_TKN_P_CNT,
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,
	COUNT(L_PO4)	L_PO4_CNT,
	COUNT(L_TP_S)	L_TP_S_CNT,
	COUNT(L_TP_P)	L_TP_P_CNT,
	COUNT(L_TP_SP)	L_TP_SP_CNT,
	COUNT(L_SIO2)	L_SIO2_CNT,
	COUNT(L_SS)	L_SS_CNT,
	COUNT(L_TVS)	L_TVS_CNT,
	COUNT(L_CHL)	L_CHL_CNT,
	COUNT(L_PHAE)	L_PHAE_CNT
FROM 	WPG.HS_GLABN_CAL
WHERE DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID ) D;


-- WPG.HS_M source

CREATE VIEW WPG.HS_M
AS
SELECT          VI.MWVISIT_ID, VI.SITE_ID, VI.MDATE, VI.STIME, VI.SAMPLE_NO AS SAM_NO, 'M' AS D_CODE, VI.MONITOR_STATE, 
                            VI.ANALYSIS_LAB, SC.TEMPER, SC.PH AS PH_SC, SC.SAL, SC.COND, SC.DO, SC.DO_SAT, SC.FLSCUFA, 
                            SC.TURB AS TURB_SC, CASE WHEN SC.PAR < 0.14 THEN 0 ELSE SC.PAR END AS PAR, ML.L_BOD5, ML.BOD5, 
                            ML.L_FC, ML.FC, ML.L_ECOLI, ML.ECOLI, ML.L_PH AS L_PH_M, ML.PH AS PH_M, ML.L_TURB AS L_TURB_M, 
                            ML.TURB AS TURB_M, GL.L_NH4, GL.NH4, GL.L_NO2, GL.NO2, GL.L_NO3, GL.NO3, GL.L_TKN_S, GL.TKN_S, 
                            GL.L_TKN_P, GL.TKN_P, GL.L_TKN_SP, GL.TKN_SP, GL.L_PO4, GL.PO4, GL.L_TP_S, GL.TP_S, GL.L_TP_P, GL.TP_P, 
                            GL.L_TP_SP, GL.TP_SP, GL.L_SIO2, GL.SIO2, GL.L_SS, GL.SS, GL.L_TVS, GL.TVS, GL.L_CHL, GL.CHL, GL.L_PHAE, 
                            GL.PHAE, FD.SOL_RAD, FD.AIR_TEMP, FD.WIND_SP, FD.WIND_DIR, FD.SEA_COND, FD.SEA_COL, FD.FISH_KILL, 
                            FD.SECCHIDISC AS SD, FD.WEATHER, CA.NH3, GL.TIN, GL.TN, GL.NH4_NM, GL.NO2_NM, GL.NO3_NM, GL.TKN_NM, 
                            GL.NOX_NM, GL.TIN_NM, GL.TN_NM, GL.PO4_PM, GL.TP_PM, GL.TIN_PO4_MMR, GL.TN_TP_MMR
FROM              WPG.HS_VISIT AS VI LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DEPTH_CODE, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, 
                                                              TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, 
                                                              SIO2, L_SS, SS, L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, TIN, TN, NH4_NM, NO2_NM, NO3_NM, 
                                                              TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR, L_TUR, 
                                                              TUR
                                  FROM               WPG.HS_GLABN_CAL
                                  WHERE           (DEPTH_CODE = 'M')) AS GL ON VI.MWVISIT_ID = GL.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, DEPTH_CODE, L_PH, PH, L_BOD5, BOD5, L_TURB, TURB, L_FC, 
                                                              FC, L_ECOLI, ECOLI, SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, 
                                                              VALID_DATE, VALID_CODE
                                  FROM               WPG.HS_MLAB
                                  WHERE           (DEPTH_CODE = 'M')) AS ML ON VI.MWVISIT_ID = ML.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, DEPTH, DEPTH_CODE, TEMPER, PH, SAL, COND, DO, DO_SAT, 
                                                              FLSCUFA, TURB, PAR, VALID_USER, VALID_DATE, VALID_CODE
                                  FROM               WPG.HS_SEACAT
                                  WHERE           (DEPTH_CODE = 'M')) AS SC ON VI.MWVISIT_ID = SC.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DEPTH_CODE, SAL, TEMPER, PH, L_NH4, NH4, L_NH3, NH3
                                  FROM               WPG.HS_NH3
                                  WHERE           (DEPTH_CODE = 'M')) AS CA ON VI.MWVISIT_ID = CA.MWVISIT_ID LEFT OUTER JOIN
                            WPG.HS_FIELD AS FD ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE          (GL.DEPTH_CODE IS NOT NULL) OR
                            (ML.DEPTH_CODE IS NOT NULL) OR
                            (SC.DEPTH_CODE IS NOT NULL);


-- WPG.HS_MLAB_A source

CREATE VIEW [WPG].[HS_MLAB_A] AS
SELECT
	MWVISIT_ID,
	AVG(PH)								PH,
	AVG(BOD5)   					 		BOD5,
	AVG(TURB)     							TURB, 
	EXP(SUM(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END))/COUNT(FC))		FC,
	EXP(SUM(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))/COUNT(ECOLI))	ECOLI
FROM	WPG.HS_MLAB
WHERE 	DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID;


-- WPG.HS_MLAB_AA source

CREATE VIEW [WPG].[HS_MLAB_AA] AS
SELECT
	MWVISIT_ID,
	CASE WHEN L_PH_CNT = TOTAL THEN '<' ELSE NULL END	L_PH,	PH,
	CASE WHEN L_BOD5_CNT = TOTAL THEN '<' ELSE NULL END	L_BOD5,	BOD5,
	CASE WHEN L_TURB_CNT = TOTAL THEN '<' ELSE NULL END	L_TURB,	TURB,
    CASE WHEN L_FC_CNT = TOTAL THEN '<' ELSE NULL END	L_FC,	FC,
	CASE WHEN L_ECOLI_CNT = TOTAL THEN '<' ELSE NULL END	L_ECOLI,	ECOLI
FROM
(SELECT
	MWVISIT_ID,
    COUNT(*)        TOTAL,
	AVG(PH)								PH,
	AVG(BOD5)   					 		BOD5,
	AVG(TURB)     							TURB, 
	EXP(SUM(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END))/COUNT(FC))		FC,
	EXP(SUM(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))/COUNT(ECOLI))	ECOLI,
	COUNT(L_PH)	    L_PH_CNT,
	COUNT(L_BOD5)	L_BOD5_CNT,
	COUNT(L_TURB)	L_TURB_CNT,
	COUNT(L_FC)	    L_FC_CNT,
	COUNT(L_ECOLI)	    L_ECOLI_CNT
FROM	WPG.HS_MLAB
WHERE 	DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID ) D;


-- WPG.HS_N source

CREATE VIEW WPG.HS_N
AS
SELECT          VI.MWVISIT_ID, VI.SITE_ID, VI.MDATE, VI.STIME, VI.SAMPLE_NO AS SAM_NO, CONVERT(NVARCHAR, NULL) 
                            AS D_CODE, CONVERT(NVARCHAR, NULL) AS MONITOR_STATE, CONVERT(NVARCHAR, NULL) 
                            AS ANALYSIS_LAB, NULL AS TEMPER, NULL AS PH_SC, NULL AS SAL, NULL AS COND, NULL AS DO, NULL 
                            AS DO_SAT, NULL AS FLSCUFA, NULL AS TURB_SC, NULL AS PAR, CONVERT(NVARCHAR, NULL) AS L_BOD5, NULL 
                            AS BOD5, CONVERT(NVARCHAR, NULL) AS L_FC, NULL AS FC, CONVERT(NVARCHAR, NULL) AS L_ECOLI, NULL 
                            AS ECOLI, CONVERT(NVARCHAR, NULL) AS L_PH_M, NULL AS PH_M, CONVERT(NVARCHAR, NULL) 
                            AS L_TURB_M, NULL AS TURB_M, CONVERT(NVARCHAR, NULL) AS L_NH4, NULL AS NH4, 
                            CONVERT(NVARCHAR, NULL) AS L_NO2, NULL AS NO2, CONVERT(NVARCHAR, NULL) AS L_NO3, NULL AS NO3, 
                            CONVERT(NVARCHAR, NULL) AS L_TKN_S, NULL AS TKN_S, CONVERT(NVARCHAR, NULL) AS L_TKN_P, NULL 
                            AS TKN_P, CONVERT(NVARCHAR, NULL) AS L_TKN_SP, NULL AS TKN_SP, CONVERT(NVARCHAR, NULL) 
                            AS L_PO4, NULL AS PO4, CONVERT(NVARCHAR, NULL) AS L_TP_S, NULL AS TP_S, CONVERT(NVARCHAR, NULL) 
                            AS L_TP_P, NULL AS TP_P, CONVERT(NVARCHAR, NULL) AS L_TP_SP, NULL AS TP_SP, CONVERT(NVARCHAR, NULL)
                             AS L_SIO2, NULL AS SIO2, CONVERT(NVARCHAR, NULL) AS L_SS, NULL AS SS, CONVERT(NVARCHAR, NULL) 
                            AS L_TVS, NULL AS TVS, CONVERT(NVARCHAR, NULL) AS L_CHL, NULL AS CHL, CONVERT(NVARCHAR, NULL) 
                            AS L_PHAE, NULL AS PHAE, FD.SOL_RAD, FD.AIR_TEMP, FD.WIND_SP, FD.WIND_DIR, FD.SEA_COND, FD.SEA_COL, 
                            FD.FISH_KILL, FD.SECCHIDISC AS SD, FD.WEATHER, NULL AS NH3, NULL AS TIN, NULL AS TN, NULL 
                            AS NH4_NM, NULL AS NO2_NM, NULL AS NO3_NM, NULL AS TKN_NM, NULL AS NOX_NM, NULL AS TIN_NM, NULL 
                            AS TN_NM, NULL AS PO4_PM, NULL AS TP_PM, NULL AS TIN_PO4_MMR, NULL AS TN_TP_MMR
FROM              (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, SITE_ID, STATION_ID, MDATE, STIME, SAMPLE_NO, VALID_USER, 
                                                        VALID_DATE, VALID_CODE, MONITOR_STATE, ANALYSIS_LAB
                            FROM               WPG.HS_VISIT
                            WHERE           (MWVISIT_ID NOT IN
                                                            (SELECT          MWVISIT_ID
                                                              FROM               WPG.HS_SEACAT
                                                              WHERE           (DEPTH_CODE IS NOT NULL)
                                                              UNION ALL
                                                              SELECT          MWVISIT_ID
                                                              FROM              WPG.HS_MLAB
                                                              UNION ALL
                                                              SELECT          MWVISIT_ID
                                                              FROM              WPG.HS_GLABN))) AS VI LEFT OUTER JOIN
                            WPG.HS_FIELD AS FD ON VI.MWVISIT_ID = FD.MWVISIT_ID;


-- WPG.HS_NH3 source

CREATE VIEW [WPG].[HS_NH3] AS
SELECT
 	GN.MWVISIT_ID,
	GN.DEPTH_CODE,
	SC.SAL,
	SC.TEMPER,
	SC.PH,
	GN.L_NH4,
	GN.NH4,
	GN.L_NH4					L_NH3,
	WPG.F_NH3(SC.SAL, SC.TEMPER, SC.PH, GN.NH4)	NH3
FROM	WPG.HS_SEACAT		SC
JOIN	WPG.HS_GLABN		GN
	ON	GN.MWVISIT_ID	= SC.MWVISIT_ID
	AND 	GN.DEPTH_CODE 	= SC.DEPTH_CODE
WHERE 	SC.SAL IS NOT NULL 
AND 	SC.TEMPER IS NOT NULL 
AND 	SC.PH IS NOT NULL
AND 	GN.NH4 IS NOT NULL;


-- WPG.HS_NH3_A source

CREATE VIEW [WPG].[HS_NH3_A] AS
SELECT
	MWVISIT_ID,
	AVG(NH3)	NH3
FROM	WPG.HS_NH3
WHERE	DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID;


-- WPG.HS_S source

CREATE VIEW WPG.HS_S
AS
SELECT          VI.MWVISIT_ID, VI.SITE_ID, VI.MDATE, VI.STIME, VI.SAMPLE_NO AS SAM_NO, 'S' AS D_CODE, VI.MONITOR_STATE, 
                            VI.ANALYSIS_LAB, SC.TEMPER, SC.PH AS PH_SC, SC.SAL, SC.COND, SC.DO, SC.DO_SAT, SC.FLSCUFA, 
                            SC.TURB AS TURB_SC, CASE WHEN SC.PAR < 0.14 THEN 0 ELSE SC.PAR END AS PAR, ML.L_BOD5, ML.BOD5, 
                            ML.L_FC, ML.FC, ML.L_ECOLI, ML.ECOLI, ML.L_PH AS L_PH_M, ML.PH AS PH_M, ML.L_TURB AS L_TURB_M, 
                            ML.TURB AS TURB_M, GL.L_NH4, GL.NH4, GL.L_NO2, GL.NO2, GL.L_NO3, GL.NO3, GL.L_TKN_S, GL.TKN_S, 
                            GL.L_TKN_P, GL.TKN_P, GL.L_TKN_SP, GL.TKN_SP, GL.L_PO4, GL.PO4, GL.L_TP_S, GL.TP_S, GL.L_TP_P, GL.TP_P, 
                            GL.L_TP_SP, GL.TP_SP, GL.L_SIO2, GL.SIO2, GL.L_SS, GL.SS, GL.L_TVS, GL.TVS, GL.L_CHL, GL.CHL, GL.L_PHAE, 
                            GL.PHAE, FD.SOL_RAD, FD.AIR_TEMP, FD.WIND_SP, FD.WIND_DIR, FD.SEA_COND, FD.SEA_COL, FD.FISH_KILL, 
                            FD.SECCHIDISC AS SD, FD.WEATHER, CA.NH3, GL.TIN, GL.TN, GL.NH4_NM, GL.NO2_NM, GL.NO3_NM, GL.TKN_NM, 
                            GL.NOX_NM, GL.TIN_NM, GL.TN_NM, GL.PO4_PM, GL.TP_PM, GL.TIN_PO4_MMR, GL.TN_TP_MMR
FROM              WPG.HS_VISIT AS VI LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DEPTH_CODE, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, 
                                                              TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, 
                                                              SIO2, L_SS, SS, L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, TIN, TN, NH4_NM, NO2_NM, NO3_NM, 
                                                              TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR, L_TUR, 
                                                              TUR
                                  FROM               WPG.HS_GLABN_CAL
                                  WHERE           (DEPTH_CODE = 'S')) AS GL ON VI.MWVISIT_ID = GL.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, DEPTH_CODE, L_PH, PH, L_BOD5, BOD5, L_TURB, TURB, L_FC, 
                                                              FC, L_ECOLI, ECOLI, SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, 
                                                              VALID_DATE, VALID_CODE
                                  FROM               WPG.HS_MLAB
                                  WHERE           (DEPTH_CODE = 'S')) AS ML ON VI.MWVISIT_ID = ML.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, DEPTH, DEPTH_CODE, TEMPER, PH, SAL, COND, DO, DO_SAT, 
                                                              FLSCUFA, TURB, PAR, VALID_USER, VALID_DATE, VALID_CODE
                                  FROM               WPG.HS_SEACAT
                                  WHERE           (DEPTH_CODE = 'S')) AS SC ON VI.MWVISIT_ID = SC.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DEPTH_CODE, SAL, TEMPER, PH, L_NH4, NH4, L_NH3, NH3
                                  FROM               WPG.HS_NH3
                                  WHERE           (DEPTH_CODE = 'S')) AS CA ON VI.MWVISIT_ID = CA.MWVISIT_ID LEFT OUTER JOIN
                            WPG.HS_FIELD AS FD ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE          (GL.DEPTH_CODE IS NOT NULL) OR
                            (ML.DEPTH_CODE IS NOT NULL) OR
                            (SC.DEPTH_CODE IS NOT NULL);


-- WPG.HS_SEACAT_A source

CREATE VIEW [WPG].[HS_SEACAT_A] AS
SELECT
	MWVISIT_ID, 
	AVG(TEMPER)	TEMPER, 
	AVG(PH)	PH, 
	AVG(SAL)	SAL, 
	AVG(COND)	COND, 
	AVG(DO)	DO, 
	AVG(DO_SAT)	DO_SAT, 
	AVG(FLSCUFA)	FLSCUFA,		AVG(TURB)	TURB,
    AVG(PAR)    PAR
FROM 	WPG.HS_SEACAT
WHERE 	DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID;


-- WPG.MARINE_METAL_GLABM1 source

CREATE VIEW [WPG].[MARINE_METAL_GLABM1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MW_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	M.DEPTH_CODE	DEPTH_CODE,
	M.TYPE		TYPE,
	M.L_AL 		L_AL,
	M.AL 		AL,
	M.L_AG 		L_AG,
	M.AG 		AG,
	M.L_ARSENIC 	L_ARS,
	M.ARSENIC 	ARS,
	M.L_BA 		L_BA,
	M.BA 		BA,
	M.L_BE 		L_BE,
	M.BE		BE,
	M.L_B 		L_B,
	M.B 		B,
	M.L_CD 		L_CD,
	M.CD 		CD,
	M.L_CO 		L_CO,
	M.CO 		CO,
	M.L_CR 		L_CR,
	M.CR 		CR,
	M.L_CU 		L_CU,
	M.CU 		CU,
	M.L_FE 		L_FE,
	M.FE 		FE,
	M.L_HG 		L_HG,
	M.HG 		HG,
	M.L_MN 		L_MN,
	M.MN 		MN,
	M.L_MO 		L_MO,
	M.MO 		MO,
	M.L_NI 		L_NI,
	M.NI 		NI,
	M.L_PB 		L_PB,
	M.PB 		PB,
	M.L_SB 		L_SB,
	M.SB 		SB,
	M.L_SN 		L_SN,
	M.SN 		SN,
	M.L_SE 		L_SE,
	M.SE 		SE,
	M.L_TL 		L_TL,
	M.TL 		TL,
	M.L_V 		L_V,
	M.V 		V,
	M.L_ZN 		L_ZN,
	M.ZN 		ZN,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.MM_VISIT	V
LEFT OUTER JOIN	WPG.MM_GLABM	M	ON V.MWVISIT_ID = M.MWVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SEDIMENT1 source

CREATE VIEW [WPG].[MARINE_SEDIMENT1] AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,	
	STIME,
	SAM_NO,
	TYPE,
	SZ_63,
	SZ_125,
	SZ_250,
	SZ_500,
	SZ_1000,
	SZ_2000,
	SZ_4000,
	EH,
	L_TS,
	TS,
	L_TVS,
	TVS,
	MSN_DWR,
	MSM_DWR,
	MSO_DWR,
	L_SG,
	SG,
	L_PH,
	PH,
	L_COD,
	COD,
	L_TIC,
	TIC,
	L_TOC,
	TOC,
	L_TC,
	TC,
	L_NH,
	NH,
	L_TKN,
	TKN,
	L_TP,
	TP,
	L_INS,
	INS,
	L_CN,
	CN,
	L_AL,
	AL,
	L_AG,
	AG,
	L_ARS,
	ARS,
	L_BA,
	BA,
	L_BE,
	BE,
	L_B,
	B,
	L_CD,
	CD,
	L_CO,
	CO,
	L_CR,
	CR,
	L_CU,
	CU,
	L_FE,
	FE,
	L_HG,
	HG,
	L_MN,
	MN,
	L_MO,
	MO,
	L_NI,
	NI,
	L_PB,
	PB,
	L_SB,
	SB,
	L_TL,
	TL,
	L_V,
	V,
	L_ZN,
	ZN,
	L_PCB,
	PCB,
	L_PCB8,
	PCB8,
	L_PCB18,
	PCB18,
	L_PCB28,
	PCB28,
	L_PCB31,
	PCB31,
	L_PCB44,
	PCB44,
	L_PCB52,
	PCB52,
	L_PCB66,
	PCB66,
	L_PCB77,
	PCB77,
	L_PCB81,
	PCB81,
	L_PCB101,
	PCB101,
	L_PCB105,
	PCB105,
	L_PCB114,
	PCB114,
	L_PCB118,
	PCB118,
	L_PCB123,
	PCB123,
	L_PCB126,
	PCB126,
	L_PCB128,
	PCB128,
	L_PCB138,
	PCB138,
	L_PCB149,
	PCB149,
	L_PCB153,
	PCB153,
	L_PCB156,
	PCB156,
	L_PCB157,
	PCB157,
	L_PCB167,
	PCB167,
	L_PCB169,
	PCB169,
	L_PCB170,
	PCB170,
	L_PCB180,
	PCB180,
	L_PCB187,
	PCB187,
	L_PCB189,
	PCB189,
	SUM18PCB,
	L_FLUO,
	FLUO,
	L_PHEN,
	PHEN,
	L_ANTH,
	ANTH,
	L_FLUT,
	FLUT,
	L_PYRE,
	PYRE,
	L_CHRY,
	CHRY,
	L_BBFL,
	BBFL,
	L_BKFL,
	BKFL,
	L_BAPY,
	BAPY,
	L_BGPE,
	BGPE,
	L_ACPH,
	ACPH,
	L_ACEN,
	ACEN,
	L_DAAN,
	DAAN,
	L_BANT,
	BANT,
	L_INPY,
	INPY,
	L_NAPH,
	NAPH,
	L_PAH,
	PAH,
	SUM6LMPAH,
	SUM10HMPAH,
	SUM16PAH,
	L_GBHC,
	GBHC,
	L_HCB,
	HCB,
	L_HEPT,
	HEPT,
	L_ALDR,
	ALDR,
	L_HEPO,
	HEPO,
	L_ODDE,
	ODDE,
	L_END1,
	END1,
	L_PDDE,
	PDDE,
	L_DIEL,
	DIEL,
	L_ODDD,
	ODDD,
	L_ENDR,
	ENDR,
	L_END2,
	END2,
	L_PDDD,
	PDDD,
	L_ODDT,
	ODDT,
	L_PDDT,
	PDDT,
	L_ABHC,
	ABHC,
	L_BBHC,
	BBHC,
	L_DBHC,
	DBHC,
	VIEW_NO
FROM	WPG.MARINE_SEDIMENT_X1
UNION ALL
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	TYPE,
	NULL	SZ_63,
	NULL	SZ_125,
	NULL	SZ_250,
	NULL	SZ_500,
	NULL	SZ_1000,
	NULL	SZ_2000,
	NULL	SZ_4000,
	NULL	EH,
	L_TS,
	TS,
	L_TVS,
	TVS,
	MSN_DWR,
	MSM_DWR,
	MSO_DWR,
	L_SG,
	SG,
	L_PH,
	PH,
	L_COD,
	COD,
	L_TIC,
	TIC,
	L_TOC,
	TOC,
	L_TC,
	TC,
	L_NH,
	NH,
	L_TKN,
	TKN,
	L_TP,
	TP,
	L_INS,
	INS,
	L_CN,
	CN,
	L_AL,
	AL,
	L_AG,
	AG,
	L_ARS,
	ARS,
	L_BA,
	BA,
	L_BE,
	BE,
	L_B,
	B,
	L_CD,
	CD,
	L_CO,
	CO,
	L_CR,
	CR,
	L_CU,
	CU,
	L_FE,
	FE,
	L_HG,
	HG,
	L_MN,
	MN,
	L_MO,
	MO,
	L_NI,
	NI,
	L_PB,
	PB,
	L_SB,
	SB,
	L_TL,
	TL,
	L_V,
	V,
	L_ZN,
	ZN,
	L_PCB,
	PCB,
	L_PCB8,
	PCB8,
	L_PCB18,
	PCB18,
	L_PCB28,
	PCB28,
	L_PCB31,
	PCB31,
	L_PCB44,
	PCB44,
	L_PCB52,
	PCB52,
	L_PCB66,
	PCB66,
	L_PCB77,
	PCB77,
	L_PCB81,
	PCB81,
	L_PCB101,
	PCB101,
	L_PCB105,
	PCB105,
	L_PCB114,
	PCB114,
	L_PCB118,
	PCB118,
	L_PCB123,
	PCB123,
	L_PCB126,
	PCB126,
	L_PCB128,
	PCB128,
	L_PCB138,
	PCB138,
	L_PCB149,
	PCB149,
	L_PCB153,
	PCB153,
	L_PCB156,
	PCB156,
	L_PCB157,
	PCB157,
	L_PCB167,
	PCB167,
	L_PCB169,
	PCB169,
	L_PCB170,
	PCB170,
	L_PCB180,
	PCB180,
	L_PCB187,
	PCB187,
	L_PCB189,
	PCB189,
	SUM18PCB,
	L_FLUO,
	FLUO,
	L_PHEN,
	PHEN,
	L_ANTH,
	ANTH,
	L_FLUT,
	FLUT,
	L_PYRE,
	PYRE,
	L_CHRY,
	CHRY,
	L_BBFL,
	BBFL,
	L_BKFL,
	BKFL,
	L_BAPY,
	BAPY,
	L_BGPE,
	BGPE,
	L_ACPH,
	ACPH,
	L_ACEN,
	ACEN,
	L_DAAN,
	DAAN,
	L_BANT,
	BANT,
	L_INPY,
	INPY,
	L_NAPH,
	NAPH,
	L_PAH,
	PAH,
	SUM6LMPAH,
	SUM10HMPAH,
	SUM16PAH,
	L_GBHC,
	GBHC,
	L_HCB,
	HCB,
	L_HEPT,
	HEPT,
	L_ALDR,
	ALDR,
	L_HEPO,
	HEPO,
	L_ODDE,
	ODDE,
	L_END1,
	END1,
	L_PDDE,
	PDDE,
	L_DIEL,
	DIEL,
	L_ODDD,
	ODDD,
	L_ENDR,
	ENDR,
	L_END2,
	END2,
	L_PDDD,
	PDDD,
	L_ODDT,
	ODDT,
	L_PDDT,
	PDDT,
	L_ABHC,
	ABHC,
	L_BBHC,
	BBHC,
	L_DBHC,

	DBHC,
	VIEW_NO
FROM	WPG.MARINE_SEDIMENT_Y1;


-- WPG.MARINE_SEDIMENT1_AVG source

CREATE VIEW WPG.MARINE_SEDIMENT1_AVG AS
SELECT	ZONE,			
	WCZ,			
	SUBZONE,			
	STATION,			
		YR,		
		TOTAL,		
	TYPE,			
			SZ_63	SZ_63_AVG,
			SZ_125	SZ_125_AVG,
			SZ_250	SZ_250_AVG,
			SZ_500	SZ_500_AVG,
			SZ_1000	SZ_1000_AVG,
			SZ_2000	SZ_2000_AVG,
			SZ_4000	SZ_4000_AVG,
			EH	EH_AVG,
	CASE WHEN L_TS_CNT =0 THEN NULL ELSE '<' END	L_TS_AVG,	TS	TS_AVG,
	CASE WHEN L_TVS_CNT =0 THEN NULL ELSE '<' END	L_TVS_AVG,	TVS	TVS_AVG,
			MSN_DWR	MSN_DWR_AVG,
			MSM_DWR	MSM_DWR_AVG,
			MSO_DWR	MSO_DWR_AVG,
	CASE WHEN L_SG_CNT =0 THEN NULL ELSE '<' END	L_SG_AVG,	SG	SG_AVG,
	CASE WHEN L_PH_CNT =0 THEN NULL ELSE '<' END	L_PH_AVG,	PH	PH_AVG,
	CASE WHEN L_COD_CNT =0 THEN NULL ELSE '<' END	L_COD_AVG,	COD	COD_AVG,
	CASE WHEN L_TIC_CNT =0 THEN NULL ELSE '<' END	L_TIC_AVG,	TIC	TIC_AVG,
	CASE WHEN L_TOC_CNT =0 THEN NULL ELSE '<' END	L_TOC_AVG,	TOC	TOC_AVG,
	CASE WHEN L_TC_CNT =0 THEN NULL ELSE '<' END	L_TC_AVG,	TC	TC_AVG,
	CASE WHEN L_NH_CNT =0 THEN NULL ELSE '<' END	L_NH_AVG,	NH	NH_AVG,
	CASE WHEN L_TKN_CNT =0 THEN NULL ELSE '<' END	L_TKN_AVG,	TKN	TKN_AVG,
	CASE WHEN L_TP_CNT =0 THEN NULL ELSE '<' END	L_TP_AVG,	TP	TP_AVG,
	CASE WHEN L_INS_CNT =0 THEN NULL ELSE '<' END	L_INS_AVG,	INS	INS_AVG,
	CASE WHEN L_CN_CNT =0 THEN NULL ELSE '<' END	L_CN_AVG,	CN	CN_AVG,
	CASE WHEN L_AL_CNT =0 THEN NULL ELSE '<' END	L_AL_AVG,	AL	AL_AVG,
	CASE WHEN L_AG_CNT =0 THEN NULL ELSE '<' END	L_AG_AVG,	AG	AG_AVG,
	CASE WHEN L_ARS_CNT =0 THEN NULL ELSE '<' END	L_ARS_AVG,	ARS	ARS_AVG,
	CASE WHEN L_BA_CNT =0 THEN NULL ELSE '<' END	L_BA_AVG,	BA	BA_AVG,
	CASE WHEN L_BE_CNT =0 THEN NULL ELSE '<' END	L_BE_AVG,	BE	BE_AVG,
	CASE WHEN L_B_CNT =0 THEN NULL ELSE '<' END	L_B_AVG,	B	B_AVG,
	CASE WHEN L_CD_CNT =0 THEN NULL ELSE '<' END	L_CD_AVG,	CD	CD_AVG,
	CASE WHEN L_CO_CNT =0 THEN NULL ELSE '<' END	L_CO_AVG,	CO	CO_AVG,
	CASE WHEN L_CR_CNT =0 THEN NULL ELSE '<' END	L_CR_AVG,	CR	CR_AVG,
	CASE WHEN L_CU_CNT =0 THEN NULL ELSE '<' END	L_CU_AVG,	CU	CU_AVG,
	CASE WHEN L_FE_CNT =0 THEN NULL ELSE '<' END	L_FE_AVG,	FE	FE_AVG,
	CASE WHEN L_HG_CNT =0 THEN NULL ELSE '<' END	L_HG_AVG,	HG	HG_AVG,
	CASE WHEN L_MN_CNT =0 THEN NULL ELSE '<' END	L_MN_AVG,	MN	MN_AVG,
	CASE WHEN L_MO_CNT =0 THEN NULL ELSE '<' END	L_MO_AVG,	MO	MO_AVG,
	CASE WHEN L_NI_CNT =0 THEN NULL ELSE '<' END	L_NI_AVG,	NI	NI_AVG,
	CASE WHEN L_PB_CNT =0 THEN NULL ELSE '<' END	L_PB_AVG,	PB	PB_AVG,
	CASE WHEN L_SB_CNT =0 THEN NULL ELSE '<' END	L_SB_AVG,	SB	SB_AVG,
	CASE WHEN L_TL_CNT =0 THEN NULL ELSE '<' END	L_TL_AVG,	TL	TL_AVG,
	CASE WHEN L_V_CNT =0 THEN NULL ELSE '<' END	L_V_AVG,	V	V_AVG,
	CASE WHEN L_ZN_CNT =0 THEN NULL ELSE '<' END	L_ZN_AVG,	ZN	ZN_AVG,
	CASE WHEN L_PCB_CNT =0 THEN NULL ELSE '<' END	L_PCB_AVG,	PCB	PCB_AVG,
	CASE WHEN L_PCB8_CNT =0 THEN NULL ELSE '<' END	L_PCB8_AVG,	PCB8	PCB8_AVG,
	CASE WHEN L_PCB18_CNT =0 THEN NULL ELSE '<' END	L_PCB18_AVG,	PCB18	PCB18_AVG,
	CASE WHEN L_PCB28_CNT =0 THEN NULL ELSE '<' END	L_PCB28_AVG,	PCB28	PCB28_AVG,
	CASE WHEN L_PCB31_CNT =0 THEN NULL ELSE '<' END	L_PCB31_AVG,	PCB31	PCB31_AVG,
	CASE WHEN L_PCB44_CNT =0 THEN NULL ELSE '<' END	L_PCB44_AVG,	PCB44	PCB44_AVG,
	CASE WHEN L_PCB52_CNT =0 THEN NULL ELSE '<' END	L_PCB52_AVG,	PCB52	PCB52_AVG,
	CASE WHEN L_PCB66_CNT =0 THEN NULL ELSE '<' END	L_PCB66_AVG,	PCB66	PCB66_AVG,
	CASE WHEN L_PCB77_CNT =0 THEN NULL ELSE '<' END	L_PCB77_AVG,	PCB77	PCB77_AVG,
	CASE WHEN L_PCB81_CNT =0 THEN NULL ELSE '<' END	L_PCB81_AVG,	PCB81	PCB81_AVG,
	CASE WHEN L_PCB101_CNT =0 THEN NULL ELSE '<' END	L_PCB101_AVG,	PCB101	PCB101_AVG,
	CASE WHEN L_PCB105_CNT =0 THEN NULL ELSE '<' END	L_PCB105_AVG,	PCB105	PCB105_AVG,
	CASE WHEN L_PCB114_CNT =0 THEN NULL ELSE '<' END	L_PCB114_AVG,	PCB114	PCB114_AVG,
	CASE WHEN L_PCB118_CNT =0 THEN NULL ELSE '<' END	L_PCB118_AVG,	PCB118	PCB118_AVG,
	CASE WHEN L_PCB123_CNT =0 THEN NULL ELSE '<' END	L_PCB123_AVG,	PCB123	PCB123_AVG,
	CASE WHEN L_PCB126_CNT =0 THEN NULL ELSE '<' END	L_PCB126_AVG,	PCB126	PCB126_AVG,
	CASE WHEN L_PCB128_CNT =0 THEN NULL ELSE '<' END	L_PCB128_AVG,	PCB128	PCB128_AVG,
	CASE WHEN L_PCB138_CNT =0 THEN NULL ELSE '<' END	L_PCB138_AVG,	PCB138	PCB138_AVG,
	CASE WHEN L_PCB149_CNT =0 THEN NULL ELSE '<' END	L_PCB149_AVG,	PCB149	PCB149_AVG,
	CASE WHEN L_PCB153_CNT =0 THEN NULL ELSE '<' END	L_PCB153_AVG,	PCB153	PCB153_AVG,
	CASE WHEN L_PCB156_CNT =0 THEN NULL ELSE '<' END	L_PCB156_AVG,	PCB156	PCB156_AVG,
	CASE WHEN L_PCB157_CNT =0 THEN NULL ELSE '<' END	L_PCB157_AVG,	PCB157	PCB157_AVG,
	CASE WHEN L_PCB167_CNT =0 THEN NULL ELSE '<' END	L_PCB167_AVG,	PCB167	PCB167_AVG,
	CASE WHEN L_PCB169_CNT =0 THEN NULL ELSE '<' END	L_PCB169_AVG,	PCB169	PCB169_AVG,
	CASE WHEN L_PCB170_CNT =0 THEN NULL ELSE '<' END	L_PCB170_AVG,	PCB170	PCB170_AVG,
	CASE WHEN L_PCB180_CNT =0 THEN NULL ELSE '<' END	L_PCB180_AVG,	PCB180	PCB180_AVG,
	CASE WHEN L_PCB187_CNT =0 THEN NULL ELSE '<' END	L_PCB187_AVG,	PCB187	PCB187_AVG,
	CASE WHEN L_PCB189_CNT =0 THEN NULL ELSE '<' END	L_PCB189_AVG,	PCB189	PCB189_AVG,
			SUM18PCB	SUM18PCB_AVG,
	CASE WHEN L_FLUO_CNT =0 THEN NULL ELSE '<' END	L_FLUO_AVG,	FLUO	FLUO_AVG,
	CASE WHEN L_PHEN_CNT =0 THEN NULL ELSE '<' END	L_PHEN_AVG,	PHEN	PHEN_AVG,
	CASE WHEN L_ANTH_CNT =0 THEN NULL ELSE '<' END	L_ANTH_AVG,	ANTH	ANTH_AVG,
	CASE WHEN L_FLUT_CNT =0 THEN NULL ELSE '<' END	L_FLUT_AVG,	FLUT	FLUT_AVG,
	CASE WHEN L_PYRE_CNT =0 THEN NULL ELSE '<' END	L_PYRE_AVG,	PYRE	PYRE_AVG,
	CASE WHEN L_CHRY_CNT =0 THEN NULL ELSE '<' END	L_CHRY_AVG,	CHRY	CHRY_AVG,
	CASE WHEN L_BBFL_CNT =0 THEN NULL ELSE '<' END	L_BBFL_AVG,	BBFL	BBFL_AVG,
	CASE WHEN L_BKFL_CNT =0 THEN NULL ELSE '<' END	L_BKFL_AVG,	BKFL	BKFL_AVG,
	CASE WHEN L_BAPY_CNT =0 THEN NULL ELSE '<' END	L_BAPY_AVG,	BAPY	BAPY_AVG,
	CASE WHEN L_BGPE_CNT =0 THEN NULL ELSE '<' END	L_BGPE_AVG,	BGPE	BGPE_AVG,
	CASE WHEN L_ACPH_CNT =0 THEN NULL ELSE '<' END	L_ACPH_AVG,	ACPH	ACPH_AVG,
	CASE WHEN L_ACEN_CNT =0 THEN NULL ELSE '<' END	L_ACEN_AVG,	ACEN	ACEN_AVG,
	CASE WHEN L_DAAN_CNT =0 THEN NULL ELSE '<' END	L_DAAN_AVG,	DAAN	DAAN_AVG,
	CASE WHEN L_BANT_CNT =0 THEN NULL ELSE '<' END	L_BANT_AVG,	BANT	BANT_AVG,
	CASE WHEN L_INPY_CNT =0 THEN NULL ELSE '<' END	L_INPY_AVG,	INPY	INPY_AVG,
	CASE WHEN L_NAPH_CNT =0 THEN NULL ELSE '<' END	L_NAPH_AVG,	NAPH	NAPH_AVG,
	CASE WHEN L_PAH_CNT =0 THEN NULL ELSE '<' END	L_PAH_AVG,	PAH	PAH_AVG,
			SUM6LMPAH	SUM6LMPAH_AVG,
			SUM10HMPAH	SUM10HMPAH_AVG,
			SUM16PAH	SUM16PAH_AVG,
	CASE WHEN L_GBHC_CNT =0 THEN NULL ELSE '<' END	L_GBHC_AVG,	GBHC	GBHC_AVG,
	CASE WHEN L_HCB_CNT =0 THEN NULL ELSE '<' END	L_HCB_AVG,	HCB	HCB_AVG,
	CASE WHEN L_HEPT_CNT =0 THEN NULL ELSE '<' END	L_HEPT_AVG,	HEPT	HEPT_AVG,
	CASE WHEN L_ALDR_CNT =0 THEN NULL ELSE '<' END	L_ALDR_AVG,	ALDR	ALDR_AVG,
	CASE WHEN L_HEPO_CNT =0 THEN NULL ELSE '<' END	L_HEPO_AVG,	HEPO	HEPO_AVG,
	CASE WHEN L_ODDE_CNT =0 THEN NULL ELSE '<' END	L_ODDE_AVG,	ODDE	ODDE_AVG,
	CASE WHEN L_END1_CNT =0 THEN NULL ELSE '<' END	L_END1_AVG,	END1	END1_AVG,
	CASE WHEN L_PDDE_CNT =0 THEN NULL ELSE '<' END	L_PDDE_AVG,	PDDE	PDDE_AVG,
	CASE WHEN L_DIEL_CNT =0 THEN NULL ELSE '<' END	L_DIEL_AVG,	DIEL	DIEL_AVG,
	CASE WHEN L_ODDD_CNT =0 THEN NULL ELSE '<' END	L_ODDD_AVG,	ODDD	ODDD_AVG,
	CASE WHEN L_ENDR_CNT =0 THEN NULL ELSE '<' END	L_ENDR_AVG,	ENDR	ENDR_AVG,
	CASE WHEN L_END2_CNT =0 THEN NULL ELSE '<' END	L_END2_AVG,	END2	END2_AVG,
	CASE WHEN L_PDDD_CNT =0 THEN NULL ELSE '<' END	L_PDDD_AVG,	PDDD	PDDD_AVG,
	CASE WHEN L_ODDT_CNT =0 THEN NULL ELSE '<' END	L_ODDT_AVG,	ODDT	ODDT_AVG,
	CASE WHEN L_PDDT_CNT =0 THEN NULL ELSE '<' END	L_PDDT_AVG,	PDDT	PDDT_AVG,
	CASE WHEN L_ABHC_CNT =0 THEN NULL ELSE '<' END	L_ABHC_AVG,	ABHC	ABHC_AVG,
	CASE WHEN L_BBHC_CNT =0 THEN NULL ELSE '<' END	L_BBHC_AVG,	BBHC	BBHC_AVG,
	CASE WHEN L_DBHC_CNT =0 THEN NULL ELSE '<' END	L_DBHC_AVG,	DBHC	DBHC_AVG,
			VIEW_NO	
FROM	(
    SELECT	ZONE,			
        WCZ,			
        SUBZONE,			
        STATION,			
        YEAR(MDATE)	YR,		
        COUNT(*)	TOTAL,		
        TYPE,			
        AVG(SZ_63)	SZ_63,		
        AVG(SZ_125)	SZ_125,		
        AVG(SZ_250)	SZ_250,		
        AVG(SZ_500)	SZ_500,		
        AVG(SZ_1000)	SZ_1000,		
        AVG(SZ_2000)	SZ_2000,		
        AVG(SZ_4000)	SZ_4000,		
        AVG(EH)	EH,		
        AVG(TS)	TS,	COUNT(L_TS)	L_TS_CNT,
        AVG(TVS)	TVS,	COUNT(L_TVS)	L_TVS_CNT,
        AVG(MSN_DWR)	MSN_DWR,		
        AVG(MSM_DWR)	MSM_DWR,		
        AVG(MSO_DWR)	MSO_DWR,		
        AVG(SG)	SG,	COUNT(L_SG)	L_SG_CNT,
        AVG(PH)	PH,	COUNT(L_PH)	L_PH_CNT,
        AVG(COD)	COD,	COUNT(L_COD)	L_COD_CNT,
        AVG(TIC)	TIC,	COUNT(L_TIC)	L_TIC_CNT,
        AVG(TOC)	TOC,	COUNT(L_TOC)	L_TOC_CNT,
        AVG(TC)	TC,	COUNT(L_TC)	L_TC_CNT,
        AVG(NH)	NH,	COUNT(L_NH)	L_NH_CNT,
        AVG(TKN)	TKN,	COUNT(L_TKN)	L_TKN_CNT,
        AVG(TP)	TP,	COUNT(L_TP)	L_TP_CNT,
        AVG(INS)	INS,	COUNT(L_INS)	L_INS_CNT,
        AVG(CN)	CN,	COUNT(L_CN)	L_CN_CNT,
        AVG(AL)	AL,	COUNT(L_AL)	L_AL_CNT,
        AVG(AG)	AG,	COUNT(L_AG)	L_AG_CNT,
        AVG(ARS)	ARS,	COUNT(L_ARS)	L_ARS_CNT,
        AVG(BA)	BA,	COUNT(L_BA)	L_BA_CNT,
        AVG(BE)	BE,	COUNT(L_BE)	L_BE_CNT,
        AVG(B)	B,	COUNT(L_B)	L_B_CNT,
        AVG(CD)	CD,	COUNT(L_CD)	L_CD_CNT,
        AVG(CO)	CO,	COUNT(L_CO)	L_CO_CNT,
        AVG(CR)	CR,	COUNT(L_CR)	L_CR_CNT,
        AVG(CU)	CU,	COUNT(L_CU)	L_CU_CNT,
        AVG(FE)	FE,	COUNT(L_FE)	L_FE_CNT,
        AVG(HG)	HG,	COUNT(L_HG)	L_HG_CNT,
        AVG(MN)	MN,	COUNT(L_MN)	L_MN_CNT,
        AVG(MO)	MO,	COUNT(L_MO)	L_MO_CNT,
        AVG(NI)	NI,	COUNT(L_NI)	L_NI_CNT,
        AVG(PB)	PB,	COUNT(L_PB)	L_PB_CNT,
        AVG(SB)	SB,	COUNT(L_SB)	L_SB_CNT,
        AVG(TL)	TL,	COUNT(L_TL)	L_TL_CNT,
        AVG(V)	V,	COUNT(L_V)	L_V_CNT,
        AVG(ZN)	ZN,	COUNT(L_ZN)	L_ZN_CNT,
        AVG(PCB)	PCB,	COUNT(L_PCB)	L_PCB_CNT,
        AVG(PCB8)	PCB8,	COUNT(L_PCB8)	L_PCB8_CNT,
        AVG(PCB18)	PCB18,	COUNT(L_PCB18)	L_PCB18_CNT,
        AVG(PCB28)	PCB28,	COUNT(L_PCB28)	L_PCB28_CNT,
        AVG(PCB31)	PCB31,	COUNT(L_PCB31)	L_PCB31_CNT,
        AVG(PCB44)	PCB44,	COUNT(L_PCB44)	L_PCB44_CNT,
        AVG(PCB52)	PCB52,	COUNT(L_PCB52)	L_PCB52_CNT,
        AVG(PCB66)	PCB66,	COUNT(L_PCB66)	L_PCB66_CNT,
        AVG(PCB77)	PCB77,	COUNT(L_PCB77)	L_PCB77_CNT,
        AVG(PCB81)	PCB81,	COUNT(L_PCB81)	L_PCB81_CNT,
        AVG(PCB101)	PCB101,	COUNT(L_PCB101)	L_PCB101_CNT,
        AVG(PCB105)	PCB105,	COUNT(L_PCB105)	L_PCB105_CNT,
        AVG(PCB114)	PCB114,	COUNT(L_PCB114)	L_PCB114_CNT,
        AVG(PCB118)	PCB118,	COUNT(L_PCB118)	L_PCB118_CNT,
        AVG(PCB123)	PCB123,	COUNT(L_PCB123)	L_PCB123_CNT,
        AVG(PCB126)	PCB126,	COUNT(L_PCB126)	L_PCB126_CNT,
        AVG(PCB128)	PCB128,	COUNT(L_PCB128)	L_PCB128_CNT,
        AVG(PCB138)	PCB138,	COUNT(L_PCB138)	L_PCB138_CNT,
        AVG(PCB149)	PCB149,	COUNT(L_PCB149)	L_PCB149_CNT,
        AVG(PCB153)	PCB153,	COUNT(L_PCB153)	L_PCB153_CNT,
        AVG(PCB156)	PCB156,	COUNT(L_PCB156)	L_PCB156_CNT,
        AVG(PCB157)	PCB157,	COUNT(L_PCB157)	L_PCB157_CNT,
        AVG(PCB167)	PCB167,	COUNT(L_PCB167)	L_PCB167_CNT,
        AVG(PCB169)	PCB169,	COUNT(L_PCB169)	L_PCB169_CNT,
        AVG(PCB170)	PCB170,	COUNT(L_PCB170)	L_PCB170_CNT,
        AVG(PCB180)	PCB180,	COUNT(L_PCB180)	L_PCB180_CNT,
        AVG(PCB187)	PCB187,	COUNT(L_PCB187)	L_PCB187_CNT,
        AVG(PCB189)	PCB189,	COUNT(L_PCB189)	L_PCB189_CNT,
        AVG(SUM18PCB)	SUM18PCB,		
        AVG(FLUO)	FLUO,	COUNT(L_FLUO)	L_FLUO_CNT,
        AVG(PHEN)	PHEN,	COUNT(L_PHEN)	L_PHEN_CNT,
        AVG(ANTH)	ANTH,	COUNT(L_ANTH)	L_ANTH_CNT,
        AVG(FLUT)	FLUT,	COUNT(L_FLUT)	L_FLUT_CNT,
        AVG(PYRE)	PYRE,	COUNT(L_PYRE)	L_PYRE_CNT,
        AVG(CHRY)	CHRY,	COUNT(L_CHRY)	L_CHRY_CNT,
        AVG(BBFL)	BBFL,	COUNT(L_BBFL)	L_BBFL_CNT,
        AVG(BKFL)	BKFL,	COUNT(L_BKFL)	L_BKFL_CNT,
        AVG(BAPY)	BAPY,	COUNT(L_BAPY)	L_BAPY_CNT,
        AVG(BGPE)	BGPE,	COUNT(L_BGPE)	L_BGPE_CNT,
        AVG(ACPH)	ACPH,	COUNT(L_ACPH)	L_ACPH_CNT,
        AVG(ACEN)	ACEN,	COUNT(L_ACEN)	L_ACEN_CNT,
        AVG(DAAN)	DAAN,	COUNT(L_DAAN)	L_DAAN_CNT,
        AVG(BANT)	BANT,	COUNT(L_BANT)	L_BANT_CNT,
        AVG(INPY)	INPY,	COUNT(L_INPY)	L_INPY_CNT,
        AVG(NAPH)	NAPH,	COUNT(L_NAPH)	L_NAPH_CNT,
        AVG(PAH)	PAH,	COUNT(L_PAH)	L_PAH_CNT,
        AVG(SUM6LMPAH)	SUM6LMPAH,		
        AVG(SUM10HMPAH)	SUM10HMPAH,		
        AVG(SUM16PAH)	SUM16PAH,		
        AVG(GBHC)	GBHC,	COUNT(L_GBHC)	L_GBHC_CNT,
        AVG(HCB)	HCB,	COUNT(L_HCB)	L_HCB_CNT,
        AVG(HEPT)	HEPT,	COUNT(L_HEPT)	L_HEPT_CNT,
        AVG(ALDR)	ALDR,	COUNT(L_ALDR)	L_ALDR_CNT,
        AVG(HEPO)	HEPO,	COUNT(L_HEPO)	L_HEPO_CNT,
        AVG(ODDE)	ODDE,	COUNT(L_ODDE)	L_ODDE_CNT,
        AVG(END1)	END1,	COUNT(L_END1)	L_END1_CNT,
        AVG(PDDE)	PDDE,	COUNT(L_PDDE)	L_PDDE_CNT,
        AVG(DIEL)	DIEL,	COUNT(L_DIEL)	L_DIEL_CNT,
        AVG(ODDD)	ODDD,	COUNT(L_ODDD)	L_ODDD_CNT,
        AVG(ENDR)	ENDR,	COUNT(L_ENDR)	L_ENDR_CNT,
        AVG(END2)	END2,	COUNT(L_END2)	L_END2_CNT,
        AVG(PDDD)	PDDD,	COUNT(L_PDDD)	L_PDDD_CNT,
        AVG(ODDT)	ODDT,	COUNT(L_ODDT)	L_ODDT_CNT,
        AVG(PDDT)	PDDT,	COUNT(L_PDDT)	L_PDDT_CNT,
        AVG(ABHC)	ABHC,	COUNT(L_ABHC)	L_ABHC_CNT,
        AVG(BBHC)	BBHC,	COUNT(L_BBHC)	L_BBHC_CNT,
        AVG(DBHC)	DBHC,	COUNT(L_DBHC)	L_DBHC_CNT,
        VIEW_NO			
    FROM	WPG.MARINE_SEDIMENT1			
    GROUP BY ZONE, WCZ, SUBZONE, STATION, YEAR(MDATE), TYPE, VIEW_NO				
)   MS_1;


-- WPG.MARINE_SEDIMENT1_MAX source

CREATE VIEW WPG.MARINE_SEDIMENT1_MAX AS
SELECT	ZONE,			
	WCZ,			
	SUBZONE,			
	STATION,			
		YR,		
		TOTAL,		
	TYPE,			
			SZ_63	SZ_63_MAX,
			SZ_125	SZ_125_MAX,
			SZ_250	SZ_250_MAX,
			SZ_500	SZ_500_MAX,
			SZ_1000	SZ_1000_MAX,
			SZ_2000	SZ_2000_MAX,
			SZ_4000	SZ_4000_MAX,
			EH	EH_MAX,
	CASE WHEN L_TS_CNT = TOTAL THEN '<' ELSE NULL END	L_TS_MAX,	TS	TS_MAX,
	CASE WHEN L_TVS_CNT = TOTAL THEN '<' ELSE NULL END	L_TVS_MAX,	TVS	TVS_MAX,
			MSN_DWR	MSN_DWR_MAX,
			MSM_DWR	MSM_DWR_MAX,
			MSO_DWR	MSO_DWR_MAX,
	CASE WHEN L_SG_CNT = TOTAL THEN '<' ELSE NULL END	L_SG_MAX,	SG	SG_MAX,
	CASE WHEN L_PH_CNT = TOTAL THEN '<' ELSE NULL END	L_PH_MAX,	PH	PH_MAX,
	CASE WHEN L_COD_CNT = TOTAL THEN '<' ELSE NULL END	L_COD_MAX,	COD	COD_MAX,
	CASE WHEN L_TIC_CNT = TOTAL THEN '<' ELSE NULL END	L_TIC_MAX,	TIC	TIC_MAX,
	CASE WHEN L_TOC_CNT = TOTAL THEN '<' ELSE NULL END	L_TOC_MAX,	TOC	TOC_MAX,
	CASE WHEN L_TC_CNT = TOTAL THEN '<' ELSE NULL END	L_TC_MAX,	TC	TC_MAX,
	CASE WHEN L_NH_CNT = TOTAL THEN '<' ELSE NULL END	L_NH_MAX,	NH	NH_MAX,
	CASE WHEN L_TKN_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_MAX,	TKN	TKN_MAX,
	CASE WHEN L_TP_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_MAX,	TP	TP_MAX,
	CASE WHEN L_INS_CNT = TOTAL THEN '<' ELSE NULL END	L_INS_MAX,	INS	INS_MAX,
	CASE WHEN L_CN_CNT = TOTAL THEN '<' ELSE NULL END	L_CN_MAX,	CN	CN_MAX,
	CASE WHEN L_AL_CNT = TOTAL THEN '<' ELSE NULL END	L_AL_MAX,	AL	AL_MAX,
	CASE WHEN L_AG_CNT = TOTAL THEN '<' ELSE NULL END	L_AG_MAX,	AG	AG_MAX,
	CASE WHEN L_ARS_CNT = TOTAL THEN '<' ELSE NULL END	L_ARS_MAX,	ARS	ARS_MAX,
	CASE WHEN L_BA_CNT = TOTAL THEN '<' ELSE NULL END	L_BA_MAX,	BA	BA_MAX,
	CASE WHEN L_BE_CNT = TOTAL THEN '<' ELSE NULL END	L_BE_MAX,	BE	BE_MAX,
	CASE WHEN L_B_CNT = TOTAL THEN '<' ELSE NULL END	L_B_MAX,	B	B_MAX,
	CASE WHEN L_CD_CNT = TOTAL THEN '<' ELSE NULL END	L_CD_MAX,	CD	CD_MAX,
	CASE WHEN L_CO_CNT = TOTAL THEN '<' ELSE NULL END	L_CO_MAX,	CO	CO_MAX,
	CASE WHEN L_CR_CNT = TOTAL THEN '<' ELSE NULL END	L_CR_MAX,	CR	CR_MAX,
	CASE WHEN L_CU_CNT = TOTAL THEN '<' ELSE NULL END	L_CU_MAX,	CU	CU_MAX,
	CASE WHEN L_FE_CNT = TOTAL THEN '<' ELSE NULL END	L_FE_MAX,	FE	FE_MAX,
	CASE WHEN L_HG_CNT = TOTAL THEN '<' ELSE NULL END	L_HG_MAX,	HG	HG_MAX,
	CASE WHEN L_MN_CNT = TOTAL THEN '<' ELSE NULL END	L_MN_MAX,	MN	MN_MAX,
	CASE WHEN L_MO_CNT = TOTAL THEN '<' ELSE NULL END	L_MO_MAX,	MO	MO_MAX,
	CASE WHEN L_NI_CNT = TOTAL THEN '<' ELSE NULL END	L_NI_MAX,	NI	NI_MAX,
	CASE WHEN L_PB_CNT = TOTAL THEN '<' ELSE NULL END	L_PB_MAX,	PB	PB_MAX,
	CASE WHEN L_SB_CNT = TOTAL THEN '<' ELSE NULL END	L_SB_MAX,	SB	SB_MAX,
	CASE WHEN L_TL_CNT = TOTAL THEN '<' ELSE NULL END	L_TL_MAX,	TL	TL_MAX,
	CASE WHEN L_V_CNT = TOTAL THEN '<' ELSE NULL END	L_V_MAX,	V	V_MAX,
	CASE WHEN L_ZN_CNT = TOTAL THEN '<' ELSE NULL END	L_ZN_MAX,	ZN	ZN_MAX,
	CASE WHEN L_PCB_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB_MAX,	PCB	PCB_MAX,
	CASE WHEN L_PCB8_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB8_MAX,	PCB8	PCB8_MAX,
	CASE WHEN L_PCB18_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB18_MAX,	PCB18	PCB18_MAX,
	CASE WHEN L_PCB28_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB28_MAX,	PCB28	PCB28_MAX,
	CASE WHEN L_PCB31_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB31_MAX,	PCB31	PCB31_MAX,
	CASE WHEN L_PCB44_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB44_MAX,	PCB44	PCB44_MAX,
	CASE WHEN L_PCB52_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB52_MAX,	PCB52	PCB52_MAX,
	CASE WHEN L_PCB66_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB66_MAX,	PCB66	PCB66_MAX,
	CASE WHEN L_PCB77_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB77_MAX,	PCB77	PCB77_MAX,
	CASE WHEN L_PCB81_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB81_MAX,	PCB81	PCB81_MAX,
	CASE WHEN L_PCB101_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB101_MAX,	PCB101	PCB101_MAX,
	CASE WHEN L_PCB105_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB105_MAX,	PCB105	PCB105_MAX,
	CASE WHEN L_PCB114_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB114_MAX,	PCB114	PCB114_MAX,
	CASE WHEN L_PCB118_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB118_MAX,	PCB118	PCB118_MAX,
	CASE WHEN L_PCB123_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB123_MAX,	PCB123	PCB123_MAX,
	CASE WHEN L_PCB126_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB126_MAX,	PCB126	PCB126_MAX,
	CASE WHEN L_PCB128_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB128_MAX,	PCB128	PCB128_MAX,
	CASE WHEN L_PCB138_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB138_MAX,	PCB138	PCB138_MAX,
	CASE WHEN L_PCB149_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB149_MAX,	PCB149	PCB149_MAX,
	CASE WHEN L_PCB153_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB153_MAX,	PCB153	PCB153_MAX,
	CASE WHEN L_PCB156_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB156_MAX,	PCB156	PCB156_MAX,
	CASE WHEN L_PCB157_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB157_MAX,	PCB157	PCB157_MAX,
	CASE WHEN L_PCB167_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB167_MAX,	PCB167	PCB167_MAX,
	CASE WHEN L_PCB169_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB169_MAX,	PCB169	PCB169_MAX,
	CASE WHEN L_PCB170_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB170_MAX,	PCB170	PCB170_MAX,
	CASE WHEN L_PCB180_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB180_MAX,	PCB180	PCB180_MAX,
	CASE WHEN L_PCB187_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB187_MAX,	PCB187	PCB187_MAX,
	CASE WHEN L_PCB189_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB189_MAX,	PCB189	PCB189_MAX,
			SUM18PCB	SUM18PCB_MAX,
	CASE WHEN L_FLUO_CNT = TOTAL THEN '<' ELSE NULL END	L_FLUO_MAX,	FLUO	FLUO_MAX,
	CASE WHEN L_PHEN_CNT = TOTAL THEN '<' ELSE NULL END	L_PHEN_MAX,	PHEN	PHEN_MAX,
	CASE WHEN L_ANTH_CNT = TOTAL THEN '<' ELSE NULL END	L_ANTH_MAX,	ANTH	ANTH_MAX,
	CASE WHEN L_FLUT_CNT = TOTAL THEN '<' ELSE NULL END	L_FLUT_MAX,	FLUT	FLUT_MAX,
	CASE WHEN L_PYRE_CNT = TOTAL THEN '<' ELSE NULL END	L_PYRE_MAX,	PYRE	PYRE_MAX,
	CASE WHEN L_CHRY_CNT = TOTAL THEN '<' ELSE NULL END	L_CHRY_MAX,	CHRY	CHRY_MAX,
	CASE WHEN L_BBFL_CNT = TOTAL THEN '<' ELSE NULL END	L_BBFL_MAX,	BBFL	BBFL_MAX,
	CASE WHEN L_BKFL_CNT = TOTAL THEN '<' ELSE NULL END	L_BKFL_MAX,	BKFL	BKFL_MAX,
	CASE WHEN L_BAPY_CNT = TOTAL THEN '<' ELSE NULL END	L_BAPY_MAX,	BAPY	BAPY_MAX,
	CASE WHEN L_BGPE_CNT = TOTAL THEN '<' ELSE NULL END	L_BGPE_MAX,	BGPE	BGPE_MAX,
	CASE WHEN L_ACPH_CNT = TOTAL THEN '<' ELSE NULL END	L_ACPH_MAX,	ACPH	ACPH_MAX,
	CASE WHEN L_ACEN_CNT = TOTAL THEN '<' ELSE NULL END	L_ACEN_MAX,	ACEN	ACEN_MAX,
	CASE WHEN L_DAAN_CNT = TOTAL THEN '<' ELSE NULL END	L_DAAN_MAX,	DAAN	DAAN_MAX,
	CASE WHEN L_BANT_CNT = TOTAL THEN '<' ELSE NULL END	L_BANT_MAX,	BANT	BANT_MAX,
	CASE WHEN L_INPY_CNT = TOTAL THEN '<' ELSE NULL END	L_INPY_MAX,	INPY	INPY_MAX,
	CASE WHEN L_NAPH_CNT = TOTAL THEN '<' ELSE NULL END	L_NAPH_MAX,	NAPH	NAPH_MAX,
	CASE WHEN L_PAH_CNT = TOTAL THEN '<' ELSE NULL END	L_PAH_MAX,	PAH	PAH_MAX,
			SUM6LMPAH	SUM6LMPAH_MAX,
			SUM10HMPAH	SUM10HMPAH_MAX,
			SUM16PAH	SUM16PAH_MAX,
	CASE WHEN L_GBHC_CNT = TOTAL THEN '<' ELSE NULL END	L_GBHC_MAX,	GBHC	GBHC_MAX,
	CASE WHEN L_HCB_CNT = TOTAL THEN '<' ELSE NULL END	L_HCB_MAX,	HCB	HCB_MAX,
	CASE WHEN L_HEPT_CNT = TOTAL THEN '<' ELSE NULL END	L_HEPT_MAX,	HEPT	HEPT_MAX,
	CASE WHEN L_ALDR_CNT = TOTAL THEN '<' ELSE NULL END	L_ALDR_MAX,	ALDR	ALDR_MAX,
	CASE WHEN L_HEPO_CNT = TOTAL THEN '<' ELSE NULL END	L_HEPO_MAX,	HEPO	HEPO_MAX,
	CASE WHEN L_ODDE_CNT = TOTAL THEN '<' ELSE NULL END	L_ODDE_MAX,	ODDE	ODDE_MAX,
	CASE WHEN L_END1_CNT = TOTAL THEN '<' ELSE NULL END	L_END1_MAX,	END1	END1_MAX,
	CASE WHEN L_PDDE_CNT = TOTAL THEN '<' ELSE NULL END	L_PDDE_MAX,	PDDE	PDDE_MAX,
	CASE WHEN L_DIEL_CNT = TOTAL THEN '<' ELSE NULL END	L_DIEL_MAX,	DIEL	DIEL_MAX,
	CASE WHEN L_ODDD_CNT = TOTAL THEN '<' ELSE NULL END	L_ODDD_MAX,	ODDD	ODDD_MAX,
	CASE WHEN L_ENDR_CNT = TOTAL THEN '<' ELSE NULL END	L_ENDR_MAX,	ENDR	ENDR_MAX,
	CASE WHEN L_END2_CNT = TOTAL THEN '<' ELSE NULL END	L_END2_MAX,	END2	END2_MAX,
	CASE WHEN L_PDDD_CNT = TOTAL THEN '<' ELSE NULL END	L_PDDD_MAX,	PDDD	PDDD_MAX,
	CASE WHEN L_ODDT_CNT = TOTAL THEN '<' ELSE NULL END	L_ODDT_MAX,	ODDT	ODDT_MAX,
	CASE WHEN L_PDDT_CNT = TOTAL THEN '<' ELSE NULL END	L_PDDT_MAX,	PDDT	PDDT_MAX,
	CASE WHEN L_ABHC_CNT = TOTAL THEN '<' ELSE NULL END	L_ABHC_MAX,	ABHC	ABHC_MAX,
	CASE WHEN L_BBHC_CNT = TOTAL THEN '<' ELSE NULL END	L_BBHC_MAX,	BBHC	BBHC_MAX,
	CASE WHEN L_DBHC_CNT = TOTAL THEN '<' ELSE NULL END	L_DBHC_MAX,	DBHC	DBHC_MAX,
			VIEW_NO	
FROM	(
    SELECT	ZONE,			
        WCZ,			
        SUBZONE,			
        STATION,			
        YEAR(MDATE)	YR,		
        COUNT(*)	TOTAL,		
        TYPE,			
        MAX(SZ_63)	SZ_63,		
        MAX(SZ_125)	SZ_125,		
        MAX(SZ_250)	SZ_250,		
        MAX(SZ_500)	SZ_500,		
        MAX(SZ_1000)	SZ_1000,		
        MAX(SZ_2000)	SZ_2000,		
        MAX(SZ_4000)	SZ_4000,		
        MAX(EH)	EH,		
        MAX(TS)	TS,	COUNT(L_TS)	L_TS_CNT,
        MAX(TVS)	TVS,	COUNT(L_TVS)	L_TVS_CNT,
        MAX(MSN_DWR)	MSN_DWR,		
        MAX(MSM_DWR)	MSM_DWR,		
        MAX(MSO_DWR)	MSO_DWR,		
        MAX(SG)	SG,	COUNT(L_SG)	L_SG_CNT,
        MAX(PH)	PH,	COUNT(L_PH)	L_PH_CNT,
        MAX(COD)	COD,	COUNT(L_COD)	L_COD_CNT,
        MAX(TIC)	TIC,	COUNT(L_TIC)	L_TIC_CNT,
        MAX(TOC)	TOC,	COUNT(L_TOC)	L_TOC_CNT,
        MAX(TC)	TC,	COUNT(L_TC)	L_TC_CNT,
        MAX(NH)	NH,	COUNT(L_NH)	L_NH_CNT,
        MAX(TKN)	TKN,	COUNT(L_TKN)	L_TKN_CNT,
        MAX(TP)	TP,	COUNT(L_TP)	L_TP_CNT,
        MAX(INS)	INS,	COUNT(L_INS)	L_INS_CNT,
        MAX(CN)	CN,	COUNT(L_CN)	L_CN_CNT,
        MAX(AL)	AL,	COUNT(L_AL)	L_AL_CNT,
        MAX(AG)	AG,	COUNT(L_AG)	L_AG_CNT,
        MAX(ARS)	ARS,	COUNT(L_ARS)	L_ARS_CNT,
        MAX(BA)	BA,	COUNT(L_BA)	L_BA_CNT,
        MAX(BE)	BE,	COUNT(L_BE)	L_BE_CNT,
        MAX(B)	B,	COUNT(L_B)	L_B_CNT,
        MAX(CD)	CD,	COUNT(L_CD)	L_CD_CNT,
        MAX(CO)	CO,	COUNT(L_CO)	L_CO_CNT,
        MAX(CR)	CR,	COUNT(L_CR)	L_CR_CNT,
        MAX(CU)	CU,	COUNT(L_CU)	L_CU_CNT,
        MAX(FE)	FE,	COUNT(L_FE)	L_FE_CNT,
        MAX(HG)	HG,	COUNT(L_HG)	L_HG_CNT,
        MAX(MN)	MN,	COUNT(L_MN)	L_MN_CNT,
        MAX(MO)	MO,	COUNT(L_MO)	L_MO_CNT,
        MAX(NI)	NI,	COUNT(L_NI)	L_NI_CNT,
        MAX(PB)	PB,	COUNT(L_PB)	L_PB_CNT,
        MAX(SB)	SB,	COUNT(L_SB)	L_SB_CNT,
        MAX(TL)	TL,	COUNT(L_TL)	L_TL_CNT,
        MAX(V)	V,	COUNT(L_V)	L_V_CNT,
        MAX(ZN)	ZN,	COUNT(L_ZN)	L_ZN_CNT,
        MAX(PCB)	PCB,	COUNT(L_PCB)	L_PCB_CNT,
        MAX(PCB8)	PCB8,	COUNT(L_PCB8)	L_PCB8_CNT,
        MAX(PCB18)	PCB18,	COUNT(L_PCB18)	L_PCB18_CNT,
        MAX(PCB28)	PCB28,	COUNT(L_PCB28)	L_PCB28_CNT,
        MAX(PCB31)	PCB31,	COUNT(L_PCB31)	L_PCB31_CNT,
        MAX(PCB44)	PCB44,	COUNT(L_PCB44)	L_PCB44_CNT,
        MAX(PCB52)	PCB52,	COUNT(L_PCB52)	L_PCB52_CNT,
        MAX(PCB66)	PCB66,	COUNT(L_PCB66)	L_PCB66_CNT,
        MAX(PCB77)	PCB77,	COUNT(L_PCB77)	L_PCB77_CNT,
        MAX(PCB81)	PCB81,	COUNT(L_PCB81)	L_PCB81_CNT,
        MAX(PCB101)	PCB101,	COUNT(L_PCB101)	L_PCB101_CNT,
        MAX(PCB105)	PCB105,	COUNT(L_PCB105)	L_PCB105_CNT,
        MAX(PCB114)	PCB114,	COUNT(L_PCB114)	L_PCB114_CNT,
        MAX(PCB118)	PCB118,	COUNT(L_PCB118)	L_PCB118_CNT,
        MAX(PCB123)	PCB123,	COUNT(L_PCB123)	L_PCB123_CNT,
        MAX(PCB126)	PCB126,	COUNT(L_PCB126)	L_PCB126_CNT,
        MAX(PCB128)	PCB128,	COUNT(L_PCB128)	L_PCB128_CNT,
        MAX(PCB138)	PCB138,	COUNT(L_PCB138)	L_PCB138_CNT,
        MAX(PCB149)	PCB149,	COUNT(L_PCB149)	L_PCB149_CNT,
        MAX(PCB153)	PCB153,	COUNT(L_PCB153)	L_PCB153_CNT,
        MAX(PCB156)	PCB156,	COUNT(L_PCB156)	L_PCB156_CNT,
        MAX(PCB157)	PCB157,	COUNT(L_PCB157)	L_PCB157_CNT,
        MAX(PCB167)	PCB167,	COUNT(L_PCB167)	L_PCB167_CNT,
        MAX(PCB169)	PCB169,	COUNT(L_PCB169)	L_PCB169_CNT,
        MAX(PCB170)	PCB170,	COUNT(L_PCB170)	L_PCB170_CNT,
        MAX(PCB180)	PCB180,	COUNT(L_PCB180)	L_PCB180_CNT,
        MAX(PCB187)	PCB187,	COUNT(L_PCB187)	L_PCB187_CNT,
        MAX(PCB189)	PCB189,	COUNT(L_PCB189)	L_PCB189_CNT,
        MAX(SUM18PCB)	SUM18PCB,		
        MAX(FLUO)	FLUO,	COUNT(L_FLUO)	L_FLUO_CNT,
        MAX(PHEN)	PHEN,	COUNT(L_PHEN)	L_PHEN_CNT,
        MAX(ANTH)	ANTH,	COUNT(L_ANTH)	L_ANTH_CNT,
        MAX(FLUT)	FLUT,	COUNT(L_FLUT)	L_FLUT_CNT,
        MAX(PYRE)	PYRE,	COUNT(L_PYRE)	L_PYRE_CNT,
        MAX(CHRY)	CHRY,	COUNT(L_CHRY)	L_CHRY_CNT,
        MAX(BBFL)	BBFL,	COUNT(L_BBFL)	L_BBFL_CNT,
        MAX(BKFL)	BKFL,	COUNT(L_BKFL)	L_BKFL_CNT,
        MAX(BAPY)	BAPY,	COUNT(L_BAPY)	L_BAPY_CNT,
        MAX(BGPE)	BGPE,	COUNT(L_BGPE)	L_BGPE_CNT,
        MAX(ACPH)	ACPH,	COUNT(L_ACPH)	L_ACPH_CNT,
        MAX(ACEN)	ACEN,	COUNT(L_ACEN)	L_ACEN_CNT,
        MAX(DAAN)	DAAN,	COUNT(L_DAAN)	L_DAAN_CNT,
        MAX(BANT)	BANT,	COUNT(L_BANT)	L_BANT_CNT,
        MAX(INPY)	INPY,	COUNT(L_INPY)	L_INPY_CNT,
        MAX(NAPH)	NAPH,	COUNT(L_NAPH)	L_NAPH_CNT,
        MAX(PAH)	PAH,	COUNT(L_PAH)	L_PAH_CNT,
        MAX(SUM6LMPAH)	SUM6LMPAH,		
        MAX(SUM10HMPAH)	SUM10HMPAH,		
        MAX(SUM16PAH)	SUM16PAH,		
        MAX(GBHC)	GBHC,	COUNT(L_GBHC)	L_GBHC_CNT,
        MAX(HCB)	HCB,	COUNT(L_HCB)	L_HCB_CNT,
        MAX(HEPT)	HEPT,	COUNT(L_HEPT)	L_HEPT_CNT,
        MAX(ALDR)	ALDR,	COUNT(L_ALDR)	L_ALDR_CNT,
        MAX(HEPO)	HEPO,	COUNT(L_HEPO)	L_HEPO_CNT,
        MAX(ODDE)	ODDE,	COUNT(L_ODDE)	L_ODDE_CNT,
        MAX(END1)	END1,	COUNT(L_END1)	L_END1_CNT,
        MAX(PDDE)	PDDE,	COUNT(L_PDDE)	L_PDDE_CNT,
        MAX(DIEL)	DIEL,	COUNT(L_DIEL)	L_DIEL_CNT,
        MAX(ODDD)	ODDD,	COUNT(L_ODDD)	L_ODDD_CNT,
        MAX(ENDR)	ENDR,	COUNT(L_ENDR)	L_ENDR_CNT,
        MAX(END2)	END2,	COUNT(L_END2)	L_END2_CNT,
        MAX(PDDD)	PDDD,	COUNT(L_PDDD)	L_PDDD_CNT,
        MAX(ODDT)	ODDT,	COUNT(L_ODDT)	L_ODDT_CNT,
        MAX(PDDT)	PDDT,	COUNT(L_PDDT)	L_PDDT_CNT,
        MAX(ABHC)	ABHC,	COUNT(L_ABHC)	L_ABHC_CNT,
        MAX(BBHC)	BBHC,	COUNT(L_BBHC)	L_BBHC_CNT,
        MAX(DBHC)	DBHC,	COUNT(L_DBHC)	L_DBHC_CNT,
        VIEW_NO			
    FROM	WPG.MARINE_SEDIMENT1			
    GROUP BY ZONE, WCZ, SUBZONE, STATION, YEAR(MDATE), TYPE, VIEW_NO				
)   MS_1;


-- WPG.MARINE_SEDIMENT1_MIN source

CREATE VIEW WPG.MARINE_SEDIMENT1_MIN AS
SELECT	ZONE,			
	WCZ,			
	SUBZONE,			
	STATION,			
		YR,		
		TOTAL,		
	TYPE,			
			SZ_63	SZ_63_MIN,
			SZ_125	SZ_125_MIN,
			SZ_250	SZ_250_MIN,
			SZ_500	SZ_500_MIN,
			SZ_1000	SZ_1000_MIN,
			SZ_2000	SZ_2000_MIN,
			SZ_4000	SZ_4000_MIN,
			EH	EH_MIN,
	CASE WHEN L_TS_CNT =0 THEN NULL ELSE '<' END	L_TS_MIN,	TS	TS_MIN,
	CASE WHEN L_TVS_CNT =0 THEN NULL ELSE '<' END	L_TVS_MIN,	TVS	TVS_MIN,
			MSN_DWR	MSN_DWR_MIN,
			MSM_DWR	MSM_DWR_MIN,
			MSO_DWR	MSO_DWR_MIN,
	CASE WHEN L_SG_CNT =0 THEN NULL ELSE '<' END	L_SG_MIN,	SG	SG_MIN,
	CASE WHEN L_PH_CNT =0 THEN NULL ELSE '<' END	L_PH_MIN,	PH	PH_MIN,
	CASE WHEN L_COD_CNT =0 THEN NULL ELSE '<' END	L_COD_MIN,	COD	COD_MIN,
	CASE WHEN L_TIC_CNT =0 THEN NULL ELSE '<' END	L_TIC_MIN,	TIC	TIC_MIN,
	CASE WHEN L_TOC_CNT =0 THEN NULL ELSE '<' END	L_TOC_MIN,	TOC	TOC_MIN,
	CASE WHEN L_TC_CNT =0 THEN NULL ELSE '<' END	L_TC_MIN,	TC	TC_MIN,
	CASE WHEN L_NH_CNT =0 THEN NULL ELSE '<' END	L_NH_MIN,	NH	NH_MIN,
	CASE WHEN L_TKN_CNT =0 THEN NULL ELSE '<' END	L_TKN_MIN,	TKN	TKN_MIN,
	CASE WHEN L_TP_CNT =0 THEN NULL ELSE '<' END	L_TP_MIN,	TP	TP_MIN,
	CASE WHEN L_INS_CNT =0 THEN NULL ELSE '<' END	L_INS_MIN,	INS	INS_MIN,
	CASE WHEN L_CN_CNT =0 THEN NULL ELSE '<' END	L_CN_MIN,	CN	CN_MIN,
	CASE WHEN L_AL_CNT =0 THEN NULL ELSE '<' END	L_AL_MIN,	AL	AL_MIN,
	CASE WHEN L_AG_CNT =0 THEN NULL ELSE '<' END	L_AG_MIN,	AG	AG_MIN,
	CASE WHEN L_ARS_CNT =0 THEN NULL ELSE '<' END	L_ARS_MIN,	ARS	ARS_MIN,
	CASE WHEN L_BA_CNT =0 THEN NULL ELSE '<' END	L_BA_MIN,	BA	BA_MIN,
	CASE WHEN L_BE_CNT =0 THEN NULL ELSE '<' END	L_BE_MIN,	BE	BE_MIN,
	CASE WHEN L_B_CNT =0 THEN NULL ELSE '<' END	L_B_MIN,	B	B_MIN,
	CASE WHEN L_CD_CNT =0 THEN NULL ELSE '<' END	L_CD_MIN,	CD	CD_MIN,
	CASE WHEN L_CO_CNT =0 THEN NULL ELSE '<' END	L_CO_MIN,	CO	CO_MIN,
	CASE WHEN L_CR_CNT =0 THEN NULL ELSE '<' END	L_CR_MIN,	CR	CR_MIN,
	CASE WHEN L_CU_CNT =0 THEN NULL ELSE '<' END	L_CU_MIN,	CU	CU_MIN,
	CASE WHEN L_FE_CNT =0 THEN NULL ELSE '<' END	L_FE_MIN,	FE	FE_MIN,
	CASE WHEN L_HG_CNT =0 THEN NULL ELSE '<' END	L_HG_MIN,	HG	HG_MIN,
	CASE WHEN L_MN_CNT =0 THEN NULL ELSE '<' END	L_MN_MIN,	MN	MN_MIN,
	CASE WHEN L_MO_CNT =0 THEN NULL ELSE '<' END	L_MO_MIN,	MO	MO_MIN,
	CASE WHEN L_NI_CNT =0 THEN NULL ELSE '<' END	L_NI_MIN,	NI	NI_MIN,
	CASE WHEN L_PB_CNT =0 THEN NULL ELSE '<' END	L_PB_MIN,	PB	PB_MIN,
	CASE WHEN L_SB_CNT =0 THEN NULL ELSE '<' END	L_SB_MIN,	SB	SB_MIN,
	CASE WHEN L_TL_CNT =0 THEN NULL ELSE '<' END	L_TL_MIN,	TL	TL_MIN,
	CASE WHEN L_V_CNT =0 THEN NULL ELSE '<' END	L_V_MIN,	V	V_MIN,
	CASE WHEN L_ZN_CNT =0 THEN NULL ELSE '<' END	L_ZN_MIN,	ZN	ZN_MIN,
	CASE WHEN L_PCB_CNT =0 THEN NULL ELSE '<' END	L_PCB_MIN,	PCB	PCB_MIN,
	CASE WHEN L_PCB8_CNT =0 THEN NULL ELSE '<' END	L_PCB8_MIN,	PCB8	PCB8_MIN,
	CASE WHEN L_PCB18_CNT =0 THEN NULL ELSE '<' END	L_PCB18_MIN,	PCB18	PCB18_MIN,
	CASE WHEN L_PCB28_CNT =0 THEN NULL ELSE '<' END	L_PCB28_MIN,	PCB28	PCB28_MIN,
	CASE WHEN L_PCB31_CNT =0 THEN NULL ELSE '<' END	L_PCB31_MIN,	PCB31	PCB31_MIN,
	CASE WHEN L_PCB44_CNT =0 THEN NULL ELSE '<' END	L_PCB44_MIN,	PCB44	PCB44_MIN,
	CASE WHEN L_PCB52_CNT =0 THEN NULL ELSE '<' END	L_PCB52_MIN,	PCB52	PCB52_MIN,
	CASE WHEN L_PCB66_CNT =0 THEN NULL ELSE '<' END	L_PCB66_MIN,	PCB66	PCB66_MIN,
	CASE WHEN L_PCB77_CNT =0 THEN NULL ELSE '<' END	L_PCB77_MIN,	PCB77	PCB77_MIN,
	CASE WHEN L_PCB81_CNT =0 THEN NULL ELSE '<' END	L_PCB81_MIN,	PCB81	PCB81_MIN,
	CASE WHEN L_PCB101_CNT =0 THEN NULL ELSE '<' END	L_PCB101_MIN,	PCB101	PCB101_MIN,
	CASE WHEN L_PCB105_CNT =0 THEN NULL ELSE '<' END	L_PCB105_MIN,	PCB105	PCB105_MIN,
	CASE WHEN L_PCB114_CNT =0 THEN NULL ELSE '<' END	L_PCB114_MIN,	PCB114	PCB114_MIN,
	CASE WHEN L_PCB118_CNT =0 THEN NULL ELSE '<' END	L_PCB118_MIN,	PCB118	PCB118_MIN,
	CASE WHEN L_PCB123_CNT =0 THEN NULL ELSE '<' END	L_PCB123_MIN,	PCB123	PCB123_MIN,
	CASE WHEN L_PCB126_CNT =0 THEN NULL ELSE '<' END	L_PCB126_MIN,	PCB126	PCB126_MIN,
	CASE WHEN L_PCB128_CNT =0 THEN NULL ELSE '<' END	L_PCB128_MIN,	PCB128	PCB128_MIN,
	CASE WHEN L_PCB138_CNT =0 THEN NULL ELSE '<' END	L_PCB138_MIN,	PCB138	PCB138_MIN,
	CASE WHEN L_PCB149_CNT =0 THEN NULL ELSE '<' END	L_PCB149_MIN,	PCB149	PCB149_MIN,
	CASE WHEN L_PCB153_CNT =0 THEN NULL ELSE '<' END	L_PCB153_MIN,	PCB153	PCB153_MIN,
	CASE WHEN L_PCB156_CNT =0 THEN NULL ELSE '<' END	L_PCB156_MIN,	PCB156	PCB156_MIN,
	CASE WHEN L_PCB157_CNT =0 THEN NULL ELSE '<' END	L_PCB157_MIN,	PCB157	PCB157_MIN,
	CASE WHEN L_PCB167_CNT =0 THEN NULL ELSE '<' END	L_PCB167_MIN,	PCB167	PCB167_MIN,
	CASE WHEN L_PCB169_CNT =0 THEN NULL ELSE '<' END	L_PCB169_MIN,	PCB169	PCB169_MIN,
	CASE WHEN L_PCB170_CNT =0 THEN NULL ELSE '<' END	L_PCB170_MIN,	PCB170	PCB170_MIN,
	CASE WHEN L_PCB180_CNT =0 THEN NULL ELSE '<' END	L_PCB180_MIN,	PCB180	PCB180_MIN,
	CASE WHEN L_PCB187_CNT =0 THEN NULL ELSE '<' END	L_PCB187_MIN,	PCB187	PCB187_MIN,
	CASE WHEN L_PCB189_CNT =0 THEN NULL ELSE '<' END	L_PCB189_MIN,	PCB189	PCB189_MIN,
			SUM18PCB	SUM18PCB_MIN,
	CASE WHEN L_FLUO_CNT =0 THEN NULL ELSE '<' END	L_FLUO_MIN,	FLUO	FLUO_MIN,
	CASE WHEN L_PHEN_CNT =0 THEN NULL ELSE '<' END	L_PHEN_MIN,	PHEN	PHEN_MIN,
	CASE WHEN L_ANTH_CNT =0 THEN NULL ELSE '<' END	L_ANTH_MIN,	ANTH	ANTH_MIN,
	CASE WHEN L_FLUT_CNT =0 THEN NULL ELSE '<' END	L_FLUT_MIN,	FLUT	FLUT_MIN,
	CASE WHEN L_PYRE_CNT =0 THEN NULL ELSE '<' END	L_PYRE_MIN,	PYRE	PYRE_MIN,
	CASE WHEN L_CHRY_CNT =0 THEN NULL ELSE '<' END	L_CHRY_MIN,	CHRY	CHRY_MIN,
	CASE WHEN L_BBFL_CNT =0 THEN NULL ELSE '<' END	L_BBFL_MIN,	BBFL	BBFL_MIN,
	CASE WHEN L_BKFL_CNT =0 THEN NULL ELSE '<' END	L_BKFL_MIN,	BKFL	BKFL_MIN,
	CASE WHEN L_BAPY_CNT =0 THEN NULL ELSE '<' END	L_BAPY_MIN,	BAPY	BAPY_MIN,
	CASE WHEN L_BGPE_CNT =0 THEN NULL ELSE '<' END	L_BGPE_MIN,	BGPE	BGPE_MIN,
	CASE WHEN L_ACPH_CNT =0 THEN NULL ELSE '<' END	L_ACPH_MIN,	ACPH	ACPH_MIN,
	CASE WHEN L_ACEN_CNT =0 THEN NULL ELSE '<' END	L_ACEN_MIN,	ACEN	ACEN_MIN,
	CASE WHEN L_DAAN_CNT =0 THEN NULL ELSE '<' END	L_DAAN_MIN,	DAAN	DAAN_MIN,
	CASE WHEN L_BANT_CNT =0 THEN NULL ELSE '<' END	L_BANT_MIN,	BANT	BANT_MIN,
	CASE WHEN L_INPY_CNT =0 THEN NULL ELSE '<' END	L_INPY_MIN,	INPY	INPY_MIN,
	CASE WHEN L_NAPH_CNT =0 THEN NULL ELSE '<' END	L_NAPH_MIN,	NAPH	NAPH_MIN,
	CASE WHEN L_PAH_CNT =0 THEN NULL ELSE '<' END	L_PAH_MIN,	PAH	PAH_MIN,
			SUM6LMPAH	SUM6LMPAH_MIN,
			SUM10HMPAH	SUM10HMPAH_MIN,
			SUM16PAH	SUM16PAH_MIN,
	CASE WHEN L_GBHC_CNT =0 THEN NULL ELSE '<' END	L_GBHC_MIN,	GBHC	GBHC_MIN,
	CASE WHEN L_HCB_CNT =0 THEN NULL ELSE '<' END	L_HCB_MIN,	HCB	HCB_MIN,
	CASE WHEN L_HEPT_CNT =0 THEN NULL ELSE '<' END	L_HEPT_MIN,	HEPT	HEPT_MIN,
	CASE WHEN L_ALDR_CNT =0 THEN NULL ELSE '<' END	L_ALDR_MIN,	ALDR	ALDR_MIN,
	CASE WHEN L_HEPO_CNT =0 THEN NULL ELSE '<' END	L_HEPO_MIN,	HEPO	HEPO_MIN,
	CASE WHEN L_ODDE_CNT =0 THEN NULL ELSE '<' END	L_ODDE_MIN,	ODDE	ODDE_MIN,
	CASE WHEN L_END1_CNT =0 THEN NULL ELSE '<' END	L_END1_MIN,	END1	END1_MIN,
	CASE WHEN L_PDDE_CNT =0 THEN NULL ELSE '<' END	L_PDDE_MIN,	PDDE	PDDE_MIN,
	CASE WHEN L_DIEL_CNT =0 THEN NULL ELSE '<' END	L_DIEL_MIN,	DIEL	DIEL_MIN,
	CASE WHEN L_ODDD_CNT =0 THEN NULL ELSE '<' END	L_ODDD_MIN,	ODDD	ODDD_MIN,
	CASE WHEN L_ENDR_CNT =0 THEN NULL ELSE '<' END	L_ENDR_MIN,	ENDR	ENDR_MIN,
	CASE WHEN L_END2_CNT =0 THEN NULL ELSE '<' END	L_END2_MIN,	END2	END2_MIN,
	CASE WHEN L_PDDD_CNT =0 THEN NULL ELSE '<' END	L_PDDD_MIN,	PDDD	PDDD_MIN,
	CASE WHEN L_ODDT_CNT =0 THEN NULL ELSE '<' END	L_ODDT_MIN,	ODDT	ODDT_MIN,
	CASE WHEN L_PDDT_CNT =0 THEN NULL ELSE '<' END	L_PDDT_MIN,	PDDT	PDDT_MIN,
	CASE WHEN L_ABHC_CNT =0 THEN NULL ELSE '<' END	L_ABHC_MIN,	ABHC	ABHC_MIN,
	CASE WHEN L_BBHC_CNT =0 THEN NULL ELSE '<' END	L_BBHC_MIN,	BBHC	BBHC_MIN,
	CASE WHEN L_DBHC_CNT =0 THEN NULL ELSE '<' END	L_DBHC_MIN,	DBHC	DBHC_MIN,
			VIEW_NO	
FROM	(
    SELECT	ZONE,			
        WCZ,			
        SUBZONE,			
        STATION,			
        YEAR(MDATE)	YR,		
        COUNT(*)	TOTAL,		
        TYPE,			
        MIN(SZ_63)	SZ_63,		
        MIN(SZ_125)	SZ_125,		
        MIN(SZ_250)	SZ_250,		
        MIN(SZ_500)	SZ_500,		
        MIN(SZ_1000)	SZ_1000,		
        MIN(SZ_2000)	SZ_2000,		
        MIN(SZ_4000)	SZ_4000,		
        MIN(EH)	EH,		
        MIN(TS)	TS,	COUNT(L_TS)	L_TS_CNT,
        MIN(TVS)	TVS,	COUNT(L_TVS)	L_TVS_CNT,
        MIN(MSN_DWR)	MSN_DWR,		
        MIN(MSM_DWR)	MSM_DWR,		
        MIN(MSO_DWR)	MSO_DWR,		
        MIN(SG)	SG,	COUNT(L_SG)	L_SG_CNT,
        MIN(PH)	PH,	COUNT(L_PH)	L_PH_CNT,
        MIN(COD)	COD,	COUNT(L_COD)	L_COD_CNT,
        MIN(TIC)	TIC,	COUNT(L_TIC)	L_TIC_CNT,
        MIN(TOC)	TOC,	COUNT(L_TOC)	L_TOC_CNT,
        MIN(TC)	TC,	COUNT(L_TC)	L_TC_CNT,
        MIN(NH)	NH,	COUNT(L_NH)	L_NH_CNT,
        MIN(TKN)	TKN,	COUNT(L_TKN)	L_TKN_CNT,
        MIN(TP)	TP,	COUNT(L_TP)	L_TP_CNT,
        MIN(INS)	INS,	COUNT(L_INS)	L_INS_CNT,
        MIN(CN)	CN,	COUNT(L_CN)	L_CN_CNT,
        MIN(AL)	AL,	COUNT(L_AL)	L_AL_CNT,
        MIN(AG)	AG,	COUNT(L_AG)	L_AG_CNT,
        MIN(ARS)	ARS,	COUNT(L_ARS)	L_ARS_CNT,
        MIN(BA)	BA,	COUNT(L_BA)	L_BA_CNT,
        MIN(BE)	BE,	COUNT(L_BE)	L_BE_CNT,
        MIN(B)	B,	COUNT(L_B)	L_B_CNT,
        MIN(CD)	CD,	COUNT(L_CD)	L_CD_CNT,
        MIN(CO)	CO,	COUNT(L_CO)	L_CO_CNT,
        MIN(CR)	CR,	COUNT(L_CR)	L_CR_CNT,
        MIN(CU)	CU,	COUNT(L_CU)	L_CU_CNT,
        MIN(FE)	FE,	COUNT(L_FE)	L_FE_CNT,
        MIN(HG)	HG,	COUNT(L_HG)	L_HG_CNT,
        MIN(MN)	MN,	COUNT(L_MN)	L_MN_CNT,
        MIN(MO)	MO,	COUNT(L_MO)	L_MO_CNT,
        MIN(NI)	NI,	COUNT(L_NI)	L_NI_CNT,
        MIN(PB)	PB,	COUNT(L_PB)	L_PB_CNT,
        MIN(SB)	SB,	COUNT(L_SB)	L_SB_CNT,
        MIN(TL)	TL,	COUNT(L_TL)	L_TL_CNT,
        MIN(V)	V,	COUNT(L_V)	L_V_CNT,
        MIN(ZN)	ZN,	COUNT(L_ZN)	L_ZN_CNT,
        MIN(PCB)	PCB,	COUNT(L_PCB)	L_PCB_CNT,
        MIN(PCB8)	PCB8,	COUNT(L_PCB8)	L_PCB8_CNT,
        MIN(PCB18)	PCB18,	COUNT(L_PCB18)	L_PCB18_CNT,
        MIN(PCB28)	PCB28,	COUNT(L_PCB28)	L_PCB28_CNT,
        MIN(PCB31)	PCB31,	COUNT(L_PCB31)	L_PCB31_CNT,
        MIN(PCB44)	PCB44,	COUNT(L_PCB44)	L_PCB44_CNT,
        MIN(PCB52)	PCB52,	COUNT(L_PCB52)	L_PCB52_CNT,
        MIN(PCB66)	PCB66,	COUNT(L_PCB66)	L_PCB66_CNT,
        MIN(PCB77)	PCB77,	COUNT(L_PCB77)	L_PCB77_CNT,
        MIN(PCB81)	PCB81,	COUNT(L_PCB81)	L_PCB81_CNT,
        MIN(PCB101)	PCB101,	COUNT(L_PCB101)	L_PCB101_CNT,
        MIN(PCB105)	PCB105,	COUNT(L_PCB105)	L_PCB105_CNT,
        MIN(PCB114)	PCB114,	COUNT(L_PCB114)	L_PCB114_CNT,
        MIN(PCB118)	PCB118,	COUNT(L_PCB118)	L_PCB118_CNT,
        MIN(PCB123)	PCB123,	COUNT(L_PCB123)	L_PCB123_CNT,
        MIN(PCB126)	PCB126,	COUNT(L_PCB126)	L_PCB126_CNT,
        MIN(PCB128)	PCB128,	COUNT(L_PCB128)	L_PCB128_CNT,
        MIN(PCB138)	PCB138,	COUNT(L_PCB138)	L_PCB138_CNT,
        MIN(PCB149)	PCB149,	COUNT(L_PCB149)	L_PCB149_CNT,
        MIN(PCB153)	PCB153,	COUNT(L_PCB153)	L_PCB153_CNT,
        MIN(PCB156)	PCB156,	COUNT(L_PCB156)	L_PCB156_CNT,
        MIN(PCB157)	PCB157,	COUNT(L_PCB157)	L_PCB157_CNT,
        MIN(PCB167)	PCB167,	COUNT(L_PCB167)	L_PCB167_CNT,
        MIN(PCB169)	PCB169,	COUNT(L_PCB169)	L_PCB169_CNT,
        MIN(PCB170)	PCB170,	COUNT(L_PCB170)	L_PCB170_CNT,
        MIN(PCB180)	PCB180,	COUNT(L_PCB180)	L_PCB180_CNT,
        MIN(PCB187)	PCB187,	COUNT(L_PCB187)	L_PCB187_CNT,
        MIN(PCB189)	PCB189,	COUNT(L_PCB189)	L_PCB189_CNT,
        MIN(SUM18PCB)	SUM18PCB,		
        MIN(FLUO)	FLUO,	COUNT(L_FLUO)	L_FLUO_CNT,
        MIN(PHEN)	PHEN,	COUNT(L_PHEN)	L_PHEN_CNT,
        MIN(ANTH)	ANTH,	COUNT(L_ANTH)	L_ANTH_CNT,
        MIN(FLUT)	FLUT,	COUNT(L_FLUT)	L_FLUT_CNT,
        MIN(PYRE)	PYRE,	COUNT(L_PYRE)	L_PYRE_CNT,
        MIN(CHRY)	CHRY,	COUNT(L_CHRY)	L_CHRY_CNT,
        MIN(BBFL)	BBFL,	COUNT(L_BBFL)	L_BBFL_CNT,
        MIN(BKFL)	BKFL,	COUNT(L_BKFL)	L_BKFL_CNT,
        MIN(BAPY)	BAPY,	COUNT(L_BAPY)	L_BAPY_CNT,
        MIN(BGPE)	BGPE,	COUNT(L_BGPE)	L_BGPE_CNT,
        MIN(ACPH)	ACPH,	COUNT(L_ACPH)	L_ACPH_CNT,
        MIN(ACEN)	ACEN,	COUNT(L_ACEN)	L_ACEN_CNT,
        MIN(DAAN)	DAAN,	COUNT(L_DAAN)	L_DAAN_CNT,
        MIN(BANT)	BANT,	COUNT(L_BANT)	L_BANT_CNT,
        MIN(INPY)	INPY,	COUNT(L_INPY)	L_INPY_CNT,
        MIN(NAPH)	NAPH,	COUNT(L_NAPH)	L_NAPH_CNT,
        MIN(PAH)	PAH,	COUNT(L_PAH)	L_PAH_CNT,
        MIN(SUM6LMPAH)	SUM6LMPAH,		
        MIN(SUM10HMPAH)	SUM10HMPAH,		
        MIN(SUM16PAH)	SUM16PAH,		
        MIN(GBHC)	GBHC,	COUNT(L_GBHC)	L_GBHC_CNT,
        MIN(HCB)	HCB,	COUNT(L_HCB)	L_HCB_CNT,
        MIN(HEPT)	HEPT,	COUNT(L_HEPT)	L_HEPT_CNT,
        MIN(ALDR)	ALDR,	COUNT(L_ALDR)	L_ALDR_CNT,
        MIN(HEPO)	HEPO,	COUNT(L_HEPO)	L_HEPO_CNT,
        MIN(ODDE)	ODDE,	COUNT(L_ODDE)	L_ODDE_CNT,
        MIN(END1)	END1,	COUNT(L_END1)	L_END1_CNT,
        MIN(PDDE)	PDDE,	COUNT(L_PDDE)	L_PDDE_CNT,
        MIN(DIEL)	DIEL,	COUNT(L_DIEL)	L_DIEL_CNT,
        MIN(ODDD)	ODDD,	COUNT(L_ODDD)	L_ODDD_CNT,
        MIN(ENDR)	ENDR,	COUNT(L_ENDR)	L_ENDR_CNT,
        MIN(END2)	END2,	COUNT(L_END2)	L_END2_CNT,
        MIN(PDDD)	PDDD,	COUNT(L_PDDD)	L_PDDD_CNT,
        MIN(ODDT)	ODDT,	COUNT(L_ODDT)	L_ODDT_CNT,
        MIN(PDDT)	PDDT,	COUNT(L_PDDT)	L_PDDT_CNT,
        MIN(ABHC)	ABHC,	COUNT(L_ABHC)	L_ABHC_CNT,
        MIN(BBHC)	BBHC,	COUNT(L_BBHC)	L_BBHC_CNT,
        MIN(DBHC)	DBHC,	COUNT(L_DBHC)	L_DBHC_CNT,
        VIEW_NO			
    FROM	WPG.MARINE_SEDIMENT1			
    GROUP BY ZONE, WCZ, SUBZONE, STATION, YEAR(MDATE), TYPE, VIEW_NO				
)   MS_1;


-- WPG.MARINE_SEDIMENT2 source

CREATE VIEW WPG.MARINE_SEDIMENT2 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	TYPE,
	SZ_63,
	SZ_125,
	SZ_250,
	SZ_500,
	SZ_1000,
	SZ_2000,
	SZ_4000,
	EH,
	L_TS,
	TS,
	L_TVS,
	TVS,
	MSN_DWR,
	MSM_DWR,
	MSO_DWR,
	L_SG,
	SG,
	L_PH,
	PH,
	L_COD,
	COD,
	L_TIC,
	TIC,
	L_TOC,
	TOC,
	L_TC,
	TC,
	L_NH,
	NH,
	L_TKN,
	TKN,
	L_TP,
	TP,
	L_INS,
	INS,
	L_CN,
	CN,
	L_AL,
	AL,
	L_AG,
	AG,
	L_ARS,
	ARS,
	L_BA,
	BA,
	L_BE,
	BE,
	L_B,
	B,
	L_CD,
	CD,
	L_CO,
	CO,
	L_CR,
	CR,
	L_CU,
	CU,
	L_FE,
	FE,
	L_HG,
	HG,
	L_MN,
	MN,
	L_MO,
	MO,
	L_NI,
	NI,
	L_PB,
	PB,
	L_SB,
	SB,
	L_TL,
	TL,
	L_V,
	V,
	L_ZN,
	ZN,
	L_PCB,
	PCB,
	L_PCB8,
	PCB8,
	L_PCB18,
	PCB18,
	L_PCB28,
	PCB28,
	L_PCB31,
	PCB31,
	L_PCB44,
	PCB44,
	L_PCB52,
	PCB52,
	L_PCB66,
	PCB66,
	L_PCB77,
	PCB77,
	L_PCB81,
	PCB81,
	L_PCB101,
	PCB101,
	L_PCB105,
	PCB105,
	L_PCB114,
	PCB114,
	L_PCB118,
	PCB118,
	L_PCB123,
	PCB123,
	L_PCB126,
	PCB126,
	L_PCB128,
	PCB128,
	L_PCB138,
	PCB138,
	L_PCB149,
	PCB149,
	L_PCB153,
	PCB153,
	L_PCB156,
	PCB156,
	L_PCB157,
	PCB157,
	L_PCB167,
	PCB167,
	L_PCB169,
	PCB169,
	L_PCB170,
	PCB170,
	L_PCB180,
	PCB180,
	L_PCB187,
	PCB187,
	L_PCB189,
	PCB189,
	SUM18PCB,
	L_FLUO,
	FLUO,
	L_PHEN,
	PHEN,
	L_ANTH,
	ANTH,
	L_FLUT,
	FLUT,
	L_PYRE,
	PYRE,
	L_CHRY,
	CHRY,
	L_BBFL,
	BBFL,
	L_BKFL,
	BKFL,
	L_BAPY,
	BAPY,
	L_BGPE,
	BGPE,
	L_ACPH,
	ACPH,
	L_ACEN,
	ACEN,
	L_DAAN,
	DAAN,
	L_BANT,
	BANT,
	L_INPY,
	INPY,
	L_NAPH,
	NAPH,
	L_PAH,
	PAH,
	SUM6LMPAH,
	SUM10HMPAH,
	SUM16PAH,
	L_GBHC,
	GBHC,
	L_HCB,
	HCB,
	L_HEPT,
	HEPT,
	L_ALDR,
	ALDR,
	L_HEPO,
	HEPO,
	L_ODDE,
	ODDE,
	L_END1,
	END1,
	L_PDDE,
	PDDE,
	L_DIEL,
	DIEL,
	L_ODDD,
	ODDD,
	L_ENDR,
	ENDR,
	L_END2,
	END2,
	L_PDDD,
	PDDD,
	L_ODDT,
	ODDT,
	L_PDDT,
	PDDT,
	L_ABHC,
	ABHC,
	L_BBHC,
	BBHC,
	L_DBHC,
	DBHC
FROM 	WPG.MARINE_SEDIMENT_X1
WHERE	VIEW_NO >= 2
and mdate <= getdate();


-- WPG.MARINE_SEDIMENT_3A source

CREATE VIEW WPG.MARINE_SEDIMENT_3A
AS
SELECT         ZONE, STATION, cast(MDATE AS smalldatetime) MDATE, SAM_NO SAMPLE_NO, 
                          TYPE, valid_user, 
                          CASE WHEN SZ_63 < 1 THEN 1 ELSE cast(SZ_63 AS decimal(3)) END SZ_63, 
                          CASE WHEN SZ_125 < 1 THEN 1 ELSE cast(SZ_125 AS decimal(3)) 
                          END SZ_125, CASE WHEN SZ_250 < 1 THEN 1 ELSE cast(SZ_250 AS decimal(3))
                           END SZ_250, CASE WHEN SZ_500 < 1 THEN 1 ELSE cast(SZ_500 AS decimal(3))
                           END SZ_500, 
                          CASE WHEN SZ_1000 < 1 THEN 1 ELSE cast(SZ_1000 AS decimal(3)) 
                          END SZ_1000, 
                          CASE WHEN SZ_2000 < 1 THEN 1 ELSE cast(SZ_2000 AS decimal(3)) 
                          END SZ_2000, 
                          CASE WHEN SZ_4000 < 1 THEN 1 ELSE cast(SZ_4000 AS decimal(3)) 
                          END SZ_4000, cast(EH AS decimal(5)) 
                          AS  EH, CASE WHEN TS < 0.1 THEN '<' ELSE L_TS END L_TS, 
                          CASE WHEN TS < 0.1 THEN 0.1 ELSE cast(TS AS decimal(11, 1)) END TS, 
                          CASE WHEN TVS < 0.1 THEN '<' ELSE L_TVS END L_TVS, 
                          CASE WHEN TVS < 0.1 THEN 0.1 ELSE cast(TVS AS decimal(11, 1)) END TVS, 
                          CASE WHEN MSM_DWR < 0.01 THEN 0.01 ELSE cast(MSM_DWR AS decimal(7,
                           2)) END MSM_DWR, CASE WHEN COD < 2 THEN '<' ELSE L_COD END L_COD, 
                          CASE WHEN COD < 2 THEN 2 ELSE cast(COD AS decimal(9)) END COD, 
                          CASE WHEN TC < 0.1 THEN '<' ELSE L_TC END L_TC, 
                          CASE WHEN TC < 0.1 THEN 0.1 ELSE cast(TC AS decimal(11, 1)) END TC, 
                          CASE WHEN NH < 0.05 THEN '<' ELSE L_NH END L_NH, 
                          CASE WHEN NH < 0.05 THEN 0.05 ELSE cast(NH AS decimal(12, 2)) END NH, 
                          CASE WHEN TKN < 0.5 THEN '<' ELSE L_TKN END L_TKN, 
                          CASE WHEN TKN < 0.5 THEN 0.5 ELSE cast(TKN AS decimal(11, 1)) END TKN, 
                          CASE WHEN TP < 0.2 THEN '<' ELSE L_TP END L_TP, 
                          CASE WHEN TP < 0.2 THEN 0.2 ELSE cast(TP AS decimal(11, 1)) END TP, 
                          CASE WHEN INS < 0.2 THEN '<' ELSE L_INS END L_INS, 
                          CASE WHEN INS < 0.2 THEN 0.2 ELSE cast(INS AS decimal(11, 1)) END INS, 
                          CASE WHEN CN < 0.1 THEN '<' ELSE L_CN END L_CN, 
                          CASE WHEN CN < 0.1 THEN 0.1 ELSE cast(CN AS decimal(11, 1)) END CN, 
                          CASE WHEN AL < 1 THEN '<' ELSE L_AL END L_AL, 
                          CASE WHEN AL < 1 THEN 1 ELSE cast(AL AS decimal(9)) END AL, 
                          CASE WHEN ARS < 0.1 THEN '<' ELSE L_ARS END L_ARS, 
                          CASE WHEN ARS < 0.1 THEN 0.1 ELSE cast(ARS AS decimal(11, 1)) END ARS, 
                          CASE WHEN BA < 0.2 THEN '<' ELSE L_BA END L_BA, 
                          CASE WHEN BA < 0.2 THEN 0.2 ELSE cast(BA AS decimal(11, 1)) END BA, 
                          CASE WHEN B < 5 THEN '<' ELSE L_B END L_B, 
                          CASE WHEN B < 5 THEN 5 ELSE cast(B AS decimal(9)) END B, 
                          CASE WHEN CD < 0.1 THEN '<' ELSE L_CD END L_CD, 
                          CASE WHEN CD < 0.1 THEN 0.1 ELSE cast(CD AS decimal(11, 1)) END CD, 
                          CASE WHEN CR < 0.2 THEN '<' ELSE L_CR END L_CR, 
                          CASE WHEN CR < 0.2 THEN 0.2 ELSE cast(CR AS decimal(11, 1)) END CR, 
                          CASE WHEN CU < 0.2 THEN '<' ELSE L_CU END L_CU, 
                          CASE WHEN CU < 0.2 THEN 0.2 ELSE cast(CU AS decimal(11, 1)) END CU, 
                          CASE WHEN FE < 5 THEN '<' ELSE L_FE END L_FE, 
                          CASE WHEN FE < 5 THEN 5 ELSE cast(FE AS decimal(9)) END FE, 
                          CASE WHEN PB < 0.2 THEN '<' ELSE L_PB END L_PB, 
                          CASE WHEN PB < 0.2 THEN 0.2 ELSE cast(PB AS decimal(11, 1)) END PB, 
                          CASE WHEN MN < 1 THEN '<' ELSE L_MN END L_MN, 
                          CASE WHEN MN < 1 THEN 1 ELSE cast(MN AS decimal(9)) END MN, 
                          CASE WHEN HG < 0.05 THEN '<' ELSE L_HG END L_HG, 
                          CASE WHEN HG < 0.05 THEN 0.05 ELSE cast(HG AS decimal(12, 2)) END HG, 
                          CASE WHEN NI < 0.2 THEN '<' ELSE L_NI END L_NI, 
                          CASE WHEN NI < 0.2 THEN 0.2 ELSE cast(NI AS decimal(11, 1)) END NI, 
                          CASE WHEN AG < 0.2 THEN '<' ELSE L_AG END L_AG, 
                          CASE WHEN AG < 0.2 THEN 0.2 ELSE cast(AG AS decimal(11, 1)) END AG, 
                          CASE WHEN V < 0.1 THEN '<' ELSE L_V END L_V, 
                          CASE WHEN V < 0.1 THEN 0.1 ELSE cast(V AS decimal(11, 1)) END V, 
                          CASE WHEN ZN < 0.2 THEN '<' ELSE L_ZN END L_ZN, 
                          CASE WHEN ZN < 0.2 THEN 0.2 ELSE cast(ZN AS decimal(11, 1)) END ZN, 
                          CASE WHEN PCB < 2 THEN '<' ELSE L_PCB END L_PCB, 
                          CASE WHEN PCB < 2 THEN 2 ELSE cast(PCB AS decimal(9)) END PCB, 
                          CASE WHEN PCB8 < 2 THEN '<' ELSE L_PCB8 END L_PCB8, 
                          CASE WHEN PCB8 < 2 THEN 2 ELSE cast(PCB8 AS decimal(9)) END PCB8, 
                          CASE WHEN PCB18 < 2 THEN '<' ELSE L_PCB18 END L_PCB18, 
                          CASE WHEN PCB18 < 2 THEN 2 ELSE cast(PCB18 AS decimal(9)) END PCB18, 
                          CASE WHEN PCB28 < 2 THEN '<' ELSE L_PCB28 END L_PCB28, 
                          CASE WHEN PCB28 < 2 THEN 2 ELSE cast(PCB28 AS decimal(9)) END PCB28, 
                          CASE WHEN PCB44 < 2 THEN '<' ELSE L_PCB44 END L_PCB44, 
                          CASE WHEN PCB44 < 2 THEN 2 ELSE cast(PCB44 AS decimal(9)) END PCB44, 
                          CASE WHEN PCB52 < 2 THEN '<' ELSE L_PCB52 END L_PCB52, 
                          CASE WHEN PCB52 < 2 THEN 2 ELSE cast(PCB52 AS decimal(9)) END PCB52, 
                          CASE WHEN PCB66 < 2 THEN '<' ELSE L_PCB66 END L_PCB66, 
                          CASE WHEN PCB66 < 2 THEN 2 ELSE cast(PCB66 AS decimal(9)) END PCB66, 
                          CASE WHEN PCB77 < 2 THEN '<' ELSE L_PCB77 END L_PCB77, 
                          CASE WHEN PCB77 < 2 THEN 2 ELSE cast(PCB77 AS decimal(9)) END PCB77, 
                          CASE WHEN PCB101 < 2 THEN '<' ELSE L_PCB101 END L_PCB101, 
                          CASE WHEN PCB101 < 2 THEN 2 ELSE cast(PCB101 AS decimal(9)) 
                          END PCB101, 
                          CASE WHEN PCB105 < 2 THEN '<' ELSE L_PCB105 END L_PCB105, 
                          CASE WHEN PCB105 < 2 THEN 2 ELSE cast(PCB105 AS decimal(9)) 
                          END PCB105, 
                          CASE WHEN PCB118 < 2 THEN '<' ELSE L_PCB118 END L_PCB118, 
                          CASE WHEN PCB118 < 2 THEN 2 ELSE cast(PCB118 AS decimal(9)) 
                          END PCB118, 
                          CASE WHEN PCB126 < 2 THEN '<' ELSE L_PCB126 END L_PCB126, 
                          CASE WHEN PCB126 < 2 THEN 2 ELSE cast(PCB126 AS decimal(9)) 
                          END PCB126, 
                          CASE WHEN PCB128 < 2 THEN '<' ELSE L_PCB128 END L_PCB128, 
                          CASE WHEN PCB128 < 2 THEN 2 ELSE cast(PCB128 AS decimal(9)) 
                          END PCB128, 
                          CASE WHEN PCB138 < 2 THEN '<' ELSE L_PCB138 END L_PCB138, 
                          CASE WHEN PCB138 < 2 THEN 2 ELSE cast(PCB138 AS decimal(9)) 
                          END PCB138, 
                          CASE WHEN PCB153 < 2 THEN '<' ELSE L_PCB153 END L_PCB153, 
                          CASE WHEN PCB153 < 2 THEN 2 ELSE cast(PCB153 AS decimal(9)) 
                          END PCB153, 
                          CASE WHEN PCB169 < 2 THEN '<' ELSE L_PCB169 END L_PCB169, 
                          CASE WHEN PCB169 < 2 THEN 2 ELSE cast(PCB169 AS decimal(9)) 
                          END PCB169, 
                          CASE WHEN PCB170 < 2 THEN '<' ELSE L_PCB170 END L_PCB170, 
                          CASE WHEN PCB170 < 2 THEN 2 ELSE cast(PCB170 AS decimal(9)) 
                          END PCB170, 
                          CASE WHEN PCB180 < 2 THEN '<' ELSE L_PCB180 END L_PCB180, 
                          CASE WHEN PCB180 < 2 THEN 2 ELSE cast(PCB180 AS decimal(9)) 
                          END PCB180, 
                          CASE WHEN PCB187 < 2 THEN '<' ELSE L_PCB187 END L_PCB187, 
                          CASE WHEN PCB187 < 2 THEN 2 ELSE cast(PCB187 AS decimal(9)) 
                          END PCB187, CASE WHEN ACEN < 50 THEN '<' ELSE L_ACEN END L_ACEN, 
                          CASE WHEN ACEN < 50 THEN 50 ELSE cast(ACEN AS decimal(9)) END ACEN, 
                          CASE WHEN ACPH < 50 THEN '<' ELSE L_ACPH END L_ACPH, 
                          CASE WHEN ACPH < 50 THEN 50 ELSE cast(ACPH AS decimal(9)) END ACPH, 
                          CASE WHEN NAPH < 60 THEN '<' ELSE L_NAPH END L_NAPH, 
                          CASE WHEN NAPH < 60 THEN 60 ELSE cast(NAPH AS decimal(9)) END NAPH, 
                          CASE WHEN FLUO < 10 THEN '<' ELSE L_FLUO END L_FLUO, 
                          CASE WHEN FLUO < 10 THEN 10 ELSE cast(FLUO AS decimal(9)) END FLUO, 
                          CASE WHEN PHEN < 5 THEN '<' ELSE L_PHEN END L_PHEN, 
                          CASE WHEN PHEN < 5 THEN 5 ELSE cast(PHEN AS decimal(9)) END PHEN, 
                          CASE WHEN ANTH < 5 THEN '<' ELSE L_ANTH END L_ANTH, 
                          CASE WHEN ANTH < 5 THEN 5 ELSE cast(ANTH AS decimal(9)) END ANTH, 
                          CASE WHEN FLUT < 5 THEN '<' ELSE L_FLUT END L_FLUT, 
                          CASE WHEN FLUT < 5 THEN 5 ELSE cast(FLUT AS decimal(9)) END FLUT, 
                          CASE WHEN PYRE < 5 THEN '<' ELSE L_PYRE END L_PYRE, 
                          CASE WHEN PYRE < 5 THEN 5 ELSE cast(PYRE AS decimal(9)) END PYRE, 
                          CASE WHEN BANT < 3 THEN '<' ELSE L_BANT END L_BANT, 
                          CASE WHEN BANT < 3 THEN 3 ELSE cast(BANT AS decimal(9)) END BANT, 
                          CASE WHEN CHRY < 5 THEN '<' ELSE L_CHRY END L_CHRY, 
                          CASE WHEN CHRY < 5 THEN 5 ELSE cast(CHRY AS decimal(9)) END CHRY, 
                          CASE WHEN BBFL < 1 THEN '<' ELSE L_BBFL END L_BBFL, 
                          CASE WHEN BBFL < 1 THEN 1 ELSE cast(BBFL AS decimal(9)) END BBFL, 
                          CASE WHEN BKFL < 1 THEN '<' ELSE L_BKFL END L_BKFL, 
                          CASE WHEN BKFL < 1 THEN 1 ELSE cast(BKFL AS decimal(9)) END BKFL, 
                          CASE WHEN BAPY < 1 THEN '<' ELSE L_BAPY END L_BAPY, 
                          CASE WHEN BAPY < 1 THEN 1 ELSE cast(BAPY AS decimal(9)) END BAPY, 
                          CASE WHEN DAAN < 5 THEN '<' ELSE L_DAAN END L_DAAN, 
                          CASE WHEN DAAN < 5 THEN 5 ELSE cast(DAAN AS decimal(9)) END DAAN, 
                          CASE WHEN BGPE < 1 THEN '<' ELSE L_BGPE END L_BGPE, 
                          CASE WHEN BGPE < 1 THEN 1 ELSE cast(BGPE AS decimal(9)) END BGPE, 
                          CASE WHEN INPY < 5 THEN '<' ELSE L_INPY END L_INPY, 
                          CASE WHEN INPY < 5 THEN 5 ELSE cast(INPY AS decimal(9)) END INPY, 
                          SUM18PCB
FROM             WPG.MARINE_SEDIMENT_X1
WHERE         view_no >= 3 AND MDATE <= GETDATE();


-- WPG.MARINE_SEDIMENT_3B source

CREATE VIEW WPG.MARINE_SEDIMENT_3B
AS
SELECT         [ZONE] AS [Water Control Zone], STATION, MDATE AS [Sampling Date], 
                          SAMPLE_NO AS [Sample Number], valid_user, 'Bulk' AS [Sample Type], 
                          CAST(SZ_63 AS nvarchar(10)) AS [Particle Size Fraction <63 micrometer (%w/w)], 
                          CAST(SZ_125 AS nvarchar(10)) 
                          AS [Particle Size Fraction <125 micrometer (%w/w)], 
                          CAST(SZ_250 AS nvarchar(10)) 
                          AS [Particle Size Fraction <250 micrometer (%w/w)], 
                          CAST(SZ_500 AS nvarchar(10)) 
                          AS [Particle Size Fraction <500 micrometer (%w/w)], 
                          CAST(SZ_1000 AS nvarchar(10)) 
                          AS [Particle Size Fraction <1000 micrometer (%w/w)], 
                          CAST(SZ_2000 AS nvarchar(10)) 
                          AS [Particle Size Fraction <2000 micrometer (%w/w)], 
                          CAST(SZ_4000 AS nvarchar(10)) 
                          AS [Particle Size Fraction <4000 micrometer (%w/w)], CAST(EH AS nvarchar(10)) 
                          AS [Electrochemical Potential (mV)], CAST(ISNULL(L_TS, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(TS AS nvarchar), 
                          '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [Total Solid (%w/w)], 
                          CAST(ISNULL(L_TVS, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(TVS AS nvarchar),
                           '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) 
                          AS [Total Volatile Solids (TVS)(%TS)], 
                          CAST(REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(MSM_DWR AS
                           nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(7)) AS [Dry Wet Ratio], 
                          CAST(ISNULL(L_COD, '') + CAST(COD AS nvarchar) AS nvarchar(13)) 
                          AS [Chemical Oxygen Demand (COD)(mg/kg)], CAST(ISNULL(L_TC, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(TC AS nvarchar), 
                          '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [Total Carbon (TC)(%w/w)], 
                          CAST(ISNULL(L_NH, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(NH AS nvarchar),
                           '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) 
                          AS [Ammonia Nitrogen (NH4-N)(mg/kg)], CAST(ISNULL(L_TKN, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(TKN AS nvarchar),
                           '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) 
                          AS [Total Kjeldahl Nitrogen (TKN)(mg/kg)], CAST(ISNULL(L_TP, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(TP AS nvarchar), 
                          '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [Total Phosphorus (mg/kg)], 
                          CAST(ISNULL(L_INS, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(INS AS nvarchar),
                           '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [Total Sulphide (mg/kg)], 
                          CAST(ISNULL(L_CN, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(CN AS nvarchar),
                           '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [Total Cyanide (mg/kg)], 
                          CAST(ISNULL(L_AL, '') + CAST(AL AS nvarchar) AS nvarchar(11)) 
                          AS [Aluminium (Al)(mg/kg)], CAST(ISNULL(L_ARS, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(ARS AS nvarchar),
                           '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [Arsenic (As)(mg/kg)], 
                          CAST(ISNULL(L_BA, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(BA AS nvarchar), 
                          '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [Barium (Ba)(mg/kg)], 
                          CAST(ISNULL(L_B, '') + CAST(B AS nvarchar) AS nvarchar(11)) 
                          AS [Boron (B)(mg/kg)], CAST(ISNULL(L_CD, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(CD AS nvarchar),
                           '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [Cadmium (Cd)(mg/kg)], 
                          CAST(ISNULL(L_CR, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(CR AS nvarchar),
                           '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [Chromium (Cr)(mg/kg)], 
                          CAST(ISNULL(L_CU, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(CU AS nvarchar),
                           '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [Copper (Cu)(mg/kg)], 
                          CAST(ISNULL(L_FE, '') + CAST(FE AS nvarchar) AS nvarchar(11)) 
                          AS [Iron (Fe)(mg/kg)], CAST(ISNULL(L_PB, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(PB AS nvarchar),
                           '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [Lead (Pb)(mg/kg)], 
                          CAST(ISNULL(L_MN, '') + CAST(MN AS nvarchar) AS nvarchar(11)) 
                          AS [Manganese (Mn)(mg/kg)], CAST(ISNULL(L_HG, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(HG AS nvarchar),
                           '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [Mercury (Hg)(mg/kg)], 
                          CAST(ISNULL(L_NI, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(NI AS nvarchar), 
                          '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [Nickel (Ni)(mg/kg)], 
                          CAST(ISNULL(L_AG, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(AG AS nvarchar), 
                          '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [Silver (Ag)(mg/kg)], 
                          CAST(ISNULL(L_V, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(V AS nvarchar), 
                          '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [Vanadium (V)(mg/kg)], 
                          CAST(ISNULL(L_ZN, '') 
                          + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(ZN AS nvarchar),
                           '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [Zinc (Zn)(mg/kg)], 
                          CAST(ISNULL(L_PCB, '') + CAST(PCB AS nvarchar) AS nvarchar(12)) 
                          AS [PCB (μg/kg)], CAST(ISNULL(L_PCB8, '') + CAST(PCB8 AS nvarchar) 
                          AS nvarchar(11)) AS [PCB8 (μg/kg)], CAST(ISNULL(L_PCB18, '') 
                          + CAST(PCB18 AS nvarchar) AS nvarchar(11)) AS [PCB18 (μg/kg)], 
                          CAST(ISNULL(L_PCB28, '') + CAST(PCB28 AS nvarchar) AS nvarchar(11)) 
                          AS [PCB28 (μg/kg)], CAST(ISNULL(L_PCB44, '') + CAST(PCB44 AS nvarchar) 
                          AS nvarchar(11)) AS [PCB44 (μg/kg)], CAST(ISNULL(L_PCB52, '') 
                          + CAST(PCB52 AS nvarchar) AS nvarchar(11)) AS [PCB52 (μg/kg)], 
                          CAST(ISNULL(L_PCB66, '') + CAST(PCB66 AS nvarchar) AS nvarchar(11)) 
                          AS [PCB66 (μg/kg)], CAST(ISNULL(L_PCB77, '') + CAST(PCB77 AS nvarchar) 
                          AS nvarchar(11)) AS [PCB77 (μg/kg)], CAST(ISNULL(L_PCB101, '') 
                          + CAST(PCB101 AS nvarchar) AS nvarchar(11)) AS [PCB101 (μg/kg)], 
                          CAST(ISNULL(L_PCB105, '') + CAST(PCB105 AS nvarchar) AS nvarchar(11)) 
                          AS [PCB105 (μg/kg)], CAST(ISNULL(L_PCB118, '') + CAST(PCB118 AS nvarchar) 
                          AS nvarchar(11)) AS [PCB118 (μg/kg)], CAST(ISNULL(L_PCB126, '') 
                          + CAST(PCB126 AS nvarchar) AS nvarchar(11)) AS [PCB126 (μg/kg)], 
                          CAST(ISNULL(L_PCB128, '') + CAST(PCB128 AS nvarchar) AS nvarchar(11)) 
                          AS [PCB128 (μg/kg)], CAST(ISNULL(L_PCB138, '') + CAST(PCB138 AS nvarchar) 
                          AS nvarchar(11)) AS [PCB138 (μg/kg)], CAST(ISNULL(L_PCB153, '') 
                          + CAST(PCB153 AS nvarchar) AS nvarchar(11)) AS [PCB153 (μg/kg)], 
                          CAST(ISNULL(L_PCB169, '') + CAST(PCB169 AS nvarchar) AS nvarchar(11)) 
                          AS [PCB169 (μg/kg)], CAST(ISNULL(L_PCB170, '') + CAST(PCB170 AS nvarchar) 
                          AS nvarchar(11)) AS [PCB170 (μg/kg)], CAST(ISNULL(L_PCB180, '') 
                          + CAST(PCB180 AS nvarchar) AS nvarchar(11)) AS [PCB180 (μg/kg)], 
                          CAST(ISNULL(L_PCB187, '') + CAST(PCB187 AS nvarchar) AS nvarchar(11)) 
                          AS [PCB187 (μg/kg)], CAST(ISNULL(L_ACEN, '') + CAST(ACEN AS nvarchar) 
                          AS nvarchar(11)) AS [Acenaphthene (μg/kg)], CAST(ISNULL(L_ACPH, '') 
                          + CAST(ACPH AS nvarchar) AS nvarchar(11)) AS [Acenaphthylene (μg/kg)], 
                          CAST(ISNULL(L_NAPH, '') + CAST(NAPH AS nvarchar) AS nvarchar(11)) 
                          AS [Naphthalene (μg/kg)], CAST(ISNULL(L_FLUO, '') + CAST(FLUO AS nvarchar) 
                          AS nvarchar(11)) AS [Fluorene (μg/kg)], CAST(ISNULL(L_PHEN, '') 
                          + CAST(PHEN AS nvarchar) AS nvarchar(11)) AS [Phenanthrene (μg/kg)], 
                          CAST(ISNULL(L_ANTH, '') + CAST(ANTH AS nvarchar) AS nvarchar(11)) 
                          AS [Anthracene (μg/kg)], CAST(ISNULL(L_FLUT, '') + CAST(FLUT AS nvarchar) 
                          AS nvarchar(11)) AS [Fluoranthene (μg/kg)], CAST(ISNULL(L_PYRE, '') 
                          + CAST(PYRE AS nvarchar) AS nvarchar(11)) AS [Pyrene (μg/kg)], 
                          CAST(ISNULL(L_BANT, '') + CAST(BANT AS nvarchar) AS nvarchar(11)) 
                          AS [Benzo(a)anthracene (μg/kg)], CAST(ISNULL(L_CHRY, '') 
                          + CAST(CHRY AS nvarchar) AS nvarchar(11)) AS [Chrysene (μg/kg)], 
                          CAST(ISNULL(L_BBFL, '') + CAST(BBFL AS nvarchar) AS nvarchar(11)) 
                          AS [Benzo(b)fluoranthene (μg/kg)], CAST(ISNULL(L_BKFL, '') 
                          + CAST(BKFL AS nvarchar) AS nvarchar(11)) AS [Benzo(k)fluoranthene (μg/kg)], 
                          CAST(ISNULL(L_BAPY, '') + CAST(BAPY AS nvarchar) AS nvarchar(11)) 
                          AS [Benzo(a)pyrene (μg/kg)], CAST(ISNULL(L_DAAN, '') 
                          + CAST(DAAN AS nvarchar) AS nvarchar(11)) 
                          AS [Dibenzo(ah)anthracene (μg/kg)], CAST(ISNULL(L_BGPE, '') 
                          + CAST(BGPE AS nvarchar) AS nvarchar(11)) AS [Benzo(ghi)perylene (μg/kg)], 
                          CAST(ISNULL(L_INPY, '') + CAST(INPY AS nvarchar) AS nvarchar(11)) 
                          AS [Indeno(123-cd)pyrene (μg/kg)], SUM18PCB
FROM             WPG.MARINE_SEDIMENT_3A;


-- WPG.MARINE_SEDIMENT_3C source

CREATE VIEW WPG.MARINE_SEDIMENT_3C
AS
SELECT          Z.CHINESE_NAME AS 水質管制區, WPG.MARINE_SEDIMENT_3A.STATION AS 監測站, 
                            WPG.MARINE_SEDIMENT_3A.MDATE AS 日期, WPG.MARINE_SEDIMENT_3A.SAMPLE_NO AS 樣本, 
                            N'未經篩選的沈積物' AS 樣本種類, CAST(WPG.MARINE_SEDIMENT_3A.SZ_63 AS nvarchar(10)) 
                            AS [粒度小於63微米百分率 (% w/w)], CAST(WPG.MARINE_SEDIMENT_3A.SZ_125 AS nvarchar(10)) 
                            AS [粒度小於125微米百分率 (% w/w)], CAST(WPG.MARINE_SEDIMENT_3A.SZ_250 AS nvarchar(10)) 
                            AS [粒度小於250微米百分率 (% w/w)], CAST(WPG.MARINE_SEDIMENT_3A.SZ_500 AS nvarchar(10)) 
                            AS [粒度小於500微米百分率 (% w/w)], CAST(WPG.MARINE_SEDIMENT_3A.SZ_1000 AS nvarchar(10)) 
                            AS [粒度小於1000微米百分率 (% w/w)], CAST(WPG.MARINE_SEDIMENT_3A.SZ_2000 AS nvarchar(10)) 
                            AS [粒度小於2000微米百分率 (% w/w)], CAST(WPG.MARINE_SEDIMENT_3A.SZ_4000 AS nvarchar(10)) 
                            AS [粒度小於4000微米百分率 (% w/w)], CAST(WPG.MARINE_SEDIMENT_3A.EH AS nvarchar(10)) AS [電化勢 (毫伏特)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_TS, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.TS AS nvarchar), '0', 
                            ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [固體總量百分率(% w/w)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_TVS, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.TVS AS nvarchar), '0', 
                            ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [揮發性固體百分率 (% TS)], 
                            CAST(REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.MSM_DWR AS nvarchar),
                             '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(7)) AS 乾濕重比例, CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_COD, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.COD AS nvarchar) AS nvarchar(13)) AS [化學需氧量 (毫克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_TC, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.TC AS nvarchar), '0', 
                            ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [總碳 (%w/w)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_NH, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.NH AS nvarchar), '0', 
                            ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [氨氮 (毫克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_TKN, 
                            N'') + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.TKN AS nvarchar), 
                            '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [凱氏氮 (毫克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_TP, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.TP AS nvarchar), '0', 
                            ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [總磷 (毫克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_INS, 
                            N'') + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.INS AS nvarchar), 
                            '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [硫化物 (毫克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_CN, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.CN AS nvarchar), '0', 
                            ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [氰化物 (毫克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_AL, 
                            N'') + CAST(WPG.MARINE_SEDIMENT_3A.AL AS nvarchar) AS nvarchar(11)) AS [鋁 (毫克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_ARS, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.ARS AS nvarchar), '0', 
                            ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [砷 (毫克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_BA, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.BA AS nvarchar), '0', 
                            ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [鋇 (毫克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_B, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.B AS nvarchar) AS nvarchar(11)) AS [硼 (毫克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_CD, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.CD AS nvarchar), '0', 
                            ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [鎘 (毫克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_CR, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.CR AS nvarchar), '0', 
                            ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [鉻 (毫克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_CU, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.CU AS nvarchar), '0', 
                            ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [銅 (毫克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_FE, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.FE AS nvarchar) AS nvarchar(11)) AS [鐵 (毫克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PB, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.PB AS nvarchar), '0', 
                            ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [鉛 (毫克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_MN, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.MN AS nvarchar) AS nvarchar(11)) AS [錳 (毫克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_HG, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.HG AS nvarchar), '0', 
                            ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [汞 (毫克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_NI, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.NI AS nvarchar), '0', ' ')),
                             ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [鎳 (毫克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_AG, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.AG AS nvarchar), '0', 
                            ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [銀 (毫克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_V, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.V AS nvarchar), '0', ' ')), 
                            ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [釩 (毫克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_ZN, N'') 
                            + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(WPG.MARINE_SEDIMENT_3A.ZN AS nvarchar), '0', 
                            ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(13)) AS [鋅 (毫克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB, 
                            N'') + CAST(WPG.MARINE_SEDIMENT_3A.PCB AS nvarchar) AS nvarchar(12)) AS [總多氯聯苯 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB8, N'') + CAST(WPG.MARINE_SEDIMENT_3A.PCB8 AS nvarchar) 
                            AS nvarchar(11)) AS [多氯聯苯 8 (微克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB18, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.PCB18 AS nvarchar) AS nvarchar(11)) AS [多氯聯苯 18 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB28, N'') + CAST(WPG.MARINE_SEDIMENT_3A.PCB28 AS nvarchar) 
                            AS nvarchar(11)) AS [多氯聯苯 28 (微克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB44, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.PCB44 AS nvarchar) AS nvarchar(11)) AS [多氯聯苯 44 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB52, N'') + CAST(WPG.MARINE_SEDIMENT_3A.PCB52 AS nvarchar) 
                            AS nvarchar(11)) AS [多氯聯苯 52 (微克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB66, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.PCB66 AS nvarchar) AS nvarchar(11)) AS [多氯聯苯 66 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB77, N'') + CAST(WPG.MARINE_SEDIMENT_3A.PCB77 AS nvarchar) 
                            AS nvarchar(11)) AS [多氯聯苯 77 (微克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB101, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.PCB101 AS nvarchar) AS nvarchar(11)) AS [多氯聯苯 101 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB105, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.PCB105 AS nvarchar) AS nvarchar(11)) AS [多氯聯苯 105 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB118, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.PCB118 AS nvarchar) AS nvarchar(11)) AS [多氯聯苯 118 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB126, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.PCB126 AS nvarchar) AS nvarchar(11)) AS [多氯聯苯 126 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB128, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.PCB128 AS nvarchar) AS nvarchar(11)) AS [多氯聯苯 128 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB138, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.PCB138 AS nvarchar) AS nvarchar(11)) AS [多氯聯苯 138 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB153, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.PCB153 AS nvarchar) AS nvarchar(11)) AS [多氯聯苯 153 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB169, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.PCB169 AS nvarchar) AS nvarchar(11)) AS [多氯聯苯 169 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB170, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.PCB170 AS nvarchar) AS nvarchar(11)) AS [多氯聯苯 170 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB180, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.PCB180 AS nvarchar) AS nvarchar(11)) AS [多氯聯苯 180 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PCB187, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.PCB187 AS nvarchar) AS nvarchar(11)) AS [多氯聯苯 187 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_ACEN, N'') + CAST(WPG.MARINE_SEDIMENT_3A.ACEN AS nvarchar) 
                            AS nvarchar(11)) AS [二氫苊 (微克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_ACPH, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.ACPH AS nvarchar) AS nvarchar(11)) AS [苊 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_NAPH, N'') + CAST(WPG.MARINE_SEDIMENT_3A.NAPH AS nvarchar) 
                            AS nvarchar(11)) AS [萘 (微克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_FLUO, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.FLUO AS nvarchar) AS nvarchar(11)) AS [芴 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PHEN, N'') + CAST(WPG.MARINE_SEDIMENT_3A.PHEN AS nvarchar) 
                            AS nvarchar(11)) AS [菲 (微克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_ANTH, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.ANTH AS nvarchar) AS nvarchar(11)) AS [蒽 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_FLUT, N'') + CAST(WPG.MARINE_SEDIMENT_3A.FLUT AS nvarchar) 
                            AS nvarchar(11)) AS [熒蒽 (微克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_PYRE, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.PYRE AS nvarchar) AS nvarchar(11)) AS [芘 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_BANT, N'') + CAST(WPG.MARINE_SEDIMENT_3A.BANT AS nvarchar) 
                            AS nvarchar(11)) AS [苯 (a) 蒽 (微克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_CHRY, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.CHRY AS nvarchar) AS nvarchar(11)) AS ["卄" + "屈" (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_BBFL, N'') + CAST(WPG.MARINE_SEDIMENT_3A.BBFL AS nvarchar) 
                            AS nvarchar(11)) AS [苯並 (b) 熒蒽 (微克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_BKFL, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.BKFL AS nvarchar) AS nvarchar(11)) AS [苯並 (k) 熒蒽 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_BAPY, N'') + CAST(WPG.MARINE_SEDIMENT_3A.BAPY AS nvarchar) 
                            AS nvarchar(11)) AS [苯並 (a) 芘 (微克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_DAAN, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.DAAN AS nvarchar) AS nvarchar(11)) AS [二苯並 (a h) 蒽 (微克/千克)], 
                            CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_BGPE, N'') + CAST(WPG.MARINE_SEDIMENT_3A.BGPE AS nvarchar) 
                            AS nvarchar(11)) AS [苯並 (g h i) 苝 (微克/千克)], CAST(ISNULL(WPG.MARINE_SEDIMENT_3A.L_INPY, N'') 
                            + CAST(WPG.MARINE_SEDIMENT_3A.INPY AS nvarchar) AS nvarchar(11)) AS [茚 (1 2 3-cd)芘 (微克/千克)]
FROM              WPG.MARINE_SEDIMENT_3A INNER JOIN
                            WPG.TEN_ZONE AS Z ON WPG.MARINE_SEDIMENT_3A.ZONE = Z.ZONE_NAME;


-- WPG.MARINE_SEDIMENT_ACC_AVG source

CREATE VIEW WPG.MARINE_SEDIMENT_ACC_AVG AS
SELECT	ZONE,			
	WCZ,			
	SUBZONE,			
	STATION,			
		YR,		
		TOTAL,		
	TYPE,			
			SZ_63	SZ_63_AVG,
			SZ_125	SZ_125_AVG,
			SZ_250	SZ_250_AVG,
			SZ_500	SZ_500_AVG,
			SZ_1000	SZ_1000_AVG,
			SZ_2000	SZ_2000_AVG,
			SZ_4000	SZ_4000_AVG,
			EH	EH_AVG,
	CASE WHEN L_TS_CNT =0 THEN NULL ELSE '<' END	L_TS_AVG,	TS	TS_AVG,
	CASE WHEN L_TVS_CNT =0 THEN NULL ELSE '<' END	L_TVS_AVG,	TVS	TVS_AVG,
			MSN_DWR	MSN_DWR_AVG,
			MSM_DWR	MSM_DWR_AVG,
			MSO_DWR	MSO_DWR_AVG,
	CASE WHEN L_SG_CNT =0 THEN NULL ELSE '<' END	L_SG_AVG,	SG	SG_AVG,
	CASE WHEN L_PH_CNT =0 THEN NULL ELSE '<' END	L_PH_AVG,	PH	PH_AVG,
	CASE WHEN L_COD_CNT =0 THEN NULL ELSE '<' END	L_COD_AVG,	COD	COD_AVG,
	CASE WHEN L_TIC_CNT =0 THEN NULL ELSE '<' END	L_TIC_AVG,	TIC	TIC_AVG,
	CASE WHEN L_TOC_CNT =0 THEN NULL ELSE '<' END	L_TOC_AVG,	TOC	TOC_AVG,
	CASE WHEN L_TC_CNT =0 THEN NULL ELSE '<' END	L_TC_AVG,	TC	TC_AVG,
	CASE WHEN L_NH_CNT =0 THEN NULL ELSE '<' END	L_NH_AVG,	NH	NH_AVG,
	CASE WHEN L_TKN_CNT =0 THEN NULL ELSE '<' END	L_TKN_AVG,	TKN	TKN_AVG,
	CASE WHEN L_TP_CNT =0 THEN NULL ELSE '<' END	L_TP_AVG,	TP	TP_AVG,
	CASE WHEN L_INS_CNT =0 THEN NULL ELSE '<' END	L_INS_AVG,	INS	INS_AVG,
	CASE WHEN L_CN_CNT =0 THEN NULL ELSE '<' END	L_CN_AVG,	CN	CN_AVG,
	CASE WHEN L_AL_CNT =0 THEN NULL ELSE '<' END	L_AL_AVG,	AL	AL_AVG,
	CASE WHEN L_AG_CNT =0 THEN NULL ELSE '<' END	L_AG_AVG,	AG	AG_AVG,
	CASE WHEN L_ARS_CNT =0 THEN NULL ELSE '<' END	L_ARS_AVG,	ARS	ARS_AVG,
	CASE WHEN L_BA_CNT =0 THEN NULL ELSE '<' END	L_BA_AVG,	BA	BA_AVG,
	CASE WHEN L_BE_CNT =0 THEN NULL ELSE '<' END	L_BE_AVG,	BE	BE_AVG,
	CASE WHEN L_B_CNT =0 THEN NULL ELSE '<' END	L_B_AVG,	B	B_AVG,
	CASE WHEN L_CD_CNT =0 THEN NULL ELSE '<' END	L_CD_AVG,	CD	CD_AVG,
	CASE WHEN L_CO_CNT =0 THEN NULL ELSE '<' END	L_CO_AVG,	CO	CO_AVG,
	CASE WHEN L_CR_CNT =0 THEN NULL ELSE '<' END	L_CR_AVG,	CR	CR_AVG,
	CASE WHEN L_CU_CNT =0 THEN NULL ELSE '<' END	L_CU_AVG,	CU	CU_AVG,
	CASE WHEN L_FE_CNT =0 THEN NULL ELSE '<' END	L_FE_AVG,	FE	FE_AVG,
	CASE WHEN L_HG_CNT =0 THEN NULL ELSE '<' END	L_HG_AVG,	HG	HG_AVG,
	CASE WHEN L_MN_CNT =0 THEN NULL ELSE '<' END	L_MN_AVG,	MN	MN_AVG,
	CASE WHEN L_MO_CNT =0 THEN NULL ELSE '<' END	L_MO_AVG,	MO	MO_AVG,
	CASE WHEN L_NI_CNT =0 THEN NULL ELSE '<' END	L_NI_AVG,	NI	NI_AVG,
	CASE WHEN L_PB_CNT =0 THEN NULL ELSE '<' END	L_PB_AVG,	PB	PB_AVG,
	CASE WHEN L_SB_CNT =0 THEN NULL ELSE '<' END	L_SB_AVG,	SB	SB_AVG,
	CASE WHEN L_TL_CNT =0 THEN NULL ELSE '<' END	L_TL_AVG,	TL	TL_AVG,
	CASE WHEN L_V_CNT =0 THEN NULL ELSE '<' END	L_V_AVG,	V	V_AVG,
	CASE WHEN L_ZN_CNT =0 THEN NULL ELSE '<' END	L_ZN_AVG,	ZN	ZN_AVG,
	CASE WHEN L_PCB_CNT =0 THEN NULL ELSE '<' END	L_PCB_AVG,	PCB	PCB_AVG,
	CASE WHEN L_PCB8_CNT =0 THEN NULL ELSE '<' END	L_PCB8_AVG,	PCB8	PCB8_AVG,
	CASE WHEN L_PCB18_CNT =0 THEN NULL ELSE '<' END	L_PCB18_AVG,	PCB18	PCB18_AVG,
	CASE WHEN L_PCB28_CNT =0 THEN NULL ELSE '<' END	L_PCB28_AVG,	PCB28	PCB28_AVG,
	CASE WHEN L_PCB31_CNT =0 THEN NULL ELSE '<' END	L_PCB31_AVG,	PCB31	PCB31_AVG,
	CASE WHEN L_PCB44_CNT =0 THEN NULL ELSE '<' END	L_PCB44_AVG,	PCB44	PCB44_AVG,
	CASE WHEN L_PCB52_CNT =0 THEN NULL ELSE '<' END	L_PCB52_AVG,	PCB52	PCB52_AVG,
	CASE WHEN L_PCB66_CNT =0 THEN NULL ELSE '<' END	L_PCB66_AVG,	PCB66	PCB66_AVG,
	CASE WHEN L_PCB77_CNT =0 THEN NULL ELSE '<' END	L_PCB77_AVG,	PCB77	PCB77_AVG,
	CASE WHEN L_PCB81_CNT =0 THEN NULL ELSE '<' END	L_PCB81_AVG,	PCB81	PCB81_AVG,
	CASE WHEN L_PCB101_CNT =0 THEN NULL ELSE '<' END	L_PCB101_AVG,	PCB101	PCB101_AVG,
	CASE WHEN L_PCB105_CNT =0 THEN NULL ELSE '<' END	L_PCB105_AVG,	PCB105	PCB105_AVG,
	CASE WHEN L_PCB114_CNT =0 THEN NULL ELSE '<' END	L_PCB114_AVG,	PCB114	PCB114_AVG,
	CASE WHEN L_PCB118_CNT =0 THEN NULL ELSE '<' END	L_PCB118_AVG,	PCB118	PCB118_AVG,
	CASE WHEN L_PCB123_CNT =0 THEN NULL ELSE '<' END	L_PCB123_AVG,	PCB123	PCB123_AVG,
	CASE WHEN L_PCB126_CNT =0 THEN NULL ELSE '<' END	L_PCB126_AVG,	PCB126	PCB126_AVG,
	CASE WHEN L_PCB128_CNT =0 THEN NULL ELSE '<' END	L_PCB128_AVG,	PCB128	PCB128_AVG,
	CASE WHEN L_PCB138_CNT =0 THEN NULL ELSE '<' END	L_PCB138_AVG,	PCB138	PCB138_AVG,
	CASE WHEN L_PCB149_CNT =0 THEN NULL ELSE '<' END	L_PCB149_AVG,	PCB149	PCB149_AVG,
	CASE WHEN L_PCB153_CNT =0 THEN NULL ELSE '<' END	L_PCB153_AVG,	PCB153	PCB153_AVG,
	CASE WHEN L_PCB156_CNT =0 THEN NULL ELSE '<' END	L_PCB156_AVG,	PCB156	PCB156_AVG,
	CASE WHEN L_PCB157_CNT =0 THEN NULL ELSE '<' END	L_PCB157_AVG,	PCB157	PCB157_AVG,
	CASE WHEN L_PCB167_CNT =0 THEN NULL ELSE '<' END	L_PCB167_AVG,	PCB167	PCB167_AVG,
	CASE WHEN L_PCB169_CNT =0 THEN NULL ELSE '<' END	L_PCB169_AVG,	PCB169	PCB169_AVG,
	CASE WHEN L_PCB170_CNT =0 THEN NULL ELSE '<' END	L_PCB170_AVG,	PCB170	PCB170_AVG,
	CASE WHEN L_PCB180_CNT =0 THEN NULL ELSE '<' END	L_PCB180_AVG,	PCB180	PCB180_AVG,
	CASE WHEN L_PCB187_CNT =0 THEN NULL ELSE '<' END	L_PCB187_AVG,	PCB187	PCB187_AVG,
	CASE WHEN L_PCB189_CNT =0 THEN NULL ELSE '<' END	L_PCB189_AVG,	PCB189	PCB189_AVG,
			SUM18PCB	SUM18PCB_AVG,
	CASE WHEN L_FLUO_CNT =0 THEN NULL ELSE '<' END	L_FLUO_AVG,	FLUO	FLUO_AVG,
	CASE WHEN L_PHEN_CNT =0 THEN NULL ELSE '<' END	L_PHEN_AVG,	PHEN	PHEN_AVG,
	CASE WHEN L_ANTH_CNT =0 THEN NULL ELSE '<' END	L_ANTH_AVG,	ANTH	ANTH_AVG,
	CASE WHEN L_FLUT_CNT =0 THEN NULL ELSE '<' END	L_FLUT_AVG,	FLUT	FLUT_AVG,
	CASE WHEN L_PYRE_CNT =0 THEN NULL ELSE '<' END	L_PYRE_AVG,	PYRE	PYRE_AVG,
	CASE WHEN L_CHRY_CNT =0 THEN NULL ELSE '<' END	L_CHRY_AVG,	CHRY	CHRY_AVG,
	CASE WHEN L_BBFL_CNT =0 THEN NULL ELSE '<' END	L_BBFL_AVG,	BBFL	BBFL_AVG,
	CASE WHEN L_BKFL_CNT =0 THEN NULL ELSE '<' END	L_BKFL_AVG,	BKFL	BKFL_AVG,
	CASE WHEN L_BAPY_CNT =0 THEN NULL ELSE '<' END	L_BAPY_AVG,	BAPY	BAPY_AVG,
	CASE WHEN L_BGPE_CNT =0 THEN NULL ELSE '<' END	L_BGPE_AVG,	BGPE	BGPE_AVG,
	CASE WHEN L_ACPH_CNT =0 THEN NULL ELSE '<' END	L_ACPH_AVG,	ACPH	ACPH_AVG,
	CASE WHEN L_ACEN_CNT =0 THEN NULL ELSE '<' END	L_ACEN_AVG,	ACEN	ACEN_AVG,
	CASE WHEN L_DAAN_CNT =0 THEN NULL ELSE '<' END	L_DAAN_AVG,	DAAN	DAAN_AVG,
	CASE WHEN L_BANT_CNT =0 THEN NULL ELSE '<' END	L_BANT_AVG,	BANT	BANT_AVG,
	CASE WHEN L_INPY_CNT =0 THEN NULL ELSE '<' END	L_INPY_AVG,	INPY	INPY_AVG,
	CASE WHEN L_NAPH_CNT =0 THEN NULL ELSE '<' END	L_NAPH_AVG,	NAPH	NAPH_AVG,
	CASE WHEN L_PAH_CNT =0 THEN NULL ELSE '<' END	L_PAH_AVG,	PAH	PAH_AVG,
			SUM6LMPAH	SUM6LMPAH_AVG,
			SUM10HMPAH	SUM10HMPAH_AVG,
			SUM16PAH	SUM16PAH_AVG,
	CASE WHEN L_GBHC_CNT =0 THEN NULL ELSE '<' END	L_GBHC_AVG,	GBHC	GBHC_AVG,
	CASE WHEN L_HCB_CNT =0 THEN NULL ELSE '<' END	L_HCB_AVG,	HCB	HCB_AVG,
	CASE WHEN L_HEPT_CNT =0 THEN NULL ELSE '<' END	L_HEPT_AVG,	HEPT	HEPT_AVG,
	CASE WHEN L_ALDR_CNT =0 THEN NULL ELSE '<' END	L_ALDR_AVG,	ALDR	ALDR_AVG,
	CASE WHEN L_HEPO_CNT =0 THEN NULL ELSE '<' END	L_HEPO_AVG,	HEPO	HEPO_AVG,
	CASE WHEN L_ODDE_CNT =0 THEN NULL ELSE '<' END	L_ODDE_AVG,	ODDE	ODDE_AVG,
	CASE WHEN L_END1_CNT =0 THEN NULL ELSE '<' END	L_END1_AVG,	END1	END1_AVG,
	CASE WHEN L_PDDE_CNT =0 THEN NULL ELSE '<' END	L_PDDE_AVG,	PDDE	PDDE_AVG,
	CASE WHEN L_DIEL_CNT =0 THEN NULL ELSE '<' END	L_DIEL_AVG,	DIEL	DIEL_AVG,
	CASE WHEN L_ODDD_CNT =0 THEN NULL ELSE '<' END	L_ODDD_AVG,	ODDD	ODDD_AVG,
	CASE WHEN L_ENDR_CNT =0 THEN NULL ELSE '<' END	L_ENDR_AVG,	ENDR	ENDR_AVG,
	CASE WHEN L_END2_CNT =0 THEN NULL ELSE '<' END	L_END2_AVG,	END2	END2_AVG,
	CASE WHEN L_PDDD_CNT =0 THEN NULL ELSE '<' END	L_PDDD_AVG,	PDDD	PDDD_AVG,
	CASE WHEN L_ODDT_CNT =0 THEN NULL ELSE '<' END	L_ODDT_AVG,	ODDT	ODDT_AVG,
	CASE WHEN L_PDDT_CNT =0 THEN NULL ELSE '<' END	L_PDDT_AVG,	PDDT	PDDT_AVG,
	CASE WHEN L_ABHC_CNT =0 THEN NULL ELSE '<' END	L_ABHC_AVG,	ABHC	ABHC_AVG,
	CASE WHEN L_BBHC_CNT =0 THEN NULL ELSE '<' END	L_BBHC_AVG,	BBHC	BBHC_AVG,
	CASE WHEN L_DBHC_CNT =0 THEN NULL ELSE '<' END	L_DBHC_AVG,	DBHC	DBHC_AVG,
			VIEW_NO	
FROM	(
    SELECT	ZONE,			
        WCZ,			
        SUBZONE,			
        STATION,		
        ACC_YR  AS YR,
        COUNT(*)	TOTAL,		
        TYPE,			
        AVG(SZ_63)	SZ_63,		
        AVG(SZ_125)	SZ_125,		
        AVG(SZ_250)	SZ_250,		
        AVG(SZ_500)	SZ_500,		
        AVG(SZ_1000)	SZ_1000,		
        AVG(SZ_2000)	SZ_2000,		
        AVG(SZ_4000)	SZ_4000,		
        AVG(EH)	EH,		
        AVG(TS)	TS,	COUNT(L_TS)	L_TS_CNT,
        AVG(TVS)	TVS,	COUNT(L_TVS)	L_TVS_CNT,
        AVG(MSN_DWR)	MSN_DWR,		
        AVG(MSM_DWR)	MSM_DWR,		
        AVG(MSO_DWR)	MSO_DWR,		
        AVG(SG)	SG,	COUNT(L_SG)	L_SG_CNT,
        AVG(PH)	PH,	COUNT(L_PH)	L_PH_CNT,
        AVG(COD)	COD,	COUNT(L_COD)	L_COD_CNT,
        AVG(TIC)	TIC,	COUNT(L_TIC)	L_TIC_CNT,
        AVG(TOC)	TOC,	COUNT(L_TOC)	L_TOC_CNT,
        AVG(TC)	TC,	COUNT(L_TC)	L_TC_CNT,
        AVG(NH)	NH,	COUNT(L_NH)	L_NH_CNT,
        AVG(TKN)	TKN,	COUNT(L_TKN)	L_TKN_CNT,
        AVG(TP)	TP,	COUNT(L_TP)	L_TP_CNT,
        AVG(INS)	INS,	COUNT(L_INS)	L_INS_CNT,
        AVG(CN)	CN,	COUNT(L_CN)	L_CN_CNT,
        AVG(AL)	AL,	COUNT(L_AL)	L_AL_CNT,
        AVG(AG)	AG,	COUNT(L_AG)	L_AG_CNT,
        AVG(ARS)	ARS,	COUNT(L_ARS)	L_ARS_CNT,
        AVG(BA)	BA,	COUNT(L_BA)	L_BA_CNT,
        AVG(BE)	BE,	COUNT(L_BE)	L_BE_CNT,
        AVG(B)	B,	COUNT(L_B)	L_B_CNT,
        AVG(CD)	CD,	COUNT(L_CD)	L_CD_CNT,
        AVG(CO)	CO,	COUNT(L_CO)	L_CO_CNT,
        AVG(CR)	CR,	COUNT(L_CR)	L_CR_CNT,
        AVG(CU)	CU,	COUNT(L_CU)	L_CU_CNT,
        AVG(FE)	FE,	COUNT(L_FE)	L_FE_CNT,
        AVG(HG)	HG,	COUNT(L_HG)	L_HG_CNT,
        AVG(MN)	MN,	COUNT(L_MN)	L_MN_CNT,
        AVG(MO)	MO,	COUNT(L_MO)	L_MO_CNT,
        AVG(NI)	NI,	COUNT(L_NI)	L_NI_CNT,
        AVG(PB)	PB,	COUNT(L_PB)	L_PB_CNT,
        AVG(SB)	SB,	COUNT(L_SB)	L_SB_CNT,
        AVG(TL)	TL,	COUNT(L_TL)	L_TL_CNT,
        AVG(V)	V,	COUNT(L_V)	L_V_CNT,
        AVG(ZN)	ZN,	COUNT(L_ZN)	L_ZN_CNT,
        AVG(PCB)	PCB,	COUNT(L_PCB)	L_PCB_CNT,
        AVG(PCB8)	PCB8,	COUNT(L_PCB8)	L_PCB8_CNT,
        AVG(PCB18)	PCB18,	COUNT(L_PCB18)	L_PCB18_CNT,
        AVG(PCB28)	PCB28,	COUNT(L_PCB28)	L_PCB28_CNT,
        AVG(PCB31)	PCB31,	COUNT(L_PCB31)	L_PCB31_CNT,
        AVG(PCB44)	PCB44,	COUNT(L_PCB44)	L_PCB44_CNT,
        AVG(PCB52)	PCB52,	COUNT(L_PCB52)	L_PCB52_CNT,
        AVG(PCB66)	PCB66,	COUNT(L_PCB66)	L_PCB66_CNT,
        AVG(PCB77)	PCB77,	COUNT(L_PCB77)	L_PCB77_CNT,
        AVG(PCB81)	PCB81,	COUNT(L_PCB81)	L_PCB81_CNT,
        AVG(PCB101)	PCB101,	COUNT(L_PCB101)	L_PCB101_CNT,
        AVG(PCB105)	PCB105,	COUNT(L_PCB105)	L_PCB105_CNT,
        AVG(PCB114)	PCB114,	COUNT(L_PCB114)	L_PCB114_CNT,
        AVG(PCB118)	PCB118,	COUNT(L_PCB118)	L_PCB118_CNT,
        AVG(PCB123)	PCB123,	COUNT(L_PCB123)	L_PCB123_CNT,
        AVG(PCB126)	PCB126,	COUNT(L_PCB126)	L_PCB126_CNT,
        AVG(PCB128)	PCB128,	COUNT(L_PCB128)	L_PCB128_CNT,
        AVG(PCB138)	PCB138,	COUNT(L_PCB138)	L_PCB138_CNT,
        AVG(PCB149)	PCB149,	COUNT(L_PCB149)	L_PCB149_CNT,
        AVG(PCB153)	PCB153,	COUNT(L_PCB153)	L_PCB153_CNT,
        AVG(PCB156)	PCB156,	COUNT(L_PCB156)	L_PCB156_CNT,
        AVG(PCB157)	PCB157,	COUNT(L_PCB157)	L_PCB157_CNT,
        AVG(PCB167)	PCB167,	COUNT(L_PCB167)	L_PCB167_CNT,
        AVG(PCB169)	PCB169,	COUNT(L_PCB169)	L_PCB169_CNT,
        AVG(PCB170)	PCB170,	COUNT(L_PCB170)	L_PCB170_CNT,
        AVG(PCB180)	PCB180,	COUNT(L_PCB180)	L_PCB180_CNT,
        AVG(PCB187)	PCB187,	COUNT(L_PCB187)	L_PCB187_CNT,
        AVG(PCB189)	PCB189,	COUNT(L_PCB189)	L_PCB189_CNT,
        AVG(SUM18PCB)	SUM18PCB,		
        AVG(FLUO)	FLUO,	COUNT(L_FLUO)	L_FLUO_CNT,
        AVG(PHEN)	PHEN,	COUNT(L_PHEN)	L_PHEN_CNT,
        AVG(ANTH)	ANTH,	COUNT(L_ANTH)	L_ANTH_CNT,
        AVG(FLUT)	FLUT,	COUNT(L_FLUT)	L_FLUT_CNT,
        AVG(PYRE)	PYRE,	COUNT(L_PYRE)	L_PYRE_CNT,
        AVG(CHRY)	CHRY,	COUNT(L_CHRY)	L_CHRY_CNT,
        AVG(BBFL)	BBFL,	COUNT(L_BBFL)	L_BBFL_CNT,
        AVG(BKFL)	BKFL,	COUNT(L_BKFL)	L_BKFL_CNT,
        AVG(BAPY)	BAPY,	COUNT(L_BAPY)	L_BAPY_CNT,
        AVG(BGPE)	BGPE,	COUNT(L_BGPE)	L_BGPE_CNT,
        AVG(ACPH)	ACPH,	COUNT(L_ACPH)	L_ACPH_CNT,
        AVG(ACEN)	ACEN,	COUNT(L_ACEN)	L_ACEN_CNT,
        AVG(DAAN)	DAAN,	COUNT(L_DAAN)	L_DAAN_CNT,
        AVG(BANT)	BANT,	COUNT(L_BANT)	L_BANT_CNT,
        AVG(INPY)	INPY,	COUNT(L_INPY)	L_INPY_CNT,
        AVG(NAPH)	NAPH,	COUNT(L_NAPH)	L_NAPH_CNT,
        AVG(PAH)	PAH,	COUNT(L_PAH)	L_PAH_CNT,
        AVG(SUM6LMPAH)	SUM6LMPAH,		
        AVG(SUM10HMPAH)	SUM10HMPAH,		
        AVG(SUM16PAH)	SUM16PAH,		
        AVG(GBHC)	GBHC,	COUNT(L_GBHC)	L_GBHC_CNT,
        AVG(HCB)	HCB,	COUNT(L_HCB)	L_HCB_CNT,
        AVG(HEPT)	HEPT,	COUNT(L_HEPT)	L_HEPT_CNT,
        AVG(ALDR)	ALDR,	COUNT(L_ALDR)	L_ALDR_CNT,
        AVG(HEPO)	HEPO,	COUNT(L_HEPO)	L_HEPO_CNT,
        AVG(ODDE)	ODDE,	COUNT(L_ODDE)	L_ODDE_CNT,
        AVG(END1)	END1,	COUNT(L_END1)	L_END1_CNT,
        AVG(PDDE)	PDDE,	COUNT(L_PDDE)	L_PDDE_CNT,
        AVG(DIEL)	DIEL,	COUNT(L_DIEL)	L_DIEL_CNT,
        AVG(ODDD)	ODDD,	COUNT(L_ODDD)	L_ODDD_CNT,
        AVG(ENDR)	ENDR,	COUNT(L_ENDR)	L_ENDR_CNT,
        AVG(END2)	END2,	COUNT(L_END2)	L_END2_CNT,
        AVG(PDDD)	PDDD,	COUNT(L_PDDD)	L_PDDD_CNT,
        AVG(ODDT)	ODDT,	COUNT(L_ODDT)	L_ODDT_CNT,
        AVG(PDDT)	PDDT,	COUNT(L_PDDT)	L_PDDT_CNT,
        AVG(ABHC)	ABHC,	COUNT(L_ABHC)	L_ABHC_CNT,
        AVG(BBHC)	BBHC,	COUNT(L_BBHC)	L_BBHC_CNT,
        AVG(DBHC)	DBHC,	COUNT(L_DBHC)	L_DBHC_CNT,
        VIEW_NO			
    FROM	WPG.MARINE_SEDIMENT1	DATA,	
    (SELECT  YEAR(GETDATE()) AS ACC_YR 
    UNION SELECT YEAR(GETDATE()) - 1
    UNION SELECT YEAR(GETDATE()) - 2
    UNION SELECT YEAR(GETDATE()) - 3
    UNION SELECT YEAR(GETDATE()) - 4
    UNION SELECT YEAR(GETDATE()) - 5 )  REPORT_YR
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 4
    GROUP BY ZONE, WCZ, SUBZONE, STATION, ACC_YR, TYPE, VIEW_NO				
)   MS_1;


-- WPG.MARINE_SEDIMENT_ACC_MAX source

CREATE VIEW WPG.MARINE_SEDIMENT_ACC_MAX AS
SELECT	ZONE,			
	WCZ,			
	SUBZONE,			
	STATION,			
		YR,		
		TOTAL,		
	TYPE,			
			SZ_63	SZ_63_MAX,
			SZ_125	SZ_125_MAX,
			SZ_250	SZ_250_MAX,
			SZ_500	SZ_500_MAX,
			SZ_1000	SZ_1000_MAX,
			SZ_2000	SZ_2000_MAX,
			SZ_4000	SZ_4000_MAX,
			EH	EH_MAX,
	CASE WHEN L_TS_CNT = TOTAL THEN '<' ELSE NULL END	L_TS_MAX,	TS	TS_MAX,
	CASE WHEN L_TVS_CNT = TOTAL THEN '<' ELSE NULL END	L_TVS_MAX,	TVS	TVS_MAX,
			MSN_DWR	MSN_DWR_MAX,
			MSM_DWR	MSM_DWR_MAX,
			MSO_DWR	MSO_DWR_MAX,
	CASE WHEN L_SG_CNT = TOTAL THEN '<' ELSE NULL END	L_SG_MAX,	SG	SG_MAX,
	CASE WHEN L_PH_CNT = TOTAL THEN '<' ELSE NULL END	L_PH_MAX,	PH	PH_MAX,
	CASE WHEN L_COD_CNT = TOTAL THEN '<' ELSE NULL END	L_COD_MAX,	COD	COD_MAX,
	CASE WHEN L_TIC_CNT = TOTAL THEN '<' ELSE NULL END	L_TIC_MAX,	TIC	TIC_MAX,
	CASE WHEN L_TOC_CNT = TOTAL THEN '<' ELSE NULL END	L_TOC_MAX,	TOC	TOC_MAX,
	CASE WHEN L_TC_CNT = TOTAL THEN '<' ELSE NULL END	L_TC_MAX,	TC	TC_MAX,
	CASE WHEN L_NH_CNT = TOTAL THEN '<' ELSE NULL END	L_NH_MAX,	NH	NH_MAX,
	CASE WHEN L_TKN_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_MAX,	TKN	TKN_MAX,
	CASE WHEN L_TP_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_MAX,	TP	TP_MAX,
	CASE WHEN L_INS_CNT = TOTAL THEN '<' ELSE NULL END	L_INS_MAX,	INS	INS_MAX,
	CASE WHEN L_CN_CNT = TOTAL THEN '<' ELSE NULL END	L_CN_MAX,	CN	CN_MAX,
	CASE WHEN L_AL_CNT = TOTAL THEN '<' ELSE NULL END	L_AL_MAX,	AL	AL_MAX,
	CASE WHEN L_AG_CNT = TOTAL THEN '<' ELSE NULL END	L_AG_MAX,	AG	AG_MAX,
	CASE WHEN L_ARS_CNT = TOTAL THEN '<' ELSE NULL END	L_ARS_MAX,	ARS	ARS_MAX,
	CASE WHEN L_BA_CNT = TOTAL THEN '<' ELSE NULL END	L_BA_MAX,	BA	BA_MAX,
	CASE WHEN L_BE_CNT = TOTAL THEN '<' ELSE NULL END	L_BE_MAX,	BE	BE_MAX,
	CASE WHEN L_B_CNT = TOTAL THEN '<' ELSE NULL END	L_B_MAX,	B	B_MAX,
	CASE WHEN L_CD_CNT = TOTAL THEN '<' ELSE NULL END	L_CD_MAX,	CD	CD_MAX,
	CASE WHEN L_CO_CNT = TOTAL THEN '<' ELSE NULL END	L_CO_MAX,	CO	CO_MAX,
	CASE WHEN L_CR_CNT = TOTAL THEN '<' ELSE NULL END	L_CR_MAX,	CR	CR_MAX,
	CASE WHEN L_CU_CNT = TOTAL THEN '<' ELSE NULL END	L_CU_MAX,	CU	CU_MAX,
	CASE WHEN L_FE_CNT = TOTAL THEN '<' ELSE NULL END	L_FE_MAX,	FE	FE_MAX,
	CASE WHEN L_HG_CNT = TOTAL THEN '<' ELSE NULL END	L_HG_MAX,	HG	HG_MAX,
	CASE WHEN L_MN_CNT = TOTAL THEN '<' ELSE NULL END	L_MN_MAX,	MN	MN_MAX,
	CASE WHEN L_MO_CNT = TOTAL THEN '<' ELSE NULL END	L_MO_MAX,	MO	MO_MAX,
	CASE WHEN L_NI_CNT = TOTAL THEN '<' ELSE NULL END	L_NI_MAX,	NI	NI_MAX,
	CASE WHEN L_PB_CNT = TOTAL THEN '<' ELSE NULL END	L_PB_MAX,	PB	PB_MAX,
	CASE WHEN L_SB_CNT = TOTAL THEN '<' ELSE NULL END	L_SB_MAX,	SB	SB_MAX,
	CASE WHEN L_TL_CNT = TOTAL THEN '<' ELSE NULL END	L_TL_MAX,	TL	TL_MAX,
	CASE WHEN L_V_CNT = TOTAL THEN '<' ELSE NULL END	L_V_MAX,	V	V_MAX,
	CASE WHEN L_ZN_CNT = TOTAL THEN '<' ELSE NULL END	L_ZN_MAX,	ZN	ZN_MAX,
	CASE WHEN L_PCB_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB_MAX,	PCB	PCB_MAX,
	CASE WHEN L_PCB8_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB8_MAX,	PCB8	PCB8_MAX,
	CASE WHEN L_PCB18_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB18_MAX,	PCB18	PCB18_MAX,
	CASE WHEN L_PCB28_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB28_MAX,	PCB28	PCB28_MAX,
	CASE WHEN L_PCB31_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB31_MAX,	PCB31	PCB31_MAX,
	CASE WHEN L_PCB44_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB44_MAX,	PCB44	PCB44_MAX,
	CASE WHEN L_PCB52_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB52_MAX,	PCB52	PCB52_MAX,
	CASE WHEN L_PCB66_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB66_MAX,	PCB66	PCB66_MAX,
	CASE WHEN L_PCB77_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB77_MAX,	PCB77	PCB77_MAX,
	CASE WHEN L_PCB81_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB81_MAX,	PCB81	PCB81_MAX,
	CASE WHEN L_PCB101_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB101_MAX,	PCB101	PCB101_MAX,
	CASE WHEN L_PCB105_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB105_MAX,	PCB105	PCB105_MAX,
	CASE WHEN L_PCB114_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB114_MAX,	PCB114	PCB114_MAX,
	CASE WHEN L_PCB118_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB118_MAX,	PCB118	PCB118_MAX,
	CASE WHEN L_PCB123_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB123_MAX,	PCB123	PCB123_MAX,
	CASE WHEN L_PCB126_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB126_MAX,	PCB126	PCB126_MAX,
	CASE WHEN L_PCB128_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB128_MAX,	PCB128	PCB128_MAX,
	CASE WHEN L_PCB138_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB138_MAX,	PCB138	PCB138_MAX,
	CASE WHEN L_PCB149_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB149_MAX,	PCB149	PCB149_MAX,
	CASE WHEN L_PCB153_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB153_MAX,	PCB153	PCB153_MAX,
	CASE WHEN L_PCB156_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB156_MAX,	PCB156	PCB156_MAX,
	CASE WHEN L_PCB157_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB157_MAX,	PCB157	PCB157_MAX,
	CASE WHEN L_PCB167_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB167_MAX,	PCB167	PCB167_MAX,
	CASE WHEN L_PCB169_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB169_MAX,	PCB169	PCB169_MAX,
	CASE WHEN L_PCB170_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB170_MAX,	PCB170	PCB170_MAX,
	CASE WHEN L_PCB180_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB180_MAX,	PCB180	PCB180_MAX,
	CASE WHEN L_PCB187_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB187_MAX,	PCB187	PCB187_MAX,
	CASE WHEN L_PCB189_CNT = TOTAL THEN '<' ELSE NULL END	L_PCB189_MAX,	PCB189	PCB189_MAX,
			SUM18PCB	SUM18PCB_MAX,
	CASE WHEN L_FLUO_CNT = TOTAL THEN '<' ELSE NULL END	L_FLUO_MAX,	FLUO	FLUO_MAX,
	CASE WHEN L_PHEN_CNT = TOTAL THEN '<' ELSE NULL END	L_PHEN_MAX,	PHEN	PHEN_MAX,
	CASE WHEN L_ANTH_CNT = TOTAL THEN '<' ELSE NULL END	L_ANTH_MAX,	ANTH	ANTH_MAX,
	CASE WHEN L_FLUT_CNT = TOTAL THEN '<' ELSE NULL END	L_FLUT_MAX,	FLUT	FLUT_MAX,
	CASE WHEN L_PYRE_CNT = TOTAL THEN '<' ELSE NULL END	L_PYRE_MAX,	PYRE	PYRE_MAX,
	CASE WHEN L_CHRY_CNT = TOTAL THEN '<' ELSE NULL END	L_CHRY_MAX,	CHRY	CHRY_MAX,
	CASE WHEN L_BBFL_CNT = TOTAL THEN '<' ELSE NULL END	L_BBFL_MAX,	BBFL	BBFL_MAX,
	CASE WHEN L_BKFL_CNT = TOTAL THEN '<' ELSE NULL END	L_BKFL_MAX,	BKFL	BKFL_MAX,
	CASE WHEN L_BAPY_CNT = TOTAL THEN '<' ELSE NULL END	L_BAPY_MAX,	BAPY	BAPY_MAX,
	CASE WHEN L_BGPE_CNT = TOTAL THEN '<' ELSE NULL END	L_BGPE_MAX,	BGPE	BGPE_MAX,
	CASE WHEN L_ACPH_CNT = TOTAL THEN '<' ELSE NULL END	L_ACPH_MAX,	ACPH	ACPH_MAX,
	CASE WHEN L_ACEN_CNT = TOTAL THEN '<' ELSE NULL END	L_ACEN_MAX,	ACEN	ACEN_MAX,
	CASE WHEN L_DAAN_CNT = TOTAL THEN '<' ELSE NULL END	L_DAAN_MAX,	DAAN	DAAN_MAX,
	CASE WHEN L_BANT_CNT = TOTAL THEN '<' ELSE NULL END	L_BANT_MAX,	BANT	BANT_MAX,
	CASE WHEN L_INPY_CNT = TOTAL THEN '<' ELSE NULL END	L_INPY_MAX,	INPY	INPY_MAX,
	CASE WHEN L_NAPH_CNT = TOTAL THEN '<' ELSE NULL END	L_NAPH_MAX,	NAPH	NAPH_MAX,
	CASE WHEN L_PAH_CNT = TOTAL THEN '<' ELSE NULL END	L_PAH_MAX,	PAH	PAH_MAX,
			SUM6LMPAH	SUM6LMPAH_MAX,
			SUM10HMPAH	SUM10HMPAH_MAX,
			SUM16PAH	SUM16PAH_MAX,
	CASE WHEN L_GBHC_CNT = TOTAL THEN '<' ELSE NULL END	L_GBHC_MAX,	GBHC	GBHC_MAX,
	CASE WHEN L_HCB_CNT = TOTAL THEN '<' ELSE NULL END	L_HCB_MAX,	HCB	HCB_MAX,
	CASE WHEN L_HEPT_CNT = TOTAL THEN '<' ELSE NULL END	L_HEPT_MAX,	HEPT	HEPT_MAX,
	CASE WHEN L_ALDR_CNT = TOTAL THEN '<' ELSE NULL END	L_ALDR_MAX,	ALDR	ALDR_MAX,
	CASE WHEN L_HEPO_CNT = TOTAL THEN '<' ELSE NULL END	L_HEPO_MAX,	HEPO	HEPO_MAX,
	CASE WHEN L_ODDE_CNT = TOTAL THEN '<' ELSE NULL END	L_ODDE_MAX,	ODDE	ODDE_MAX,
	CASE WHEN L_END1_CNT = TOTAL THEN '<' ELSE NULL END	L_END1_MAX,	END1	END1_MAX,
	CASE WHEN L_PDDE_CNT = TOTAL THEN '<' ELSE NULL END	L_PDDE_MAX,	PDDE	PDDE_MAX,
	CASE WHEN L_DIEL_CNT = TOTAL THEN '<' ELSE NULL END	L_DIEL_MAX,	DIEL	DIEL_MAX,
	CASE WHEN L_ODDD_CNT = TOTAL THEN '<' ELSE NULL END	L_ODDD_MAX,	ODDD	ODDD_MAX,
	CASE WHEN L_ENDR_CNT = TOTAL THEN '<' ELSE NULL END	L_ENDR_MAX,	ENDR	ENDR_MAX,
	CASE WHEN L_END2_CNT = TOTAL THEN '<' ELSE NULL END	L_END2_MAX,	END2	END2_MAX,
	CASE WHEN L_PDDD_CNT = TOTAL THEN '<' ELSE NULL END	L_PDDD_MAX,	PDDD	PDDD_MAX,
	CASE WHEN L_ODDT_CNT = TOTAL THEN '<' ELSE NULL END	L_ODDT_MAX,	ODDT	ODDT_MAX,
	CASE WHEN L_PDDT_CNT = TOTAL THEN '<' ELSE NULL END	L_PDDT_MAX,	PDDT	PDDT_MAX,
	CASE WHEN L_ABHC_CNT = TOTAL THEN '<' ELSE NULL END	L_ABHC_MAX,	ABHC	ABHC_MAX,
	CASE WHEN L_BBHC_CNT = TOTAL THEN '<' ELSE NULL END	L_BBHC_MAX,	BBHC	BBHC_MAX,
	CASE WHEN L_DBHC_CNT = TOTAL THEN '<' ELSE NULL END	L_DBHC_MAX,	DBHC	DBHC_MAX,
			VIEW_NO	
FROM	(
    SELECT	ZONE,			
        WCZ,			
        SUBZONE,			
        STATION,			
        ACC_YR	YR,		
        COUNT(*)	TOTAL,		
        TYPE,			
        MAX(SZ_63)	SZ_63,		
        MAX(SZ_125)	SZ_125,		
        MAX(SZ_250)	SZ_250,		
        MAX(SZ_500)	SZ_500,		
        MAX(SZ_1000)	SZ_1000,		
        MAX(SZ_2000)	SZ_2000,		
        MAX(SZ_4000)	SZ_4000,		
        MAX(EH)	EH,		
        MAX(TS)	TS,	COUNT(L_TS)	L_TS_CNT,
        MAX(TVS)	TVS,	COUNT(L_TVS)	L_TVS_CNT,
        MAX(MSN_DWR)	MSN_DWR,		
        MAX(MSM_DWR)	MSM_DWR,		
        MAX(MSO_DWR)	MSO_DWR,		
        MAX(SG)	SG,	COUNT(L_SG)	L_SG_CNT,
        MAX(PH)	PH,	COUNT(L_PH)	L_PH_CNT,
        MAX(COD)	COD,	COUNT(L_COD)	L_COD_CNT,
        MAX(TIC)	TIC,	COUNT(L_TIC)	L_TIC_CNT,
        MAX(TOC)	TOC,	COUNT(L_TOC)	L_TOC_CNT,
        MAX(TC)	TC,	COUNT(L_TC)	L_TC_CNT,
        MAX(NH)	NH,	COUNT(L_NH)	L_NH_CNT,
        MAX(TKN)	TKN,	COUNT(L_TKN)	L_TKN_CNT,
        MAX(TP)	TP,	COUNT(L_TP)	L_TP_CNT,
        MAX(INS)	INS,	COUNT(L_INS)	L_INS_CNT,
        MAX(CN)	CN,	COUNT(L_CN)	L_CN_CNT,
        MAX(AL)	AL,	COUNT(L_AL)	L_AL_CNT,
        MAX(AG)	AG,	COUNT(L_AG)	L_AG_CNT,
        MAX(ARS)	ARS,	COUNT(L_ARS)	L_ARS_CNT,
        MAX(BA)	BA,	COUNT(L_BA)	L_BA_CNT,
        MAX(BE)	BE,	COUNT(L_BE)	L_BE_CNT,
        MAX(B)	B,	COUNT(L_B)	L_B_CNT,
        MAX(CD)	CD,	COUNT(L_CD)	L_CD_CNT,
        MAX(CO)	CO,	COUNT(L_CO)	L_CO_CNT,
        MAX(CR)	CR,	COUNT(L_CR)	L_CR_CNT,
        MAX(CU)	CU,	COUNT(L_CU)	L_CU_CNT,
        MAX(FE)	FE,	COUNT(L_FE)	L_FE_CNT,
        MAX(HG)	HG,	COUNT(L_HG)	L_HG_CNT,
        MAX(MN)	MN,	COUNT(L_MN)	L_MN_CNT,
        MAX(MO)	MO,	COUNT(L_MO)	L_MO_CNT,
        MAX(NI)	NI,	COUNT(L_NI)	L_NI_CNT,
        MAX(PB)	PB,	COUNT(L_PB)	L_PB_CNT,
        MAX(SB)	SB,	COUNT(L_SB)	L_SB_CNT,
        MAX(TL)	TL,	COUNT(L_TL)	L_TL_CNT,
        MAX(V)	V,	COUNT(L_V)	L_V_CNT,
        MAX(ZN)	ZN,	COUNT(L_ZN)	L_ZN_CNT,
        MAX(PCB)	PCB,	COUNT(L_PCB)	L_PCB_CNT,
        MAX(PCB8)	PCB8,	COUNT(L_PCB8)	L_PCB8_CNT,
        MAX(PCB18)	PCB18,	COUNT(L_PCB18)	L_PCB18_CNT,
        MAX(PCB28)	PCB28,	COUNT(L_PCB28)	L_PCB28_CNT,
        MAX(PCB31)	PCB31,	COUNT(L_PCB31)	L_PCB31_CNT,
        MAX(PCB44)	PCB44,	COUNT(L_PCB44)	L_PCB44_CNT,
        MAX(PCB52)	PCB52,	COUNT(L_PCB52)	L_PCB52_CNT,
        MAX(PCB66)	PCB66,	COUNT(L_PCB66)	L_PCB66_CNT,
        MAX(PCB77)	PCB77,	COUNT(L_PCB77)	L_PCB77_CNT,
        MAX(PCB81)	PCB81,	COUNT(L_PCB81)	L_PCB81_CNT,
        MAX(PCB101)	PCB101,	COUNT(L_PCB101)	L_PCB101_CNT,
        MAX(PCB105)	PCB105,	COUNT(L_PCB105)	L_PCB105_CNT,
        MAX(PCB114)	PCB114,	COUNT(L_PCB114)	L_PCB114_CNT,
        MAX(PCB118)	PCB118,	COUNT(L_PCB118)	L_PCB118_CNT,
        MAX(PCB123)	PCB123,	COUNT(L_PCB123)	L_PCB123_CNT,
        MAX(PCB126)	PCB126,	COUNT(L_PCB126)	L_PCB126_CNT,
        MAX(PCB128)	PCB128,	COUNT(L_PCB128)	L_PCB128_CNT,
        MAX(PCB138)	PCB138,	COUNT(L_PCB138)	L_PCB138_CNT,
        MAX(PCB149)	PCB149,	COUNT(L_PCB149)	L_PCB149_CNT,
        MAX(PCB153)	PCB153,	COUNT(L_PCB153)	L_PCB153_CNT,
        MAX(PCB156)	PCB156,	COUNT(L_PCB156)	L_PCB156_CNT,
        MAX(PCB157)	PCB157,	COUNT(L_PCB157)	L_PCB157_CNT,
        MAX(PCB167)	PCB167,	COUNT(L_PCB167)	L_PCB167_CNT,
        MAX(PCB169)	PCB169,	COUNT(L_PCB169)	L_PCB169_CNT,
        MAX(PCB170)	PCB170,	COUNT(L_PCB170)	L_PCB170_CNT,
        MAX(PCB180)	PCB180,	COUNT(L_PCB180)	L_PCB180_CNT,
        MAX(PCB187)	PCB187,	COUNT(L_PCB187)	L_PCB187_CNT,
        MAX(PCB189)	PCB189,	COUNT(L_PCB189)	L_PCB189_CNT,
        MAX(SUM18PCB)	SUM18PCB,		
        MAX(FLUO)	FLUO,	COUNT(L_FLUO)	L_FLUO_CNT,
        MAX(PHEN)	PHEN,	COUNT(L_PHEN)	L_PHEN_CNT,
        MAX(ANTH)	ANTH,	COUNT(L_ANTH)	L_ANTH_CNT,
        MAX(FLUT)	FLUT,	COUNT(L_FLUT)	L_FLUT_CNT,
        MAX(PYRE)	PYRE,	COUNT(L_PYRE)	L_PYRE_CNT,
        MAX(CHRY)	CHRY,	COUNT(L_CHRY)	L_CHRY_CNT,
        MAX(BBFL)	BBFL,	COUNT(L_BBFL)	L_BBFL_CNT,
        MAX(BKFL)	BKFL,	COUNT(L_BKFL)	L_BKFL_CNT,
        MAX(BAPY)	BAPY,	COUNT(L_BAPY)	L_BAPY_CNT,
        MAX(BGPE)	BGPE,	COUNT(L_BGPE)	L_BGPE_CNT,
        MAX(ACPH)	ACPH,	COUNT(L_ACPH)	L_ACPH_CNT,
        MAX(ACEN)	ACEN,	COUNT(L_ACEN)	L_ACEN_CNT,
        MAX(DAAN)	DAAN,	COUNT(L_DAAN)	L_DAAN_CNT,
        MAX(BANT)	BANT,	COUNT(L_BANT)	L_BANT_CNT,
        MAX(INPY)	INPY,	COUNT(L_INPY)	L_INPY_CNT,
        MAX(NAPH)	NAPH,	COUNT(L_NAPH)	L_NAPH_CNT,
        MAX(PAH)	PAH,	COUNT(L_PAH)	L_PAH_CNT,
        MAX(SUM6LMPAH)	SUM6LMPAH,		
        MAX(SUM10HMPAH)	SUM10HMPAH,		
        MAX(SUM16PAH)	SUM16PAH,		
        MAX(GBHC)	GBHC,	COUNT(L_GBHC)	L_GBHC_CNT,
        MAX(HCB)	HCB,	COUNT(L_HCB)	L_HCB_CNT,
        MAX(HEPT)	HEPT,	COUNT(L_HEPT)	L_HEPT_CNT,
        MAX(ALDR)	ALDR,	COUNT(L_ALDR)	L_ALDR_CNT,
        MAX(HEPO)	HEPO,	COUNT(L_HEPO)	L_HEPO_CNT,
        MAX(ODDE)	ODDE,	COUNT(L_ODDE)	L_ODDE_CNT,
        MAX(END1)	END1,	COUNT(L_END1)	L_END1_CNT,
        MAX(PDDE)	PDDE,	COUNT(L_PDDE)	L_PDDE_CNT,
        MAX(DIEL)	DIEL,	COUNT(L_DIEL)	L_DIEL_CNT,
        MAX(ODDD)	ODDD,	COUNT(L_ODDD)	L_ODDD_CNT,
        MAX(ENDR)	ENDR,	COUNT(L_ENDR)	L_ENDR_CNT,
        MAX(END2)	END2,	COUNT(L_END2)	L_END2_CNT,
        MAX(PDDD)	PDDD,	COUNT(L_PDDD)	L_PDDD_CNT,
        MAX(ODDT)	ODDT,	COUNT(L_ODDT)	L_ODDT_CNT,
        MAX(PDDT)	PDDT,	COUNT(L_PDDT)	L_PDDT_CNT,
        MAX(ABHC)	ABHC,	COUNT(L_ABHC)	L_ABHC_CNT,
        MAX(BBHC)	BBHC,	COUNT(L_BBHC)	L_BBHC_CNT,
        MAX(DBHC)	DBHC,	COUNT(L_DBHC)	L_DBHC_CNT,
        VIEW_NO			
    FROM	WPG.MARINE_SEDIMENT1	DATA,	
    (SELECT  YEAR(GETDATE()) AS ACC_YR 
    UNION SELECT YEAR(GETDATE()) - 1
    UNION SELECT YEAR(GETDATE()) - 2
    UNION SELECT YEAR(GETDATE()) - 3
    UNION SELECT YEAR(GETDATE()) - 4
    UNION SELECT YEAR(GETDATE()) - 5 )  REPORT_YR
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 4
    GROUP BY ZONE, WCZ, SUBZONE, STATION, ACC_YR, TYPE, VIEW_NO						
)   MS_1;


-- WPG.MARINE_SEDIMENT_ACC_MIN source

CREATE VIEW WPG.MARINE_SEDIMENT_ACC_MIN AS
SELECT	ZONE,			
	WCZ,			
	SUBZONE,			
	STATION,			
		YR,		
		TOTAL,		
	TYPE,			
			SZ_63	SZ_63_MIN,
			SZ_125	SZ_125_MIN,
			SZ_250	SZ_250_MIN,
			SZ_500	SZ_500_MIN,
			SZ_1000	SZ_1000_MIN,
			SZ_2000	SZ_2000_MIN,
			SZ_4000	SZ_4000_MIN,
			EH	EH_MIN,
	CASE WHEN L_TS_CNT =0 THEN NULL ELSE '<' END	L_TS_MIN,	TS	TS_MIN,
	CASE WHEN L_TVS_CNT =0 THEN NULL ELSE '<' END	L_TVS_MIN,	TVS	TVS_MIN,
			MSN_DWR	MSN_DWR_MIN,
			MSM_DWR	MSM_DWR_MIN,
			MSO_DWR	MSO_DWR_MIN,
	CASE WHEN L_SG_CNT =0 THEN NULL ELSE '<' END	L_SG_MIN,	SG	SG_MIN,
	CASE WHEN L_PH_CNT =0 THEN NULL ELSE '<' END	L_PH_MIN,	PH	PH_MIN,
	CASE WHEN L_COD_CNT =0 THEN NULL ELSE '<' END	L_COD_MIN,	COD	COD_MIN,
	CASE WHEN L_TIC_CNT =0 THEN NULL ELSE '<' END	L_TIC_MIN,	TIC	TIC_MIN,
	CASE WHEN L_TOC_CNT =0 THEN NULL ELSE '<' END	L_TOC_MIN,	TOC	TOC_MIN,
	CASE WHEN L_TC_CNT =0 THEN NULL ELSE '<' END	L_TC_MIN,	TC	TC_MIN,
	CASE WHEN L_NH_CNT =0 THEN NULL ELSE '<' END	L_NH_MIN,	NH	NH_MIN,
	CASE WHEN L_TKN_CNT =0 THEN NULL ELSE '<' END	L_TKN_MIN,	TKN	TKN_MIN,
	CASE WHEN L_TP_CNT =0 THEN NULL ELSE '<' END	L_TP_MIN,	TP	TP_MIN,
	CASE WHEN L_INS_CNT =0 THEN NULL ELSE '<' END	L_INS_MIN,	INS	INS_MIN,
	CASE WHEN L_CN_CNT =0 THEN NULL ELSE '<' END	L_CN_MIN,	CN	CN_MIN,
	CASE WHEN L_AL_CNT =0 THEN NULL ELSE '<' END	L_AL_MIN,	AL	AL_MIN,
	CASE WHEN L_AG_CNT =0 THEN NULL ELSE '<' END	L_AG_MIN,	AG	AG_MIN,
	CASE WHEN L_ARS_CNT =0 THEN NULL ELSE '<' END	L_ARS_MIN,	ARS	ARS_MIN,
	CASE WHEN L_BA_CNT =0 THEN NULL ELSE '<' END	L_BA_MIN,	BA	BA_MIN,
	CASE WHEN L_BE_CNT =0 THEN NULL ELSE '<' END	L_BE_MIN,	BE	BE_MIN,
	CASE WHEN L_B_CNT =0 THEN NULL ELSE '<' END	L_B_MIN,	B	B_MIN,
	CASE WHEN L_CD_CNT =0 THEN NULL ELSE '<' END	L_CD_MIN,	CD	CD_MIN,
	CASE WHEN L_CO_CNT =0 THEN NULL ELSE '<' END	L_CO_MIN,	CO	CO_MIN,
	CASE WHEN L_CR_CNT =0 THEN NULL ELSE '<' END	L_CR_MIN,	CR	CR_MIN,
	CASE WHEN L_CU_CNT =0 THEN NULL ELSE '<' END	L_CU_MIN,	CU	CU_MIN,
	CASE WHEN L_FE_CNT =0 THEN NULL ELSE '<' END	L_FE_MIN,	FE	FE_MIN,
	CASE WHEN L_HG_CNT =0 THEN NULL ELSE '<' END	L_HG_MIN,	HG	HG_MIN,
	CASE WHEN L_MN_CNT =0 THEN NULL ELSE '<' END	L_MN_MIN,	MN	MN_MIN,
	CASE WHEN L_MO_CNT =0 THEN NULL ELSE '<' END	L_MO_MIN,	MO	MO_MIN,
	CASE WHEN L_NI_CNT =0 THEN NULL ELSE '<' END	L_NI_MIN,	NI	NI_MIN,
	CASE WHEN L_PB_CNT =0 THEN NULL ELSE '<' END	L_PB_MIN,	PB	PB_MIN,
	CASE WHEN L_SB_CNT =0 THEN NULL ELSE '<' END	L_SB_MIN,	SB	SB_MIN,
	CASE WHEN L_TL_CNT =0 THEN NULL ELSE '<' END	L_TL_MIN,	TL	TL_MIN,
	CASE WHEN L_V_CNT =0 THEN NULL ELSE '<' END	L_V_MIN,	V	V_MIN,
	CASE WHEN L_ZN_CNT =0 THEN NULL ELSE '<' END	L_ZN_MIN,	ZN	ZN_MIN,
	CASE WHEN L_PCB_CNT =0 THEN NULL ELSE '<' END	L_PCB_MIN,	PCB	PCB_MIN,
	CASE WHEN L_PCB8_CNT =0 THEN NULL ELSE '<' END	L_PCB8_MIN,	PCB8	PCB8_MIN,
	CASE WHEN L_PCB18_CNT =0 THEN NULL ELSE '<' END	L_PCB18_MIN,	PCB18	PCB18_MIN,
	CASE WHEN L_PCB28_CNT =0 THEN NULL ELSE '<' END	L_PCB28_MIN,	PCB28	PCB28_MIN,
	CASE WHEN L_PCB31_CNT =0 THEN NULL ELSE '<' END	L_PCB31_MIN,	PCB31	PCB31_MIN,
	CASE WHEN L_PCB44_CNT =0 THEN NULL ELSE '<' END	L_PCB44_MIN,	PCB44	PCB44_MIN,
	CASE WHEN L_PCB52_CNT =0 THEN NULL ELSE '<' END	L_PCB52_MIN,	PCB52	PCB52_MIN,
	CASE WHEN L_PCB66_CNT =0 THEN NULL ELSE '<' END	L_PCB66_MIN,	PCB66	PCB66_MIN,
	CASE WHEN L_PCB77_CNT =0 THEN NULL ELSE '<' END	L_PCB77_MIN,	PCB77	PCB77_MIN,
	CASE WHEN L_PCB81_CNT =0 THEN NULL ELSE '<' END	L_PCB81_MIN,	PCB81	PCB81_MIN,
	CASE WHEN L_PCB101_CNT =0 THEN NULL ELSE '<' END	L_PCB101_MIN,	PCB101	PCB101_MIN,
	CASE WHEN L_PCB105_CNT =0 THEN NULL ELSE '<' END	L_PCB105_MIN,	PCB105	PCB105_MIN,
	CASE WHEN L_PCB114_CNT =0 THEN NULL ELSE '<' END	L_PCB114_MIN,	PCB114	PCB114_MIN,
	CASE WHEN L_PCB118_CNT =0 THEN NULL ELSE '<' END	L_PCB118_MIN,	PCB118	PCB118_MIN,
	CASE WHEN L_PCB123_CNT =0 THEN NULL ELSE '<' END	L_PCB123_MIN,	PCB123	PCB123_MIN,
	CASE WHEN L_PCB126_CNT =0 THEN NULL ELSE '<' END	L_PCB126_MIN,	PCB126	PCB126_MIN,
	CASE WHEN L_PCB128_CNT =0 THEN NULL ELSE '<' END	L_PCB128_MIN,	PCB128	PCB128_MIN,
	CASE WHEN L_PCB138_CNT =0 THEN NULL ELSE '<' END	L_PCB138_MIN,	PCB138	PCB138_MIN,
	CASE WHEN L_PCB149_CNT =0 THEN NULL ELSE '<' END	L_PCB149_MIN,	PCB149	PCB149_MIN,
	CASE WHEN L_PCB153_CNT =0 THEN NULL ELSE '<' END	L_PCB153_MIN,	PCB153	PCB153_MIN,
	CASE WHEN L_PCB156_CNT =0 THEN NULL ELSE '<' END	L_PCB156_MIN,	PCB156	PCB156_MIN,
	CASE WHEN L_PCB157_CNT =0 THEN NULL ELSE '<' END	L_PCB157_MIN,	PCB157	PCB157_MIN,
	CASE WHEN L_PCB167_CNT =0 THEN NULL ELSE '<' END	L_PCB167_MIN,	PCB167	PCB167_MIN,
	CASE WHEN L_PCB169_CNT =0 THEN NULL ELSE '<' END	L_PCB169_MIN,	PCB169	PCB169_MIN,
	CASE WHEN L_PCB170_CNT =0 THEN NULL ELSE '<' END	L_PCB170_MIN,	PCB170	PCB170_MIN,
	CASE WHEN L_PCB180_CNT =0 THEN NULL ELSE '<' END	L_PCB180_MIN,	PCB180	PCB180_MIN,
	CASE WHEN L_PCB187_CNT =0 THEN NULL ELSE '<' END	L_PCB187_MIN,	PCB187	PCB187_MIN,
	CASE WHEN L_PCB189_CNT =0 THEN NULL ELSE '<' END	L_PCB189_MIN,	PCB189	PCB189_MIN,
			SUM18PCB	SUM18PCB_MIN,
	CASE WHEN L_FLUO_CNT =0 THEN NULL ELSE '<' END	L_FLUO_MIN,	FLUO	FLUO_MIN,
	CASE WHEN L_PHEN_CNT =0 THEN NULL ELSE '<' END	L_PHEN_MIN,	PHEN	PHEN_MIN,
	CASE WHEN L_ANTH_CNT =0 THEN NULL ELSE '<' END	L_ANTH_MIN,	ANTH	ANTH_MIN,
	CASE WHEN L_FLUT_CNT =0 THEN NULL ELSE '<' END	L_FLUT_MIN,	FLUT	FLUT_MIN,
	CASE WHEN L_PYRE_CNT =0 THEN NULL ELSE '<' END	L_PYRE_MIN,	PYRE	PYRE_MIN,
	CASE WHEN L_CHRY_CNT =0 THEN NULL ELSE '<' END	L_CHRY_MIN,	CHRY	CHRY_MIN,
	CASE WHEN L_BBFL_CNT =0 THEN NULL ELSE '<' END	L_BBFL_MIN,	BBFL	BBFL_MIN,
	CASE WHEN L_BKFL_CNT =0 THEN NULL ELSE '<' END	L_BKFL_MIN,	BKFL	BKFL_MIN,
	CASE WHEN L_BAPY_CNT =0 THEN NULL ELSE '<' END	L_BAPY_MIN,	BAPY	BAPY_MIN,
	CASE WHEN L_BGPE_CNT =0 THEN NULL ELSE '<' END	L_BGPE_MIN,	BGPE	BGPE_MIN,
	CASE WHEN L_ACPH_CNT =0 THEN NULL ELSE '<' END	L_ACPH_MIN,	ACPH	ACPH_MIN,
	CASE WHEN L_ACEN_CNT =0 THEN NULL ELSE '<' END	L_ACEN_MIN,	ACEN	ACEN_MIN,
	CASE WHEN L_DAAN_CNT =0 THEN NULL ELSE '<' END	L_DAAN_MIN,	DAAN	DAAN_MIN,
	CASE WHEN L_BANT_CNT =0 THEN NULL ELSE '<' END	L_BANT_MIN,	BANT	BANT_MIN,
	CASE WHEN L_INPY_CNT =0 THEN NULL ELSE '<' END	L_INPY_MIN,	INPY	INPY_MIN,
	CASE WHEN L_NAPH_CNT =0 THEN NULL ELSE '<' END	L_NAPH_MIN,	NAPH	NAPH_MIN,
	CASE WHEN L_PAH_CNT =0 THEN NULL ELSE '<' END	L_PAH_MIN,	PAH	PAH_MIN,
			SUM6LMPAH	SUM6LMPAH_MIN,
			SUM10HMPAH	SUM10HMPAH_MIN,
			SUM16PAH	SUM16PAH_MIN,
	CASE WHEN L_GBHC_CNT =0 THEN NULL ELSE '<' END	L_GBHC_MIN,	GBHC	GBHC_MIN,
	CASE WHEN L_HCB_CNT =0 THEN NULL ELSE '<' END	L_HCB_MIN,	HCB	HCB_MIN,
	CASE WHEN L_HEPT_CNT =0 THEN NULL ELSE '<' END	L_HEPT_MIN,	HEPT	HEPT_MIN,
	CASE WHEN L_ALDR_CNT =0 THEN NULL ELSE '<' END	L_ALDR_MIN,	ALDR	ALDR_MIN,
	CASE WHEN L_HEPO_CNT =0 THEN NULL ELSE '<' END	L_HEPO_MIN,	HEPO	HEPO_MIN,
	CASE WHEN L_ODDE_CNT =0 THEN NULL ELSE '<' END	L_ODDE_MIN,	ODDE	ODDE_MIN,
	CASE WHEN L_END1_CNT =0 THEN NULL ELSE '<' END	L_END1_MIN,	END1	END1_MIN,
	CASE WHEN L_PDDE_CNT =0 THEN NULL ELSE '<' END	L_PDDE_MIN,	PDDE	PDDE_MIN,
	CASE WHEN L_DIEL_CNT =0 THEN NULL ELSE '<' END	L_DIEL_MIN,	DIEL	DIEL_MIN,
	CASE WHEN L_ODDD_CNT =0 THEN NULL ELSE '<' END	L_ODDD_MIN,	ODDD	ODDD_MIN,
	CASE WHEN L_ENDR_CNT =0 THEN NULL ELSE '<' END	L_ENDR_MIN,	ENDR	ENDR_MIN,
	CASE WHEN L_END2_CNT =0 THEN NULL ELSE '<' END	L_END2_MIN,	END2	END2_MIN,
	CASE WHEN L_PDDD_CNT =0 THEN NULL ELSE '<' END	L_PDDD_MIN,	PDDD	PDDD_MIN,
	CASE WHEN L_ODDT_CNT =0 THEN NULL ELSE '<' END	L_ODDT_MIN,	ODDT	ODDT_MIN,
	CASE WHEN L_PDDT_CNT =0 THEN NULL ELSE '<' END	L_PDDT_MIN,	PDDT	PDDT_MIN,
	CASE WHEN L_ABHC_CNT =0 THEN NULL ELSE '<' END	L_ABHC_MIN,	ABHC	ABHC_MIN,
	CASE WHEN L_BBHC_CNT =0 THEN NULL ELSE '<' END	L_BBHC_MIN,	BBHC	BBHC_MIN,
	CASE WHEN L_DBHC_CNT =0 THEN NULL ELSE '<' END	L_DBHC_MIN,	DBHC	DBHC_MIN,
			VIEW_NO	
FROM	(
    SELECT	ZONE,			
        WCZ,			
        SUBZONE,			
        STATION,			
        ACC_YR	YR,		
        COUNT(*)	TOTAL,		
        TYPE,			
        MIN(SZ_63)	SZ_63,		
        MIN(SZ_125)	SZ_125,		
        MIN(SZ_250)	SZ_250,		
        MIN(SZ_500)	SZ_500,		
        MIN(SZ_1000)	SZ_1000,		
        MIN(SZ_2000)	SZ_2000,		
        MIN(SZ_4000)	SZ_4000,		
        MIN(EH)	EH,		
        MIN(TS)	TS,	COUNT(L_TS)	L_TS_CNT,
        MIN(TVS)	TVS,	COUNT(L_TVS)	L_TVS_CNT,
        MIN(MSN_DWR)	MSN_DWR,		
        MIN(MSM_DWR)	MSM_DWR,		
        MIN(MSO_DWR)	MSO_DWR,		
        MIN(SG)	SG,	COUNT(L_SG)	L_SG_CNT,
        MIN(PH)	PH,	COUNT(L_PH)	L_PH_CNT,
        MIN(COD)	COD,	COUNT(L_COD)	L_COD_CNT,
        MIN(TIC)	TIC,	COUNT(L_TIC)	L_TIC_CNT,
        MIN(TOC)	TOC,	COUNT(L_TOC)	L_TOC_CNT,
        MIN(TC)	TC,	COUNT(L_TC)	L_TC_CNT,
        MIN(NH)	NH,	COUNT(L_NH)	L_NH_CNT,
        MIN(TKN)	TKN,	COUNT(L_TKN)	L_TKN_CNT,
        MIN(TP)	TP,	COUNT(L_TP)	L_TP_CNT,
        MIN(INS)	INS,	COUNT(L_INS)	L_INS_CNT,
        MIN(CN)	CN,	COUNT(L_CN)	L_CN_CNT,
        MIN(AL)	AL,	COUNT(L_AL)	L_AL_CNT,
        MIN(AG)	AG,	COUNT(L_AG)	L_AG_CNT,
        MIN(ARS)	ARS,	COUNT(L_ARS)	L_ARS_CNT,
        MIN(BA)	BA,	COUNT(L_BA)	L_BA_CNT,
        MIN(BE)	BE,	COUNT(L_BE)	L_BE_CNT,
        MIN(B)	B,	COUNT(L_B)	L_B_CNT,
        MIN(CD)	CD,	COUNT(L_CD)	L_CD_CNT,
        MIN(CO)	CO,	COUNT(L_CO)	L_CO_CNT,
        MIN(CR)	CR,	COUNT(L_CR)	L_CR_CNT,
        MIN(CU)	CU,	COUNT(L_CU)	L_CU_CNT,
        MIN(FE)	FE,	COUNT(L_FE)	L_FE_CNT,
        MIN(HG)	HG,	COUNT(L_HG)	L_HG_CNT,
        MIN(MN)	MN,	COUNT(L_MN)	L_MN_CNT,
        MIN(MO)	MO,	COUNT(L_MO)	L_MO_CNT,
        MIN(NI)	NI,	COUNT(L_NI)	L_NI_CNT,
        MIN(PB)	PB,	COUNT(L_PB)	L_PB_CNT,
        MIN(SB)	SB,	COUNT(L_SB)	L_SB_CNT,
        MIN(TL)	TL,	COUNT(L_TL)	L_TL_CNT,
        MIN(V)	V,	COUNT(L_V)	L_V_CNT,
        MIN(ZN)	ZN,	COUNT(L_ZN)	L_ZN_CNT,
        MIN(PCB)	PCB,	COUNT(L_PCB)	L_PCB_CNT,
        MIN(PCB8)	PCB8,	COUNT(L_PCB8)	L_PCB8_CNT,
        MIN(PCB18)	PCB18,	COUNT(L_PCB18)	L_PCB18_CNT,
        MIN(PCB28)	PCB28,	COUNT(L_PCB28)	L_PCB28_CNT,
        MIN(PCB31)	PCB31,	COUNT(L_PCB31)	L_PCB31_CNT,
        MIN(PCB44)	PCB44,	COUNT(L_PCB44)	L_PCB44_CNT,
        MIN(PCB52)	PCB52,	COUNT(L_PCB52)	L_PCB52_CNT,
        MIN(PCB66)	PCB66,	COUNT(L_PCB66)	L_PCB66_CNT,
        MIN(PCB77)	PCB77,	COUNT(L_PCB77)	L_PCB77_CNT,
        MIN(PCB81)	PCB81,	COUNT(L_PCB81)	L_PCB81_CNT,
        MIN(PCB101)	PCB101,	COUNT(L_PCB101)	L_PCB101_CNT,
        MIN(PCB105)	PCB105,	COUNT(L_PCB105)	L_PCB105_CNT,
        MIN(PCB114)	PCB114,	COUNT(L_PCB114)	L_PCB114_CNT,
        MIN(PCB118)	PCB118,	COUNT(L_PCB118)	L_PCB118_CNT,
        MIN(PCB123)	PCB123,	COUNT(L_PCB123)	L_PCB123_CNT,
        MIN(PCB126)	PCB126,	COUNT(L_PCB126)	L_PCB126_CNT,
        MIN(PCB128)	PCB128,	COUNT(L_PCB128)	L_PCB128_CNT,
        MIN(PCB138)	PCB138,	COUNT(L_PCB138)	L_PCB138_CNT,
        MIN(PCB149)	PCB149,	COUNT(L_PCB149)	L_PCB149_CNT,
        MIN(PCB153)	PCB153,	COUNT(L_PCB153)	L_PCB153_CNT,
        MIN(PCB156)	PCB156,	COUNT(L_PCB156)	L_PCB156_CNT,
        MIN(PCB157)	PCB157,	COUNT(L_PCB157)	L_PCB157_CNT,
        MIN(PCB167)	PCB167,	COUNT(L_PCB167)	L_PCB167_CNT,
        MIN(PCB169)	PCB169,	COUNT(L_PCB169)	L_PCB169_CNT,
        MIN(PCB170)	PCB170,	COUNT(L_PCB170)	L_PCB170_CNT,
        MIN(PCB180)	PCB180,	COUNT(L_PCB180)	L_PCB180_CNT,
        MIN(PCB187)	PCB187,	COUNT(L_PCB187)	L_PCB187_CNT,
        MIN(PCB189)	PCB189,	COUNT(L_PCB189)	L_PCB189_CNT,
        MIN(SUM18PCB)	SUM18PCB,		
        MIN(FLUO)	FLUO,	COUNT(L_FLUO)	L_FLUO_CNT,
        MIN(PHEN)	PHEN,	COUNT(L_PHEN)	L_PHEN_CNT,
        MIN(ANTH)	ANTH,	COUNT(L_ANTH)	L_ANTH_CNT,
        MIN(FLUT)	FLUT,	COUNT(L_FLUT)	L_FLUT_CNT,
        MIN(PYRE)	PYRE,	COUNT(L_PYRE)	L_PYRE_CNT,
        MIN(CHRY)	CHRY,	COUNT(L_CHRY)	L_CHRY_CNT,
        MIN(BBFL)	BBFL,	COUNT(L_BBFL)	L_BBFL_CNT,
        MIN(BKFL)	BKFL,	COUNT(L_BKFL)	L_BKFL_CNT,
        MIN(BAPY)	BAPY,	COUNT(L_BAPY)	L_BAPY_CNT,
        MIN(BGPE)	BGPE,	COUNT(L_BGPE)	L_BGPE_CNT,
        MIN(ACPH)	ACPH,	COUNT(L_ACPH)	L_ACPH_CNT,
        MIN(ACEN)	ACEN,	COUNT(L_ACEN)	L_ACEN_CNT,
        MIN(DAAN)	DAAN,	COUNT(L_DAAN)	L_DAAN_CNT,
        MIN(BANT)	BANT,	COUNT(L_BANT)	L_BANT_CNT,
        MIN(INPY)	INPY,	COUNT(L_INPY)	L_INPY_CNT,
        MIN(NAPH)	NAPH,	COUNT(L_NAPH)	L_NAPH_CNT,
        MIN(PAH)	PAH,	COUNT(L_PAH)	L_PAH_CNT,
        MIN(SUM6LMPAH)	SUM6LMPAH,		
        MIN(SUM10HMPAH)	SUM10HMPAH,		
        MIN(SUM16PAH)	SUM16PAH,		
        MIN(GBHC)	GBHC,	COUNT(L_GBHC)	L_GBHC_CNT,
        MIN(HCB)	HCB,	COUNT(L_HCB)	L_HCB_CNT,
        MIN(HEPT)	HEPT,	COUNT(L_HEPT)	L_HEPT_CNT,
        MIN(ALDR)	ALDR,	COUNT(L_ALDR)	L_ALDR_CNT,
        MIN(HEPO)	HEPO,	COUNT(L_HEPO)	L_HEPO_CNT,
        MIN(ODDE)	ODDE,	COUNT(L_ODDE)	L_ODDE_CNT,
        MIN(END1)	END1,	COUNT(L_END1)	L_END1_CNT,
        MIN(PDDE)	PDDE,	COUNT(L_PDDE)	L_PDDE_CNT,
        MIN(DIEL)	DIEL,	COUNT(L_DIEL)	L_DIEL_CNT,
        MIN(ODDD)	ODDD,	COUNT(L_ODDD)	L_ODDD_CNT,
        MIN(ENDR)	ENDR,	COUNT(L_ENDR)	L_ENDR_CNT,
        MIN(END2)	END2,	COUNT(L_END2)	L_END2_CNT,
        MIN(PDDD)	PDDD,	COUNT(L_PDDD)	L_PDDD_CNT,
        MIN(ODDT)	ODDT,	COUNT(L_ODDT)	L_ODDT_CNT,
        MIN(PDDT)	PDDT,	COUNT(L_PDDT)	L_PDDT_CNT,
        MIN(ABHC)	ABHC,	COUNT(L_ABHC)	L_ABHC_CNT,
        MIN(BBHC)	BBHC,	COUNT(L_BBHC)	L_BBHC_CNT,
        MIN(DBHC)	DBHC,	COUNT(L_DBHC)	L_DBHC_CNT,
        VIEW_NO			
    FROM	WPG.MARINE_SEDIMENT1	DATA,	
    (SELECT  YEAR(GETDATE()) AS ACC_YR 
    UNION SELECT YEAR(GETDATE()) - 1
    UNION SELECT YEAR(GETDATE()) - 2
    UNION SELECT YEAR(GETDATE()) - 3
    UNION SELECT YEAR(GETDATE()) - 4
    UNION SELECT YEAR(GETDATE()) - 5 )  REPORT_YR
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 4
    GROUP BY ZONE, WCZ, SUBZONE, STATION, ACC_YR, TYPE, VIEW_NO					
)   MS_1;


-- WPG.MARINE_SEDIMENT_AVG1 source

CREATE VIEW WPG.MARINE_SEDIMENT_AVG1 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	YR,
	TOTAL,
	TYPE,
	SZ_63,
	SZ_125,
	SZ_250,
	SZ_500,
	SZ_1000,
	SZ_2000,
	SZ_4000,
	EH,
	TS,
	TVS,
	MSM_DWR,
	MSO_DWR,
	SG,
	PH,
	COD,
	TIC,
	TOC,
	TC,
	NH,
	TKN,
	TP,
	INS,
	CN,
	AL,
	AG,
	ARS,
	BA,
	BE,
	B,
	CD,
	CO,
	CR,
	CU,
	FE,
	HG,
	MN,
	MO,
	NI,
	PB,
	SB,
	TL,
	V,
	ZN,
	PCB,
	PCB8,
	PCB18,
	PCB28,
	PCB31,
	PCB44,
	PCB52,
	PCB66,
	PCB77,
	PCB81,
	PCB101,
	PCB105,
	PCB114,
	PCB118,
	PCB123,
	PCB126,
	PCB128,
	PCB138,
	PCB149,
	PCB153,
	PCB156,
	PCB157,
	PCB167,
	PCB169,
	PCB170,
	PCB180,
	PCB187,
	PCB189,
	SUM18PCB,
	FLUO,
	PHEN,
	ANTH,
	FLUT,
	PYRE,
	CHRY,
	BBFL,
	BKFL,
	BAPY,
	BGPE,
	ACPH,
	ACEN,
	DAAN,
	BANT,
	INPY,
	NAPH,
	PAH,
	SUM6LMPAH,
	SUM10HMPAH,
	SUM16PAH,
	GBHC,
	HCB,
	HEPT,
	ALDR,
	HEPO,
	ODDE,
	END1,
	PDDE,
	DIEL,
	ODDD,
	ENDR,
	END2,
	PDDD,
	ODDT,
	PDDT,
	ABHC,
	BBHC,
	DBHC,
	VIEW_NO
FROM	WPG.MARINE_SEDIMENT_X_AVG1
UNION ALL
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	YR,
	TOTAL,
	TYPE,
	NULL	SZ_63,
	NULL	SZ_125,
	NULL	SZ_250,
	NULL	SZ_500,
	NULL	SZ_1000,
	NULL	SZ_2000,
	NULL	SZ_4000,
	NULL	EH,
	TS,
	TVS,
	MSM_DWR,
	MSO_DWR,
	SG,
	PH,
	COD,
	TIC,
	TOC,
	TC,
	NH,
	TKN,
	TP,
	INS,
	CN,
	AL,
	AG,
	ARS,
	BA,
	BE,
	B,
	CD,
	CO,
	CR,
	CU,
	FE,
	HG,
	MN,
	MO,
	NI,
	PB,
	SB,
	TL,
	V,
	ZN,
	PCB,
	PCB8,
	PCB18,
	PCB28,
	PCB31,
	PCB44,
	PCB52,
	PCB66,
	PCB77,
	PCB81,
	PCB101,
	PCB105,
	PCB114,
	PCB118,
	PCB123,
	PCB126,
	PCB128,
	PCB138,
	PCB149,
	PCB153,
	PCB156,
	PCB157,
	PCB167,
	PCB169,
	PCB170,
	PCB180,
	PCB187,
	PCB189,
	SUM18PCB,
	FLUO,
	PHEN,
	ANTH,
	FLUT,
	PYRE,
	CHRY,
	BBFL,
	BKFL,
	BAPY,
	BGPE,
	ACPH,
	ACEN,
	DAAN,
	BANT,
	INPY,
	NAPH,
	PAH,
	SUM6LMPAH,
	SUM10HMPAH,
	SUM16PAH,
	GBHC,
	HCB,
	HEPT,
	ALDR,
	HEPO,
	ODDE,
	END1,
	PDDE,
	DIEL,
	ODDD,
	ENDR,
	END2,
	PDDD,
	ODDT,
	PDDT,
	ABHC,
	BBHC,
	DBHC,
	VIEW_NO
FROM	WPG.MARINE_SEDIMENT_Y_AVG1;


-- WPG.MARINE_SEDIMENT_AVG2 source

CREATE VIEW WPG.MARINE_SEDIMENT_AVG2 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	YR,
	TOTAL,
	TYPE,
	SZ_63,
	SZ_125,
	SZ_250,
	SZ_500,
	SZ_1000,
	SZ_2000,
	SZ_4000,
	EH,
	TS,
	TVS,
	MSM_DWR,
	MSO_DWR,
	SG,
	PH,
	COD,
	TIC,
	TOC,
	TC,
	NH,
	TKN,
	TP,
	INS,
	CN,
	AL,
	AG,
	ARS,
	BA,
	BE,
	B,
	CD,
	CO,
	CR,
	CU,
	FE,
	HG,
	MN,
	MO,
	NI,
	PB,
	SB,
	TL,
	V,
	ZN,
	PCB,
	PCB8,
	PCB18,
	PCB28,
	PCB31,
	PCB44,
	PCB52,
	PCB66,
	PCB77,
	PCB81,
	PCB101,
	PCB105,
	PCB114,
	PCB118,
	PCB123,
	PCB126,
	PCB128,
	PCB138,
	PCB149,
	PCB153,
	PCB156,
	PCB157,
	PCB167,
	PCB169,
	PCB170,
	PCB180,
	PCB187,
	PCB189,
	SUM18PCB,
	FLUO,
	PHEN,
	ANTH,
	FLUT,
	PYRE,
	CHRY,
	BBFL,
	BKFL,
	BAPY,
	BGPE,
	ACPH,
	ACEN,
	DAAN,
	BANT,
	INPY,
	NAPH,
	PAH,
	SUM6LMPAH,
	SUM10HMPAH,
	SUM16PAH,
	GBHC,
	HCB,
	HEPT,
	ALDR,
	HEPO,
	ODDE,
	END1,
	PDDE,
	DIEL,
	ODDD,
	ENDR,
	END2,
	PDDD,
	ODDT,
	PDDT,
	ABHC,
	BBHC,
	DBHC
FROM 	WPG.MARINE_SEDIMENT_X_AVG1
WHERE	VIEW_NO >= 2
AND		YR <= YEAR(GETDATE());


-- WPG.MARINE_SEDIMENT_GLABM1 source

CREATE VIEW WPG.MARINE_SEDIMENT_GLABM1 AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	M.TYPE	 	TYPE,
	M.MSM_DWR 	MSM_DWR,
	M.L_AL 		L_AL,
	M.AL 		AL,
	M.L_AG 		L_AG,
	M.AG 		AG,
	M.L_ARSENIC 	L_ARS,
	M.ARSENIC 	ARS,
	M.L_BA 		L_BA,
	M.BA 		BA,
	M.L_BE 		L_BE,
	M.BE		BE,
	M.L_B 		L_B,
	M.B 		B,
	M.L_CD 		L_CD,
	M.CD 		CD,
	M.L_CO 		L_CO,
	M.CO 		CO,
	M.L_CR 		L_CR,
	M.CR 		CR,
	M.L_CU 		L_CU,
	M.CU 		CU,
	M.L_FE 		L_FE,
	M.FE 		FE,
	M.L_HG 		L_HG,
	M.HG 		HG,
	M.L_MN 		L_MN,
	M.MN 		MN,
	M.L_MO 		L_MO,
	M.MO 		MO,
	M.L_NI 		L_NI,
	M.NI 		NI,
	M.L_PB 		L_PB,
	M.PB 		PB,
	M.L_SB 		L_SB,
	M.SB 		SB,
	M.L_TL 		L_TL,
	M.TL 		TL,
	M.L_V 		L_V,
	M.V 		V,
	M.L_ZN 		L_ZN,
	M.ZN 		ZN,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.MS_VISIT	V
LEFT OUTER JOIN	WPG.MS_GLABM	M	ON V.MSVISIT_ID = M.MSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SEDIMENT_GLABN1 source

CREATE VIEW WPG.MARINE_SEDIMENT_GLABN1 AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	N.TYPE	 	TYPE,
	N.L_TS 		L_TS,
	N.TS 		TS,
	N.L_TVS 	L_TVS,
	N.TVS 		TVS,
	N.L_SG 		L_SG,
	N.SG 		SG,
	N.L_PH 		L_PH,
	N.PH 		PH,
	N.L_COD 	L_COD,
	N.COD 		COD,
	N.L_TIC 	L_TIC,
	N.TIC 		TIC,
	N.L_TOC 	L_TOC,
	N.TOC 		TOC,
	N.L_TC	 	L_TC,
	N.TC 		TC,
	N.L_NH 		L_NH,
	N.NH 		NH,
	N.L_TKN 	L_TKN,
	N.TKN 		TKN,
	N.L_TP 		L_TP,
	N.TP 		TP,
	N.L_SULPHIDE 	L_INS,
	N.SULPHIDE 	INS,
	N.L_CN 		L_CN,
	N.CN 		CN,
	ST.CMMVIEW	VIEW_NO,
	N.MSN_DWR	DWR
FROM		WPG.MS_VISIT	V
LEFT OUTER JOIN	WPG.MS_GLABN 	N	ON V.MSVISIT_ID = N.MSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SEDIMENT_OC1 source

CREATE VIEW WPG.MARINE_SEDIMENT_OC1 AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME 	STIME,
	V.SAMPLE_NO 	SAM_NO,
	O3.TYPE	 	TYPE,
	O3.L_GBHC 	L_GBHC,
	O3.GBHC 	GBHC,
	O3.L_HCB 	L_HCB,
	O3.HCB 		HCB,
	O3.L_HEPT 	L_HEPT,
	O3.HEPT 	HEPT,
	O3.L_ALDR 	L_ALDR,
	O3.ALDR 	ALDR,
	O3.L_HEPO 	L_HEPO,
	O3.HEPO 	HEPO,
	O3.L_ODDE 	L_ODDE,
	O3.ODDE 	ODDE,
	O3.L_END1 	L_END1,
	O3.END1 	END1,
	O3.L_PDDE 	L_PDDE,
	O3.PDDE 	PDDE,
	O3.L_DIEL 	L_DIEL,
	O3.DIEL 	DIEL,
	O3.L_ODDD 	L_ODDD,
	O3.ODDD 	ODDD,
	O3.L_ENDR 	L_ENDR,
	O3.ENDR 	ENDR,
	O3.L_END2 	L_END2,
	O3.END2 	END2,
	O3.L_PDDD 	L_PDDD,
	O3.PDDD 	PDDD,
	O3.L_ODDT 	L_ODDT,
	O3.ODDT 	ODDT,
	O3.L_PDDT 	L_PDDT,
	O3.PDDT 	PDDT,
	O3.L_ABHC 	L_ABHC,
	O3.ABHC 	ABHC,
	O3.L_BBHC 	L_BBHC,
	O3.BBHC 	BBHC,
	O3.L_DBHC 	L_DBHC,
	O3.DBHC 	DBHC,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.MS_VISIT		V
LEFT OUTER JOIN	WPG.MS_GLAB_OC		O3	ON V.MSVISIT_ID = O3.MSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION		ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ		SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ		CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE		TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SEDIMENT_PAH1 source

CREATE VIEW WPG.MARINE_SEDIMENT_PAH1 AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME 	STIME,
	V.SAMPLE_NO 	SAM_NO,
	O2.TYPE	 	TYPE,
	O2.L_FLUO 	L_FLUO,
	O2.FLUO 	FLUO,
	O2.L_PHEN 	L_PHEN,
	O2.PHEN 	PHEN,
	O2.L_ANTH 	L_ANTH,
	O2.ANTH 	ANTH,
	O2.L_FLUT 	L_FLUT,
	O2.FLUT 	FLUT,
	O2.L_PYRE 	L_PYRE,
	O2.PYRE 	PYRE,
	O2.L_CHRY 	L_CHRY,
	O2.CHRY 	CHRY,
	O2.L_BBFL 	L_BBFL,
	O2.BBFL 	BBFL,
	O2.L_BKFL 	L_BKFL,
	O2.BKFL 	BKFL,
	O2.L_BAPY 	L_BAPY,
	O2.BAPY 	BAPY,
	O2.L_BGPE 	L_BGPE,
	O2.BGPE 	BGPE,
	O2.L_ACPH 	L_ACPH,
	O2.ACPH 	ACPH,
	O2.L_ACEN 	L_ACEN,
	O2.ACEN 	ACEN,
	O2.L_DAAN 	L_DAAN,
	O2.DAAN 	DAAN,
	O2.L_BANT 	L_BANT,
	O2.BANT 	BANT,
	O2.L_INPY 	L_INPY,
	O2.INPY 	INPY,
	O2.L_NAPH 	L_NAPH,
	O2.NAPH 	NAPH,
	O2.L_PAH 	L_PAH,
	O2.PAH 		PAH,
	O2.SUM6LMPAH	SUM6LMPAH,
	O2.SUM10HMPAH	SUM10HMPAH,
	O2.SUM16PAH	SUM16PAH,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.MS_VISIT		V
LEFT OUTER JOIN	WPG.MS_PAH_CAL		O2	ON V.MSVISIT_ID = O2.MSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION		ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ		SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ		CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE		TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SEDIMENT_PCB1 source

CREATE VIEW WPG.MARINE_SEDIMENT_PCB1 AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	O1.TYPE	 	TYPE,
	O1.MSO_DWR 	MSO_DWR,
	O1.L_PCB 	L_PCB,
	O1.PCB 		PCB,
	O1.L_PCB8 	L_PCB8,
	O1.PCB8		PCB8,
	O1.L_PCB18 	L_PCB18,
	O1.PCB18 	PCB18,
	O1.L_PCB28 	L_PCB28,
	O1.PCB28 	PCB28,
	O1.L_PCB31 	L_PCB31,
	O1.PCB31 	PCB31,
	O1.L_PCB44 	L_PCB44,
	O1.PCB44 	PCB44,
	O1.L_PCB52 	L_PCB52,
	O1.PCB52 	PCB52,
	O1.L_PCB66 	L_PCB66,
	O1.PCB66 	PCB66,
	O1.L_PCB77 	L_PCB77,
	O1.PCB77 	PCB77,
	O1.L_PCB81 	L_PCB81,
	O1.PCB81 	PCB81,
	O1.L_PCB101 	L_PCB101,
	O1.PCB101 	PCB101,
	O1.L_PCB105 	L_PCB105,
	O1.PCB105 	PCB105,
	O1.L_PCB114 	L_PCB114,
	O1.PCB114 	PCB114,
	O1.L_PCB118 	L_PCB118,
	O1.PCB118 	PCB118,
	O1.L_PCB123 	L_PCB123,
	O1.PCB123 	PCB123,
	O1.L_PCB126 	L_PCB126,
	O1.PCB126 	PCB126,
	O1.L_PCB128 	L_PCB128,
	O1.PCB128 	PCB128,
	O1.L_PCB138 	L_PCB138,
	O1.PCB138 	PCB138,
	O1.L_PCB149 	L_PCB149,
	O1.PCB149 	PCB149,
	O1.L_PCB153 	L_PCB153,
	O1.PCB153 	PCB153,
	O1.L_PCB156 	L_PCB156,
	O1.PCB156 	PCB156,
	O1.L_PCB157 	L_PCB157,
	O1.PCB157 	PCB157,
	O1.L_PCB167 	L_PCB167,
	O1.PCB167 	PCB167,
	O1.L_PCB169 	L_PCB169,
	O1.PCB169 	PCB169,
	O1.L_PCB170 	L_PCB170,
	O1.PCB170 	PCB170,
	O1.L_PCB180 	L_PCB180,
	O1.PCB180 	PCB180,
	O1.L_PCB187 	L_PCB187,
	O1.PCB187 	PCB187,
	O1.L_PCB189 	L_PCB189,
	O1.PCB189 	PCB189,
	O1.SUM18PCB	SUM18PCB,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.MS_VISIT	V
LEFT OUTER JOIN	WPG.MS_PCB_CAL	O1	ON V.MSVISIT_ID = O1.MSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SEDIMENT_PS1 source

CREATE VIEW WPG.MARINE_SEDIMENT_PS1 AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	PS.SZ_63	SZ_63,
	PS.SZ_125	SZ_125,
	PS.SZ_250	SZ_250,
	PS.SZ_500	SZ_500,
	PS.SZ_1000	SZ_1000,
	PS.SZ_2000	SZ_2000,
	PS.SZ_4000	SZ_4000,
	PS.EH		EH,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.MS_VISIT	V
LEFT OUTER JOIN	WPG.MS_PS	PS	ON V.MSVISIT_ID = PS.MSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SEDIMENT_SUMMARY1 source

CREATE VIEW WPG.MARINE_SEDIMENT_SUMMARY1 AS
SELECT	AV.ZONE,	
	AV.WCZ,	
	AV.SUBZONE,	
	AV.STATION,	
		AV.YR,
		AV.TOTAL,
	AV.TYPE,	
		AV.SZ_63_AVG,
		AV.SZ_125_AVG,
		AV.SZ_250_AVG,
		AV.SZ_500_AVG,
		AV.SZ_1000_AVG,
		AV.SZ_2000_AVG,
		AV.SZ_4000_AVG,
		AV.EH_AVG,
	AV.L_TS_AVG,	AV.TS_AVG,
	AV.L_TVS_AVG,	AV.TVS_AVG,
		AV.MSN_DWR_AVG,
		AV.MSM_DWR_AVG,
		AV.MSO_DWR_AVG,
	AV.L_SG_AVG,	AV.SG_AVG,
	AV.L_PH_AVG,	AV.PH_AVG,
	AV.L_COD_AVG,	AV.COD_AVG,
	AV.L_TIC_AVG,	AV.TIC_AVG,
	AV.L_TOC_AVG,	AV.TOC_AVG,
	AV.L_TC_AVG,	AV.TC_AVG,
	AV.L_NH_AVG,	AV.NH_AVG,
	AV.L_TKN_AVG,	AV.TKN_AVG,
	AV.L_TP_AVG,	AV.TP_AVG,
	AV.L_INS_AVG,	AV.INS_AVG,
	AV.L_CN_AVG,	AV.CN_AVG,
	AV.L_AL_AVG,	AV.AL_AVG,
	AV.L_AG_AVG,	AV.AG_AVG,
	AV.L_ARS_AVG,	AV.ARS_AVG,
	AV.L_BA_AVG,	AV.BA_AVG,
	AV.L_BE_AVG,	AV.BE_AVG,
	AV.L_B_AVG,	AV.B_AVG,
	AV.L_CD_AVG,	AV.CD_AVG,
	AV.L_CO_AVG,	AV.CO_AVG,
	AV.L_CR_AVG,	AV.CR_AVG,
	AV.L_CU_AVG,	AV.CU_AVG,
	AV.L_FE_AVG,	AV.FE_AVG,
	AV.L_HG_AVG,	AV.HG_AVG,
	AV.L_MN_AVG,	AV.MN_AVG,
	AV.L_MO_AVG,	AV.MO_AVG,
	AV.L_NI_AVG,	AV.NI_AVG,
	AV.L_PB_AVG,	AV.PB_AVG,
	AV.L_SB_AVG,	AV.SB_AVG,
	AV.L_TL_AVG,	AV.TL_AVG,
	AV.L_V_AVG,	AV.V_AVG,
	AV.L_ZN_AVG,	AV.ZN_AVG,
	AV.L_PCB_AVG,	AV.PCB_AVG,
	AV.L_PCB8_AVG,	AV.PCB8_AVG,
	AV.L_PCB18_AVG,	AV.PCB18_AVG,
	AV.L_PCB28_AVG,	AV.PCB28_AVG,
	AV.L_PCB31_AVG,	AV.PCB31_AVG,
	AV.L_PCB44_AVG,	AV.PCB44_AVG,
	AV.L_PCB52_AVG,	AV.PCB52_AVG,
	AV.L_PCB66_AVG,	AV.PCB66_AVG,
	AV.L_PCB77_AVG,	AV.PCB77_AVG,
	AV.L_PCB81_AVG,	AV.PCB81_AVG,
	AV.L_PCB101_AVG,	AV.PCB101_AVG,
	AV.L_PCB105_AVG,	AV.PCB105_AVG,
	AV.L_PCB114_AVG,	AV.PCB114_AVG,
	AV.L_PCB118_AVG,	AV.PCB118_AVG,
	AV.L_PCB123_AVG,	AV.PCB123_AVG,
	AV.L_PCB126_AVG,	AV.PCB126_AVG,
	AV.L_PCB128_AVG,	AV.PCB128_AVG,
	AV.L_PCB138_AVG,	AV.PCB138_AVG,
	AV.L_PCB149_AVG,	AV.PCB149_AVG,
	AV.L_PCB153_AVG,	AV.PCB153_AVG,
	AV.L_PCB156_AVG,	AV.PCB156_AVG,
	AV.L_PCB157_AVG,	AV.PCB157_AVG,
	AV.L_PCB167_AVG,	AV.PCB167_AVG,
	AV.L_PCB169_AVG,	AV.PCB169_AVG,
	AV.L_PCB170_AVG,	AV.PCB170_AVG,
	AV.L_PCB180_AVG,	AV.PCB180_AVG,
	AV.L_PCB187_AVG,	AV.PCB187_AVG,
	AV.L_PCB189_AVG,	AV.PCB189_AVG,
		AV.SUM18PCB_AVG,
	AV.L_FLUO_AVG,	AV.FLUO_AVG,
	AV.L_PHEN_AVG,	AV.PHEN_AVG,
	AV.L_ANTH_AVG,	AV.ANTH_AVG,
	AV.L_FLUT_AVG,	AV.FLUT_AVG,
	AV.L_PYRE_AVG,	AV.PYRE_AVG,
	AV.L_CHRY_AVG,	AV.CHRY_AVG,
	AV.L_BBFL_AVG,	AV.BBFL_AVG,
	AV.L_BKFL_AVG,	AV.BKFL_AVG,
	AV.L_BAPY_AVG,	AV.BAPY_AVG,
	AV.L_BGPE_AVG,	AV.BGPE_AVG,
	AV.L_ACPH_AVG,	AV.ACPH_AVG,
	AV.L_ACEN_AVG,	AV.ACEN_AVG,
	AV.L_DAAN_AVG,	AV.DAAN_AVG,
	AV.L_BANT_AVG,	AV.BANT_AVG,
	AV.L_INPY_AVG,	AV.INPY_AVG,
	AV.L_NAPH_AVG,	AV.NAPH_AVG,
	AV.L_PAH_AVG,	AV.PAH_AVG,
		AV.SUM6LMPAH_AVG,
		AV.SUM10HMPAH_AVG,
		AV.SUM16PAH_AVG,
	AV.L_GBHC_AVG,	AV.GBHC_AVG,
	AV.L_HCB_AVG,	AV.HCB_AVG,
	AV.L_HEPT_AVG,	AV.HEPT_AVG,
	AV.L_ALDR_AVG,	AV.ALDR_AVG,
	AV.L_HEPO_AVG,	AV.HEPO_AVG,
	AV.L_ODDE_AVG,	AV.ODDE_AVG,
	AV.L_END1_AVG,	AV.END1_AVG,
	AV.L_PDDE_AVG,	AV.PDDE_AVG,
	AV.L_DIEL_AVG,	AV.DIEL_AVG,
	AV.L_ODDD_AVG,	AV.ODDD_AVG,
	AV.L_ENDR_AVG,	AV.ENDR_AVG,
	AV.L_END2_AVG,	AV.END2_AVG,
	AV.L_PDDD_AVG,	AV.PDDD_AVG,
	AV.L_ODDT_AVG,	AV.ODDT_AVG,
	AV.L_PDDT_AVG,	AV.PDDT_AVG,
	AV.L_ABHC_AVG,	AV.ABHC_AVG,
	AV.L_BBHC_AVG,	AV.BBHC_AVG,
	AV.L_DBHC_AVG,	AV.DBHC_AVG,
		MI.SZ_63_MIN,
		MI.SZ_125_MIN,
		MI.SZ_250_MIN,
		MI.SZ_500_MIN,
		MI.SZ_1000_MIN,
		MI.SZ_2000_MIN,
		MI.SZ_4000_MIN,
		MI.EH_MIN,
	MI.L_TS_MIN,	MI.TS_MIN,
	MI.L_TVS_MIN,	MI.TVS_MIN,
		MI.MSN_DWR_MIN,
		MI.MSM_DWR_MIN,
		MI.MSO_DWR_MIN,
	MI.L_SG_MIN,	MI.SG_MIN,
	MI.L_PH_MIN,	MI.PH_MIN,
	MI.L_COD_MIN,	MI.COD_MIN,
	MI.L_TIC_MIN,	MI.TIC_MIN,
	MI.L_TOC_MIN,	MI.TOC_MIN,
	MI.L_TC_MIN,	MI.TC_MIN,
	MI.L_NH_MIN,	MI.NH_MIN,
	MI.L_TKN_MIN,	MI.TKN_MIN,
	MI.L_TP_MIN,	MI.TP_MIN,
	MI.L_INS_MIN,	MI.INS_MIN,
	MI.L_CN_MIN,	MI.CN_MIN,
	MI.L_AL_MIN,	MI.AL_MIN,
	MI.L_AG_MIN,	MI.AG_MIN,
	MI.L_ARS_MIN,	MI.ARS_MIN,
	MI.L_BA_MIN,	MI.BA_MIN,
	MI.L_BE_MIN,	MI.BE_MIN,
	MI.L_B_MIN,	MI.B_MIN,
	MI.L_CD_MIN,	MI.CD_MIN,
	MI.L_CO_MIN,	MI.CO_MIN,
	MI.L_CR_MIN,	MI.CR_MIN,
	MI.L_CU_MIN,	MI.CU_MIN,
	MI.L_FE_MIN,	MI.FE_MIN,
	MI.L_HG_MIN,	MI.HG_MIN,
	MI.L_MN_MIN,	MI.MN_MIN,
	MI.L_MO_MIN,	MI.MO_MIN,
	MI.L_NI_MIN,	MI.NI_MIN,
	MI.L_PB_MIN,	MI.PB_MIN,
	MI.L_SB_MIN,	MI.SB_MIN,
	MI.L_TL_MIN,	MI.TL_MIN,
	MI.L_V_MIN,	MI.V_MIN,
	MI.L_ZN_MIN,	MI.ZN_MIN,
	MI.L_PCB_MIN,	MI.PCB_MIN,
	MI.L_PCB8_MIN,	MI.PCB8_MIN,
	MI.L_PCB18_MIN,	MI.PCB18_MIN,
	MI.L_PCB28_MIN,	MI.PCB28_MIN,
	MI.L_PCB31_MIN,	MI.PCB31_MIN,
	MI.L_PCB44_MIN,	MI.PCB44_MIN,
	MI.L_PCB52_MIN,	MI.PCB52_MIN,
	MI.L_PCB66_MIN,	MI.PCB66_MIN,
	MI.L_PCB77_MIN,	MI.PCB77_MIN,
	MI.L_PCB81_MIN,	MI.PCB81_MIN,
	MI.L_PCB101_MIN,	MI.PCB101_MIN,
	MI.L_PCB105_MIN,	MI.PCB105_MIN,
	MI.L_PCB114_MIN,	MI.PCB114_MIN,
	MI.L_PCB118_MIN,	MI.PCB118_MIN,
	MI.L_PCB123_MIN,	MI.PCB123_MIN,
	MI.L_PCB126_MIN,	MI.PCB126_MIN,
	MI.L_PCB128_MIN,	MI.PCB128_MIN,
	MI.L_PCB138_MIN,	MI.PCB138_MIN,
	MI.L_PCB149_MIN,	MI.PCB149_MIN,
	MI.L_PCB153_MIN,	MI.PCB153_MIN,
	MI.L_PCB156_MIN,	MI.PCB156_MIN,
	MI.L_PCB157_MIN,	MI.PCB157_MIN,
	MI.L_PCB167_MIN,	MI.PCB167_MIN,
	MI.L_PCB169_MIN,	MI.PCB169_MIN,
	MI.L_PCB170_MIN,	MI.PCB170_MIN,
	MI.L_PCB180_MIN,	MI.PCB180_MIN,
	MI.L_PCB187_MIN,	MI.PCB187_MIN,
	MI.L_PCB189_MIN,	MI.PCB189_MIN,
		MI.SUM18PCB_MIN,
	MI.L_FLUO_MIN,	MI.FLUO_MIN,
	MI.L_PHEN_MIN,	MI.PHEN_MIN,
	MI.L_ANTH_MIN,	MI.ANTH_MIN,
	MI.L_FLUT_MIN,	MI.FLUT_MIN,
	MI.L_PYRE_MIN,	MI.PYRE_MIN,
	MI.L_CHRY_MIN,	MI.CHRY_MIN,
	MI.L_BBFL_MIN,	MI.BBFL_MIN,
	MI.L_BKFL_MIN,	MI.BKFL_MIN,
	MI.L_BAPY_MIN,	MI.BAPY_MIN,
	MI.L_BGPE_MIN,	MI.BGPE_MIN,
	MI.L_ACPH_MIN,	MI.ACPH_MIN,
	MI.L_ACEN_MIN,	MI.ACEN_MIN,
	MI.L_DAAN_MIN,	MI.DAAN_MIN,
	MI.L_BANT_MIN,	MI.BANT_MIN,
	MI.L_INPY_MIN,	MI.INPY_MIN,
	MI.L_NAPH_MIN,	MI.NAPH_MIN,
	MI.L_PAH_MIN,	MI.PAH_MIN,
		MI.SUM6LMPAH_MIN,
		MI.SUM10HMPAH_MIN,
		MI.SUM16PAH_MIN,
	MI.L_GBHC_MIN,	MI.GBHC_MIN,
	MI.L_HCB_MIN,	MI.HCB_MIN,
	MI.L_HEPT_MIN,	MI.HEPT_MIN,
	MI.L_ALDR_MIN,	MI.ALDR_MIN,
	MI.L_HEPO_MIN,	MI.HEPO_MIN,
	MI.L_ODDE_MIN,	MI.ODDE_MIN,
	MI.L_END1_MIN,	MI.END1_MIN,
	MI.L_PDDE_MIN,	MI.PDDE_MIN,
	MI.L_DIEL_MIN,	MI.DIEL_MIN,
	MI.L_ODDD_MIN,	MI.ODDD_MIN,
	MI.L_ENDR_MIN,	MI.ENDR_MIN,
	MI.L_END2_MIN,	MI.END2_MIN,
	MI.L_PDDD_MIN,	MI.PDDD_MIN,
	MI.L_ODDT_MIN,	MI.ODDT_MIN,
	MI.L_PDDT_MIN,	MI.PDDT_MIN,
	MI.L_ABHC_MIN,	MI.ABHC_MIN,
	MI.L_BBHC_MIN,	MI.BBHC_MIN,
	MI.L_DBHC_MIN,	MI.DBHC_MIN,
		MX.SZ_63_MAX,
		MX.SZ_125_MAX,
		MX.SZ_250_MAX,
		MX.SZ_500_MAX,
		MX.SZ_1000_MAX,
		MX.SZ_2000_MAX,
		MX.SZ_4000_MAX,
		MX.EH_MAX,
	MX.L_TS_MAX,	MX.TS_MAX,
	MX.L_TVS_MAX,	MX.TVS_MAX,
		MX.MSN_DWR_MAX,
		MX.MSM_DWR_MAX,
		MX.MSO_DWR_MAX,
	MX.L_SG_MAX,	MX.SG_MAX,
	MX.L_PH_MAX,	MX.PH_MAX,
	MX.L_COD_MAX,	MX.COD_MAX,
	MX.L_TIC_MAX,	MX.TIC_MAX,
	MX.L_TOC_MAX,	MX.TOC_MAX,
	MX.L_TC_MAX,	MX.TC_MAX,
	MX.L_NH_MAX,	MX.NH_MAX,
	MX.L_TKN_MAX,	MX.TKN_MAX,
	MX.L_TP_MAX,	MX.TP_MAX,
	MX.L_INS_MAX,	MX.INS_MAX,
	MX.L_CN_MAX,	MX.CN_MAX,
	MX.L_AL_MAX,	MX.AL_MAX,
	MX.L_AG_MAX,	MX.AG_MAX,
	MX.L_ARS_MAX,	MX.ARS_MAX,
	MX.L_BA_MAX,	MX.BA_MAX,
	MX.L_BE_MAX,	MX.BE_MAX,
	MX.L_B_MAX,	MX.B_MAX,
	MX.L_CD_MAX,	MX.CD_MAX,
	MX.L_CO_MAX,	MX.CO_MAX,
	MX.L_CR_MAX,	MX.CR_MAX,
	MX.L_CU_MAX,	MX.CU_MAX,
	MX.L_FE_MAX,	MX.FE_MAX,
	MX.L_HG_MAX,	MX.HG_MAX,
	MX.L_MN_MAX,	MX.MN_MAX,
	MX.L_MO_MAX,	MX.MO_MAX,
	MX.L_NI_MAX,	MX.NI_MAX,
	MX.L_PB_MAX,	MX.PB_MAX,
	MX.L_SB_MAX,	MX.SB_MAX,
	MX.L_TL_MAX,	MX.TL_MAX,
	MX.L_V_MAX,	MX.V_MAX,
	MX.L_ZN_MAX,	MX.ZN_MAX,
	MX.L_PCB_MAX,	MX.PCB_MAX,
	MX.L_PCB8_MAX,	MX.PCB8_MAX,
	MX.L_PCB18_MAX,	MX.PCB18_MAX,
	MX.L_PCB28_MAX,	MX.PCB28_MAX,
	MX.L_PCB31_MAX,	MX.PCB31_MAX,
	MX.L_PCB44_MAX,	MX.PCB44_MAX,
	MX.L_PCB52_MAX,	MX.PCB52_MAX,
	MX.L_PCB66_MAX,	MX.PCB66_MAX,
	MX.L_PCB77_MAX,	MX.PCB77_MAX,
	MX.L_PCB81_MAX,	MX.PCB81_MAX,
	MX.L_PCB101_MAX,	MX.PCB101_MAX,
	MX.L_PCB105_MAX,	MX.PCB105_MAX,
	MX.L_PCB114_MAX,	MX.PCB114_MAX,
	MX.L_PCB118_MAX,	MX.PCB118_MAX,
	MX.L_PCB123_MAX,	MX.PCB123_MAX,
	MX.L_PCB126_MAX,	MX.PCB126_MAX,
	MX.L_PCB128_MAX,	MX.PCB128_MAX,
	MX.L_PCB138_MAX,	MX.PCB138_MAX,
	MX.L_PCB149_MAX,	MX.PCB149_MAX,
	MX.L_PCB153_MAX,	MX.PCB153_MAX,
	MX.L_PCB156_MAX,	MX.PCB156_MAX,
	MX.L_PCB157_MAX,	MX.PCB157_MAX,
	MX.L_PCB167_MAX,	MX.PCB167_MAX,
	MX.L_PCB169_MAX,	MX.PCB169_MAX,
	MX.L_PCB170_MAX,	MX.PCB170_MAX,
	MX.L_PCB180_MAX,	MX.PCB180_MAX,
	MX.L_PCB187_MAX,	MX.PCB187_MAX,
	MX.L_PCB189_MAX,	MX.PCB189_MAX,
		MX.SUM18PCB_MAX,
	MX.L_FLUO_MAX,	MX.FLUO_MAX,
	MX.L_PHEN_MAX,	MX.PHEN_MAX,
	MX.L_ANTH_MAX,	MX.ANTH_MAX,
	MX.L_FLUT_MAX,	MX.FLUT_MAX,
	MX.L_PYRE_MAX,	MX.PYRE_MAX,
	MX.L_CHRY_MAX,	MX.CHRY_MAX,
	MX.L_BBFL_MAX,	MX.BBFL_MAX,
	MX.L_BKFL_MAX,	MX.BKFL_MAX,
	MX.L_BAPY_MAX,	MX.BAPY_MAX,
	MX.L_BGPE_MAX,	MX.BGPE_MAX,
	MX.L_ACPH_MAX,	MX.ACPH_MAX,
	MX.L_ACEN_MAX,	MX.ACEN_MAX,
	MX.L_DAAN_MAX,	MX.DAAN_MAX,
	MX.L_BANT_MAX,	MX.BANT_MAX,
	MX.L_INPY_MAX,	MX.INPY_MAX,
	MX.L_NAPH_MAX,	MX.NAPH_MAX,
	MX.L_PAH_MAX,	MX.PAH_MAX,
		MX.SUM6LMPAH_MAX,
		MX.SUM10HMPAH_MAX,
		MX.SUM16PAH_MAX,
	MX.L_GBHC_MAX,	MX.GBHC_MAX,
	MX.L_HCB_MAX,	MX.HCB_MAX,
	MX.L_HEPT_MAX,	MX.HEPT_MAX,
	MX.L_ALDR_MAX,	MX.ALDR_MAX,
	MX.L_HEPO_MAX,	MX.HEPO_MAX,
	MX.L_ODDE_MAX,	MX.ODDE_MAX,
	MX.L_END1_MAX,	MX.END1_MAX,
	MX.L_PDDE_MAX,	MX.PDDE_MAX,
	MX.L_DIEL_MAX,	MX.DIEL_MAX,
	MX.L_ODDD_MAX,	MX.ODDD_MAX,
	MX.L_ENDR_MAX,	MX.ENDR_MAX,
	MX.L_END2_MAX,	MX.END2_MAX,
	MX.L_PDDD_MAX,	MX.PDDD_MAX,
	MX.L_ODDT_MAX,	MX.ODDT_MAX,
	MX.L_PDDT_MAX,	MX.PDDT_MAX,
	MX.L_ABHC_MAX,	MX.ABHC_MAX,
	MX.L_BBHC_MAX,	MX.BBHC_MAX,
	MX.L_DBHC_MAX,	MX.DBHC_MAX,
	AV.VIEW_NO
FROM    WPG.MARINE_SEDIMENT1_AVG  AV
LEFT OUTER JOIN	WPG.MARINE_SEDIMENT1_MIN	MI	ON AV.STATION 	= MI.STATION	AND AV.YR = MI.YR   AND AV.TYPE = MI.TYPE
LEFT OUTER JOIN	WPG.MARINE_SEDIMENT1_MAX	MX	ON AV.STATION 	= MX.STATION	AND AV.YR = MX.YR   AND AV.TYPE = MX.TYPE;


-- WPG.MARINE_SEDIMENT_SUMMARY_ACC source

CREATE VIEW WPG.MARINE_SEDIMENT_SUMMARY_ACC AS
SELECT	AV.ZONE,	
	AV.WCZ,	
	AV.SUBZONE,	
	AV.STATION,	
		AV.YR,
		AV.TOTAL,
	AV.TYPE,	
		AV.SZ_63_AVG,
		AV.SZ_125_AVG,
		AV.SZ_250_AVG,
		AV.SZ_500_AVG,
		AV.SZ_1000_AVG,
		AV.SZ_2000_AVG,
		AV.SZ_4000_AVG,
		AV.EH_AVG,
	AV.L_TS_AVG,	AV.TS_AVG,
	AV.L_TVS_AVG,	AV.TVS_AVG,
		AV.MSN_DWR_AVG,
		AV.MSM_DWR_AVG,
		AV.MSO_DWR_AVG,
	AV.L_SG_AVG,	AV.SG_AVG,
	AV.L_PH_AVG,	AV.PH_AVG,
	AV.L_COD_AVG,	AV.COD_AVG,
	AV.L_TIC_AVG,	AV.TIC_AVG,
	AV.L_TOC_AVG,	AV.TOC_AVG,
	AV.L_TC_AVG,	AV.TC_AVG,
	AV.L_NH_AVG,	AV.NH_AVG,
	AV.L_TKN_AVG,	AV.TKN_AVG,
	AV.L_TP_AVG,	AV.TP_AVG,
	AV.L_INS_AVG,	AV.INS_AVG,
	AV.L_CN_AVG,	AV.CN_AVG,
	AV.L_AL_AVG,	AV.AL_AVG,
	AV.L_AG_AVG,	AV.AG_AVG,
	AV.L_ARS_AVG,	AV.ARS_AVG,
	AV.L_BA_AVG,	AV.BA_AVG,
	AV.L_BE_AVG,	AV.BE_AVG,
	AV.L_B_AVG,	AV.B_AVG,
	AV.L_CD_AVG,	AV.CD_AVG,
	AV.L_CO_AVG,	AV.CO_AVG,
	AV.L_CR_AVG,	AV.CR_AVG,
	AV.L_CU_AVG,	AV.CU_AVG,
	AV.L_FE_AVG,	AV.FE_AVG,
	AV.L_HG_AVG,	AV.HG_AVG,
	AV.L_MN_AVG,	AV.MN_AVG,
	AV.L_MO_AVG,	AV.MO_AVG,
	AV.L_NI_AVG,	AV.NI_AVG,
	AV.L_PB_AVG,	AV.PB_AVG,
	AV.L_SB_AVG,	AV.SB_AVG,
	AV.L_TL_AVG,	AV.TL_AVG,
	AV.L_V_AVG,	AV.V_AVG,
	AV.L_ZN_AVG,	AV.ZN_AVG,
	AV.L_PCB_AVG,	AV.PCB_AVG,
	AV.L_PCB8_AVG,	AV.PCB8_AVG,
	AV.L_PCB18_AVG,	AV.PCB18_AVG,
	AV.L_PCB28_AVG,	AV.PCB28_AVG,
	AV.L_PCB31_AVG,	AV.PCB31_AVG,
	AV.L_PCB44_AVG,	AV.PCB44_AVG,
	AV.L_PCB52_AVG,	AV.PCB52_AVG,
	AV.L_PCB66_AVG,	AV.PCB66_AVG,
	AV.L_PCB77_AVG,	AV.PCB77_AVG,
	AV.L_PCB81_AVG,	AV.PCB81_AVG,
	AV.L_PCB101_AVG,	AV.PCB101_AVG,
	AV.L_PCB105_AVG,	AV.PCB105_AVG,
	AV.L_PCB114_AVG,	AV.PCB114_AVG,
	AV.L_PCB118_AVG,	AV.PCB118_AVG,
	AV.L_PCB123_AVG,	AV.PCB123_AVG,
	AV.L_PCB126_AVG,	AV.PCB126_AVG,
	AV.L_PCB128_AVG,	AV.PCB128_AVG,
	AV.L_PCB138_AVG,	AV.PCB138_AVG,
	AV.L_PCB149_AVG,	AV.PCB149_AVG,
	AV.L_PCB153_AVG,	AV.PCB153_AVG,
	AV.L_PCB156_AVG,	AV.PCB156_AVG,
	AV.L_PCB157_AVG,	AV.PCB157_AVG,
	AV.L_PCB167_AVG,	AV.PCB167_AVG,
	AV.L_PCB169_AVG,	AV.PCB169_AVG,
	AV.L_PCB170_AVG,	AV.PCB170_AVG,
	AV.L_PCB180_AVG,	AV.PCB180_AVG,
	AV.L_PCB187_AVG,	AV.PCB187_AVG,
	AV.L_PCB189_AVG,	AV.PCB189_AVG,
		AV.SUM18PCB_AVG,
	AV.L_FLUO_AVG,	AV.FLUO_AVG,
	AV.L_PHEN_AVG,	AV.PHEN_AVG,
	AV.L_ANTH_AVG,	AV.ANTH_AVG,
	AV.L_FLUT_AVG,	AV.FLUT_AVG,
	AV.L_PYRE_AVG,	AV.PYRE_AVG,
	AV.L_CHRY_AVG,	AV.CHRY_AVG,
	AV.L_BBFL_AVG,	AV.BBFL_AVG,
	AV.L_BKFL_AVG,	AV.BKFL_AVG,
	AV.L_BAPY_AVG,	AV.BAPY_AVG,
	AV.L_BGPE_AVG,	AV.BGPE_AVG,
	AV.L_ACPH_AVG,	AV.ACPH_AVG,
	AV.L_ACEN_AVG,	AV.ACEN_AVG,
	AV.L_DAAN_AVG,	AV.DAAN_AVG,
	AV.L_BANT_AVG,	AV.BANT_AVG,
	AV.L_INPY_AVG,	AV.INPY_AVG,
	AV.L_NAPH_AVG,	AV.NAPH_AVG,
	AV.L_PAH_AVG,	AV.PAH_AVG,
		AV.SUM6LMPAH_AVG,
		AV.SUM10HMPAH_AVG,
		AV.SUM16PAH_AVG,
	AV.L_GBHC_AVG,	AV.GBHC_AVG,
	AV.L_HCB_AVG,	AV.HCB_AVG,
	AV.L_HEPT_AVG,	AV.HEPT_AVG,
	AV.L_ALDR_AVG,	AV.ALDR_AVG,
	AV.L_HEPO_AVG,	AV.HEPO_AVG,
	AV.L_ODDE_AVG,	AV.ODDE_AVG,
	AV.L_END1_AVG,	AV.END1_AVG,
	AV.L_PDDE_AVG,	AV.PDDE_AVG,
	AV.L_DIEL_AVG,	AV.DIEL_AVG,
	AV.L_ODDD_AVG,	AV.ODDD_AVG,
	AV.L_ENDR_AVG,	AV.ENDR_AVG,
	AV.L_END2_AVG,	AV.END2_AVG,
	AV.L_PDDD_AVG,	AV.PDDD_AVG,
	AV.L_ODDT_AVG,	AV.ODDT_AVG,
	AV.L_PDDT_AVG,	AV.PDDT_AVG,
	AV.L_ABHC_AVG,	AV.ABHC_AVG,
	AV.L_BBHC_AVG,	AV.BBHC_AVG,
	AV.L_DBHC_AVG,	AV.DBHC_AVG,
		MI.SZ_63_MIN,
		MI.SZ_125_MIN,
		MI.SZ_250_MIN,
		MI.SZ_500_MIN,
		MI.SZ_1000_MIN,
		MI.SZ_2000_MIN,
		MI.SZ_4000_MIN,
		MI.EH_MIN,
	MI.L_TS_MIN,	MI.TS_MIN,
	MI.L_TVS_MIN,	MI.TVS_MIN,
		MI.MSN_DWR_MIN,
		MI.MSM_DWR_MIN,
		MI.MSO_DWR_MIN,
	MI.L_SG_MIN,	MI.SG_MIN,
	MI.L_PH_MIN,	MI.PH_MIN,
	MI.L_COD_MIN,	MI.COD_MIN,
	MI.L_TIC_MIN,	MI.TIC_MIN,
	MI.L_TOC_MIN,	MI.TOC_MIN,
	MI.L_TC_MIN,	MI.TC_MIN,
	MI.L_NH_MIN,	MI.NH_MIN,
	MI.L_TKN_MIN,	MI.TKN_MIN,
	MI.L_TP_MIN,	MI.TP_MIN,
	MI.L_INS_MIN,	MI.INS_MIN,
	MI.L_CN_MIN,	MI.CN_MIN,
	MI.L_AL_MIN,	MI.AL_MIN,
	MI.L_AG_MIN,	MI.AG_MIN,
	MI.L_ARS_MIN,	MI.ARS_MIN,
	MI.L_BA_MIN,	MI.BA_MIN,
	MI.L_BE_MIN,	MI.BE_MIN,
	MI.L_B_MIN,	MI.B_MIN,
	MI.L_CD_MIN,	MI.CD_MIN,
	MI.L_CO_MIN,	MI.CO_MIN,
	MI.L_CR_MIN,	MI.CR_MIN,
	MI.L_CU_MIN,	MI.CU_MIN,
	MI.L_FE_MIN,	MI.FE_MIN,
	MI.L_HG_MIN,	MI.HG_MIN,
	MI.L_MN_MIN,	MI.MN_MIN,
	MI.L_MO_MIN,	MI.MO_MIN,
	MI.L_NI_MIN,	MI.NI_MIN,
	MI.L_PB_MIN,	MI.PB_MIN,
	MI.L_SB_MIN,	MI.SB_MIN,
	MI.L_TL_MIN,	MI.TL_MIN,
	MI.L_V_MIN,	MI.V_MIN,
	MI.L_ZN_MIN,	MI.ZN_MIN,
	MI.L_PCB_MIN,	MI.PCB_MIN,
	MI.L_PCB8_MIN,	MI.PCB8_MIN,
	MI.L_PCB18_MIN,	MI.PCB18_MIN,
	MI.L_PCB28_MIN,	MI.PCB28_MIN,
	MI.L_PCB31_MIN,	MI.PCB31_MIN,
	MI.L_PCB44_MIN,	MI.PCB44_MIN,
	MI.L_PCB52_MIN,	MI.PCB52_MIN,
	MI.L_PCB66_MIN,	MI.PCB66_MIN,
	MI.L_PCB77_MIN,	MI.PCB77_MIN,
	MI.L_PCB81_MIN,	MI.PCB81_MIN,
	MI.L_PCB101_MIN,	MI.PCB101_MIN,
	MI.L_PCB105_MIN,	MI.PCB105_MIN,
	MI.L_PCB114_MIN,	MI.PCB114_MIN,
	MI.L_PCB118_MIN,	MI.PCB118_MIN,
	MI.L_PCB123_MIN,	MI.PCB123_MIN,
	MI.L_PCB126_MIN,	MI.PCB126_MIN,
	MI.L_PCB128_MIN,	MI.PCB128_MIN,
	MI.L_PCB138_MIN,	MI.PCB138_MIN,
	MI.L_PCB149_MIN,	MI.PCB149_MIN,
	MI.L_PCB153_MIN,	MI.PCB153_MIN,
	MI.L_PCB156_MIN,	MI.PCB156_MIN,
	MI.L_PCB157_MIN,	MI.PCB157_MIN,
	MI.L_PCB167_MIN,	MI.PCB167_MIN,
	MI.L_PCB169_MIN,	MI.PCB169_MIN,
	MI.L_PCB170_MIN,	MI.PCB170_MIN,
	MI.L_PCB180_MIN,	MI.PCB180_MIN,
	MI.L_PCB187_MIN,	MI.PCB187_MIN,
	MI.L_PCB189_MIN,	MI.PCB189_MIN,
		MI.SUM18PCB_MIN,
	MI.L_FLUO_MIN,	MI.FLUO_MIN,
	MI.L_PHEN_MIN,	MI.PHEN_MIN,
	MI.L_ANTH_MIN,	MI.ANTH_MIN,
	MI.L_FLUT_MIN,	MI.FLUT_MIN,
	MI.L_PYRE_MIN,	MI.PYRE_MIN,
	MI.L_CHRY_MIN,	MI.CHRY_MIN,
	MI.L_BBFL_MIN,	MI.BBFL_MIN,
	MI.L_BKFL_MIN,	MI.BKFL_MIN,
	MI.L_BAPY_MIN,	MI.BAPY_MIN,
	MI.L_BGPE_MIN,	MI.BGPE_MIN,
	MI.L_ACPH_MIN,	MI.ACPH_MIN,
	MI.L_ACEN_MIN,	MI.ACEN_MIN,
	MI.L_DAAN_MIN,	MI.DAAN_MIN,
	MI.L_BANT_MIN,	MI.BANT_MIN,
	MI.L_INPY_MIN,	MI.INPY_MIN,
	MI.L_NAPH_MIN,	MI.NAPH_MIN,
	MI.L_PAH_MIN,	MI.PAH_MIN,
		MI.SUM6LMPAH_MIN,
		MI.SUM10HMPAH_MIN,
		MI.SUM16PAH_MIN,
	MI.L_GBHC_MIN,	MI.GBHC_MIN,
	MI.L_HCB_MIN,	MI.HCB_MIN,
	MI.L_HEPT_MIN,	MI.HEPT_MIN,
	MI.L_ALDR_MIN,	MI.ALDR_MIN,
	MI.L_HEPO_MIN,	MI.HEPO_MIN,
	MI.L_ODDE_MIN,	MI.ODDE_MIN,
	MI.L_END1_MIN,	MI.END1_MIN,
	MI.L_PDDE_MIN,	MI.PDDE_MIN,
	MI.L_DIEL_MIN,	MI.DIEL_MIN,
	MI.L_ODDD_MIN,	MI.ODDD_MIN,
	MI.L_ENDR_MIN,	MI.ENDR_MIN,
	MI.L_END2_MIN,	MI.END2_MIN,
	MI.L_PDDD_MIN,	MI.PDDD_MIN,
	MI.L_ODDT_MIN,	MI.ODDT_MIN,
	MI.L_PDDT_MIN,	MI.PDDT_MIN,
	MI.L_ABHC_MIN,	MI.ABHC_MIN,
	MI.L_BBHC_MIN,	MI.BBHC_MIN,
	MI.L_DBHC_MIN,	MI.DBHC_MIN,
		MX.SZ_63_MAX,
		MX.SZ_125_MAX,
		MX.SZ_250_MAX,
		MX.SZ_500_MAX,
		MX.SZ_1000_MAX,
		MX.SZ_2000_MAX,
		MX.SZ_4000_MAX,
		MX.EH_MAX,
	MX.L_TS_MAX,	MX.TS_MAX,
	MX.L_TVS_MAX,	MX.TVS_MAX,
		MX.MSN_DWR_MAX,
		MX.MSM_DWR_MAX,
		MX.MSO_DWR_MAX,
	MX.L_SG_MAX,	MX.SG_MAX,
	MX.L_PH_MAX,	MX.PH_MAX,
	MX.L_COD_MAX,	MX.COD_MAX,
	MX.L_TIC_MAX,	MX.TIC_MAX,
	MX.L_TOC_MAX,	MX.TOC_MAX,
	MX.L_TC_MAX,	MX.TC_MAX,
	MX.L_NH_MAX,	MX.NH_MAX,
	MX.L_TKN_MAX,	MX.TKN_MAX,
	MX.L_TP_MAX,	MX.TP_MAX,
	MX.L_INS_MAX,	MX.INS_MAX,
	MX.L_CN_MAX,	MX.CN_MAX,
	MX.L_AL_MAX,	MX.AL_MAX,
	MX.L_AG_MAX,	MX.AG_MAX,
	MX.L_ARS_MAX,	MX.ARS_MAX,
	MX.L_BA_MAX,	MX.BA_MAX,
	MX.L_BE_MAX,	MX.BE_MAX,
	MX.L_B_MAX,	MX.B_MAX,
	MX.L_CD_MAX,	MX.CD_MAX,
	MX.L_CO_MAX,	MX.CO_MAX,
	MX.L_CR_MAX,	MX.CR_MAX,
	MX.L_CU_MAX,	MX.CU_MAX,
	MX.L_FE_MAX,	MX.FE_MAX,
	MX.L_HG_MAX,	MX.HG_MAX,
	MX.L_MN_MAX,	MX.MN_MAX,
	MX.L_MO_MAX,	MX.MO_MAX,
	MX.L_NI_MAX,	MX.NI_MAX,
	MX.L_PB_MAX,	MX.PB_MAX,
	MX.L_SB_MAX,	MX.SB_MAX,
	MX.L_TL_MAX,	MX.TL_MAX,
	MX.L_V_MAX,	MX.V_MAX,
	MX.L_ZN_MAX,	MX.ZN_MAX,
	MX.L_PCB_MAX,	MX.PCB_MAX,
	MX.L_PCB8_MAX,	MX.PCB8_MAX,
	MX.L_PCB18_MAX,	MX.PCB18_MAX,
	MX.L_PCB28_MAX,	MX.PCB28_MAX,
	MX.L_PCB31_MAX,	MX.PCB31_MAX,
	MX.L_PCB44_MAX,	MX.PCB44_MAX,
	MX.L_PCB52_MAX,	MX.PCB52_MAX,
	MX.L_PCB66_MAX,	MX.PCB66_MAX,
	MX.L_PCB77_MAX,	MX.PCB77_MAX,
	MX.L_PCB81_MAX,	MX.PCB81_MAX,
	MX.L_PCB101_MAX,	MX.PCB101_MAX,
	MX.L_PCB105_MAX,	MX.PCB105_MAX,
	MX.L_PCB114_MAX,	MX.PCB114_MAX,
	MX.L_PCB118_MAX,	MX.PCB118_MAX,
	MX.L_PCB123_MAX,	MX.PCB123_MAX,
	MX.L_PCB126_MAX,	MX.PCB126_MAX,
	MX.L_PCB128_MAX,	MX.PCB128_MAX,
	MX.L_PCB138_MAX,	MX.PCB138_MAX,
	MX.L_PCB149_MAX,	MX.PCB149_MAX,
	MX.L_PCB153_MAX,	MX.PCB153_MAX,
	MX.L_PCB156_MAX,	MX.PCB156_MAX,
	MX.L_PCB157_MAX,	MX.PCB157_MAX,
	MX.L_PCB167_MAX,	MX.PCB167_MAX,
	MX.L_PCB169_MAX,	MX.PCB169_MAX,
	MX.L_PCB170_MAX,	MX.PCB170_MAX,
	MX.L_PCB180_MAX,	MX.PCB180_MAX,
	MX.L_PCB187_MAX,	MX.PCB187_MAX,
	MX.L_PCB189_MAX,	MX.PCB189_MAX,
		MX.SUM18PCB_MAX,
	MX.L_FLUO_MAX,	MX.FLUO_MAX,
	MX.L_PHEN_MAX,	MX.PHEN_MAX,
	MX.L_ANTH_MAX,	MX.ANTH_MAX,
	MX.L_FLUT_MAX,	MX.FLUT_MAX,
	MX.L_PYRE_MAX,	MX.PYRE_MAX,
	MX.L_CHRY_MAX,	MX.CHRY_MAX,
	MX.L_BBFL_MAX,	MX.BBFL_MAX,
	MX.L_BKFL_MAX,	MX.BKFL_MAX,
	MX.L_BAPY_MAX,	MX.BAPY_MAX,
	MX.L_BGPE_MAX,	MX.BGPE_MAX,
	MX.L_ACPH_MAX,	MX.ACPH_MAX,
	MX.L_ACEN_MAX,	MX.ACEN_MAX,
	MX.L_DAAN_MAX,	MX.DAAN_MAX,
	MX.L_BANT_MAX,	MX.BANT_MAX,
	MX.L_INPY_MAX,	MX.INPY_MAX,
	MX.L_NAPH_MAX,	MX.NAPH_MAX,
	MX.L_PAH_MAX,	MX.PAH_MAX,
		MX.SUM6LMPAH_MAX,
		MX.SUM10HMPAH_MAX,
		MX.SUM16PAH_MAX,
	MX.L_GBHC_MAX,	MX.GBHC_MAX,
	MX.L_HCB_MAX,	MX.HCB_MAX,
	MX.L_HEPT_MAX,	MX.HEPT_MAX,
	MX.L_ALDR_MAX,	MX.ALDR_MAX,
	MX.L_HEPO_MAX,	MX.HEPO_MAX,
	MX.L_ODDE_MAX,	MX.ODDE_MAX,
	MX.L_END1_MAX,	MX.END1_MAX,
	MX.L_PDDE_MAX,	MX.PDDE_MAX,
	MX.L_DIEL_MAX,	MX.DIEL_MAX,
	MX.L_ODDD_MAX,	MX.ODDD_MAX,
	MX.L_ENDR_MAX,	MX.ENDR_MAX,
	MX.L_END2_MAX,	MX.END2_MAX,
	MX.L_PDDD_MAX,	MX.PDDD_MAX,
	MX.L_ODDT_MAX,	MX.ODDT_MAX,
	MX.L_PDDT_MAX,	MX.PDDT_MAX,
	MX.L_ABHC_MAX,	MX.ABHC_MAX,
	MX.L_BBHC_MAX,	MX.BBHC_MAX,
	MX.L_DBHC_MAX,	MX.DBHC_MAX,
	AV.VIEW_NO
FROM    WPG.MARINE_SEDIMENT_ACC_AVG  AV
LEFT OUTER JOIN	WPG.MARINE_SEDIMENT_ACC_MIN	MI	ON AV.STATION 	= MI.STATION	AND AV.YR = MI.YR   AND AV.TYPE = MI.TYPE
LEFT OUTER JOIN	WPG.MARINE_SEDIMENT_ACC_MAX	MX	ON AV.STATION 	= MX.STATION	AND AV.YR = MX.YR   AND AV.TYPE = MX.TYPE;


-- WPG.MARINE_SEDIMENT_VISIT1 source

CREATE VIEW WPG.MARINE_SEDIMENT_VISIT1 AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO
FROM		WPG.MS_VISIT	V
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SEDIMENT_X1 source

/*
Modified by APCL:31-Jul-2012
changed from
LEFT OUTER JOIN	WPG.MSTATION					ST
	ON (V.SITE_ID = ST.SITE_ID) 
TO
LEFT OUTER JOIN	WPG.MSTATION					ST
	ON ((V.SITE_ID = ST.SITE_ID)  OR ( V.STATION_ID = ST.SITE_ID))


Modified by APCL:14-Jun-2013
when SITE_ID is null select STATION_ID
changed from

LEFT OUTER JOIN	WPG.MSTATION					ST
	ON ((V.SITE_ID = ST.SITE_ID)  OR ( V.STATION_ID = ST.SITE_ID))

to

LEFT OUTER JOIN dbo.MS_VISIT_SITE_ID VSID
	ON V.MSVISIT_ID = VSID.MSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION					ST
	ON VSID.SITE_ID = ST.SITE_ID
*/
CREATE VIEW WPG.MARINE_SEDIMENT_X1 AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_NAME 	STATION,
	V.MDATE 	MDATE,

	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	V.VALID_USER,
	'X'	 	TYPE,
	PS.SZ_63	SZ_63,
	PS.SZ_125	SZ_125,
	PS.SZ_250	SZ_250,
	PS.SZ_500	SZ_500,
	PS.SZ_1000	SZ_1000,
	PS.SZ_2000	SZ_2000,
	PS.SZ_4000	SZ_4000,
	PS.EH		EH,
	N.L_TS 		L_TS,
	N.TS 		TS,
	N.L_TVS 	L_TVS,
	N.TVS 		TVS,
	N.MSN_DWR	MSN_DWR,
	M.MSM_DWR 	MSM_DWR,
	O1.MSO_DWR 	MSO_DWR,
	N.L_SG 		L_SG,
	N.SG 		SG,
	N.L_PH 		L_PH,
	N.PH 		PH,
	N.L_COD 	L_COD,
	N.COD 		COD,
	N.L_TIC 	L_TIC,
	N.TIC 		TIC,
	N.L_TOC 	L_TOC,
	N.TOC 		TOC,
	N.L_TC	 	L_TC,
	N.TC 		TC,
	N.L_NH 		L_NH,
	N.NH 		NH,
	N.L_TKN 	L_TKN,
	N.TKN 		TKN,
	N.L_TP 		L_TP,
	N.TP 		TP,
	N.L_SULPHIDE 	L_INS,
	N.SULPHIDE 	INS,
	N.L_CN 		L_CN,
	N.CN 		CN,
	M.L_AL 		L_AL,
	M.AL 		AL,
	M.L_AG 		L_AG,
	M.AG 		AG,
	M.L_ARSENIC 	L_ARS,
	M.ARSENIC 	ARS,
	M.L_BA 		L_BA,
	M.BA 		BA,
	M.L_BE 		L_BE,
	M.BE		BE,
	M.L_B 		L_B,
	M.B 		B,
	M.L_CD 		L_CD,
	M.CD 		CD,
	M.L_CO 		L_CO,
	M.CO 		CO,
	M.L_CR 		L_CR,
	M.CR 		CR,
	M.L_CU 		L_CU,
	M.CU 		CU,
	M.L_FE 		L_FE,
	M.FE 		FE,
	M.L_HG 		L_HG,
	M.HG 		HG,
	M.L_MN 		L_MN,
	M.MN 		MN,
	M.L_MO 		L_MO,
	M.MO 		MO,
	M.L_NI 		L_NI,
	M.NI 		NI,
	M.L_PB 		L_PB,
	M.PB 		PB,
	M.L_SB 		L_SB,
	M.SB 		SB,
	M.L_TL 		L_TL,
	M.TL 		TL,
	M.L_V 		L_V,
	M.V 		V,
	M.L_ZN 		L_ZN,
	M.ZN 		ZN,
	O1.L_PCB 	L_PCB,
	O1.PCB 		PCB,
	O1.L_PCB8 	L_PCB8,
	O1.PCB8 	PCB8,
	O1.L_PCB18 	L_PCB18,
	O1.PCB18 	PCB18,
	O1.L_PCB28 	L_PCB28,
	O1.PCB28 	PCB28,
	O1.L_PCB31 	L_PCB31,
	O1.PCB31 	PCB31,
	O1.L_PCB44 	L_PCB44,
	O1.PCB44 	PCB44,
	O1.L_PCB52 	L_PCB52,
	O1.PCB52 	PCB52,
	O1.L_PCB66 	L_PCB66,
	O1.PCB66 	PCB66,
	O1.L_PCB77 	L_PCB77,
	O1.PCB77 	PCB77,
	O1.L_PCB81 	L_PCB81,
	O1.PCB81 	PCB81,
	O1.L_PCB101 	L_PCB101,
	O1.PCB101 	PCB101,
	O1.L_PCB105 	L_PCB105,
	O1.PCB105 	PCB105,
	O1.L_PCB114 	L_PCB114,
	O1.PCB114 	PCB114,
	O1.L_PCB118 	L_PCB118,
	O1.PCB118 	PCB118,
	O1.L_PCB123 	L_PCB123,
	O1.PCB123 	PCB123,
	O1.L_PCB126 	L_PCB126,
	O1.PCB126 	PCB126,
	O1.L_PCB128 	L_PCB128,
	O1.PCB128 	PCB128,
	O1.L_PCB138 	L_PCB138,
	O1.PCB138 	PCB138,
	O1.L_PCB149 	L_PCB149,
	O1.PCB149 	PCB149,
	O1.L_PCB153 	L_PCB153,
	O1.PCB153 	PCB153,
	O1.L_PCB156 	L_PCB156,
	O1.PCB156 	PCB156,
	O1.L_PCB157 	L_PCB157,
	O1.PCB157 	PCB157,
	O1.L_PCB167 	L_PCB167,
	O1.PCB167 	PCB167,
	O1.L_PCB169 	L_PCB169,
	O1.PCB169 	PCB169,
	O1.L_PCB170 	L_PCB170,
	O1.PCB170 	PCB170,
	O1.L_PCB180 	L_PCB180,
	O1.PCB180 	PCB180,
	O1.L_PCB187 	L_PCB187,
	O1.PCB187 	PCB187,
	O1.L_PCB189 	L_PCB189,
	O1.PCB189 	PCB189,
	O1.SUM18PCB	SUM18PCB,
	O2.L_FLUO 	L_FLUO,
	O2.FLUO 	FLUO,
	O2.L_PHEN 	L_PHEN,
	O2.PHEN 	PHEN,
	O2.L_ANTH 	L_ANTH,
	O2.ANTH 	ANTH,
	O2.L_FLUT 	L_FLUT,
	O2.FLUT 	FLUT,
	O2.L_PYRE 	L_PYRE,
	O2.PYRE 	PYRE,
	O2.L_CHRY 	L_CHRY,
	O2.CHRY 	CHRY,
	O2.L_BBFL 	L_BBFL,
	O2.BBFL 	BBFL,
	O2.L_BKFL 	L_BKFL,
	O2.BKFL 	BKFL,
	O2.L_BAPY 	L_BAPY,
	O2.BAPY 	BAPY,
	O2.L_BGPE 	L_BGPE,
	O2.BGPE 	BGPE,
	O2.L_ACPH 	L_ACPH,
	O2.ACPH 	ACPH,
	O2.L_ACEN 	L_ACEN,
	O2.ACEN 	ACEN,
	O2.L_DAAN 	L_DAAN,
	O2.DAAN 	DAAN,
	O2.L_BANT 	L_BANT,
	O2.BANT 	BANT,
	O2.L_INPY 	L_INPY,
	O2.INPY 	INPY,
	O2.L_NAPH 	L_NAPH,
	O2.NAPH 	NAPH,
	O2.L_PAH 	L_PAH,
	O2.PAH 		PAH,
	O2.SUM6LMPAH	SUM6LMPAH,
	O2.SUM10HMPAH	SUM10HMPAH,
	O2.SUM16PAH	SUM16PAH,
	O3.L_GBHC 	L_GBHC,
	O3.GBHC 	GBHC,
	O3.L_HCB 	L_HCB,
	O3.HCB 		HCB,
	O3.L_HEPT 	L_HEPT,
	O3.HEPT 	HEPT,
	O3.L_ALDR 	L_ALDR,
	O3.ALDR 	ALDR,
	O3.L_HEPO 	L_HEPO,
	O3.HEPO 	HEPO,
	O3.L_ODDE 	L_ODDE,
	O3.ODDE 	ODDE,
	O3.L_END1 	L_END1,
	O3.END1 	END1,
	O3.L_PDDE 	L_PDDE,
	O3.PDDE 	PDDE,
	O3.L_DIEL 	L_DIEL,
	O3.DIEL 	DIEL,
	O3.L_ODDD 	L_ODDD,
	O3.ODDD 	ODDD,
	O3.L_ENDR 	L_ENDR,
	O3.ENDR 	ENDR,
	O3.L_END2 	L_END2,
	O3.END2 	END2,
	O3.L_PDDD 	L_PDDD,
	O3.PDDD 	PDDD,
	O3.L_ODDT 	L_ODDT,
	O3.ODDT 	ODDT,
	O3.L_PDDT 	L_PDDT,
	O3.PDDT 	PDDT,
	O3.L_ABHC 	L_ABHC,
	O3.ABHC 	ABHC,
	O3.L_BBHC 	L_BBHC,
	O3.BBHC 	BBHC,
	O3.L_DBHC 	L_DBHC,
	O3.DBHC 	DBHC,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.MS_VISIT					V
LEFT OUTER JOIN	WPG.MS_PS					PS	
	ON V.MSVISIT_ID = PS.MSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.MS_GLABN WHERE TYPE = 'X')	N
	ON V.MSVISIT_ID = N.MSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.MS_GLABM WHERE TYPE = 'X') 	M
	ON V.MSVISIT_ID = M.MSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.MS_PCB_CAL WHERE TYPE = 'X')	O1
	ON V.MSVISIT_ID = O1.MSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.MS_PAH_CAL WHERE TYPE = 'X')	O2
	ON V.MSVISIT_ID = O2.MSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.MS_GLAB_OC WHERE TYPE = 'X') O3
	ON V.MSVISIT_ID = O3.MSVISIT_ID
LEFT OUTER JOIN dbo.MS_VISIT_SITE_ID VSID
	ON V.MSVISIT_ID = VSID.MSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION					ST
	ON VSID.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ					SZ
	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ					CZ
	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE					TZ
	ON CZ.ZONE_ID = TZ.ZONE_ID

/*
CREATE VIEW WPG.MARINE_SEDIMENT_X1 AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	'X'	 	TYPE,
	PS.SZ_63	SZ_63,
	PS.SZ_125	SZ_125,
	PS.SZ_250	SZ_250,
	PS.SZ_500	SZ_500,
	PS.SZ_1000	SZ_1000,
	PS.SZ_2000	SZ_2000,
	PS.SZ_4000	SZ_4000,
	PS.EH		EH,
	N.L_TS 		L_TS,
	N.TS 		TS,
	N.L_TVS 	L_TVS,
	N.TVS 		TVS,
	N.MSN_DWR	MSN_DWR,
	M.MSM_DWR 	MSM_DWR,
	O1.MSO_DWR 	MSO_DWR,
	N.L_SG 		L_SG,
	N.SG 		SG,
	N.L_PH 		L_PH,
	N.PH 		PH,
	N.L_COD 	L_COD,
	N.COD 		COD,
	N.L_TIC 	L_TIC,
	N.TIC 		TIC,
	N.L_TOC 	L_TOC,
	N.TOC 		TOC,
	N.L_TC	 	L_TC,
	N.TC 		TC,
	N.L_NH 		L_NH,
	N.NH 		NH,
	N.L_TKN 	L_TKN,
	N.TKN 		TKN,
	N.L_TP 		L_TP,
	N.TP 		TP,
	N.L_SULPHIDE 	L_INS,
	N.SULPHIDE 	INS,
	N.L_CN 		L_CN,
	N.CN 		CN,
	M.L_AL 		L_AL,
	M.AL 		AL,
	M.L_AG 		L_AG,
	M.AG 		AG,
	M.L_ARSENIC 	L_ARS,
	M.ARSENIC 	ARS,
	M.L_BA 		L_BA,
	M.BA 		BA,
	M.L_BE 		L_BE,
	M.BE		BE,
	M.L_B 		L_B,
	M.B 		B,
	M.L_CD 		L_CD,
	M.CD 		CD,
	M.L_CO 		L_CO,
	M.CO 		CO,
	M.L_CR 		L_CR,
	M.CR 		CR,
	M.L_CU 		L_CU,
	M.CU 		CU,
	M.L_FE 		L_FE,
	M.FE 		FE,
	M.L_HG 		L_HG,
	M.HG 		HG,
	M.L_MN 		L_MN,
	M.MN 		MN,
	M.L_MO 		L_MO,
	M.MO 		MO,
	M.L_NI 		L_NI,
	M.NI 		NI,
	M.L_PB 		L_PB,
	M.PB 		PB,
	M.L_SB 		L_SB,
	M.SB 		SB,
	M.L_TL 		L_TL,
	M.TL 		TL,
	M.L_V 		L_V,
	M.V 		V,
	M.L_ZN 		L_ZN,
	M.ZN 		ZN,
	O1.L_PCB 	L_PCB,
	O1.PCB 		PCB,
	O1.L_PCB8 	L_PCB8,
	O1.PCB8 	PCB8,
	O1.L_PCB18 	L_PCB18,
	O1.PCB18 	PCB18,
	O1.L_PCB28 	L_PCB28,
	O1.PCB28 	PCB28,
	O1.L_PCB31 	L_PCB31,
	O1.PCB31 	PCB31,
	O1.L_PCB44 	L_PCB44,
	O1.PCB44 	PCB44,
	O1.L_PCB52 	L_PCB52,
	O1.PCB52 	PCB52,
	O1.L_PCB66 	L_PCB66,
	O1.PCB66 	PCB66,
	O1.L_PCB77 	L_PCB77,
	O1.PCB77 	PCB77,
	O1.L_PCB81 	L_PCB81,
	O1.PCB81 	PCB81,
	O1.L_PCB101 	L_PCB101,
	O1.PCB101 	PCB101,
	O1.L_PCB105 	L_PCB105,
	O1.PCB105 	PCB105,
	O1.L_PCB114 	L_PCB114,
	O1.PCB114 	PCB114,
	O1.L_PCB118 	L_PCB118,
	O1.PCB118 	PCB118,
	O1.L_PCB123 	L_PCB123,
	O1.PCB123 	PCB123,
	O1.L_PCB126 	L_PCB126,
	O1.PCB126 	PCB126,
	O1.L_PCB128 	L_PCB128,
	O1.PCB128 	PCB128,
	O1.L_PCB138 	L_PCB138,
	O1.PCB138 	PCB138,
	O1.L_PCB149 	L_PCB149,
	O1.PCB149 	PCB149,
	O1.L_PCB153 	L_PCB153,
	O1.PCB153 	PCB153,
	O1.L_PCB156 	L_PCB156,
	O1.PCB156 	PCB156,
	O1.L_PCB157 	L_PCB157,
	O1.PCB157 	PCB157,
	O1.L_PCB167 	L_PCB167,
	O1.PCB167 	PCB167,
	O1.L_PCB169 	L_PCB169,
	O1.PCB169 	PCB169,
	O1.L_PCB170 	L_PCB170,
	O1.PCB170 	PCB170,
	O1.L_PCB180 	L_PCB180,
	O1.PCB180 	PCB180,
	O1.L_PCB187 	L_PCB187,
	O1.PCB187 	PCB187,
	O1.L_PCB189 	L_PCB189,
	O1.PCB189 	PCB189,
	O1.SUM18PCB	SUM18PCB,
	O2.L_FLUO 	L_FLUO,
	O2.FLUO 	FLUO,
	O2.L_PHEN 	L_PHEN,
	O2.PHEN 	PHEN,
	O2.L_ANTH 	L_ANTH,
	O2.ANTH 	ANTH,
	O2.L_FLUT 	L_FLUT,
	O2.FLUT 	FLUT,
	O2.L_PYRE 	L_PYRE,
	O2.PYRE 	PYRE,
	O2.L_CHRY 	L_CHRY,
	O2.CHRY 	CHRY,
	O2.L_BBFL 	L_BBFL,
	O2.BBFL 	BBFL,
	O2.L_BKFL 	L_BKFL,
	O2.BKFL 	BKFL,
	O2.L_BAPY 	L_BAPY,
	O2.BAPY 	BAPY,
	O2.L_BGPE 	L_BGPE,
	O2.BGPE 	BGPE,
	O2.L_ACPH 	L_ACPH,
	O2.ACPH 	ACPH,
	O2.L_ACEN 	L_ACEN,
	O2.ACEN 	ACEN,
	O2.L_DAAN 	L_DAAN,
	O2.DAAN 	DAAN,
	O2.L_BANT 	L_BANT,
	O2.BANT 	BANT,
	O2.L_INPY 	L_INPY,
	O2.INPY 	INPY,
	O2.L_NAPH 	L_NAPH,
	O2.NAPH 	NAPH,
	O2.L_PAH 	L_PAH,
	O2.PAH 		PAH,
	O2.SUM6LMPAH	SUM6LMPAH,
	O2.SUM10HMPAH	SUM10HMPAH,
	O2.SUM16PAH	SUM16PAH,
	O3.L_GBHC 	L_GBHC,
	O3.GBHC 	GBHC,
	O3.L_HCB 	L_HCB,
	O3.HCB 		HCB,
	O3.L_HEPT 	L_HEPT,
	O3.HEPT 	HEPT,
	O3.L_ALDR 	L_ALDR,
	O3.ALDR 	ALDR,
	O3.L_HEPO 	L_HEPO,
	O3.HEPO 	HEPO,
	O3.L_ODDE 	L_ODDE,
	O3.ODDE 	ODDE,
	O3.L_END1 	L_END1,
	O3.END1 	END1,
	O3.L_PDDE 	L_PDDE,
	O3.PDDE 	PDDE,
	O3.L_DIEL 	L_DIEL,
	O3.DIEL 	DIEL,
	O3.L_ODDD 	L_ODDD,
	O3.ODDD 	ODDD,
	O3.L_ENDR 	L_ENDR,
	O3.ENDR 	ENDR,
	O3.L_END2 	L_END2,
	O3.END2 	END2,
	O3.L_PDDD 	L_PDDD,
	O3.PDDD 	PDDD,
	O3.L_ODDT 	L_ODDT,
	O3.ODDT 	ODDT,
	O3.L_PDDT 	L_PDDT,
	O3.PDDT 	PDDT,
	O3.L_ABHC 	L_ABHC,
	O3.ABHC 	ABHC,
	O3.L_BBHC 	L_BBHC,
	O3.BBHC 	BBHC,
	O3.L_DBHC 	L_DBHC,
	O3.DBHC 	DBHC,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.MS_VISIT					V
LEFT OUTER JOIN	WPG.MS_PS					PS	
	ON V.MSVISIT_ID = PS.MSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.MS_GLABN WHERE TYPE = 'X')	N
	ON V.MSVISIT_ID = N.MSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.MS_GLABM WHERE TYPE = 'X') 	M
	ON V.MSVISIT_ID = M.MSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.MS_PCB_CAL WHERE TYPE = 'X')	O1
	ON V.MSVISIT_ID = O1.MSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.MS_PAH_CAL WHERE TYPE = 'X')	O2
	ON V.MSVISIT_ID = O2.MSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.MS_GLAB_OC WHERE TYPE = 'X') O3
	ON V.MSVISIT_ID = O3.MSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION					ST
	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ					SZ
	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ					CZ
	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE					TZ
	ON CZ.ZONE_ID = TZ.ZONE_ID





*/;


-- WPG.MARINE_SEDIMENT_X_AVG1 source

CREATE VIEW WPG.MARINE_SEDIMENT_X_AVG1 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	YEAR(MDATE)	YR,
	COUNT(*)	TOTAL,
	TYPE,
	AVG(SZ_63)	SZ_63,
	AVG(SZ_125)	SZ_125,
	AVG(SZ_250)	SZ_250,
	AVG(SZ_500)	SZ_500,
	AVG(SZ_1000)	SZ_1000,
	AVG(SZ_2000)	SZ_2000,
	AVG(SZ_4000)	SZ_4000,
	AVG(EH)		EH,
	AVG(TS)		TS,
	AVG(TVS)	TVS,
	AVG(MSN_DWR)	MSN_DWR,
	AVG(MSM_DWR)	MSM_DWR,
	AVG(MSO_DWR)	MSO_DWR,
	AVG(SG)		SG,
	AVG(PH)		PH,
	AVG(COD)	COD,
	AVG(TIC)	TIC,
	AVG(TOC)	TOC,
	AVG(TC)		TC,
	AVG(NH)		NH,
	AVG(TKN)	TKN,
	AVG(TP)		TP,
	AVG(INS)	INS,
	AVG(CN)		CN,
	AVG(AL)		AL,
	AVG(AG)		AG,
	AVG(ARS)	ARS,
	AVG(BA)		BA,
	AVG(BE)		BE,
	AVG(B)		B,
	AVG(CD)		CD,
	AVG(CO)		CO,
	AVG(CR)		CR,
	AVG(CU)		CU,
	AVG(FE)		FE,
	AVG(HG)		HG,
	AVG(MN)		MN,
	AVG(MO)		MO,
	AVG(NI)		NI,
	AVG(PB)		PB,
	AVG(SB)		SB,
	AVG(TL)		TL,
	AVG(V)		V,
	AVG(ZN)		ZN,
	AVG(PCB)	PCB,
	AVG(PCB8)	PCB8,
	AVG(PCB18)	PCB18,
	AVG(PCB28)	PCB28,
	AVG(PCB31)	PCB31,
	AVG(PCB44)	PCB44,
	AVG(PCB52)	PCB52,
	AVG(PCB66)	PCB66,
	AVG(PCB77)	PCB77,
	AVG(PCB81)	PCB81,
	AVG(PCB101)	PCB101,
	AVG(PCB105)	PCB105,
	AVG(PCB114)	PCB114,
	AVG(PCB118)	PCB118,
	AVG(PCB123)	PCB123,
	AVG(PCB126)	PCB126,
	AVG(PCB128)	PCB128,
	AVG(PCB138)	PCB138,
	AVG(PCB149)	PCB149,
	AVG(PCB153)	PCB153,
	AVG(PCB156)	PCB156,
	AVG(PCB157)	PCB157,
	AVG(PCB167)	PCB167,
	AVG(PCB169)	PCB169,
	AVG(PCB170)	PCB170,
	AVG(PCB180)	PCB180,
	AVG(PCB187)	PCB187,
	AVG(PCB189)	PCB189,
	AVG(SUM18PCB)	SUM18PCB,
	AVG(FLUO)	FLUO,
	AVG(PHEN)	PHEN,
	AVG(ANTH)	ANTH,
	AVG(FLUT)	FLUT,
	AVG(PYRE)	PYRE,
	AVG(CHRY)	CHRY,
	AVG(BBFL)	BBFL,
	AVG(BKFL)	BKFL,
	AVG(BAPY)	BAPY,
	AVG(BGPE)	BGPE,
	AVG(ACPH)	ACPH,
	AVG(ACEN)	ACEN,
	AVG(DAAN)	DAAN,
	AVG(BANT)	BANT,
	AVG(INPY)	INPY,
	AVG(NAPH)	NAPH,
	AVG(PAH)	PAH,
	AVG(SUM6LMPAH)	SUM6LMPAH,
	AVG(SUM10HMPAH)	SUM10HMPAH,
	AVG(SUM16PAH)	SUM16PAH,
	AVG(GBHC)	GBHC,
	AVG(HCB)	HCB,
	AVG(HEPT)	HEPT,
	AVG(ALDR)	ALDR,
	AVG(HEPO)	HEPO,
	AVG(ODDE)	ODDE,
	AVG(END1)	END1,
	AVG(PDDE)	PDDE,
	AVG(DIEL)	DIEL,
	AVG(ODDD)	ODDD,
	AVG(ENDR)	ENDR,
	AVG(END2)	END2,
	AVG(PDDD)	PDDD,
	AVG(ODDT)	ODDT,
	AVG(PDDT)	PDDT,
	AVG(ABHC)	ABHC,
	AVG(BBHC)	BBHC,
	AVG(DBHC)	DBHC,
	VIEW_NO
FROM	WPG.MARINE_SEDIMENT_X1
GROUP BY ZONE, WCZ, SUBZONE, STATION, YEAR(MDATE), TYPE, VIEW_NO;


-- WPG.MARINE_SEDIMENT_Y1 source

CREATE VIEW [WPG].[MARINE_SEDIMENT_Y1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	'Y'	 	TYPE,
	N.L_TS 		L_TS,
	N.TS 		TS,
	N.L_TVS		L_TVS,
	N.TVS 		TVS,
	N.MSN_DWR	MSN_DWR,
	M.MSM_DWR 	MSM_DWR,
	O1.MSO_DWR 	MSO_DWR,
	N.L_SG 		L_SG,
	N.SG 		SG,
	N.L_PH 		L_PH,
	N.PH 		PH,
	N.L_COD 	L_COD,
	N.COD 		COD,
	N.L_TIC 	L_TIC,
	N.TIC 		TIC,
	N.L_TOC 	L_TOC,
	N.TOC 		TOC,
	N.L_TC	 	L_TC,
	N.TC 		TC,
	N.L_NH 		L_NH,
	N.NH 		NH,
	N.L_TKN 	L_TKN,
	N.TKN 		TKN,
	N.L_TP 		L_TP,
	N.TP 		TP,
	N.L_SULPHIDE 	L_INS,
	N.SULPHIDE 	INS,
	N.L_CN 		L_CN,
	N.CN 		CN,
	M.L_AL 		L_AL,
	M.AL 		AL,
	M.L_AG 		L_AG,
	M.AG 		AG,
	M.L_ARSENIC 	L_ARS,
	M.ARSENIC 	ARS,
	M.L_BA 		L_BA,
	M.BA 		BA,
	M.L_BE 		L_BE,
	M.BE		BE,
	M.L_B 		L_B,
	M.B 		B,
	M.L_CD 		L_CD,
	M.CD 		CD,
	M.L_CO 		L_CO,
	M.CO 		CO,
	M.L_CR 		L_CR,
	M.CR 		CR,
	M.L_CU 		L_CU,
	M.CU 		CU,
	M.L_FE 		L_FE,
	M.FE 		FE,
	M.L_HG 		L_HG,
	M.HG 		HG,
	M.L_MN 		L_MN,
	M.MN 		MN,
	M.L_MO 		L_MO,
	M.MO 		MO,
	M.L_NI 		L_NI,
	M.NI 		NI,
	M.L_PB 		L_PB,
	M.PB 		PB,
	M.L_SB 		L_SB,
	M.SB 		SB,
	M.L_TL 		L_TL,
	M.TL 		TL,
	M.L_V 		L_V,
	M.V 		V,
	M.L_ZN 		L_ZN,
	M.ZN 		ZN,
	O1.L_PCB 	L_PCB,
	O1.PCB 		PCB,
	O1.L_PCB8 	L_PCB8,
	O1.PCB8 	PCB8,
	O1.L_PCB18 	L_PCB18,
	O1.PCB18 	PCB18,
	O1.L_PCB28 	L_PCB28,
	O1.PCB28 	PCB28,
	O1.L_PCB31 	L_PCB31,
	O1.PCB31 	PCB31,
	O1.L_PCB44 	L_PCB44,
	O1.PCB44 	PCB44,
	O1.L_PCB52 	L_PCB52,
	O1.PCB52 	PCB52,
	O1.L_PCB66 	L_PCB66,
	O1.PCB66 	PCB66,
	O1.L_PCB77 	L_PCB77,
	O1.PCB77 	PCB77,
	O1.L_PCB81 	L_PCB81,
	O1.PCB81 	PCB81,
	O1.L_PCB101 	L_PCB101,
	O1.PCB101 	PCB101,
	O1.L_PCB105 	L_PCB105,
	O1.PCB105 	PCB105,
	O1.L_PCB114 	L_PCB114,
	O1.PCB114 	PCB114,
	O1.L_PCB118 	L_PCB118,
	O1.PCB118 	PCB118,
	O1.L_PCB123 	L_PCB123,
	O1.PCB123 	PCB123,
	O1.L_PCB126 	L_PCB126,
	O1.PCB126 	PCB126,
	O1.L_PCB128 	L_PCB128,
	O1.PCB128 	PCB128,
	O1.L_PCB138 	L_PCB138,
	O1.PCB138 	PCB138,
	O1.L_PCB149 	L_PCB149,
	O1.PCB149 	PCB149,
	O1.L_PCB153 	L_PCB153,
	O1.PCB153 	PCB153,
	O1.L_PCB156 	L_PCB156,
	O1.PCB156 	PCB156,
	O1.L_PCB157 	L_PCB157,
	O1.PCB157 	PCB157,
	O1.L_PCB167 	L_PCB167,
	O1.PCB167 	PCB167,
	O1.L_PCB169 	L_PCB169,
	O1.PCB169 	PCB169,
	O1.L_PCB170 	L_PCB170,
	O1.PCB170 	PCB170,
	O1.L_PCB180 	L_PCB180,
	O1.PCB180 	PCB180,
	O1.L_PCB187 	L_PCB187,
	O1.PCB187 	PCB187,
	O1.L_PCB189 	L_PCB189,
	O1.PCB189 	PCB189,
	O1.SUM18PCB	SUM18PCB,
	O2.L_FLUO 	L_FLUO,
	O2.FLUO 	FLUO,
	O2.L_PHEN 	L_PHEN,
	O2.PHEN 	PHEN,
	O2.L_ANTH 	L_ANTH,
	O2.ANTH 	ANTH,
	O2.L_FLUT 	L_FLUT,
	O2.FLUT 	FLUT,
	O2.L_PYRE 	L_PYRE,
	O2.PYRE 	PYRE,
	O2.L_CHRY 	L_CHRY,
	O2.CHRY 	CHRY,
	O2.L_BBFL 	L_BBFL,
	O2.BBFL 	BBFL,
	O2.L_BKFL 	L_BKFL,
	O2.BKFL 	BKFL,
	O2.L_BAPY 	L_BAPY,
	O2.BAPY 	BAPY,
	O2.L_BGPE 	L_BGPE,
	O2.BGPE 	BGPE,
	O2.L_ACPH 	L_ACPH,
	O2.ACPH 	ACPH,
	O2.L_ACEN 	L_ACEN,
	O2.ACEN 	ACEN,
	O2.L_DAAN 	L_DAAN,
	O2.DAAN 	DAAN,
	O2.L_BANT 	L_BANT,
	O2.BANT 	BANT,
	O2.L_INPY 	L_INPY,
	O2.INPY 	INPY,
	O2.L_NAPH 	L_NAPH,
	O2.NAPH 	NAPH,
	O2.L_PAH 	L_PAH,
	O2.PAH 		PAH,
	O2.SUM6LMPAH	SUM6LMPAH,
	O2.SUM10HMPAH	SUM10HMPAH,
	O2.SUM16PAH	SUM16PAH,
	O3.L_GBHC 	L_GBHC,
	O3.GBHC 	GBHC,
	O3.L_HCB 	L_HCB,
	O3.HCB 		HCB,
	O3.L_HEPT 	L_HEPT,
	O3.HEPT 	HEPT,
	O3.L_ALDR 	L_ALDR,
	O3.ALDR 	ALDR,
	O3.L_HEPO 	L_HEPO,
	O3.HEPO 	HEPO,
	O3.L_ODDE 	L_ODDE,
	O3.ODDE 	ODDE,
	O3.L_END1 	L_END1,
	O3.END1 	END1,
	O3.L_PDDE 	L_PDDE,
	O3.PDDE 	PDDE,
	O3.L_DIEL 	L_DIEL,
	O3.DIEL 	DIEL,
	O3.L_ODDD 	L_ODDD,
	O3.ODDD 	ODDD,
	O3.L_ENDR 	L_ENDR,
	O3.ENDR 	ENDR,
	O3.L_END2 	L_END2,
	O3.END2 	END2,
	O3.L_PDDD 	L_PDDD,
	O3.PDDD 	PDDD,
	O3.L_ODDT 	L_ODDT,
	O3.ODDT 	ODDT,
	O3.L_PDDT 	L_PDDT,
	O3.PDDT 	PDDT,
	O3.L_ABHC 	L_ABHC,
	O3.ABHC 	ABHC,
	O3.L_BBHC 	L_BBHC,
	O3.BBHC 	BBHC,
	O3.L_DBHC 	L_DBHC,
	O3.DBHC 	DBHC,
	ST.CMMVIEW	VIEW_NO
FROM	WPG.MS_VISIT						V
LEFT OUTER JOIN	(SELECT * FROM WPG.MS_GLABN WHERE TYPE = 'Y')	N
	ON V.MSVISIT_ID = N.MSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.MS_GLABM WHERE TYPE = 'Y') 	M
	ON V.MSVISIT_ID = M.MSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.MS_PCB_CAL WHERE TYPE = 'Y')	O1
	ON V.MSVISIT_ID = O1.MSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.MS_PAH_CAL WHERE TYPE = 'Y')	O2
	ON V.MSVISIT_ID = O2.MSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.MS_GLAB_OC WHERE TYPE = 'Y')	O3
	ON V.MSVISIT_ID = O3.MSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION					ST
	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ					SZ
	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ					CZ
	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE					TZ
	ON CZ.ZONE_ID = TZ.ZONE_ID
WHERE N.TYPE IS NOT NULL OR M.TYPE IS NOT NULL OR O1.TYPE IS NOT NULL OR O2.TYPE IS NOT NULL OR O3.TYPE IS NOT NULL;


-- WPG.MARINE_SEDIMENT_Y_AVG1 source

CREATE VIEW WPG.MARINE_SEDIMENT_Y_AVG1 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	YEAR(MDATE)	YR,
	COUNT(*)	TOTAL,
	TYPE,
	AVG(TS)		TS,
	AVG(TVS)	TVS,
	AVG(MSN_DWR)	MSN_DWR,
	AVG(MSM_DWR)	MSM_DWR,
	AVG(MSO_DWR)	MSO_DWR,
	AVG(SG)		SG,
	AVG(PH)		PH,
	AVG(COD)	COD,
	AVG(TIC)	TIC,
	AVG(TOC)	TOC,
	AVG(TC)		TC,
	AVG(NH)		NH,
	AVG(TKN)	TKN,
	AVG(TP)		TP,
	AVG(INS)	INS,
	AVG(CN)		CN,
	AVG(AL)		AL,
	AVG(AG)		AG,
	AVG(ARS)	ARS,
	AVG(BA)		BA,
	AVG(BE)		BE,
	AVG(B)		B,
	AVG(CD)		CD,
	AVG(CO)		CO,
	AVG(CR)		CR,
	AVG(CU)		CU,
	AVG(FE)		FE,
	AVG(HG)		HG,
	AVG(MN)		MN,
	AVG(MO)		MO,
	AVG(NI)		NI,
	AVG(PB)		PB,
	AVG(SB)		SB,
	AVG(TL)		TL,
	AVG(V)		V,
	AVG(ZN)		ZN,
	AVG(PCB)	PCB,
	AVG(PCB8)	PCB8,
	AVG(PCB18)	PCB18,
	AVG(PCB28)	PCB28,
	AVG(PCB31)	PCB31,
	AVG(PCB44)	PCB44,
	AVG(PCB52)	PCB52,
	AVG(PCB66)	PCB66,
	AVG(PCB77)	PCB77,
	AVG(PCB81)	PCB81,
	AVG(PCB101)	PCB101,
	AVG(PCB105)	PCB105,
	AVG(PCB114)	PCB114,
	AVG(PCB118)	PCB118,
	AVG(PCB123)	PCB123,
	AVG(PCB126)	PCB126,
	AVG(PCB128)	PCB128,
	AVG(PCB138)	PCB138,
	AVG(PCB149)	PCB149,
	AVG(PCB153)	PCB153,
	AVG(PCB156)	PCB156,
	AVG(PCB157)	PCB157,
	AVG(PCB167)	PCB167,
	AVG(PCB169)	PCB169,
	AVG(PCB170)	PCB170,
	AVG(PCB180)	PCB180,
	AVG(PCB187)	PCB187,
	AVG(PCB189)	PCB189,
	AVG(SUM18PCB)	SUM18PCB,
	AVG(FLUO)	FLUO,
	AVG(PHEN)	PHEN,
	AVG(ANTH)	ANTH,
	AVG(FLUT)	FLUT,
	AVG(PYRE)	PYRE,
	AVG(CHRY)	CHRY,
	AVG(BBFL)	BBFL,
	AVG(BKFL)	BKFL,
	AVG(BAPY)	BAPY,
	AVG(BGPE)	BGPE,
	AVG(ACPH)	ACPH,
	AVG(ACEN)	ACEN,
	AVG(DAAN)	DAAN,
	AVG(BANT)	BANT,
	AVG(INPY)	INPY,
	AVG(NAPH)	NAPH,
	AVG(PAH)	PAH,
	AVG(SUM6LMPAH)	SUM6LMPAH,
	AVG(SUM10HMPAH)	SUM10HMPAH,
	AVG(SUM16PAH)	SUM16PAH,
	AVG(GBHC)	GBHC,
	AVG(HCB)	HCB,
	AVG(HEPT)	HEPT,
	AVG(ALDR)	ALDR,
	AVG(HEPO)	HEPO,
	AVG(ODDE)	ODDE,
	AVG(END1)	END1,
	AVG(PDDE)	PDDE,
	AVG(DIEL)	DIEL,
	AVG(ODDD)	ODDD,
	AVG(ENDR)	ENDR,
	AVG(END2)	END2,
	AVG(PDDD)	PDDD,
	AVG(ODDT)	ODDT,
	AVG(PDDT)	PDDT,
	AVG(ABHC)	ABHC,
	AVG(BBHC)	BBHC,
	AVG(DBHC)	DBHC,
	VIEW_NO
FROM	WPG.MARINE_SEDIMENT_Y1
GROUP BY ZONE, WCZ, SUBZONE, STATION, YEAR(MDATE), TYPE, VIEW_NO;


-- WPG.MARINE_SHELTER1 source

CREATE VIEW [WPG].[MARINE_SHELTER1]
AS
SELECT          ZONE, WCZ, SUBZONE, STATION, MDATE, STIME, SAM_NO, D_CODE, TEMPER, 
                            PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, 
                            PH_M, L_TURB_M, TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, 
                            L_TKN_SP, TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, L_TVS, 
                            TVS, L_CHL, CHL, L_PHAE, PHAE, TIN, TN, NH3, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, 
                            FISH_KILL, SD, WEATHER, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, 
                            TIN_PO4_MMR, TN_TP_MMR, VIEW_NO
FROM              WPG.MARINE_SHELTER_SMB1
UNION ALL
SELECT          ZONE, WCZ, SUBZONE, STATION, MDATE, STIME, SAM_NO, 'A' D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, NULL L_BOD5, BOD5, NULL L_FC, FC, NULL 
                            L_ECOLI, ECOLI, NULL L_PH_M, PH_M, NULL L_TURB_M, TURB_M, NULL L_NH4, NH4, NULL L_NO2, NO2, NULL 
                            L_NO3, NO3, NULL L_TKN_S, TKN_S, NULL L_TKN_P, TKN_P, NULL L_TKN_SP, TKN_SP, NULL L_PO4, PO4, NULL 
                            L_TP_S, TP_S, NULL L_TP_P, TP_P, NULL L_TP_SP, TP_SP, NULL L_SIO2, SIO2, NULL L_SS, SS, NULL L_TVS, 
                            TVS, NULL L_CHL, CHL, NULL L_PHAE, PHAE, TIN, TN, NH3, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                            SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, 
                            TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR, VIEW_NO
FROM              WPG.MARINE_SHELTER_A1;


-- WPG.MARINE_SHELTER2 source

CREATE VIEW [WPG].[MARINE_SHELTER2]
AS
SELECT          ZONE, WCZ, SUBZONE, STATION, MDATE, STIME, SAM_NO, D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, 
                            FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, 
                            L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, 
                            TP_SP, L_SIO2, SIO2, L_SS, SS, L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, 
                            WIND_DIR, SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN
FROM              WPG.MARINE_SHELTER1
WHERE          (VIEW_NO >= 2) AND (MDATE <= GETDATE());


-- WPG.MARINE_SHELTER_A1 source

CREATE VIEW [WPG].[MARINE_SHELTER_A1]
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.MT_NAME AS STATION, 
                            AA.MDATE, AA.STIME, AA.SAM_NO, AA.TEMPER, AA.PH_SC, AA.SAL, AA.COND, AA.DO, AA.DO_SAT, AA.FLSCUFA, 
                            AA.TURB_SC, AA.PAR, AA.BOD5, AA.FC, AA.ECOLI, AA.PH_M, AA.TURB_M, AA.NH4, AA.NO2, AA.NO3, AA.TKN_S, 
                            AA.TKN_P, AA.TKN_SP, AA.PO4, AA.TP_S, AA.TP_P, AA.TP_SP, AA.SIO2, AA.SS, AA.TVS, AA.CHL, AA.PHAE, 
                            AA.SOL_RAD, AA.AIR_TEMP, AA.WIND_SP, AA.WIND_DIR, AA.SEA_COND, AA.SEA_COL, AA.FISH_KILL, AA.SD, 
                            AA.WEATHER, AA.NH3, AA.TIN, AA.TN, AA.NH4_NM, AA.NO2_NM, AA.NO3_NM, AA.TKN_NM, AA.NOX_NM, AA.TIN_NM, 
                            AA.TN_NM, AA.PO4_PM, AA.TP_PM, AA.TIN_PO4_MMR, AA.TN_TP_MMR, ST.CMMVIEW AS VIEW_NO
FROM              WPG.MT_A AS AA INNER JOIN
                            WPG.MSTATION AS ST ON AA.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SHELTER_AVG1 source

CREATE VIEW [WPG].[MARINE_SHELTER_AVG1] AS 
SELECT * FROM WPG.MARINE_SHELTER_SMB_AVG1
UNION ALL 
SELECT * FROM WPG.MARINE_SHELTER_A_AVG1;


-- WPG.MARINE_SHELTER_AVG1A source

CREATE   VIEW [WPG].[MARINE_SHELTER_AVG1A] AS 
SELECT * FROM WPG.MARINE_SHELTER_SMB_AVG1A
UNION ALL 
SELECT * FROM WPG.MARINE_SHELTER_A_AVG1A;


-- WPG.MARINE_SHELTER_AVG2 source

CREATE VIEW [WPG].[MARINE_SHELTER_AVG2] AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	YR,
	D_CODE,
	TOTAL,
	TEMPER,
	PH_SC,
	SAL,
	COND,
	DO,
	DO_SAT,
	FLSCUFA,		TURB_SC,
    PAR,
	BOD5,
	FC,
	ECOLI,
	NH4,
	NO2,
	NO3,
	TKN_S,
	TKN_P,
	TKN_SP,
	PO4,
	TP_S,
	TP_P,
	TP_SP,
	SIO2,
	SS,
	TVS,
	CHL,
	PHAE,
	SOL_RAD,
	AIR_TEMP,
	WIND_SP,
	SD,
	NH3,
	TIN,
	TN
FROM 	WPG.MARINE_SHELTER_AVG1
WHERE	VIEW_NO >= 2
AND		YR <= YEAR(GETDATE());


-- WPG.MARINE_SHELTER_A_AVG1 source

CREATE VIEW [WPG].[MARINE_SHELTER_A_AVG1]
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.MT_NAME AS STATION, 
                            SMB_1.YR, 'A' AS D_CODE, SMB_1.TOTAL, SMB_1.TEMPER, SMB_1.PH_SC, SMB_1.SAL, SMB_1.COND, SMB_1.DO, 
                            SMB_1.DO_SAT, SMB_1.FLSCUFA, SMB_1.TURB_SC, SMB_1.PAR, SMB_1.BOD5, SMB_1.FC, SMB_1.ECOLI, 
                            SMB_1.PH_M, SMB_1.TURB_M, SMB_1.NH4, SMB_1.NO2, SMB_1.NO3, SMB_1.TKN_S, SMB_1.TKN_P, 
                            SMB_1.TKN_SP, SMB_1.PO4, SMB_1.TP_S, SMB_1.TP_P, SMB_1.TP_SP, SMB_1.SIO2, SMB_1.SS, SMB_1.TVS, 
                            SMB_1.CHL, SMB_1.PHAE, SMB_1.SOL_RAD, SMB_1.AIR_TEMP, SMB_1.WIND_SP, SMB_1.SD, SMB_1.NH3, 
                            SMB_1.TIN, SMB_1.TN, SMB_1.NH4_NM, SMB_1.NO2_NM, SMB_1.NO3_NM, SMB_1.TKN_NM, SMB_1.NOX_NM, 
                            SMB_1.TIN_NM, SMB_1.TN_NM, SMB_1.PO4_PM, SMB_1.TP_PM, SMB_1.TIN_PO4_MMR, SMB_1.TN_TP_MMR, 
                            ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YR, COUNT(*) AS TOTAL, AVG(TEMPER) AS TEMPER, AVG(PH_SC) AS PH_SC, 
                                                        AVG(SAL) AS SAL, AVG(COND) AS COND, AVG(DO) AS DO, AVG(DO_SAT) AS DO_SAT, AVG(FLSCUFA) 
                                                        AS FLSCUFA, AVG(TURB_SC) AS TURB_SC, AVG(PAR) AS PAR, AVG(BOD5) AS BOD5, 
                                                        EXP(AVG(LOG (CASE FC WHEN 0 THEN NULL ELSE FC END))) AS FC, 
                                                        EXP(AVG(LOG (CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))) AS ECOLI, AVG(PH_M) AS PH_M, 
                                                        AVG(TURB_M) AS TURB_M, AVG(NH4) AS NH4, AVG(NO2) AS NO2, AVG(NO3) AS NO3, AVG(TKN_S) 
                                                        AS TKN_S, AVG(TKN_P) AS TKN_P, AVG(TKN_SP) AS TKN_SP, AVG(PO4) AS PO4, AVG(TP_S) AS TP_S, 
                                                        AVG(TP_P) AS TP_P, AVG(TP_SP) AS TP_SP, AVG(SIO2) AS SIO2, AVG(SS) AS SS, AVG(TVS) AS TVS, 
                                                        AVG(CHL) AS CHL, AVG(PHAE) AS PHAE, AVG(SOL_RAD) AS SOL_RAD, AVG(AIR_TEMP) AS AIR_TEMP, 
                                                        AVG(WIND_SP) AS WIND_SP, AVG(SD) AS SD, AVG(NH3) AS NH3, AVG(TIN) AS TIN, AVG(TN) AS TN, 
                                                        AVG(NH4_NM) AS NH4_NM, AVG(NO2_NM) AS NO2_NM, AVG(NO3_NM) AS NO3_NM, AVG(TKN_NM) 
                                                        AS TKN_NM, AVG(NOX_NM) AS NOX_NM, AVG(TIN_NM) AS TIN_NM, AVG(TN_NM) AS TN_NM, 
                                                        AVG(PO4_PM) AS PO4_PM, AVG(TP_PM) AS TP_PM, AVG(TIN_PO4_MMR) AS TIN_PO4_MMR, 
                                                        AVG(TN_TP_MMR) AS TN_TP_MMR
                            FROM               WPG.MT_A AS SMB
                            GROUP BY    SITE_ID, YEAR(MDATE)) AS SMB_1 INNER JOIN
                            WPG.MSTATION AS ST ON SMB_1.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SHELTER_A_AVG1A source

CREATE VIEW [WPG].[MARINE_SHELTER_A_AVG1A]
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.MT_NAME AS STATION, 
                            SMB_1.YR, 'A' AS D_CODE, SMB_1.TOTAL, SMB_1.TEMPER_AVG, SMB_1.PH_SC_AVG, SMB_1.SAL_AVG, 
                            SMB_1.COND_AVG, SMB_1.DO_AVG, SMB_1.DO_SAT_AVG, SMB_1.FLSCUFA_AVG, SMB_1.TURB_SC_AVG, 
                            SMB_1.PAR_AVG, CASE WHEN L_BOD5_CNT = 0 THEN NULL ELSE '<' END AS L_BOD5_AVG, SMB_1.BOD5_AVG, 
                            CASE WHEN L_FC_CNT = 0 THEN NULL ELSE '<' END AS L_FC_AVG, SMB_1.FC_AVG, 
                            CASE WHEN L_ECOLI_CNT = 0 THEN NULL ELSE '<' END AS L_ECOLI_AVG, SMB_1.ECOLI_AVG, 
                            CASE WHEN L_PH_M_CNT = 0 THEN NULL ELSE '<' END AS L_PH_M_AVG, SMB_1.PH_M_AVG, 
                            CASE WHEN L_TURB_M_CNT = 0 THEN NULL ELSE '<' END AS L_TURB_M_AVG, SMB_1.TURB_M_AVG, 
                            CASE WHEN L_NH4_CNT = 0 THEN NULL ELSE '<' END AS L_NH4_AVG, SMB_1.NH4_AVG, 
                            CASE WHEN L_NO2_CNT = 0 THEN NULL ELSE '<' END AS L_NO2_AVG, SMB_1.NO2_AVG, 
                            CASE WHEN L_NO3_CNT = 0 THEN NULL ELSE '<' END AS L_NO3_AVG, SMB_1.NO3_AVG, 
                            CASE WHEN L_TKN_S_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_S_AVG, SMB_1.TKN_S_AVG, 
                            CASE WHEN L_TKN_P_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_P_AVG, SMB_1.TKN_P_AVG, 
                            CASE WHEN L_TKN_SP_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_SP_AVG, SMB_1.TKN_SP_AVG, 
                            CASE WHEN L_PO4_CNT = 0 THEN NULL ELSE '<' END AS L_PO4_AVG, SMB_1.PO4_AVG, 
                            CASE WHEN L_TP_S_CNT = 0 THEN NULL ELSE '<' END AS L_TP_S_AVG, SMB_1.TP_S_AVG, 
                            CASE WHEN L_TP_P_CNT = 0 THEN NULL ELSE '<' END AS L_TP_P_AVG, SMB_1.TP_P_AVG, 
                            CASE WHEN L_TP_SP_CNT = 0 THEN NULL ELSE '<' END AS L_TP_SP_AVG, SMB_1.TP_SP_AVG, 
                            CASE WHEN L_SIO2_CNT = 0 THEN NULL ELSE '<' END AS L_SIO2_AVG, SMB_1.SIO2_AVG, 
                            CASE WHEN L_SS_CNT = 0 THEN NULL ELSE '<' END AS L_SS_AVG, SMB_1.SS_AVG, 
                            CASE WHEN L_TVS_CNT = 0 THEN NULL ELSE '<' END AS L_TVS_AVG, SMB_1.TVS_AVG, 
                            CASE WHEN L_CHL_CNT = 0 THEN NULL ELSE '<' END AS L_CHL_AVG, SMB_1.CHL_AVG, 
                            CASE WHEN L_PHAE_CNT = 0 THEN NULL ELSE '<' END AS L_PHAE_AVG, SMB_1.PHAE_AVG, 
                            SMB_1.SOL_RAD_AVG, SMB_1.AIR_TEMP_AVG, SMB_1.WIND_SP_AVG, SMB_1.SD_AVG, SMB_1.NH3_AVG, 
                            SMB_1.TIN_AVG, SMB_1.TN_AVG, SMB_1.NH4_NM_AVG, SMB_1.NO2_NM_AVG, SMB_1.NO3_NM_AVG, 
                            SMB_1.TKN_NM_AVG, SMB_1.NOX_NM_AVG, SMB_1.TIN_NM_AVG, SMB_1.TN_NM_AVG, SMB_1.PO4_PM_AVG, 
                            SMB_1.TP_PM_AVG, SMB_1.TIN_PO4_MMR_AVG, SMB_1.TN_TP_MMR_AVG, ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YR, COUNT(*) AS TOTAL, AVG(TEMPER) AS TEMPER_AVG, AVG(PH_SC) 
                                                        AS PH_SC_AVG, AVG(SAL) AS SAL_AVG, AVG(COND) AS COND_AVG, AVG(DO) AS DO_AVG, AVG(DO_SAT) 
                                                        AS DO_SAT_AVG, AVG(FLSCUFA) AS FLSCUFA_AVG, AVG(TURB_SC) AS TURB_SC_AVG, AVG(PAR) 
                                                        AS PAR_AVG, AVG(BOD5) AS BOD5_AVG, EXP(AVG(LOG (CASE FC WHEN 0 THEN NULL ELSE FC END))) 
                                                        AS FC_AVG, EXP(AVG(LOG (CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))) AS ECOLI_AVG, 
                                                        AVG(PH_M) AS PH_M_AVG, AVG(TURB_M) AS TURB_M_AVG, AVG(NH4) AS NH4_AVG, AVG(NO2) 
                                                        AS NO2_AVG, AVG(NO3) AS NO3_AVG, AVG(TKN_S) AS TKN_S_AVG, AVG(TKN_P) AS TKN_P_AVG, 
                                                        AVG(TKN_SP) AS TKN_SP_AVG, AVG(PO4) AS PO4_AVG, AVG(TP_S) AS TP_S_AVG, AVG(TP_P) 
                                                        AS TP_P_AVG, AVG(TP_SP) AS TP_SP_AVG, AVG(SIO2) AS SIO2_AVG, AVG(SS) AS SS_AVG, AVG(TVS) 
                                                        AS TVS_AVG, AVG(CHL) AS CHL_AVG, AVG(PHAE) AS PHAE_AVG, AVG(SOL_RAD) AS SOL_RAD_AVG, 
                                                        AVG(AIR_TEMP) AS AIR_TEMP_AVG, AVG(WIND_SP) AS WIND_SP_AVG, AVG(SD) AS SD_AVG, AVG(NH3) 
                                                        AS NH3_AVG, AVG(TIN) AS TIN_AVG, AVG(TN) AS TN_AVG, AVG(NH4_NM) AS NH4_NM_AVG, 
                                                        AVG(NO2_NM) AS NO2_NM_AVG, AVG(NO3_NM) AS NO3_NM_AVG, AVG(TKN_NM) AS TKN_NM_AVG, 
                                                        AVG(NOX_NM) AS NOX_NM_AVG, AVG(TIN_NM) AS TIN_NM_AVG, AVG(TN_NM) AS TN_NM_AVG, 
                                                        AVG(PO4_PM) AS PO4_PM_AVG, AVG(TP_PM) AS TP_PM_AVG, AVG(TIN_PO4_MMR) 
                                                        AS TIN_PO4_MMR_AVG, AVG(TN_TP_MMR) AS TN_TP_MMR_AVG, COUNT(L_BOD5) AS L_BOD5_CNT, 
                                                        COUNT(L_FC) AS L_FC_CNT, COUNT(L_ECOLI) AS L_ECOLI_CNT, COUNT(L_PH_M) AS L_PH_M_CNT, 
                                                        COUNT(L_TURB_M) AS L_TURB_M_CNT, COUNT(L_NH4) AS L_NH4_CNT, COUNT(L_NO2) 
                                                        AS L_NO2_CNT, COUNT(L_NO3) AS L_NO3_CNT, COUNT(L_TKN_S) AS L_TKN_S_CNT, COUNT(L_TKN_P) 
                                                        AS L_TKN_P_CNT, COUNT(L_TKN_SP) AS L_TKN_SP_CNT, COUNT(L_PO4) AS L_PO4_CNT, 
                                                        COUNT(L_TP_S) AS L_TP_S_CNT, COUNT(L_TP_P) AS L_TP_P_CNT, COUNT(L_TP_SP) 
                                                        AS L_TP_SP_CNT, COUNT(L_SIO2) AS L_SIO2_CNT, COUNT(L_SS) AS L_SS_CNT, COUNT(L_TVS) 
                                                        AS L_TVS_CNT, COUNT(L_CHL) AS L_CHL_CNT, COUNT(L_PHAE) AS L_PHAE_CNT
                            FROM               WPG.MT_AA AS SMB
                            GROUP BY    SITE_ID, YEAR(MDATE)) AS SMB_1 INNER JOIN
                            WPG.MSTATION AS ST ON SMB_1.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SHELTER_A_MAX1A source

CREATE VIEW [WPG].[MARINE_SHELTER_A_MAX1A]
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.MT_NAME AS STATION, 
                            SMB_1.YR, 'A' AS D_CODE, SMB_1.TOTAL, SMB_1.TEMPER_MAX, SMB_1.PH_SC_MAX, SMB_1.SAL_MAX, 
                            SMB_1.COND_MAX, SMB_1.DO_MAX, SMB_1.DO_SAT_MAX, SMB_1.FLSCUFA_MAX, SMB_1.TURB_SC_MAX, 
                            SMB_1.PAR_MAX, CASE WHEN L_BOD5_CNT = TOTAL THEN '<' ELSE NULL END AS L_BOD5_MAX, 
                            SMB_1.BOD5_MAX, CASE WHEN L_FC_CNT = TOTAL THEN '<' ELSE NULL END AS L_FC_MAX, SMB_1.FC_MAX, 
                            CASE WHEN L_ECOLI_CNT = TOTAL THEN '<' ELSE NULL END AS L_ECOLI_MAX, SMB_1.ECOLI_MAX, 
                            CASE WHEN L_PH_M_CNT = TOTAL THEN '<' ELSE NULL END AS L_PH_M_MAX, SMB_1.PH_M_MAX, 
                            CASE WHEN L_TURB_M_CNT = TOTAL THEN '<' ELSE NULL END AS L_TURB_M_MAX, SMB_1.TURB_M_MAX, 
                            CASE WHEN L_NH4_CNT = TOTAL THEN '<' ELSE NULL END AS L_NH4_MAX, SMB_1.NH4_MAX, 
                            CASE WHEN L_NO2_CNT = TOTAL THEN '<' ELSE NULL END AS L_NO2_MAX, SMB_1.NO2_MAX, 
                            CASE WHEN L_NO3_CNT = TOTAL THEN '<' ELSE NULL END AS L_NO3_MAX, SMB_1.NO3_MAX, 
                            CASE WHEN L_TKN_S_CNT = TOTAL THEN '<' ELSE NULL END AS L_TKN_S_MAX, SMB_1.TKN_S_MAX, 
                            CASE WHEN L_TKN_P_CNT = TOTAL THEN '<' ELSE NULL END AS L_TKN_P_MAX, SMB_1.TKN_P_MAX, 
                            CASE WHEN L_TKN_SP_CNT = TOTAL THEN '<' ELSE NULL END AS L_TKN_SP_MAX, SMB_1.TKN_SP_MAX, 
                            CASE WHEN L_PO4_CNT = TOTAL THEN '<' ELSE NULL END AS L_PO4_MAX, SMB_1.PO4_MAX, 
                            CASE WHEN L_TP_S_CNT = TOTAL THEN '<' ELSE NULL END AS L_TP_S_MAX, SMB_1.TP_S_MAX, 
                            CASE WHEN L_TP_P_CNT = TOTAL THEN '<' ELSE NULL END AS L_TP_P_MAX, SMB_1.TP_P_MAX, 
                            CASE WHEN L_TP_SP_CNT = TOTAL THEN '<' ELSE NULL END AS L_TP_SP_MAX, SMB_1.TP_SP_MAX, 
                            CASE WHEN L_SIO2_CNT = TOTAL THEN '<' ELSE NULL END AS L_SIO2_MAX, SMB_1.SIO2_MAX, 
                            CASE WHEN L_SS_CNT = TOTAL THEN '<' ELSE NULL END AS L_SS_MAX, SMB_1.SS_MAX, 
                            CASE WHEN L_TVS_CNT = TOTAL THEN '<' ELSE NULL END AS L_TVS_MAX, SMB_1.TVS_MAX, 
                            CASE WHEN L_CHL_CNT = TOTAL THEN '<' ELSE NULL END AS L_CHL_MAX, SMB_1.CHL_MAX, 
                            CASE WHEN L_PHAE_CNT = TOTAL THEN '<' ELSE NULL END AS L_PHAE_MAX, SMB_1.PHAE_MAX, 
                            SMB_1.SOL_RAD_MAX, SMB_1.AIR_TEMP_MAX, SMB_1.WIND_SP_MAX, SMB_1.SD_MAX, SMB_1.NH3_MAX, 
                            SMB_1.TIN_MAX, SMB_1.TN_MAX, SMB_1.NH4_NM_MAX, SMB_1.NO2_NM_MAX, SMB_1.NO3_NM_MAX, 
                            SMB_1.TKN_NM_MAX, SMB_1.NOX_NM_MAX, SMB_1.TIN_NM_MAX, SMB_1.TN_NM_MAX, SMB_1.PO4_PM_MAX, 
                            SMB_1.TP_PM_MAX, SMB_1.TIN_PO4_MMR_MAX, SMB_1.TN_TP_MMR_MAX, ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YR, COUNT(*) AS TOTAL, MAX(TEMPER) AS TEMPER_MAX, MAX(PH_SC) 
                                                        AS PH_SC_MAX, MAX(SAL) AS SAL_MAX, MAX(COND) AS COND_MAX, MAX(DO) AS DO_MAX, 
                                                        MAX(DO_SAT) AS DO_SAT_MAX, MAX(FLSCUFA) AS FLSCUFA_MAX, MAX(TURB_SC) AS TURB_SC_MAX, 
                                                        MAX(PAR) AS PAR_MAX, MAX(BOD5) AS BOD5_MAX, EXP(MAX(LOG (CASE FC WHEN 0 THEN NULL 
                                                        ELSE FC END))) AS FC_MAX, EXP(MAX(LOG (CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))) 
                                                        AS ECOLI_MAX, MAX(PH_M) AS PH_M_MAX, MAX(TURB_M) AS TURB_M_MAX, MAX(NH4) AS NH4_MAX, 
MAX(NO2) AS NO2_MAX, MAX(NO3) AS NO3_MAX, MAX(TKN_S) AS TKN_S_MAX, MAX(TKN_P) 
                                                        AS TKN_P_MAX, MAX(TKN_SP) AS TKN_SP_MAX, MAX(PO4) AS PO4_MAX, MAX(TP_S) AS TP_S_MAX, 
                                                        MAX(TP_P) AS TP_P_MAX, MAX(TP_SP) AS TP_SP_MAX, MAX(SIO2) AS SIO2_MAX, MAX(SS) AS SS_MAX, 
                                                        MAX(TVS) AS TVS_MAX, MAX(CHL) AS CHL_MAX, MAX(PHAE) AS PHAE_MAX, MAX(SOL_RAD) 
                                                        AS SOL_RAD_MAX, MAX(AIR_TEMP) AS AIR_TEMP_MAX, MAX(WIND_SP) AS WIND_SP_MAX, MAX(SD) 
                                                        AS SD_MAX, MAX(NH3) AS NH3_MAX, MAX(TIN) AS TIN_MAX, MAX(TN) AS TN_MAX, MAX(NH4_NM) 
                                                        AS NH4_NM_MAX, MAX(NO2_NM) AS NO2_NM_MAX, MAX(NO3_NM) AS NO3_NM_MAX, MAX(TKN_NM) 
                                                        AS TKN_NM_MAX, MAX(NOX_NM) AS NOX_NM_MAX, MAX(TIN_NM) AS TIN_NM_MAX, MAX(TN_NM) 
                                                        AS TN_NM_MAX, MAX(PO4_PM) AS PO4_PM_MAX, MAX(TP_PM) AS TP_PM_MAX, MAX(TIN_PO4_MMR) 
                                                        AS TIN_PO4_MMR_MAX, MAX(TN_TP_MMR) AS TN_TP_MMR_MAX, COUNT(L_BOD5) AS L_BOD5_CNT, 
                                                        COUNT(L_FC) AS L_FC_CNT, COUNT(L_ECOLI) AS L_ECOLI_CNT, COUNT(L_PH_M) AS L_PH_M_CNT, 
                                                        COUNT(L_TURB_M) AS L_TURB_M_CNT, COUNT(L_NH4) AS L_NH4_CNT, COUNT(L_NO2) 
                                                        AS L_NO2_CNT, COUNT(L_NO3) AS L_NO3_CNT, COUNT(L_TKN_S) AS L_TKN_S_CNT, COUNT(L_TKN_P) 
                                                        AS L_TKN_P_CNT, COUNT(L_TKN_SP) AS L_TKN_SP_CNT, COUNT(L_PO4) AS L_PO4_CNT, 
                                                        COUNT(L_TP_S) AS L_TP_S_CNT, COUNT(L_TP_P) AS L_TP_P_CNT, COUNT(L_TP_SP) 
                                                        AS L_TP_SP_CNT, COUNT(L_SIO2) AS L_SIO2_CNT, COUNT(L_SS) AS L_SS_CNT, COUNT(L_TVS) 
                                                        AS L_TVS_CNT, COUNT(L_CHL) AS L_CHL_CNT, COUNT(L_PHAE) AS L_PHAE_CNT
                            FROM               WPG.MT_AA AS SMB
                            GROUP BY    SITE_ID, YEAR(MDATE)) AS SMB_1 INNER JOIN
                            WPG.MSTATION AS ST ON SMB_1.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SHELTER_A_MIN1A source

CREATE VIEW [WPG].[MARINE_SHELTER_A_MIN1A]
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.MT_NAME AS STATION, 
                            SMB_1.YR, 'A' AS D_CODE, SMB_1.TOTAL, SMB_1.TEMPER_MIN, SMB_1.PH_SC_MIN, SMB_1.SAL_MIN, 
                            SMB_1.COND_MIN, SMB_1.DO_MIN, SMB_1.DO_SAT_MIN, SMB_1.FLSCUFA_MIN, SMB_1.TURB_SC_MIN, 
                            SMB_1.PAR_MIN, CASE WHEN L_BOD5_CNT = 0 THEN NULL ELSE '<' END AS L_BOD5_MIN, SMB_1.BOD5_MIN, 
                            CASE WHEN L_FC_CNT = 0 THEN NULL ELSE '<' END AS L_FC_MIN, SMB_1.FC_MIN, 
                            CASE WHEN L_ECOLI_CNT = 0 THEN NULL ELSE '<' END AS L_ECOLI_MIN, SMB_1.ECOLI_MIN, 
                            CASE WHEN L_PH_M_CNT = 0 THEN NULL ELSE '<' END AS L_PH_M_MIN, SMB_1.PH_M_MIN, 
                            CASE WHEN L_TURB_M_CNT = 0 THEN NULL ELSE '<' END AS L_TURB_M_MIN, SMB_1.TURB_M_MIN, 
                            CASE WHEN L_NH4_CNT = 0 THEN NULL ELSE '<' END AS L_NH4_MIN, SMB_1.NH4_MIN, 
                            CASE WHEN L_NO2_CNT = 0 THEN NULL ELSE '<' END AS L_NO2_MIN, SMB_1.NO2_MIN, 
                            CASE WHEN L_NO3_CNT = 0 THEN NULL ELSE '<' END AS L_NO3_MIN, SMB_1.NO3_MIN, 
                            CASE WHEN L_TKN_S_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_S_MIN, SMB_1.TKN_S_MIN, 
                            CASE WHEN L_TKN_P_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_P_MIN, SMB_1.TKN_P_MIN, 
                            CASE WHEN L_TKN_SP_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_SP_MIN, SMB_1.TKN_SP_MIN, 
                            CASE WHEN L_PO4_CNT = 0 THEN NULL ELSE '<' END AS L_PO4_MIN, SMB_1.PO4_MIN, 
                            CASE WHEN L_TP_S_CNT = 0 THEN NULL ELSE '<' END AS L_TP_S_MIN, SMB_1.TP_S_MIN, 
                            CASE WHEN L_TP_P_CNT = 0 THEN NULL ELSE '<' END AS L_TP_P_MIN, SMB_1.TP_P_MIN, 
                            CASE WHEN L_TP_SP_CNT = 0 THEN NULL ELSE '<' END AS L_TP_SP_MIN, SMB_1.TP_SP_MIN, 
                            CASE WHEN L_SIO2_CNT = 0 THEN NULL ELSE '<' END AS L_SIO2_MIN, SMB_1.SIO2_MIN, 
                            CASE WHEN L_SS_CNT = 0 THEN NULL ELSE '<' END AS L_SS_MIN, SMB_1.SS_MIN, 
                            CASE WHEN L_TVS_CNT = 0 THEN NULL ELSE '<' END AS L_TVS_MIN, SMB_1.TVS_MIN, 
                            CASE WHEN L_CHL_CNT = 0 THEN NULL ELSE '<' END AS L_CHL_MIN, SMB_1.CHL_MIN, 
                            CASE WHEN L_PHAE_CNT = 0 THEN NULL ELSE '<' END AS L_PHAE_MIN, SMB_1.PHAE_MIN, 
                            SMB_1.SOL_RAD_MIN, SMB_1.AIR_TEMP_MIN, SMB_1.WIND_SP_MIN, SMB_1.SD_MIN, SMB_1.NH3_MIN, 
                            SMB_1.TIN_MIN, SMB_1.TN_MIN, SMB_1.NH4_NM_MIN, SMB_1.NO2_NM_MIN, SMB_1.NO3_NM_MIN, 
                            SMB_1.TKN_NM_MIN, SMB_1.NOX_NM_MIN, SMB_1.TIN_NM_MIN, SMB_1.TN_NM_MIN, SMB_1.PO4_PM_MIN, 
                            SMB_1.TP_PM_MIN, SMB_1.TIN_PO4_MMR_MIN, SMB_1.TN_TP_MMR_MIN, ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YR, COUNT(*) AS TOTAL, MIN(TEMPER) AS TEMPER_MIN, MIN(PH_SC) 
                                                        AS PH_SC_MIN, MIN(SAL) AS SAL_MIN, MIN(COND) AS COND_MIN, MIN(DO) AS DO_MIN, MIN(DO_SAT) 
                                                        AS DO_SAT_MIN, MIN(FLSCUFA) AS FLSCUFA_MIN, MIN(TURB_SC) AS TURB_SC_MIN, MIN(PAR) 
                                                        AS PAR_MIN, MIN(BOD5) AS BOD5_MIN, EXP(MIN(LOG (CASE FC WHEN 0 THEN NULL ELSE FC END))) 
                                                        AS FC_MIN, EXP(MIN(LOG (CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))) AS ECOLI_MIN, 
                                                        MIN(PH_M) AS PH_M_MIN, MIN(TURB_M) AS TURB_M_MIN, MIN(NH4) AS NH4_MIN, MIN(NO2) 
                                                        AS NO2_MIN, MIN(NO3) AS NO3_MIN, MIN(TKN_S) AS TKN_S_MIN, MIN(TKN_P) AS TKN_P_MIN, 
                                                        MIN(TKN_SP) AS TKN_SP_MIN, MIN(PO4) AS PO4_MIN, MIN(TP_S) AS TP_S_MIN, MIN(TP_P) 
                                                        AS TP_P_MIN, MIN(TP_SP) AS TP_SP_MIN, MIN(SIO2) AS SIO2_MIN, MIN(SS) AS SS_MIN, MIN(TVS) 
                                                        AS TVS_MIN, MIN(CHL) AS CHL_MIN, MIN(PHAE) AS PHAE_MIN, MIN(SOL_RAD) AS SOL_RAD_MIN, 
                                                        MIN(AIR_TEMP) AS AIR_TEMP_MIN, MIN(WIND_SP) AS WIND_SP_MIN, MIN(SD) AS SD_MIN, MIN(NH3) 
                                                        AS NH3_MIN, MIN(TIN) AS TIN_MIN, MIN(TN) AS TN_MIN, MIN(NH4_NM) AS NH4_NM_MIN, 
                                                        MIN(NO2_NM) AS NO2_NM_MIN, MIN(NO3_NM) AS NO3_NM_MIN, MIN(TKN_NM) AS TKN_NM_MIN, 
                                                        MIN(NOX_NM) AS NOX_NM_MIN, MIN(TIN_NM) AS TIN_NM_MIN, MIN(TN_NM) AS TN_NM_MIN, 
                                                        MIN(PO4_PM) AS PO4_PM_MIN, MIN(TP_PM) AS TP_PM_MIN, MIN(TIN_PO4_MMR) 
                                                        AS TIN_PO4_MMR_MIN, MIN(TN_TP_MMR) AS TN_TP_MMR_MIN, COUNT(L_BOD5) AS L_BOD5_CNT, 
                                                        COUNT(L_FC) AS L_FC_CNT, COUNT(L_ECOLI) AS L_ECOLI_CNT, COUNT(L_PH_M) AS L_PH_M_CNT, 
                                                        COUNT(L_TURB_M) AS L_TURB_M_CNT, COUNT(L_NH4) AS L_NH4_CNT, COUNT(L_NO2) 
                                                        AS L_NO2_CNT, COUNT(L_NO3) AS L_NO3_CNT, COUNT(L_TKN_S) AS L_TKN_S_CNT, COUNT(L_TKN_P) 
                                                        AS L_TKN_P_CNT, COUNT(L_TKN_SP) AS L_TKN_SP_CNT, COUNT(L_PO4) AS L_PO4_CNT, 
                                                        COUNT(L_TP_S) AS L_TP_S_CNT, COUNT(L_TP_P) AS L_TP_P_CNT, COUNT(L_TP_SP) 
                                                        AS L_TP_SP_CNT, COUNT(L_SIO2) AS L_SIO2_CNT, COUNT(L_SS) AS L_SS_CNT, COUNT(L_TVS) 
                                                        AS L_TVS_CNT, COUNT(L_CHL) AS L_CHL_CNT, COUNT(L_PHAE) AS L_PHAE_CNT
                            FROM               WPG.MT_AA AS SMB
                            GROUP BY    SITE_ID, YEAR(MDATE)) AS SMB_1 INNER JOIN
                            WPG.MSTATION AS ST ON SMB_1.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SHELTER_MAX1A source

CREATE  VIEW [WPG].[MARINE_SHELTER_MAX1A] AS 
SELECT * FROM WPG.MARINE_SHELTER_SMB_MAX1A
UNION ALL 
SELECT * FROM WPG.MARINE_SHELTER_A_MAX1A;


-- WPG.MARINE_SHELTER_MIN1A source

CREATE  VIEW [WPG].[MARINE_SHELTER_MIN1A] AS 
SELECT * FROM WPG.MARINE_SHELTER_SMB_MIN1A
UNION ALL 
SELECT * FROM WPG.MARINE_SHELTER_A_MIN1A;


-- WPG.MARINE_SHELTER_SMB1 source

CREATE VIEW [WPG].[MARINE_SHELTER_SMB1]
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.MT_NAME AS STATION, 
                            SMB.MDATE, SMB.STIME, SMB.SAM_NO, SMB.D_CODE, SMB.TEMPER, SMB.PH_SC, SMB.SAL, SMB.COND, 
                            SMB.DO, SMB.DO_SAT, SMB.FLSCUFA, SMB.TURB_SC, SMB.PAR, SMB.L_BOD5, SMB.BOD5, SMB.L_FC, SMB.FC, 
                            SMB.L_ECOLI, SMB.ECOLI, SMB.L_PH_M, SMB.PH_M, SMB.L_TURB_M, SMB.TURB_M, SMB.L_NH4, SMB.NH4, 
                            SMB.L_NO2, SMB.NO2, SMB.L_NO3, SMB.NO3, SMB.L_TKN_S, SMB.TKN_S, SMB.L_TKN_P, SMB.TKN_P, 
                            SMB.L_TKN_SP, SMB.TKN_SP, SMB.L_PO4, SMB.PO4, SMB.L_TP_S, SMB.TP_S, SMB.L_TP_P, SMB.TP_P, 
                            SMB.L_TP_SP, SMB.TP_SP, SMB.L_SIO2, SMB.SIO2, SMB.L_SS, SMB.SS, SMB.L_TVS, SMB.TVS, SMB.L_CHL, 
                            SMB.CHL, SMB.L_PHAE, SMB.PHAE, SMB.SOL_RAD, SMB.AIR_TEMP, SMB.WIND_SP, SMB.WIND_DIR, 
                            SMB.SEA_COND, SMB.SEA_COL, SMB.FISH_KILL, SMB.SD, SMB.WEATHER, SMB.NH3, SMB.TIN, SMB.TN, 
                            SMB.NH4_NM, SMB.NO2_NM, SMB.NO3_NM, SMB.TKN_NM, SMB.NOX_NM, SMB.TIN_NM, SMB.TN_NM, 
                            SMB.PO4_PM, SMB.TP_PM, SMB.TIN_PO4_MMR, SMB.TN_TP_MMR, ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, 
                                                        FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, 
                                                        TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, 
                                                        TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, L_TVS, 
                                                        TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, 
                                                        FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, 
                                                        TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR
                            FROM               WPG.MT_S
                            UNION ALL
                            SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, 
                                                        FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, 
                                                        TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, 
                                                        TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, L_TVS, 
                                                        TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, 
                                                        FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, 
                                                        TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR
                            FROM              WPG.MT_M
                            UNION ALL
                            SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, 
                                                        FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, 
                                                        TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, 
                                                        TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, L_TVS, 
                                                        TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, 
                                                        FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, 
                                                        TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR
                            FROM              WPG.MT_B
                            UNION ALL
                            SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, 
                                                        FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, 
                                                        TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, 
                                                        TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, L_TVS, 
                                                        TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, 
                                                        FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, 
                                                        TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR
                            FROM              WPG.MT_N) AS SMB INNER JOIN
                            WPG.MSTATION AS ST ON SMB.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SHELTER_SMB_AVG1 source

CREATE VIEW [WPG].[MARINE_SHELTER_SMB_AVG1]
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.MT_NAME AS STATION, SMB.YR,
                             SMB.D_CODE, SMB.TOTAL, SMB.TEMPER, SMB.PH_SC, SMB.SAL, SMB.COND, SMB.DO, SMB.DO_SAT, 
                            SMB.FLSCUFA, SMB.TURB_SC, SMB.PAR, SMB.BOD5, SMB.FC, SMB.ECOLI, SMB.PH_M, SMB.TURB_M, SMB.NH4, 
                            SMB.NO2, SMB.NO3, SMB.TKN_S, SMB.TKN_P, SMB.TKN_SP, SMB.PO4, SMB.TP_S, SMB.TP_P, SMB.TP_SP, 
                            SMB.SIO2, SMB.SS, SMB.TVS, SMB.CHL, SMB.PHAE, SMB.SOL_RAD, SMB.AIR_TEMP, SMB.WIND_SP, SMB.SD, 
                            SMB.NH3, SMB.TIN, SMB.TN, SMB.NH4_NM, SMB.NO2_NM, SMB.NO3_NM, SMB.TKN_NM, SMB.NOX_NM, 
                            SMB.TIN_NM, SMB.TN_NM, SMB.PO4_PM, SMB.TP_PM, SMB.TIN_PO4_MMR, SMB.TN_TP_MMR, 
                            ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YR, D_CODE, COUNT(*) AS TOTAL, AVG(TEMPER) AS TEMPER, AVG(PH_SC) 
                                                        AS PH_SC, AVG(SAL) AS SAL, AVG(COND) AS COND, AVG(DO) AS DO, AVG(DO_SAT) AS DO_SAT, 
                                                        AVG(FLSCUFA) AS FLSCUFA, AVG(TURB_SC) AS TURB_SC, AVG(PAR) AS PAR, AVG(BOD5) AS BOD5, 
                                                        EXP(AVG(LOG (CASE FC WHEN 0 THEN NULL ELSE FC END))) AS FC, 
                                                        EXP(AVG(LOG (CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))) AS ECOLI, AVG(PH_M) AS PH_M, 
                                                        AVG(TURB_M) AS TURB_M, AVG(NH4) AS NH4, AVG(NO2) AS NO2, AVG(NO3) AS NO3, AVG(TKN_S) 
                                                        AS TKN_S, AVG(TKN_P) AS TKN_P, AVG(TKN_SP) AS TKN_SP, AVG(PO4) AS PO4, AVG(TP_S) AS TP_S, 
                                                        AVG(TP_P) AS TP_P, AVG(TP_SP) AS TP_SP, AVG(SIO2) AS SIO2, AVG(SS) AS SS, AVG(TVS) AS TVS, 
                                                        AVG(CHL) AS CHL, AVG(PHAE) AS PHAE, AVG(SOL_RAD) AS SOL_RAD, AVG(AIR_TEMP) AS AIR_TEMP, 
                                                        AVG(WIND_SP) AS WIND_SP, AVG(SD) AS SD, AVG(NH3) AS NH3, AVG(TIN) AS TIN, AVG(TN) AS TN, 
                                                        AVG(NH4_NM) AS NH4_NM, AVG(NO2_NM) AS NO2_NM, AVG(NO3_NM) AS NO3_NM, AVG(TKN_NM) 
                                                        AS TKN_NM, AVG(NOX_NM) AS NOX_NM, AVG(TIN_NM) AS TIN_NM, AVG(TN_NM) AS TN_NM, 
                                                        AVG(PO4_PM) AS PO4_PM, AVG(TP_PM) AS TP_PM, AVG(TIN_PO4_MMR) AS TIN_PO4_MMR, 
                                                        AVG(TN_TP_MMR) AS TN_TP_MMR
                            FROM               (SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, 
                                                                                     TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM               WPG.MT_S
                                                         UNION ALL
                                                         SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, 
                                                                                     TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM              WPG.MT_M
                                                         UNION ALL
                                                         SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, 
                                                                                     TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM              WPG.MT_B) AS SMB_1
                            GROUP BY    SITE_ID, YEAR(MDATE), D_CODE) AS SMB INNER JOIN
                            WPG.MSTATION AS ST ON SMB.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SHELTER_SMB_AVG1A source

CREATE VIEW [WPG].[MARINE_SHELTER_SMB_AVG1A]
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.MT_NAME AS STATION, SMB.YR,
                             SMB.D_CODE, SMB.TOTAL, SMB.TEMPER_AVG, SMB.PH_SC_AVG, SMB.SAL_AVG, SMB.COND_AVG, SMB.DO_AVG, 
                            SMB.DO_SAT_AVG, SMB.FLSCUFA_AVG, SMB.TURB_SC_AVG, SMB.PAR_AVG, 
                            CASE WHEN L_BOD5_CNT = 0 THEN NULL ELSE '<' END AS L_BOD5_AVG, SMB.BOD5_AVG, 
                            CASE WHEN L_FC_CNT = 0 THEN NULL ELSE '<' END AS L_FC_AVG, SMB.FC_AVG, 
                            CASE WHEN L_ECOLI_CNT = 0 THEN NULL ELSE '<' END AS L_ECOLI_AVG, SMB.ECOLI_AVG, 
                            CASE WHEN L_PH_M_CNT = 0 THEN NULL ELSE '<' END AS L_PH_M_AVG, SMB.PH_M_AVG, 
                            CASE WHEN L_TURB_M_CNT = 0 THEN NULL ELSE '<' END AS L_TURB_M_AVG, SMB.TURB_M_AVG, 
                            CASE WHEN L_NH4_CNT = 0 THEN NULL ELSE '<' END AS L_NH4_AVG, SMB.NH4_AVG, 
                            CASE WHEN L_NO2_CNT = 0 THEN NULL ELSE '<' END AS L_NO2_AVG, SMB.NO2_AVG, 
                            CASE WHEN L_NO3_CNT = 0 THEN NULL ELSE '<' END AS L_NO3_AVG, SMB.NO3_AVG, 
                            CASE WHEN L_TKN_S_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_S_AVG, SMB.TKN_S_AVG, 
                            CASE WHEN L_TKN_P_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_P_AVG, SMB.TKN_P_AVG, 
                            CASE WHEN L_TKN_SP_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_SP_AVG, SMB.TKN_SP_AVG, 
                            CASE WHEN L_PO4_CNT = 0 THEN NULL ELSE '<' END AS L_PO4_AVG, SMB.PO4_AVG, 
                            CASE WHEN L_TP_S_CNT = 0 THEN NULL ELSE '<' END AS L_TP_S_AVG, SMB.TP_S_AVG, 
                            CASE WHEN L_TP_P_CNT = 0 THEN NULL ELSE '<' END AS L_TP_P_AVG, SMB.TP_P_AVG, 
                            CASE WHEN L_TP_SP_CNT = 0 THEN NULL ELSE '<' END AS L_TP_SP_AVG, SMB.TP_SP_AVG, 
                            CASE WHEN L_SIO2_CNT = 0 THEN NULL ELSE '<' END AS L_SIO2_AVG, SMB.SIO2_AVG, 
                            CASE WHEN L_SS_CNT = 0 THEN NULL ELSE '<' END AS L_SS_AVG, SMB.SS_AVG, 
                            CASE WHEN L_TVS_CNT = 0 THEN NULL ELSE '<' END AS L_TVS_AVG, SMB.TVS_AVG, 
                            CASE WHEN L_CHL_CNT = 0 THEN NULL ELSE '<' END AS L_CHL_AVG, SMB.CHL_AVG, 
                            CASE WHEN L_PHAE_CNT = 0 THEN NULL ELSE '<' END AS L_PHAE_AVG, SMB.PHAE_AVG, SMB.SOL_RAD_AVG, 
                            SMB.AIR_TEMP_AVG, SMB.WIND_SP_AVG, SMB.SD_AVG, SMB.NH3_AVG, SMB.TIN_AVG, SMB.TN_AVG, 
                            SMB.NH4_NM_AVG, SMB.NO2_NM_AVG, SMB.NO3_NM_AVG, SMB.TKN_NM_AVG, SMB.NOX_NM_AVG, 
                            SMB.TIN_NM_AVG, SMB.TN_NM_AVG, SMB.PO4_PM_AVG, SMB.TP_PM_AVG, SMB.TIN_PO4_MMR_AVG, 
                            SMB.TN_TP_MMR_AVG, ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YR, D_CODE, COUNT(*) AS TOTAL, AVG(TEMPER) AS TEMPER_AVG, 
                                                        AVG(PH_SC) AS PH_SC_AVG, AVG(SAL) AS SAL_AVG, AVG(COND) AS COND_AVG, AVG(DO) AS DO_AVG, 
                                                        AVG(DO_SAT) AS DO_SAT_AVG, AVG(FLSCUFA) AS FLSCUFA_AVG, AVG(TURB_SC) AS TURB_SC_AVG, 
                                                        AVG(PAR) AS PAR_AVG, AVG(BOD5) AS BOD5_AVG, EXP(AVG(LOG (CASE FC WHEN 0 THEN NULL 
                                                        ELSE FC END))) AS FC_AVG, EXP(AVG(LOG (CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))) 
                                                        AS ECOLI_AVG, AVG(PH_M) AS PH_M_AVG, AVG(TURB_M) AS TURB_M_AVG, AVG(NH4) AS NH4_AVG, 
                                                        AVG(NO2) AS NO2_AVG, AVG(NO3) AS NO3_AVG, AVG(TKN_S) AS TKN_S_AVG, AVG(TKN_P) 
                                                        AS TKN_P_AVG, AVG(TKN_SP) AS TKN_SP_AVG, AVG(PO4) AS PO4_AVG, AVG(TP_S) AS TP_S_AVG, 
                                                        AVG(TP_P) AS TP_P_AVG, AVG(TP_SP) AS TP_SP_AVG, AVG(SIO2) AS SIO2_AVG, AVG(SS) AS SS_AVG, 
                                                        AVG(TVS) AS TVS_AVG, AVG(CHL) AS CHL_AVG, AVG(PHAE) AS PHAE_AVG, AVG(SOL_RAD) 
                                                        AS SOL_RAD_AVG, AVG(AIR_TEMP) AS AIR_TEMP_AVG, AVG(WIND_SP) AS WIND_SP_AVG, AVG(SD) 
                                                        AS SD_AVG, AVG(NH3) AS NH3_AVG, AVG(TIN) AS TIN_AVG, AVG(TN) AS TN_AVG, AVG(NH4_NM) 
                                                        AS NH4_NM_AVG, AVG(NO2_NM) AS NO2_NM_AVG, AVG(NO3_NM) AS NO3_NM_AVG, AVG(TKN_NM) 
                                                        AS TKN_NM_AVG, AVG(NOX_NM) AS NOX_NM_AVG, AVG(TIN_NM) AS TIN_NM_AVG, AVG(TN_NM) 
                                                        AS TN_NM_AVG, AVG(PO4_PM) AS PO4_PM_AVG, AVG(TP_PM) AS TP_PM_AVG, AVG(TIN_PO4_MMR) 
                                                        AS TIN_PO4_MMR_AVG, AVG(TN_TP_MMR) AS TN_TP_MMR_AVG, COUNT(L_BOD5) AS L_BOD5_CNT, 
                                                        COUNT(L_FC) AS L_FC_CNT, COUNT(L_ECOLI) AS L_ECOLI_CNT, COUNT(L_PH_M) AS L_PH_M_CNT, 
                                                        COUNT(L_TURB_M) AS L_TURB_M_CNT, COUNT(L_NH4) AS L_NH4_CNT, COUNT(L_NO2) 
                                                        AS L_NO2_CNT, COUNT(L_NO3) AS L_NO3_CNT, COUNT(L_TKN_S) AS L_TKN_S_CNT, COUNT(L_TKN_P) 
                                                        AS L_TKN_P_CNT, COUNT(L_TKN_SP) AS L_TKN_SP_CNT, COUNT(L_PO4) AS L_PO4_CNT, 
                                                        COUNT(L_TP_S) AS L_TP_S_CNT, COUNT(L_TP_P) AS L_TP_P_CNT, COUNT(L_TP_SP) 
                                                        AS L_TP_SP_CNT, COUNT(L_SIO2) AS L_SIO2_CNT, COUNT(L_SS) AS L_SS_CNT, COUNT(L_TVS) 
                                                        AS L_TVS_CNT, COUNT(L_CHL) AS L_CHL_CNT, COUNT(L_PHAE) AS L_PHAE_CNT
                            FROM               (SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, 
                                                                                     TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM               WPG.MT_S
                                                         UNION ALL
                                                         SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, 
                                                                                     TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM              WPG.MT_M
                                                         UNION ALL
                                                         SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, 
                                                                                     TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM              WPG.MT_B) AS SMB_1
                            GROUP BY    SITE_ID, YEAR(MDATE), D_CODE) AS SMB INNER JOIN
                            WPG.MSTATION AS ST ON SMB.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SHELTER_SMB_MAX1A source

CREATE VIEW [WPG].[MARINE_SHELTER_SMB_MAX1A]
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.MT_NAME AS STATION, SMB.YR,
                             SMB.D_CODE, SMB.TOTAL, SMB.TEMPER_MAX, SMB.PH_SC_MAX, SMB.SAL_MAX, SMB.COND_MAX, 
                            SMB.DO_MAX, SMB.DO_SAT_MAX, SMB.FLSCUFA_MAX, SMB.TURB_SC_MAX, SMB.PAR_MAX, 
                            CASE WHEN L_BOD5_CNT = TOTAL THEN '<' ELSE NULL END AS L_BOD5_MAX, SMB.BOD5_MAX, 
                            CASE WHEN L_FC_CNT = TOTAL THEN '<' ELSE NULL END AS L_FC_MAX, SMB.FC_MAX, 
                            CASE WHEN L_ECOLI_CNT = TOTAL THEN '<' ELSE NULL END AS L_ECOLI_MAX, SMB.ECOLI_MAX, 
                            CASE WHEN L_PH_M_CNT = TOTAL THEN '<' ELSE NULL END AS L_PH_M_MAX, SMB.PH_M_MAX, 
                            CASE WHEN L_TURB_M_CNT = TOTAL THEN '<' ELSE NULL END AS L_TURB_M_MAX, SMB.TURB_M_MAX, 
                            CASE WHEN L_NH4_CNT = TOTAL THEN '<' ELSE NULL END AS L_NH4_MAX, SMB.NH4_MAX, 
                            CASE WHEN L_NO2_CNT = TOTAL THEN '<' ELSE NULL END AS L_NO2_MAX, SMB.NO2_MAX, 
                            CASE WHEN L_NO3_CNT = TOTAL THEN '<' ELSE NULL END AS L_NO3_MAX, SMB.NO3_MAX, 
                            CASE WHEN L_TKN_S_CNT = TOTAL THEN '<' ELSE NULL END AS L_TKN_S_MAX, SMB.TKN_S_MAX, 
                            CASE WHEN L_TKN_P_CNT = TOTAL THEN '<' ELSE NULL END AS L_TKN_P_MAX, SMB.TKN_P_MAX, 
                            CASE WHEN L_TKN_SP_CNT = TOTAL THEN '<' ELSE NULL END AS L_TKN_SP_MAX, SMB.TKN_SP_MAX, 
                            CASE WHEN L_PO4_CNT = TOTAL THEN '<' ELSE NULL END AS L_PO4_MAX, SMB.PO4_MAX, 
                            CASE WHEN L_TP_S_CNT = TOTAL THEN '<' ELSE NULL END AS L_TP_S_MAX, SMB.TP_S_MAX, 
                            CASE WHEN L_TP_P_CNT = TOTAL THEN '<' ELSE NULL END AS L_TP_P_MAX, SMB.TP_P_MAX, 
                            CASE WHEN L_TP_SP_CNT = TOTAL THEN '<' ELSE NULL END AS L_TP_SP_MAX, SMB.TP_SP_MAX, 
                            CASE WHEN L_SIO2_CNT = TOTAL THEN '<' ELSE NULL END AS L_SIO2_MAX, SMB.SIO2_MAX, 
                            CASE WHEN L_SS_CNT = TOTAL THEN '<' ELSE NULL END AS L_SS_MAX, SMB.SS_MAX, 
                            CASE WHEN L_TVS_CNT = TOTAL THEN '<' ELSE NULL END AS L_TVS_MAX, SMB.TVS_MAX, 
                            CASE WHEN L_CHL_CNT = TOTAL THEN '<' ELSE NULL END AS L_CHL_MAX, SMB.CHL_MAX, 
                            CASE WHEN L_PHAE_CNT = TOTAL THEN '<' ELSE NULL END AS L_PHAE_MAX, SMB.PHAE_MAX, 
                            SMB.SOL_RAD_MAX, SMB.AIR_TEMP_MAX, SMB.WIND_SP_MAX, SMB.SD_MAX, SMB.NH3_MAX, SMB.TIN_MAX, 
                            SMB.TN_MAX, SMB.NH4_NM_MAX, SMB.NO2_NM_MAX, SMB.NO3_NM_MAX, SMB.TKN_NM_MAX, 
                            SMB.NOX_NM_MAX, SMB.TIN_NM_MAX, SMB.TN_NM_MAX, SMB.PO4_PM_MAX, SMB.TP_PM_MAX, 
                            SMB.TIN_PO4_MMR_MAX, SMB.TN_TP_MMR_MAX, ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YR, D_CODE, COUNT(*) AS TOTAL, MAX(TEMPER) AS TEMPER_MAX, 
                                                        MAX(PH_SC) AS PH_SC_MAX, MAX(SAL) AS SAL_MAX, MAX(COND) AS COND_MAX, MAX(DO) 
                                                        AS DO_MAX, MAX(DO_SAT) AS DO_SAT_MAX, MAX(FLSCUFA) AS FLSCUFA_MAX, MAX(TURB_SC) 
                                                        AS TURB_SC_MAX, MAX(PAR) AS PAR_MAX, MAX(BOD5) AS BOD5_MAX, 
                                                        EXP(MAX(LOG (CASE FC WHEN 0 THEN NULL ELSE FC END))) AS FC_MAX, 
                                                        EXP(MAX(LOG (CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))) AS ECOLI_MAX, MAX(PH_M) 
                                                        AS PH_M_MAX, MAX(TURB_M) AS TURB_M_MAX, MAX(NH4) AS NH4_MAX, MAX(NO2) AS NO2_MAX, 
                                                        MAX(NO3) AS NO3_MAX, MAX(TKN_S) AS TKN_S_MAX, MAX(TKN_P) AS TKN_P_MAX, MAX(TKN_SP) 
                                                        AS TKN_SP_MAX, MAX(PO4) AS PO4_MAX, MAX(TP_S) AS TP_S_MAX, MAX(TP_P) AS TP_P_MAX, 
                                                        MAX(TP_SP) AS TP_SP_MAX, MAX(SIO2) AS SIO2_MAX, MAX(SS) AS SS_MAX, MAX(TVS) AS TVS_MAX, 
                                                        MAX(CHL) AS CHL_MAX, MAX(PHAE) AS PHAE_MAX, MAX(SOL_RAD) AS SOL_RAD_MAX, MAX(AIR_TEMP) 
                                                        AS AIR_TEMP_MAX, MAX(WIND_SP) AS WIND_SP_MAX, MAX(SD) AS SD_MAX, MAX(NH3) AS NH3_MAX, 
                                                        MAX(TIN) AS TIN_MAX, MAX(TN) AS TN_MAX, MAX(NH4_NM) AS NH4_NM_MAX, MAX(NO2_NM) 
                                                        AS NO2_NM_MAX, MAX(NO3_NM) AS NO3_NM_MAX, MAX(TKN_NM) AS TKN_NM_MAX, MAX(NOX_NM) 
                                                        AS NOX_NM_MAX, MAX(TIN_NM) AS TIN_NM_MAX, MAX(TN_NM) AS TN_NM_MAX, MAX(PO4_PM) 
                                                        AS PO4_PM_MAX, MAX(TP_PM) AS TP_PM_MAX, MAX(TIN_PO4_MMR) AS TIN_PO4_MMR_MAX, 
                                                        MAX(TN_TP_MMR) AS TN_TP_MMR_MAX, COUNT(L_BOD5) AS L_BOD5_CNT, COUNT(L_FC) 
                                                        AS L_FC_CNT, COUNT(L_ECOLI) AS L_ECOLI_CNT, COUNT(L_PH_M) AS L_PH_M_CNT, 
                                                        COUNT(L_TURB_M) AS L_TURB_M_CNT, COUNT(L_NH4) AS L_NH4_CNT, COUNT(L_NO2) 
                                                        AS L_NO2_CNT, COUNT(L_NO3) AS L_NO3_CNT, COUNT(L_TKN_S) AS L_TKN_S_CNT, COUNT(L_TKN_P) 
                                                        AS L_TKN_P_CNT, COUNT(L_TKN_SP) AS L_TKN_SP_CNT, COUNT(L_PO4) AS L_PO4_CNT, 
                                                        COUNT(L_TP_S) AS L_TP_S_CNT, COUNT(L_TP_P) AS L_TP_P_CNT, COUNT(L_TP_SP) 
                                                        AS L_TP_SP_CNT, COUNT(L_SIO2) AS L_SIO2_CNT, COUNT(L_SS) AS L_SS_CNT, COUNT(L_TVS) 
                                                        AS L_TVS_CNT, COUNT(L_CHL) AS L_CHL_CNT, COUNT(L_PHAE) AS L_PHAE_CNT
                            FROM               (SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, 
                                                                                     TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM               WPG.MT_S
                                                         UNION ALL
                                                         SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, 
                                                                                     TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM              WPG.MT_M
                                                         UNION ALL
                                                         SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, 
                                                                                     TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM              WPG.MT_B) AS SMB_1
                            GROUP BY    SITE_ID, YEAR(MDATE), D_CODE) AS SMB INNER JOIN
                            WPG.MSTATION AS ST ON SMB.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SHELTER_SMB_MIN1A source

CREATE VIEW [WPG].[MARINE_SHELTER_SMB_MIN1A]
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.MT_NAME AS STATION, SMB.YR,
                             SMB.D_CODE, SMB.TOTAL, SMB.TEMPER_MIN, SMB.PH_SC_MIN, SMB.SAL_MIN, SMB.COND_MIN, SMB.DO_MIN, 
                            SMB.DO_SAT_MIN, SMB.FLSCUFA_MIN, SMB.TURB_SC_MIN, SMB.PAR_MIN, 
                            CASE WHEN L_BOD5_CNT = 0 THEN NULL ELSE '<' END AS L_BOD5_MIN, SMB.BOD5_MIN, 
                            CASE WHEN L_FC_CNT = 0 THEN NULL ELSE '<' END AS L_FC_MIN, SMB.FC_MIN, 
                            CASE WHEN L_ECOLI_CNT = 0 THEN NULL ELSE '<' END AS L_ECOLI_MIN, SMB.ECOLI_MIN, 
                            CASE WHEN L_PH_M_CNT = 0 THEN NULL ELSE '<' END AS L_PH_M_MIN, SMB.PH_M_MIN, 
                            CASE WHEN L_TURB_M_CNT = 0 THEN NULL ELSE '<' END AS L_TURB_M_MIN, SMB.TURB_M_MIN, 
                            CASE WHEN L_NH4_CNT = 0 THEN NULL ELSE '<' END AS L_NH4_MIN, SMB.NH4_MIN, 
                            CASE WHEN L_NO2_CNT = 0 THEN NULL ELSE '<' END AS L_NO2_MIN, SMB.NO2_MIN, 
                            CASE WHEN L_NO3_CNT = 0 THEN NULL ELSE '<' END AS L_NO3_MIN, SMB.NO3_MIN, 
                            CASE WHEN L_TKN_S_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_S_MIN, SMB.TKN_S_MIN, 
                            CASE WHEN L_TKN_P_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_P_MIN, SMB.TKN_P_MIN, 
                            CASE WHEN L_TKN_SP_CNT = 0 THEN NULL ELSE '<' END AS L_TKN_SP_MIN, SMB.TKN_SP_MIN, 
                            CASE WHEN L_PO4_CNT = 0 THEN NULL ELSE '<' END AS L_PO4_MIN, SMB.PO4_MIN, 
                            CASE WHEN L_TP_S_CNT = 0 THEN NULL ELSE '<' END AS L_TP_S_MIN, SMB.TP_S_MIN, 
                            CASE WHEN L_TP_P_CNT = 0 THEN NULL ELSE '<' END AS L_TP_P_MIN, SMB.TP_P_MIN, 
                            CASE WHEN L_TP_SP_CNT = 0 THEN NULL ELSE '<' END AS L_TP_SP_MIN, SMB.TP_SP_MIN, 
                            CASE WHEN L_SIO2_CNT = 0 THEN NULL ELSE '<' END AS L_SIO2_MIN, SMB.SIO2_MIN, 
                            CASE WHEN L_SS_CNT = 0 THEN NULL ELSE '<' END AS L_SS_MIN, SMB.SS_MIN, 
                            CASE WHEN L_TVS_CNT = 0 THEN NULL ELSE '<' END AS L_TVS_MIN, SMB.TVS_MIN, 
                            CASE WHEN L_CHL_CNT = 0 THEN NULL ELSE '<' END AS L_CHL_MIN, SMB.CHL_MIN, 
                            CASE WHEN L_PHAE_CNT = 0 THEN NULL ELSE '<' END AS L_PHAE_MIN, SMB.PHAE_MIN, SMB.SOL_RAD_MIN, 
                            SMB.AIR_TEMP_MIN, SMB.WIND_SP_MIN, SMB.SD_MIN, SMB.NH3_MIN, SMB.TIN_MIN, SMB.TN_MIN, 
                            SMB.NH4_NM_MIN, SMB.NO2_NM_MIN, SMB.NO3_NM_MIN, SMB.TKN_NM_MIN, SMB.NOX_NM_MIN, 
                            SMB.TIN_NM_MIN, SMB.TN_NM_MIN, SMB.PO4_PM_MIN, SMB.TP_PM_MIN, SMB.TIN_PO4_MMR_MIN, 
                            SMB.TN_TP_MMR_MIN, ST.CMMVIEW AS VIEW_NO
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YR, D_CODE, COUNT(*) AS TOTAL, MIN(TEMPER) AS TEMPER_MIN, 
                                                        MIN(PH_SC) AS PH_SC_MIN, MIN(SAL) AS SAL_MIN, MIN(COND) AS COND_MIN, MIN(DO) AS DO_MIN, 
                                                        MIN(DO_SAT) AS DO_SAT_MIN, MIN(FLSCUFA) AS FLSCUFA_MIN, MIN(TURB_SC) AS TURB_SC_MIN, 
                                                        MIN(PAR) AS PAR_MIN, MIN(BOD5) AS BOD5_MIN, EXP(MIN(LOG (CASE FC WHEN 0 THEN NULL 
                                                        ELSE FC END))) AS FC_MIN, EXP(MIN(LOG (CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))) 
                                                        AS ECOLI_MIN, MIN(PH_M) AS PH_M_MIN, MIN(TURB_M) AS TURB_M_MIN, MIN(NH4) AS NH4_MIN, 
                                                        MIN(NO2) AS NO2_MIN, MIN(NO3) AS NO3_MIN, MIN(TKN_S) AS TKN_S_MIN, MIN(TKN_P) 
                                                        AS TKN_P_MIN, MIN(TKN_SP) AS TKN_SP_MIN, MIN(PO4) AS PO4_MIN, MIN(TP_S) AS TP_S_MIN, 
                                                        MIN(TP_P) AS TP_P_MIN, MIN(TP_SP) AS TP_SP_MIN, MIN(SIO2) AS SIO2_MIN, MIN(SS) AS SS_MIN, 
                                                        MIN(TVS) AS TVS_MIN, MIN(CHL) AS CHL_MIN, MIN(PHAE) AS PHAE_MIN, MIN(SOL_RAD) 
                                                        AS SOL_RAD_MIN, MIN(AIR_TEMP) AS AIR_TEMP_MIN, MIN(WIND_SP) AS WIND_SP_MIN, MIN(SD) 
                                                        AS SD_MIN, MIN(NH3) AS NH3_MIN, MIN(TIN) AS TIN_MIN, MIN(TN) AS TN_MIN, MIN(NH4_NM) 
                                                        AS NH4_NM_MIN, MIN(NO2_NM) AS NO2_NM_MIN, MIN(NO3_NM) AS NO3_NM_MIN, MIN(TKN_NM) 
                                                        AS TKN_NM_MIN, MIN(NOX_NM) AS NOX_NM_MIN, MIN(TIN_NM) AS TIN_NM_MIN, MIN(TN_NM) 
                                                        AS TN_NM_MIN, MIN(PO4_PM) AS PO4_PM_MIN, MIN(TP_PM) AS TP_PM_MIN, MIN(TIN_PO4_MMR) 
                                                        AS TIN_PO4_MMR_MIN, MIN(TN_TP_MMR) AS TN_TP_MMR_MIN, COUNT(L_BOD5) AS L_BOD5_CNT, 
                                                        COUNT(L_FC) AS L_FC_CNT, COUNT(L_ECOLI) AS L_ECOLI_CNT, COUNT(L_PH_M) AS L_PH_M_CNT, 
                                                        COUNT(L_TURB_M) AS L_TURB_M_CNT, COUNT(L_NH4) AS L_NH4_CNT, COUNT(L_NO2) 
                                                        AS L_NO2_CNT, COUNT(L_NO3) AS L_NO3_CNT, COUNT(L_TKN_S) AS L_TKN_S_CNT, COUNT(L_TKN_P) 
                                                        AS L_TKN_P_CNT, COUNT(L_TKN_SP) AS L_TKN_SP_CNT, COUNT(L_PO4) AS L_PO4_CNT, 
                                                        COUNT(L_TP_S) AS L_TP_S_CNT, COUNT(L_TP_P) AS L_TP_P_CNT, COUNT(L_TP_SP) 
                                                        AS L_TP_SP_CNT, COUNT(L_SIO2) AS L_SIO2_CNT, COUNT(L_SS) AS L_SS_CNT, COUNT(L_TVS) 
                                                        AS L_TVS_CNT, COUNT(L_CHL) AS L_CHL_CNT, COUNT(L_PHAE) AS L_PHAE_CNT
                            FROM               (SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, 
                                                                                     TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM               WPG.MT_S
                                                         UNION ALL
                                                         SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, 
                                                                                     TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM              WPG.MT_M
                                                         UNION ALL
                                                         SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, 
                                                                                     TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, 
                                                                                     L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, L_NH4,
                                                                                      NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, 
                                                                                     L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                                                                                     L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, 
                                                                                     SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, 
                                                                                     NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                                                                                     TN_TP_MMR
                                                         FROM              WPG.MT_B) AS SMB_1
                            GROUP BY    SITE_ID, YEAR(MDATE), D_CODE) AS SMB INNER JOIN
                            WPG.MSTATION AS ST ON SMB.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SHELTER_SUMMARY1 source

CREATE VIEW [WPG].[MARINE_SHELTER_SUMMARY1]
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, AV.STATION, AV.YR, AV.D_CODE, 
                            AV.TOTAL, AV.TEMPER_AVG, AV.PH_SC_AVG, AV.SAL_AVG, AV.COND_AVG, AV.DO_AVG, AV.DO_SAT_AVG, 
                            AV.FLSCUFA_AVG, AV.TURB_SC_AVG, AV.PAR_AVG, AV.L_BOD5_AVG, AV.BOD5_AVG, AV.L_FC_AVG, AV.FC_AVG, 
                            AV.L_ECOLI_AVG, AV.ECOLI_AVG, AV.L_PH_M_AVG, AV.PH_M_AVG, AV.L_TURB_M_AVG, AV.TURB_M_AVG, 
                            AV.L_NH4_AVG, AV.NH4_AVG, AV.L_NO2_AVG, AV.NO2_AVG, AV.L_NO3_AVG, AV.NO3_AVG, AV.L_TKN_S_AVG, 
                            AV.TKN_S_AVG, AV.L_TKN_P_AVG, AV.TKN_P_AVG, AV.L_TKN_SP_AVG, AV.TKN_SP_AVG, AV.L_PO4_AVG, 
                            AV.PO4_AVG, AV.L_TP_S_AVG, AV.TP_S_AVG, AV.L_TP_P_AVG, AV.TP_P_AVG, AV.L_TP_SP_AVG, AV.TP_SP_AVG, 
                            AV.L_SIO2_AVG, AV.SIO2_AVG, AV.L_SS_AVG, AV.SS_AVG, AV.L_TVS_AVG, AV.TVS_AVG, AV.L_CHL_AVG, AV.CHL_AVG, 
                            AV.L_PHAE_AVG, AV.PHAE_AVG, AV.SOL_RAD_AVG, AV.AIR_TEMP_AVG, AV.WIND_SP_AVG, AV.SD_AVG, AV.NH3_AVG, 
                            AV.TIN_AVG, AV.TN_AVG, AV.NH4_NM_AVG, AV.NO2_NM_AVG, AV.NO3_NM_AVG, AV.TKN_NM_AVG, AV.NOX_NM_AVG, 
                            AV.TIN_NM_AVG, AV.TN_NM_AVG, AV.PO4_PM_AVG, AV.TP_PM_AVG, AV.TIN_PO4_MMR_AVG, AV.TN_TP_MMR_AVG, 
                            MI.TEMPER_MIN, MI.PH_SC_MIN, MI.SAL_MIN, MI.COND_MIN, MI.DO_MIN, MI.DO_SAT_MIN, MI.FLSCUFA_MIN, 
                            MI.TURB_SC_MIN, MI.PAR_MIN, MI.L_BOD5_MIN, MI.BOD5_MIN, MI.L_FC_MIN, MI.FC_MIN, MI.L_ECOLI_MIN, 
                            MI.ECOLI_MIN, MI.L_PH_M_MIN, MI.PH_M_MIN, MI.L_TURB_M_MIN, MI.TURB_M_MIN, MI.L_NH4_MIN, 
                            MI.NH4_MIN, MI.L_NO2_MIN, MI.NO2_MIN, MI.L_NO3_MIN, MI.NO3_MIN, MI.L_TKN_S_MIN, MI.TKN_S_MIN, 
                            MI.L_TKN_P_MIN, MI.TKN_P_MIN, MI.L_TKN_SP_MIN, MI.TKN_SP_MIN, MI.L_PO4_MIN, MI.PO4_MIN, 
                            MI.L_TP_S_MIN, MI.TP_S_MIN, MI.L_TP_P_MIN, MI.TP_P_MIN, MI.L_TP_SP_MIN, MI.TP_SP_MIN, MI.L_SIO2_MIN, 
                            MI.SIO2_MIN, MI.L_SS_MIN, MI.SS_MIN, MI.L_TVS_MIN, MI.TVS_MIN, MI.L_CHL_MIN, MI.CHL_MIN, MI.L_PHAE_MIN,
                             MI.PHAE_MIN, MI.SOL_RAD_MIN, MI.AIR_TEMP_MIN, MI.WIND_SP_MIN, MI.SD_MIN, MI.NH3_MIN, MI.TIN_MIN, 
                            MI.TN_MIN, MI.NH4_NM_MIN, MI.NO2_NM_MIN, MI.NO3_NM_MIN, MI.TKN_NM_MIN, MI.NOX_NM_MIN, 
                            MI.TIN_NM_MIN, MI.TN_NM_MIN, MI.PO4_PM_MIN, MI.TP_PM_MIN, MI.TIN_PO4_MMR_MIN, MI.TN_TP_MMR_MIN, 
                            MX.TEMPER_MAX, MX.PH_SC_MAX, MX.SAL_MAX, MX.COND_MAX, MX.DO_MAX, MX.DO_SAT_MAX, 
                            MX.FLSCUFA_MAX, MX.TURB_SC_MAX, MX.PAR_MAX, MX.L_BOD5_MAX, MX.BOD5_MAX, MX.L_FC_MAX, 
                            MX.FC_MAX, MX.L_ECOLI_MAX, MX.ECOLI_MAX, MX.L_PH_M_MAX, MX.PH_M_MAX, MX.L_TURB_M_MAX, 
                            MX.TURB_M_MAX, MX.L_NH4_MAX, MX.NH4_MAX, MX.L_NO2_MAX, MX.NO2_MAX, MX.L_NO3_MAX, MX.NO3_MAX, 
                            MX.L_TKN_S_MAX, MX.TKN_S_MAX, MX.L_TKN_P_MAX, MX.TKN_P_MAX, MX.L_TKN_SP_MAX, MX.TKN_SP_MAX, 
                            MX.L_PO4_MAX, MX.PO4_MAX, MX.L_TP_S_MAX, MX.TP_S_MAX, MX.L_TP_P_MAX, MX.TP_P_MAX, 
                            MX.L_TP_SP_MAX, MX.TP_SP_MAX, MX.L_SIO2_MAX, MX.SIO2_MAX, MX.L_SS_MAX, MX.SS_MAX, MX.L_TVS_MAX, 
                            MX.TVS_MAX, MX.L_CHL_MAX, MX.CHL_MAX, MX.L_PHAE_MAX, MX.PHAE_MAX, MX.SOL_RAD_MAX, 
                            MX.AIR_TEMP_MAX, MX.WIND_SP_MAX, MX.SD_MAX, MX.NH3_MAX, MX.TIN_MAX, MX.TN_MAX, MX.NH4_NM_MAX,
                             MX.NO2_NM_MAX, MX.NO3_NM_MAX, MX.TKN_NM_MAX, MX.NOX_NM_MAX, MX.TIN_NM_MAX, MX.TN_NM_MAX, 
                            MX.PO4_PM_MAX, MX.TP_PM_MAX, MX.TIN_PO4_MMR_MAX, MX.TN_TP_MMR_MAX, 
                            ST.CMMVIEW AS VIEW_NO
FROM          WPG.MARINE_SHELTER_AVG1A AS AV LEFT OUTER JOIN
                            WPG.MARINE_SHELTER_MIN1A AS MI ON AV.STATION = MI.STATION AND AV.YR = MI.YR AND 
                            AV.D_CODE = MI.D_CODE LEFT OUTER JOIN
                            WPG.MARINE_SHELTER_MAX1A AS MX ON AV.STATION = MX.STATION AND AV.YR = MX.YR AND 
                            AV.D_CODE = MX.D_CODE INNER JOIN
                            WPG.MSTATION AS ST ON AV.STATION = ST.MT_NAME INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SHELTER_VISIT1 source

CREATE VIEW [WPG].[MARINE_SHELTER_VISIT1]
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.MT_NAME AS STATION, 
                            VI.MDATE, VI.STIME, VI.SAMPLE_NO AS SAM_NO
FROM              WPG.MT_VISIT AS VI INNER JOIN
                            WPG.MSTATION AS ST ON VI.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SHELTER_WQO_RAW1 source

CREATE VIEW [WPG].[MARINE_SHELTER_WQO_RAW1]
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.MT_NAME AS STATION, 
                            V.MDATE, V.STIME, V.SAMPLE_NO, S.DOS, M.DOM, B.DOB, C.DOC, A.DOA, N.TIN, U.NH3, E.ECOLI, OB.MIN_DOS, 
                            OB.MIN_DOS_PC, OB.MIN_DOM, OB.MIN_DOM_PC, OB.MIN_DOB, OB.MIN_DOB_PC, OB.MIN_DOC, 
                            OB.MIN_DOC_PC, OB.MIN_DOA, OB.MIN_DOA_PC, OB.MAX_TIN_AAM, OB.MAX_NH3_AAM, OB.MAX_ECOLI_AGM, 
                            CASE SIGN(S.DOS - MIN_DOS) WHEN 1 THEN 'YES' WHEN 0 THEN 'YES' WHEN - 1 THEN 'NO' ELSE NULL 
                            END AS MEET_DOS, CASE SIGN(M.DOM - MIN_DOM) 
                            WHEN 1 THEN 'YES' WHEN 0 THEN 'YES' WHEN - 1 THEN 'NO' ELSE NULL END AS MEET_DOM, 
                            CASE SIGN(B.DOB - MIN_DOB) WHEN 1 THEN 'YES' WHEN 0 THEN 'YES' WHEN - 1 THEN 'NO' ELSE NULL 
                            END AS MEET_DOB, CASE SIGN(C.DOC - MIN_DOC) 
                            WHEN 1 THEN 'YES' WHEN 0 THEN 'YES' WHEN - 1 THEN 'NO' ELSE NULL END AS MEET_DOC, 
                            CASE SIGN(A.DOA - MIN_DOA) WHEN 1 THEN 'YES' WHEN 0 THEN 'YES' WHEN - 1 THEN 'NO' ELSE NULL 
                            END AS MEET_DOA
FROM              WPG.MT_VISIT AS V LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DO AS DOS
                                  FROM               WPG.MT_SEACAT
                                  WHERE           (DEPTH_CODE = 'S')) AS S ON V.MWVISIT_ID = S.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DO AS DOM
                                  FROM               WPG.MT_SEACAT AS MT_SEACAT_4
                                  WHERE           (DEPTH_CODE = 'M')) AS M ON V.MWVISIT_ID = M.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DO AS DOB
                                  FROM               WPG.MT_SEACAT AS MT_SEACAT_3
                                  WHERE           (DEPTH_CODE = 'B')) AS B ON V.MWVISIT_ID = B.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, AVG(DO) AS DOC
                                  FROM               WPG.MT_SEACAT AS MT_SEACAT_2
                                  WHERE           (DEPTH_CODE IN ('S', 'M'))
                                  GROUP BY    MWVISIT_ID) AS C ON V.MWVISIT_ID = C.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, AVG(DO) AS DOA
                                  FROM               WPG.MT_SEACAT AS MT_SEACAT_1
                                  WHERE           (DEPTH_CODE IN ('S', 'M', 'B'))
                                  GROUP BY    MWVISIT_ID) AS A ON V.MWVISIT_ID = A.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, AVG(TIN) AS TIN
                                  FROM               WPG.MT_GLABN_CAL
                                  WHERE           (DEPTH_CODE IN ('S', 'M', 'B'))
                                  GROUP BY    MWVISIT_ID) AS N ON V.MWVISIT_ID = N.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, AVG(NH3) AS NH3
                                  FROM               WPG.MT_NH3
                                  WHERE           (DEPTH_CODE IN ('S', 'M', 'B'))
                                  GROUP BY    MWVISIT_ID) AS U ON V.MWVISIT_ID = U.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, EXP(AVG(LOG (CASE ECOLI WHEN 0 THEN 1 ELSE ECOLI END))) AS ECOLI
                                  FROM               WPG.MT_MLAB
                                  WHERE           (DEPTH_CODE IN ('S', 'M', 'B'))
                                  GROUP BY    MWVISIT_ID) AS E ON V.MWVISIT_ID = E.MWVISIT_ID INNER JOIN
                            WPG.MSTATION AS ST ON V.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.MT_SZ_WQO AS OB ON ST.SZ_ID = OB.SZ_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_SHELTER_WQO_SUM1 source

CREATE VIEW [WPG].[MARINE_SHELTER_WQO_SUM1] AS
SELECT	ZONE, 
	WCZ, 
	SUBZONE, 
	STATION,
	YR,
	TOTAL,
	N_DOS,
	M_DOS,
	PC_DOS,
	MIN_DOS,
	MIN_DOS_PC,
	COMPLY_DOS,
	N_DOM,
	M_DOM,
	PC_DOM,
	MIN_DOM,
	MIN_DOM_PC,
	COMPLY_DOM,
	N_DOB,
	M_DOB,
	PC_DOB,
	MIN_DOB,
	MIN_DOB_PC,
	COMPLY_DOB,
	N_DOC,
	M_DOC,
	PC_DOC,
	MIN_DOC,
	MIN_DOC_PC,
	COMPLY_DOC,
	N_DOA,
	M_DOA,
	PC_DOA,
	MIN_DOA
	MIN_DOA_PC,
	COMPLY_DOA,
	CASE 	WHEN COMPLY_DOS = 'FALSE'  
			OR COMPLY_DOM = 'FALSE' 
			OR COMPLY_DOB = 'FALSE' 
			OR COMPLY_DOC = 'FALSE' 
			OR COMPLY_DOA = 'FALSE' THEN 'FALSE' 
		 WHEN COMPLY_DOS = 'TRUE'  
			OR COMPLY_DOM = 'TRUE' 
			OR COMPLY_DOB = 'TRUE' 
			OR COMPLY_DOC = 'TRUE' 
			OR COMPLY_DOA = 'TRUE' THEN 'TRUE' 
	ELSE NULL END	COMPLY_DO,
	TIN,
	MAX_TIN_AAM,
	CASE SIGN(MAX_TIN_AAM - TIN) WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END	COMPLY_TIN,
	NH3,
	MAX_NH3_AAM,
	CASE SIGN(MAX_NH3_AAM - NH3) WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END	COMPLY_NH3,
	ECOLI,
	MAX_ECOLI_AGM,
	CASE SIGN(MAX_ECOLI_AGM - ECOLI) WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END	COMPLY_ECOLI
FROM	(
	SELECT	ZONE, 
		WCZ, 
		SUBZONE, 
		STATION,
		YR,
		TOTAL,
		N_DOS,
		CASE WHEN MIN_DOS IS NULL THEN NULL ELSE M_DOS END		M_DOS,
		CASE WHEN N_DOS <> 0 AND MIN_DOS IS NOT NULL THEN 100 * M_DOS / N_DOS ELSE NULL END	PC_DOS,
		CASE WHEN N_DOS <> 0 THEN 
			CASE SIGN(100 * M_DOS / N_DOS - MIN_DOS_PC) 
				WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END
			ELSE NULL END						COMPLY_DOS,
		N_DOM,
		CASE WHEN MIN_DOM IS NULL THEN NULL ELSE M_DOM END		M_DOM,
		CASE WHEN N_DOM <> 0 AND MIN_DOM IS NOT NULL THEN 100 * M_DOM / N_DOM ELSE NULL END	PC_DOM,
		CASE WHEN N_DOM <> 0 THEN 
			CASE SIGN(100 * M_DOM / N_DOM - MIN_DOM_PC) 
				WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END
			ELSE NULL END						COMPLY_DOM,
		N_DOB,
		CASE WHEN MIN_DOB IS NULL THEN NULL ELSE M_DOB END		M_DOB,
		CASE WHEN N_DOB <> 0 AND MIN_DOB IS NOT NULL THEN 100 * M_DOB / N_DOB ELSE NULL END	PC_DOB,
		CASE WHEN N_DOB <> 0 THEN 
			CASE SIGN(100 * M_DOB / N_DOB - MIN_DOB_PC) 
				WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END
			ELSE NULL END						COMPLY_DOB,
		N_DOC,
		CASE WHEN MIN_DOC IS NULL THEN NULL ELSE M_DOC END		M_DOC,
		CASE WHEN N_DOC <> 0 AND MIN_DOC IS NOT NULL THEN 100 * M_DOC / N_DOC ELSE NULL END	PC_DOC,
		CASE WHEN N_DOC <> 0 THEN 
			CASE SIGN(100 * M_DOC / N_DOC - MIN_DOC_PC) 
				WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END
			ELSE NULL END						COMPLY_DOC,
		N_DOA,
		CASE WHEN MIN_DOS IS NULL THEN NULL ELSE M_DOA END		M_DOA,
		CASE WHEN N_DOA <> 0 AND MIN_DOA IS NOT NULL THEN 100 * M_DOA / N_DOA ELSE NULL END	PC_DOA,
		CASE WHEN N_DOA <> 0 THEN 
			CASE SIGN(100 * M_DOA / N_DOA - MIN_DOA_PC) 
				WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END
			ELSE NULL END						COMPLY_DOA,
		TIN,
		NH3,
		ECOLI,
		MIN_DOS,
		MIN_DOS_PC,
		MIN_DOM,
		MIN_DOM_PC,
		MIN_DOB,
		MIN_DOB_PC,
		MIN_DOC,
		MIN_DOC_PC,
		MIN_DOA,
		MIN_DOA_PC,
		MAX_TIN_AAM,
		MAX_NH3_AAM,
		MAX_ECOLI_AGM	
	FROM	(
		SELECT	MAX(ZONE)	ZONE, 
			MAX(WCZ)	WCZ, 
			MAX(SUBZONE)	SUBZONE, 
			STATION,
			YEAR(MDATE)		YR,
			COUNT(*)		TOTAL,
			COUNT(DOS)		N_DOS,
			COUNT(CASE MEET_DOS WHEN 'YES' THEN 1 ELSE NULL END)	M_DOS,
			COUNT(DOM)		N_DOM,
			COUNT(CASE MEET_DOM WHEN 'YES' THEN 1 ELSE NULL END)	M_DOM,
			COUNT(DOB)		N_DOB,
			COUNT(CASE MEET_DOB WHEN 'YES' THEN 1 ELSE NULL END)	M_DOB,
			COUNT(DOC)		N_DOC,
			COUNT(CASE MEET_DOC WHEN 'YES' THEN 1 ELSE NULL END)	M_DOC,
			COUNT(DOA)		N_DOA,
			COUNT(CASE MEET_DOA WHEN 'YES' THEN 1 ELSE NULL END)	M_DOA,
			AVG(TIN)			TIN,
			AVG(NH3)		NH3,
			EXP(AVG(LOG10(CASE ECOLI WHEN 0 THEN 1 ELSE ECOLI END)))	ECOLI,
			MIN_DOS,
			MIN_DOS_PC,
			MIN_DOM,
			MIN_DOM_PC,
			MIN_DOB,
			MIN_DOB_PC,
			MIN_DOC,
			MIN_DOC_PC,
			MIN_DOA,
			MIN_DOA_PC,
			MAX_TIN_AAM,
			MAX_NH3_AAM,
			MAX_ECOLI_AGM
		FROM	WPG.MARINE_SHELTER_WQO_RAW1
		GROUP BY 	ZONE, WCZ, SUBZONE, STATION, YEAR(MDATE), MIN_DOS, MIN_DOS_PC, 
				MIN_DOM, MIN_DOM_PC, MIN_DOB, MIN_DOB_PC, MIN_DOC, MIN_DOC_PC, 
				MIN_DOA, MIN_DOA_PC, MAX_TIN_AAM, MAX_NH3_AAM, MAX_ECOLI_AGM
		)	A
	)	B;


-- WPG.MARINE_WATER1 source

CREATE VIEW WPG.MARINE_WATER1
AS
SELECT        ZONE, WCZ, SUBZONE, STATION, MDATE, STIME, SAM_NO, D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, 
                         L_TURB_M, TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, 
                         L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, TIN, TN, NH3, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, 
                         TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR, VIEW_NO
FROM            WPG.MARINE_WATER_SMB1
UNION ALL
SELECT        ZONE, WCZ, SUBZONE, STATION, MDATE, STIME, SAM_NO, 'A' D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, NULL L_BOD5, BOD5, NULL L_FC, FC, NULL L_ECOLI, 
                         ECOLI, NULL L_PH_M, PH_M, NULL L_TURB_M, TURB_M, NULL L_NH4, NH4, NULL L_NO2, NO2, NULL L_NO3, NO3, NULL L_TKN_S, TKN_S, NULL L_TKN_P, TKN_P, NULL L_TKN_SP, TKN_SP, NULL L_PO4, 
                         PO4, NULL L_TP_S, TP_S, NULL L_TP_P, TP_P, NULL L_TP_SP, TP_SP, NULL L_SIO2, SIO2, NULL L_SS, SS, NULL L_TVS, TVS, NULL L_CHL, CHL, NULL L_PHAE, PHAE, TIN, TN, NH3, SOL_RAD, AIR_TEMP, 
                         WIND_SP, WIND_DIR, SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR, VIEW_NO
FROM            WPG.MARINE_WATER_A1;


-- WPG.MARINE_WATER1_APP_I source

CREATE VIEW WPG.MARINE_WATER1_APP_I AS 
SELECT 
	ZONE,
	
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	D_CODE,
	DO,
	
	TIN,
	
	NH3,
	L_ECOLI, 	ECOLI 
	

FROM	WPG.MARINE_WATER_SMB1
UNION ALL
SELECT 
	ZONE,
	
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	'A'	D_CODE,
	
	
	DO,
	
	
	TIN,
	
	NH3,
NULL, 	ECOLI 

FROM	WPG.MARINE_WATER_A1
UNION ALL
SELECT 
	ZONE,
	
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	'DO_SM' D_CODE ,
	avg(DO) as DO ,
	NULL,
 	NULL,
	
	NULL,	NUll
	

FROM	WPG.MARINE_WATER_SMB1 where D_CODE in('S','M')
group by
ZONE,
	
	STATION,
	MDATE,
	STIME,SAM_NO
/*
UNION ALL
SELECT 
	ZONE,
	
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	'ECOLI_GEOMEAN' D_CODE ,
	NULL,
	avg(TIN),
 	avg(NH3),
	
	NULL,	 exp(avg(log(ecoli)))  as ECOLI_GEOMEAN 
FROM	WPG.MARINE_WATER_A1
group by
ZONE,
	
	STATION,
	MDATE,
	STIME,SAM_NO
*/;


-- WPG.MARINE_WATER2 source

CREATE VIEW WPG.MARINE_WATER2 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	D_CODE,
	TEMPER,
	PH_SC,
	SAL,
	COND,
	DO,
	DO_SAT,
	FLSCUFA,		TURB_SC,
    PAR,
	L_BOD5,
	BOD5,
	L_FC,
	FC,
	L_ECOLI,
	ECOLI,
	L_NH4,
	NH4,
	L_NO2,
	NO2,
	L_NO3,
	NO3,
	L_TKN_S,
	TKN_S,
	L_TKN_P,
	TKN_P,
	L_TKN_SP,
	TKN_SP,
	L_PO4,
	PO4,
	L_TP_S,
	TP_S,
	L_TP_P,
	TP_P,
	L_TP_SP,
	TP_SP,
	L_SIO2,
	SIO2,
	L_SS,
	SS,
	L_TVS,
	TVS,
	L_CHL,
	CHL,
	L_PHAE,
	PHAE,
	SOL_RAD,
	AIR_TEMP,
	WIND_SP,
	WIND_DIR,
	SEA_COND,
	SEA_COL,
	FISH_KILL,
	SD,
	WEATHER,
	NH3,
	TIN,
	TN
FROM	WPG.MARINE_WATER1
WHERE	VIEW_NO >= 2
AND 		MDATE <= GETDATE();


-- WPG.MARINE_WATER_3A source

CREATE       view  WPG.MARINE_WATER_3A as
select 	ZONE,
	STATION, 
	cast(MDATE as smalldatetime) MDATE, 
	sam_no SAMPLE_NO,
	D_CODE,
	case when TEMPER < 0.1 then 0.1 else cast(TEMPER as decimal(7,1)) end TEMPER,
	case when SAL < 0.1 then 0.1 else cast(SAL as decimal(7,1)) end SAL,
	case when DO < 0.1 then 0.1 else cast(DO as decimal(7,1)) end DO,
	case when DO_SAT < 1 then 1 else cast(DO_SAT as decimal(5)) end DO_SAT,
	case when TURB_SC < 0.1 then 0.1 else cast(TURB_SC as decimal(7,1)) end TURB_SC,
	case when PH_SC < 0.1 then 0.1 else cast(PH_SC as decimal(7,1)) end PH_SC,
	case when SD < 0.1 then '<' else NULL end L_SD,
	case when SD < 0.1 then 0.1 else cast(SD as decimal(7,1)) end SD,
	case when SS < 0.5 then '<' else l_SS end L_SS,
	case when SS < 0.5 then 0.5 else cast(SS as decimal(7,1)) end SS,
	case when TVS < 0.5 then '<' else l_TVS end L_TVS,
	case when TVS < 0.5 then 0.5 else cast(TVS as decimal(7,1)) end TVS,
	case when bod5 < 0.1 then '<' else l_bod5 end L_BOD5,
	case when bod5 < 0.1 then 0.1 else cast(bod5 as decimal(7,1)) end BOD5,
	case when NH4 < 0.005 then '<' else l_NH4 end L_NH4,
	case when NH4 < 0.005 then 0.005 else cast(NH4 as decimal(12,3)) end NH4,
	case when NH3 < 0.001 then '<' else NULL end L_NH3,
	case when NH3 < 0.001 then 0.001 else cast(NH3 as decimal(12,3)) end NH3,
	case when NO2 < 0.002 then '<' else l_NO2 end L_NO2,
	case when NO2 < 0.002 then 0.002 else cast(NO2 as decimal(12,3)) end NO2,
	case when NO3 < 0.002 then '<' else l_NO3 end L_NO3,
	case when NO3 < 0.002 then 0.002 else cast(NO3 as decimal(12,3)) end NO3,
	case when TIN < 0.01 then '<' else NULL end L_TIN,
	case when TIN < 0.01 then 0.01 else cast(TIN as decimal(9,2)) end TIN,
	case when TKN_SP < 0.05 then '<' else l_TKN_SP end L_TKN_SP,
	case when TKN_SP < 0.05 then 0.05 else cast(TKN_SP as decimal(9,2)) end TKN_SP,
	case when TN < 0.05 then '<' else NULL end L_TN,
	case when TN < 0.05 then 0.05 else cast(TN as decimal(9,2)) end TN,
	case when PO4 < 0.002 then '<' else l_PO4 end L_PO4,
	case when PO4 < 0.002 then 0.002 else cast(PO4 as decimal(12,3)) end PO4,
	case when TP_SP < 0.02 then '<' else l_TP_SP end L_TP_SP,
	case when TP_SP < 0.02 then 0.02 else cast(TP_SP as decimal(9,2)) end TP_SP,
	case when SIO2 < 0.05 then '<' else l_SIO2 end L_SIO2,
	case when SIO2 < 0.05 then 0.05 else cast(SIO2 as decimal(9,2)) end SIO2,
	case when CHL < 0.2 then '<' else l_CHL end L_CHL,
	case when CHL < 0.2 then 0.2 else cast(CHL as decimal(7,1)) end CHL,
	case when PHAE < 0.2 then '<' else l_PHAE end L_PHAE,
	case when PHAE < 0.2 then 0.2 else cast(PHAE as decimal(7,1)) end PHAE,
	case when ecoli <1 then '<' else l_ecoli end L_ECOLI,
	case when ecoli <1 then 1 else cast(round(ecoli/power(10,floor(log10(ecoli))),1)* power(10,floor(log10(ecoli))) as int) end ECOLI,
	case when FC < 1 then '<' else l_FC end L_FC,
	case when FC < 1 then 1 else cast(round(FC/power(10,floor(log10(FC))),1)* power(10,floor(log10(FC))) as int) end FC


-- add other parameters
from 	wpg.marine_water_smb1
where	view_no >=3 
AND MDATE <= GETDATE();


-- WPG.MARINE_WATER_3B source

CREATE        view WPG.MARINE_WATER_3B as
select 	ZONE [Water Control Zone],
	STATION	[Station], 
	Cast(MDATE as smalldatetime)	[Sampling Date], 
	SAMPLE_NO	[Sample Number],
	case D_CODE
		when 'S' then 'Surface Water'
		when 'M' then 'Middle Water'
		when 'B' then 'Bottom Water'end 
		[Water Depth], 
	cast((replace(rtrim(replace(replace(rtrim(replace(cast(TEMPER as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Temperature (°C)],
	cast((replace(rtrim(replace(replace(rtrim(replace(cast(SAL as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Salinity],
	cast((replace(rtrim(replace(replace(rtrim(replace(cast(DO as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Dissolved Oxygen (mg/L)],
	cast((cast(DO_SAT as nvarchar)) as nvarchar(20))	[Dissolved Oxygen (% saturation)],
	cast((replace(rtrim(replace(replace(rtrim(replace(cast(TURB_SC as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Turbidity (NTU)],
	cast((replace(rtrim(replace(replace(rtrim(replace(cast(PH_SC as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[pH],
	cast((isnull(l_SD, '') + replace(rtrim(replace(replace(rtrim(replace(cast(SD as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Secchi Disc Depth (m)],
	cast((isnull(l_SS, '') + replace(rtrim(replace(replace(rtrim(replace(cast(SS as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Suspended Solids (mg/L)],
	cast((isnull(l_TVS, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TVS as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Volatile Suspended Solids (mg/L)],
	cast((isnull(l_bod5, '') + replace(rtrim(replace(replace(rtrim(replace(cast(bod5 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[5-day Biochemical Oxygen Demand (BOD5) (mg/L)],
	cast((isnull(l_NH4, '') + replace(rtrim(replace(replace(rtrim(replace(cast(NH4 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Ammonia Nitrogen (mg/L)],
	cast((isnull(l_NH3, '') + replace(rtrim(replace(replace(rtrim(replace(cast(NH3 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Unionised Ammonia (mg/L)],
	cast((isnull(l_NO2, '') + replace(rtrim(replace(replace(rtrim(replace(cast(NO2 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Nitrite Nitrogen (mg/L)],
	cast((isnull(l_NO3, '') + replace(rtrim(replace(replace(rtrim(replace(cast(NO3 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Nitrate Nitrogen (mg/L)],
	cast((isnull(l_TIN, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TIN as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Total Inorganic Nitrogen (mg/L)],
	cast((isnull(l_TKN_SP, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TKN_SP as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Total Kjeldahl Nitrogen (soluble & particulate) (mg/L)],
	cast((isnull(l_TN, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TN as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Total Nitrogen (mg/L)],
	cast((isnull(l_PO4, '') + replace(rtrim(replace(replace(rtrim(replace(cast(PO4 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Orthophosphate Phosphorus (mg/L)],
	cast((isnull(l_TP_SP, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TP_SP as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Total Phosphorus (soluble & particulate) (mg/L)],
	cast((isnull(l_SIO2, '') + replace(rtrim(replace(replace(rtrim(replace(cast(SIO2 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Silica (as SiO2)(soluble)(mg/L)],
	cast((isnull(l_CHL, '') + replace(rtrim(replace(replace(rtrim(replace(cast(CHL as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Chlorophyll-a (μg/L)],
	cast((isnull(l_PHAE, '') + replace(rtrim(replace(replace(rtrim(replace(cast(PHAE as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Pheo-pigment (μg/L)],
	cast((isnull(l_ecoli, '') + cast(ecoli as nvarchar)) as nvarchar(20))	[Escherichia coli (E. coli) (cfu/100ml)],
	cast((isnull(l_FC, '') + cast(FC as nvarchar)) as nvarchar(20))	[Faecal Coliforms (cfu/100ml)]

from 	WPG.marine_water_3a;


-- WPG.MARINE_WATER_3C source

CREATE         view WPG.MARINE_WATER_3C as
select 	Z.CHINESE_NAME	[水質管制區],
	STATION	[監測站], 
	MDATE	[日期], 
	SAMPLE_NO	[樣本],
	case D_CODE
		when 'S' then cast(N'面層' as nvarchar(10))
		when 'M' then cast(N'中層' as nvarchar(10))
		when 'B' then cast(N'底層' as nvarchar(10)) end 
		[取樣深度], 
	cast((replace(rtrim(replace(replace(rtrim(replace(cast(TEMPER as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[水溫 (度攝氏)],
	cast((replace(rtrim(replace(replace(rtrim(replace(cast(SAL as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[鹽度],
	cast((replace(rtrim(replace(replace(rtrim(replace(cast(DO as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[溶解氧 (毫克/升)],
	cast((cast(DO_SAT as nvarchar)) as nvarchar(20))	[溶解氧飽和百分率 (飽和百分率 (%))],
	cast((replace(rtrim(replace(replace(rtrim(replace(cast(TURB_SC as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[混濁度 (NTU)],
	cast((replace(rtrim(replace(replace(rtrim(replace(cast(PH_SC as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[酸鹼值],
	cast((isnull(l_SD, '') + replace(rtrim(replace(replace(rtrim(replace(cast(SD as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[透明度 (米)],
	cast((isnull(l_SS, '') + replace(rtrim(replace(replace(rtrim(replace(cast(SS as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[懸浮固體 (毫克/升)],
	cast((isnull(l_TVS, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TVS as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[揮發性固體總量 (毫克/升)],
	cast((isnull(l_bod5, '') + replace(rtrim(replace(replace(rtrim(replace(cast(bod5 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[五天生化需氧量 (毫克/升)],
	cast((isnull(l_NH4, '') + replace(rtrim(replace(replace(rtrim(replace(cast(NH4 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[氨氮 (毫克/升)],
	cast((isnull(l_NH3, '') + replace(rtrim(replace(replace(rtrim(replace(cast(NH3 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[非離子氨氮 (毫克/升)],
	cast((isnull(l_NO2, '') + replace(rtrim(replace(replace(rtrim(replace(cast(NO2 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[亞硝酸鹽氮 (毫克/升)],
	cast((isnull(l_NO3, '') + replace(rtrim(replace(replace(rtrim(replace(cast(NO3 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[硝酸鹽氮 (毫克/升)],
	cast((isnull(l_TIN, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TIN as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[無機氮 (毫克/升)],
	cast((isnull(l_TKN_SP, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TKN_SP as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[凱氏氮 (可溶及微粒)(毫克/升)],
	cast((isnull(l_TN, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TN as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[總氮 (毫克/升)],
	cast((isnull(l_PO4, '') + replace(rtrim(replace(replace(rtrim(replace(cast(PO4 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[正磷酸鹽磷 (毫克/升)],
	cast((isnull(l_TP_SP, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TP_SP as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[總磷 (可溶及微粒)(毫克/升)],
	cast((isnull(l_SIO2, '') + replace(rtrim(replace(replace(rtrim(replace(cast(SIO2 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[硅 (二氧化硅)(可溶) (毫克/升)],
	cast((isnull(l_CHL, '') + replace(rtrim(replace(replace(rtrim(replace(cast(CHL as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[葉綠素-a (微克/升)],
	cast((isnull(l_PHAE, '') + replace(rtrim(replace(replace(rtrim(replace(cast(PHAE as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[脫鎂色素 (微克/升)],
	cast((isnull(l_ecoli, '') + cast(ecoli as nvarchar)) as nvarchar(20))	[大腸桿菌 (菌落數/100毫升)],
	cast((isnull(l_FC, '') + cast(FC as nvarchar)) as nvarchar(20))	[糞大腸菌群 (菌落數/100毫升)]

from 	WPG.marine_water_3a, WPG.TEN_ZONE Z
WHERE   ZONE=Z.ZONE_NAME;


-- WPG.MARINE_WATER_A1 source

CREATE VIEW WPG.MARINE_WATER_A1 AS 
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	AA.MDATE,
	AA.STIME,
	AA.SAM_NO,
	AA.TEMPER,
	AA.PH_SC,
	AA.SAL,
	AA.COND,
	AA.DO,
	AA.DO_SAT,
	AA.FLSCUFA,		AA.TURB_SC,
    AA.PAR,
	AA.BOD5,
	AA.FC,
	AA.ECOLI,
	AA.PH_M,
	AA.TURB_M,
	AA.NH4,
	AA.NO2,
	AA.NO3,
	AA.TKN_S,
	AA.TKN_P,
	AA.TKN_SP,
	AA.PO4,
	AA.TP_S,
	AA.TP_P,
	AA.TP_SP,
	AA.SIO2,
	AA.SS,
	AA.TVS,
	AA.CHL,
	AA.PHAE,
	AA.SOL_RAD,
	AA.AIR_TEMP,
	AA.WIND_SP,
	AA.WIND_DIR,
	AA.SEA_COND,
	AA.SEA_COL,
	AA.FISH_KILL,
	AA.SD,
	AA.WEATHER,
	AA.NH3,
	AA.TIN,
	AA.TN,
	AA.NH4_NM,
	AA.NO2_NM,
	AA.NO3_NM,
	AA.TKN_NM,
	AA.NOX_NM,
	AA.TIN_NM,
	AA.TN_NM,
	AA.PO4_PM,
	AA.TP_PM,
	AA.TIN_PO4_MMR,
	AA.TN_TP_MMR,
	ST.CMMVIEW	VIEW_NO
FROM	WPG.MW_A	AA
JOIN	WPG.MSTATION	ST	ON AA.SITE_ID	= ST.SITE_ID
JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID 	= TZ.ZONE_ID;


-- WPG.MARINE_WATER_A1A source

CREATE  VIEW WPG.MARINE_WATER_A1A AS 
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	AA.MDATE,
	AA.STIME,
	AA.SAM_NO,
	AA.D_CODE,		
	AA.TEMPER,
	AA.PH_SC,
	AA.SAL,
	AA.COND,
	AA.DO,
	AA.DO_SAT,
	AA.FLSCUFA,	-- Cyril Leung 20090224 For Chlorophyll Column
	AA.TURB_SC,
	AA.PAR,
	AA.L_BOD5,
	AA.BOD5,
	AA.L_FC,
	AA.FC,
	AA.L_ECOLI,
	AA.ECOLI,
	AA.L_PH_M,
	AA.PH_M,
	AA.L_TURB_M,
	AA.TURB_M,
	AA.L_NH4,
	AA.NH4,
	AA.L_NO2,
	AA.NO2,
	AA.L_NO3,
	AA.NO3,
	AA.L_TKN_S,
	AA.TKN_S,
	AA.L_TKN_P,
	AA.TKN_P,
	AA.L_TKN_SP,
	AA.TKN_SP,
	AA.L_PO4,
	AA.PO4,
	AA.L_TP_S,
	AA.TP_S,
	AA.L_TP_P,
	AA.TP_P,
	AA.L_TP_SP,
	AA.TP_SP,
	AA.L_SIO2,
	AA.SIO2,
	AA.L_SS,
	AA.SS,
	AA.L_TVS,
	AA.TVS,
	AA.L_CHL,
	AA.CHL,
	AA.L_PHAE,
	AA.PHAE,
	AA.SOL_RAD,
	AA.AIR_TEMP,
	AA.WIND_SP,
	AA.WIND_DIR,
	AA.SEA_COND,
	AA.SEA_COL,
	AA.FISH_KILL,
	AA.SD,
	AA.WEATHER,
	AA.NH3,
	AA.TIN,
	AA.TN,
	AA.NH4_NM,
	AA.NO2_NM,
	AA.NO3_NM,
	AA.TKN_NM,
	AA.NOX_NM,
	AA.TIN_NM,
	AA.TN_NM,
	AA.PO4_PM,
	AA.TP_PM,
	AA.TIN_PO4_MMR,
	AA.TN_TP_MMR,
	ST.CMMVIEW		VIEW_NO
FROM	WPG.MW_AA	AA
JOIN	WPG.MSTATION	ST	ON AA.SITE_ID	= ST.SITE_ID
JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID 	= TZ.ZONE_ID;


-- WPG.MARINE_WATER_A2 source

CREATE VIEW WPG.MARINE_WATER_A2 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	TEMPER,
	PH_SC,
	SAL,
	COND,
	DO,
	DO_SAT,
	FLSCUFA,		TURB_SC,
    PAR,
	BOD5,
	FC,
	ECOLI,
	NH4,
	NO2,
	NO3,
	TKN_S,
	TKN_P,
	TKN_SP,
	PO4,
	TP_S,
	TP_P,
	TP_SP,
	SIO2,
	SS,
	TVS,
	CHL,
	PHAE,
	SOL_RAD,
	AIR_TEMP,
	WIND_SP,
	WIND_DIR,
	SEA_COND,
	SEA_COL,
	FISH_KILL,
	SD,
	WEATHER,
	NH3,
	TIN,
	TN
FROM	WPG.MARINE_WATER_A1
WHERE	VIEW_NO >= 2
AND		MDATE <= GETDATE();


-- WPG.MARINE_WATER_ALERT source

CREATE VIEW [WPG].[MARINE_WATER_ALERT] AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.MW_NAME AS STATION, ST.ENVIRONMENT AS ENVIRONMENT, 
				A.MDATE, A.STIME, A.SAM_NO, A.D_CODE, A.PARAMETER, A.MEASURE, LIMIT, DISP_STATS, TOTAL, YR, A.SITE_ID, DISP_SEQ, A.MWVISIT_ID
FROM              WPG.MW_ALERT1 AS A 
INNER JOIN
                            WPG.MSTATION AS ST ON A.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_WATER_ALERT_A source

CREATE VIEW [WPG].[MARINE_WATER_ALERT_A] AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.MW_NAME AS STATION, ST.ENVIRONMENT AS ENVIRONMENT, 
							A.MDATE, A.STIME, A.SAM_NO, A.D_CODE, A.PARAMETER, A.L_MEASURE, A.MEASURE, 
							LIMIT, DISP_STATS, TOTAL, YR, A.SITE_ID, DISP_SEQ, A.MWVISIT_ID,
							A.SAMPLE_MARK, A.LAB_NO, A.DATE_RECEIVED, A.DATE_REPORTED, A.VALID_USER, A.VALID_DATE, A.VALID_CODE
FROM              WPG.MW_ALERT_A1 AS A 
INNER JOIN
                            WPG.MSTATION AS ST ON A.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_WATER_AVG1 source

CREATE VIEW WPG.MARINE_WATER_AVG1 AS 
SELECT * FROM WPG.MARINE_WATER_SMB_AVG1
UNION ALL 
SELECT * FROM WPG.MARINE_WATER_A_AVG1;


-- WPG.MARINE_WATER_AVG1A source

CREATE   VIEW WPG.MARINE_WATER_AVG1A AS 
SELECT * FROM WPG.MARINE_WATER_SMB_AVG1A
UNION ALL 
SELECT * FROM WPG.MARINE_WATER_A_AVG1A;


-- WPG.MARINE_WATER_AVG2 source

CREATE VIEW WPG.MARINE_WATER_AVG2 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	YR,
	D_CODE,
	TOTAL,
	TEMPER,
	PH_SC,
	SAL,
	COND,
	DO,
	DO_SAT,
	FLSCUFA,		TURB_SC,
    PAR,
	BOD5,
	FC,
	ECOLI,
	NH4,
	NO2,
	NO3,
	TKN_S,
	TKN_P,
	TKN_SP,
	PO4,
	TP_S,
	TP_P,
	TP_SP,
	SIO2,
	SS,
	TVS,
	CHL,
	PHAE,
	SOL_RAD,
	AIR_TEMP,
	WIND_SP,
	SD,
	NH3,
	TIN,
	TN
FROM 	WPG.MARINE_WATER_AVG1
WHERE	VIEW_NO >= 2
AND		YR <= YEAR(GETDATE());


-- WPG.MARINE_WATER_A_AVG1 source

CREATE VIEW WPG.MARINE_WATER_A_AVG1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	SMB.YR,
	'A'		D_CODE,		
	SMB.TOTAL,
	SMB.TEMPER,
	SMB.PH_SC,
	SMB.SAL,
	SMB.COND,
	SMB.DO,
	SMB.DO_SAT,
    SMB.FLSCUFA,		SMB.TURB_SC,
    SMB.PAR,
	SMB.BOD5,
	SMB.FC,
	SMB.ECOLI,
	SMB.PH_M,
	SMB.TURB_M,
	SMB.NH4,
	SMB.NO2,
	SMB.NO3,
	SMB.TKN_S,
	SMB.TKN_P,
	SMB.TKN_SP,
	SMB.PO4,
	SMB.TP_S,
	SMB.TP_P,
	SMB.TP_SP,
	SMB.SIO2,
	SMB.SS,
	SMB.TVS,
	SMB.CHL,
	SMB.PHAE,
	SMB.SOL_RAD,
	SMB.AIR_TEMP,
	SMB.WIND_SP,
	SMB.SD,
	SMB.NH3,
	SMB.TIN,
	SMB.TN,
	SMB.NH4_NM,
	SMB.NO2_NM,
	SMB.NO3_NM,
	SMB.TKN_NM,
	SMB.NOX_NM,
	SMB.TIN_NM,
	SMB.TN_NM,
	SMB.PO4_PM,
	SMB.TP_PM,
	SMB.TIN_PO4_MMR,
	SMB.TN_TP_MMR,
	ST.CMMVIEW	VIEW_NO
FROM
	(SELECT	SITE_ID,
		YEAR(MDATE)	 	YR,
		COUNT(*)		TOTAL,
		AVG(TEMPER) 		TEMPER,
		AVG(PH_SC) 		PH_SC,
		AVG(SAL) 		SAL,
		AVG(COND) 		COND,
		AVG(DO)			DO,
		AVG(DO_SAT) 		DO_SAT,
        AVG(FLSCUFA)    FLSCUFA,	        AVG(TURB_SC) 		TURB_SC,
        AVG(PAR) 		PAR,
        AVG(BOD5) 		BOD5,
		EXP(AVG(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)))	FC,
		EXP(AVG(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)))	ECOLI,
		AVG(PH_M) 		PH_M,
		AVG(TURB_M) 		TURB_M,
		AVG(NH4) 		NH4,
		AVG(NO2) 		NO2,
		AVG(NO3) 		NO3,
		AVG(TKN_S) 		TKN_S,
		AVG(TKN_P) 		TKN_P,
		AVG(TKN_SP) 		TKN_SP,
		AVG(PO4) 		PO4,
		AVG(TP_S) 		TP_S,
		AVG(TP_P) 		TP_P,
		AVG(TP_SP) 		TP_SP,
		AVG(SIO2) 		SIO2,
		AVG(SS) 			SS,
		AVG(TVS) 		TVS,
		AVG(CHL) 		CHL,
		AVG(PHAE) 		PHAE,
		AVG(SOL_RAD) 		SOL_RAD,
		AVG(AIR_TEMP) 		AIR_TEMP,
		AVG(WIND_SP) 		WIND_SP,
		AVG(SD) 			SD,
		AVG(NH3) 		NH3,
		AVG(TIN) 		TIN,
		AVG(TN) 			TN,
		AVG(NH4_NM)		NH4_NM,
		AVG(NO2_NM)		NO2_NM,
		AVG(NO3_NM)		NO3_NM,
		AVG(TKN_NM)		TKN_NM,
		AVG(NOX_NM)		NOX_NM,
		AVG(TIN_NM)		TIN_NM,
		AVG(TN_NM) 		TN_NM,
		AVG(PO4_PM)		PO4_PM,
		AVG(TP_PM)		TP_PM,
		AVG(TIN_PO4_MMR)	TIN_PO4_MMR,
		AVG(TN_TP_MMR)		TN_TP_MMR
	 FROM	WPG.MW_A 	SMB
	GROUP BY SITE_ID, YEAR(MDATE)
	)	SMB
JOIN	WPG.MSTATION	ST	ON SMB.SITE_ID = ST.SITE_ID
JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_WATER_A_AVG1A source

CREATE   VIEW WPG.MARINE_WATER_A_AVG1A AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	SMB.YR,
	'A'		D_CODE,		
	SMB.TOTAL,
	SMB.TEMPER_AVG,
	SMB.PH_SC_AVG,
	SMB.SAL_AVG,
	SMB.COND_AVG,
	SMB.DO_AVG,
	SMB.DO_SAT_AVG,
	SMB.FLSCUFA_AVG,
	SMB.TURB_SC_AVG,
	SMB.PAR_AVG,
	CASE WHEN L_BOD5_CNT =0 THEN NULL ELSE '<' END	L_BOD5_AVG,	BOD5_AVG,
	CASE WHEN L_FC_CNT =0 THEN NULL ELSE '<' END	L_FC_AVG,	FC_AVG,
	CASE WHEN L_ECOLI_CNT =0 THEN NULL ELSE '<' END	L_ECOLI_AVG,	ECOLI_AVG,
	CASE WHEN L_PH_M_CNT =0 THEN NULL ELSE '<' END	L_PH_M_AVG,	PH_M_AVG,
	CASE WHEN L_TURB_M_CNT =0 THEN NULL ELSE '<' END	L_TURB_M_AVG,	TURB_M_AVG,
	CASE WHEN L_NH4_CNT =0 THEN NULL ELSE '<' END	L_NH4_AVG,	NH4_AVG,
	CASE WHEN L_NO2_CNT =0 THEN NULL ELSE '<' END	L_NO2_AVG,	NO2_AVG,
	CASE WHEN L_NO3_CNT =0 THEN NULL ELSE '<' END	L_NO3_AVG,	NO3_AVG,
	CASE WHEN L_TKN_S_CNT =0 THEN NULL ELSE '<' END	L_TKN_S_AVG,	TKN_S_AVG,
	CASE WHEN L_TKN_P_CNT =0 THEN NULL ELSE '<' END	L_TKN_P_AVG,	TKN_P_AVG,
	CASE WHEN L_TKN_SP_CNT =0 THEN NULL ELSE '<' END	L_TKN_SP_AVG,	TKN_SP_AVG,
	CASE WHEN L_PO4_CNT =0 THEN NULL ELSE '<' END	L_PO4_AVG,	PO4_AVG,
	CASE WHEN L_TP_S_CNT =0 THEN NULL ELSE '<' END	L_TP_S_AVG,	TP_S_AVG,
	CASE WHEN L_TP_P_CNT =0 THEN NULL ELSE '<' END	L_TP_P_AVG,	TP_P_AVG,
	CASE WHEN L_TP_SP_CNT =0 THEN NULL ELSE '<' END	L_TP_SP_AVG,	TP_SP_AVG,
	CASE WHEN L_SIO2_CNT =0 THEN NULL ELSE '<' END	L_SIO2_AVG,	SIO2_AVG,
	CASE WHEN L_SS_CNT =0 THEN NULL ELSE '<' END	L_SS_AVG,	SS_AVG,
	CASE WHEN L_TVS_CNT =0 THEN NULL ELSE '<' END	L_TVS_AVG,	TVS_AVG,
	CASE WHEN L_CHL_CNT =0 THEN NULL ELSE '<' END	L_CHL_AVG,	CHL_AVG,
	CASE WHEN L_PHAE_CNT =0 THEN NULL ELSE '<' END	L_PHAE_AVG,	PHAE_AVG,
	SMB.SOL_RAD_AVG,
	SMB.AIR_TEMP_AVG,
	SMB.WIND_SP_AVG,
	SMB.SD_AVG,
	SMB.NH3_AVG,
	SMB.TIN_AVG,
	SMB.TN_AVG,
	SMB.NH4_NM_AVG,
	SMB.NO2_NM_AVG,
	SMB.NO3_NM_AVG,
	SMB.TKN_NM_AVG,
	SMB.NOX_NM_AVG,
	SMB.TIN_NM_AVG,
	SMB.TN_NM_AVG,
	SMB.PO4_PM_AVG,
	SMB.TP_PM_AVG,
	SMB.TIN_PO4_MMR_AVG,
	SMB.TN_TP_MMR_AVG,
	ST.CMMVIEW	VIEW_NO
FROM
	(SELECT	SITE_ID,
    YEAR(MDATE)	 	YR,
    COUNT(*)		TOTAL,
    AVG(TEMPER) 		TEMPER_AVG,
    AVG(PH_SC) 		PH_SC_AVG,
    AVG(SAL) 		SAL_AVG,
	AVG(COND) 		COND_AVG,
	AVG(DO)			DO_AVG,
	AVG(DO_SAT) 		DO_SAT_AVG,
	AVG(FLSCUFA)		FLSCUFA_AVG,
	AVG(TURB_SC) 		TURB_SC_AVG,
	AVG(PAR)		PAR_AVG,
	AVG(BOD5) 		BOD5_AVG,
	EXP(AVG(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)))	FC_AVG,
	EXP(AVG(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)))	ECOLI_AVG,
	AVG(PH_M) 		PH_M_AVG,
	AVG(TURB_M) 		TURB_M_AVG,
	AVG(NH4) 		NH4_AVG,
	AVG(NO2) 		NO2_AVG,
	AVG(NO3) 		NO3_AVG,
	AVG(TKN_S) 		TKN_S_AVG,
	AVG(TKN_P) 		TKN_P_AVG,
	AVG(TKN_SP) 		TKN_SP_AVG,
	AVG(PO4) 		PO4_AVG,
	AVG(TP_S) 		TP_S_AVG,
	AVG(TP_P) 		TP_P_AVG,
	AVG(TP_SP) 		TP_SP_AVG,
	AVG(SIO2) 		SIO2_AVG,
	AVG(SS) 			SS_AVG,
	AVG(TVS) 		TVS_AVG,
	AVG(CHL) 		CHL_AVG,
	AVG(PHAE) 		PHAE_AVG,
	AVG(SOL_RAD) 		SOL_RAD_AVG,
	AVG(AIR_TEMP) 		AIR_TEMP_AVG,
	AVG(WIND_SP) 		WIND_SP_AVG,
	AVG(SD)	 		SD_AVG,
	AVG(NH3) 		NH3_AVG,
	AVG(TIN) 		TIN_AVG,
	AVG(TN) 			TN_AVG,
	AVG(NH4_NM)		NH4_NM_AVG,
	AVG(NO2_NM)		NO2_NM_AVG,
	AVG(NO3_NM)		NO3_NM_AVG,
	AVG(TKN_NM)		TKN_NM_AVG,
	AVG(NOX_NM)		NOX_NM_AVG,
	AVG(TIN_NM)		TIN_NM_AVG,
	AVG(TN_NM) 		TN_NM_AVG,
	AVG(PO4_PM)		PO4_PM_AVG,
	AVG(TP_PM)		TP_PM_AVG,
	AVG(TIN_PO4_MMR)	TIN_PO4_MMR_AVG,
	AVG(TN_TP_MMR)		TN_TP_MMR_AVG,
	COUNT(L_BOD5)	L_BOD5_CNT,
	COUNT(L_FC)	L_FC_CNT,
	COUNT(L_ECOLI)	L_ECOLI_CNT,
	COUNT(L_PH_M)	L_PH_M_CNT,
	COUNT(L_TURB_M)	L_TURB_M_CNT,
	COUNT(L_NH4)	L_NH4_CNT,
	COUNT(L_NO2)	L_NO2_CNT,
	COUNT(L_NO3)	L_NO3_CNT,
	COUNT(L_TKN_S)	L_TKN_S_CNT,
	COUNT(L_TKN_P)	L_TKN_P_CNT,
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,
	COUNT(L_PO4)	L_PO4_CNT,
	COUNT(L_TP_S)	L_TP_S_CNT,
	COUNT(L_TP_P)	L_TP_P_CNT,
	COUNT(L_TP_SP)	L_TP_SP_CNT,
	COUNT(L_SIO2)	L_SIO2_CNT,
	COUNT(L_SS)	L_SS_CNT,
	COUNT(L_TVS)	L_TVS_CNT,
	COUNT(L_CHL)	L_CHL_CNT,
	COUNT(L_PHAE)	L_PHAE_CNT
	 FROM	WPG.MW_AA 	SMB
	GROUP BY SITE_ID, YEAR(MDATE)

	)	SMB
JOIN	WPG.MSTATION	ST	ON SMB.SITE_ID = ST.SITE_ID
JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_WATER_A_AVG2 source

CREATE VIEW WPG.MARINE_WATER_A_AVG2 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	YR,
	D_CODE,
	TOTAL,
	TEMPER,
	PH_SC,
	SAL,
	COND,
	DO,
	DO_SAT,
    FLSCUFA,		TURB_SC,
    PAR,
	BOD5,
	FC,
	ECOLI,
	NH4,
	NO2,
	NO3,
	TKN_S,
	TKN_P,
	TKN_SP,
	PO4,
	TP_S,
	TP_P,
	TP_SP,
	SIO2,
	SS,
	TVS,
	CHL,
	PHAE,
	SOL_RAD,
	AIR_TEMP,
	WIND_SP,
	SD,
	NH3,
	TIN,
	TN
FROM 	WPG.MARINE_WATER_A_AVG1
WHERE	VIEW_NO >= 2
AND 		YR <= YEAR(GETDATE());


-- WPG.MARINE_WATER_A_MAX1A source

CREATE  VIEW WPG.MARINE_WATER_A_MAX1A AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	SMB.YR,
	'A'		D_CODE,		
	SMB.TOTAL,
	SMB.TEMPER_MAX,
	SMB.PH_SC_MAX,
	SMB.SAL_MAX,
	SMB.COND_MAX,
	SMB.DO_MAX,
	SMB.DO_SAT_MAX,
	SMB.FLSCUFA_MAX,
	SMB.TURB_SC_MAX,
	SMB.PAR_MAX,
	CASE WHEN L_BOD5_CNT = TOTAL THEN '<' ELSE NULL END	L_BOD5_MAX,	BOD5_MAX,
	CASE WHEN L_FC_CNT = TOTAL THEN '<' ELSE NULL END	L_FC_MAX,	FC_MAX,
	CASE WHEN L_ECOLI_CNT = TOTAL THEN '<' ELSE NULL END	L_ECOLI_MAX,	ECOLI_MAX,
	CASE WHEN L_PH_M_CNT = TOTAL THEN '<' ELSE NULL END	L_PH_M_MAX,	PH_M_MAX,
	CASE WHEN L_TURB_M_CNT = TOTAL THEN '<' ELSE NULL END	L_TURB_M_MAX,	TURB_M_MAX,
	CASE WHEN L_NH4_CNT = TOTAL THEN '<' ELSE NULL END	L_NH4_MAX,	NH4_MAX,
	CASE WHEN L_NO2_CNT = TOTAL THEN '<' ELSE NULL END	L_NO2_MAX,	NO2_MAX,
	CASE WHEN L_NO3_CNT = TOTAL THEN '<' ELSE NULL END	L_NO3_MAX,	NO3_MAX,
	CASE WHEN L_TKN_S_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_S_MAX,	TKN_S_MAX,
	CASE WHEN L_TKN_P_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_P_MAX,	TKN_P_MAX,
	CASE WHEN L_TKN_SP_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_SP_MAX,	TKN_SP_MAX,
	CASE WHEN L_PO4_CNT = TOTAL THEN '<' ELSE NULL END	L_PO4_MAX,	PO4_MAX,
	CASE WHEN L_TP_S_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_S_MAX,	TP_S_MAX,
	CASE WHEN L_TP_P_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_P_MAX,	TP_P_MAX,
	CASE WHEN L_TP_SP_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_SP_MAX,	TP_SP_MAX,
	CASE WHEN L_SIO2_CNT = TOTAL THEN '<' ELSE NULL END	L_SIO2_MAX,	SIO2_MAX,
	CASE WHEN L_SS_CNT = TOTAL THEN '<' ELSE NULL END	L_SS_MAX,	SS_MAX,
	CASE WHEN L_TVS_CNT = TOTAL THEN '<' ELSE NULL END	L_TVS_MAX,	TVS_MAX,
	CASE WHEN L_CHL_CNT = TOTAL THEN '<' ELSE NULL END	L_CHL_MAX,	CHL_MAX,
	CASE WHEN L_PHAE_CNT = TOTAL THEN '<' ELSE NULL END	L_PHAE_MAX,	PHAE_MAX,
	SMB.SOL_RAD_MAX,
	SMB.AIR_TEMP_MAX,
	SMB.WIND_SP_MAX,
	SMB.SD_MAX,
	SMB.NH3_MAX,
	SMB.TIN_MAX,
	SMB.TN_MAX,
	SMB.NH4_NM_MAX,
	SMB.NO2_NM_MAX,
	SMB.NO3_NM_MAX,
	SMB.TKN_NM_MAX,
	SMB.NOX_NM_MAX,
	SMB.TIN_NM_MAX,
	SMB.TN_NM_MAX,
	SMB.PO4_PM_MAX,
	SMB.TP_PM_MAX,
	SMB.TIN_PO4_MMR_MAX,
	SMB.TN_TP_MMR_MAX,
	ST.CMMVIEW	VIEW_NO
FROM
	(SELECT	SITE_ID,
    YEAR(MDATE)	 	YR,
    COUNT(*)		TOTAL,
    MAX(TEMPER) 		TEMPER_MAX,
    MAX(PH_SC) 		PH_SC_MAX,
    MAX(SAL) 		SAL_MAX,
	MAX(COND) 		COND_MAX,
	MAX(DO)			DO_MAX,
	MAX(DO_SAT) 		DO_SAT_MAX,
	MAX(FLSCUFA)		FLSCUFA_MAX,
	MAX(TURB_SC) 		TURB_SC_MAX,
	MAX(PAR)		PAR_MAX,
	MAX(BOD5) 		BOD5_MAX,
	EXP(MAX(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)))	FC_MAX,
	EXP(MAX(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)))	ECOLI_MAX,
	MAX(PH_M) 		PH_M_MAX,
	MAX(TURB_M) 		TURB_M_MAX,
	MAX(NH4) 		NH4_MAX,
	MAX(NO2) 		NO2_MAX,
	MAX(NO3) 		NO3_MAX,
	MAX(TKN_S) 		TKN_S_MAX,
	MAX(TKN_P) 		TKN_P_MAX,
	MAX(TKN_SP) 		TKN_SP_MAX,
	MAX(PO4) 		PO4_MAX,
	MAX(TP_S) 		TP_S_MAX,
	MAX(TP_P) 		TP_P_MAX,
	MAX(TP_SP) 		TP_SP_MAX,
	MAX(SIO2) 		SIO2_MAX,
	MAX(SS) 			SS_MAX,
	MAX(TVS) 		TVS_MAX,
	MAX(CHL) 		CHL_MAX,
	MAX(PHAE) 		PHAE_MAX,
	MAX(SOL_RAD) 		SOL_RAD_MAX,
	MAX(AIR_TEMP) 		AIR_TEMP_MAX,
	MAX(WIND_SP) 		WIND_SP_MAX,
	MAX(SD)	 		SD_MAX,
	MAX(NH3) 		NH3_MAX,
	MAX(TIN) 		TIN_MAX,
	MAX(TN) 			TN_MAX,
	MAX(NH4_NM)		NH4_NM_MAX,
	MAX(NO2_NM)		NO2_NM_MAX,
	MAX(NO3_NM)		NO3_NM_MAX,
	MAX(TKN_NM)		TKN_NM_MAX,
	MAX(NOX_NM)		NOX_NM_MAX,
	MAX(TIN_NM)		TIN_NM_MAX,
	MAX(TN_NM) 		TN_NM_MAX,
	MAX(PO4_PM)		PO4_PM_MAX,
	MAX(TP_PM)		TP_PM_MAX,
	MAX(TIN_PO4_MMR)	TIN_PO4_MMR_MAX,
	MAX(TN_TP_MMR)		TN_TP_MMR_MAX,
	COUNT(L_BOD5)	L_BOD5_CNT,
	COUNT(L_FC)	L_FC_CNT,
	COUNT(L_ECOLI)	L_ECOLI_CNT,
	COUNT(L_PH_M)	L_PH_M_CNT,
	COUNT(L_TURB_M)	L_TURB_M_CNT,
	COUNT(L_NH4)	L_NH4_CNT,
	COUNT(L_NO2)	L_NO2_CNT,
	COUNT(L_NO3)	L_NO3_CNT,
	COUNT(L_TKN_S)	L_TKN_S_CNT,
	COUNT(L_TKN_P)	L_TKN_P_CNT,
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,
	COUNT(L_PO4)	L_PO4_CNT,
	COUNT(L_TP_S)	L_TP_S_CNT,
	COUNT(L_TP_P)	L_TP_P_CNT,
	COUNT(L_TP_SP)	L_TP_SP_CNT,
	COUNT(L_SIO2)	L_SIO2_CNT,
	COUNT(L_SS)	L_SS_CNT,
	COUNT(L_TVS)	L_TVS_CNT,
	COUNT(L_CHL)	L_CHL_CNT,
	COUNT(L_PHAE)	L_PHAE_CNT
	 FROM	WPG.MW_AA 	SMB
	GROUP BY SITE_ID, YEAR(MDATE)
	)	SMB
JOIN	WPG.MSTATION	ST	ON SMB.SITE_ID = ST.SITE_ID
JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_WATER_A_MIN1A source

CREATE  VIEW WPG.MARINE_WATER_A_MIN1A AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	SMB.YR,
	'A'		D_CODE,		
	SMB.TOTAL,
	SMB.TEMPER_MIN,
	SMB.PH_SC_MIN,
	SMB.SAL_MIN,
	SMB.COND_MIN,
	SMB.DO_MIN,
	SMB.DO_SAT_MIN,
	SMB.FLSCUFA_MIN,
	SMB.TURB_SC_MIN,
	SMB.PAR_MIN,
	CASE WHEN L_BOD5_CNT =0 THEN NULL ELSE '<' END	L_BOD5_MIN,	BOD5_MIN,
	CASE WHEN L_FC_CNT =0 THEN NULL ELSE '<' END	L_FC_MIN,	FC_MIN,
	CASE WHEN L_ECOLI_CNT =0 THEN NULL ELSE '<' END	L_ECOLI_MIN,	ECOLI_MIN,
	CASE WHEN L_PH_M_CNT =0 THEN NULL ELSE '<' END	L_PH_M_MIN,	PH_M_MIN,
	CASE WHEN L_TURB_M_CNT =0 THEN NULL ELSE '<' END	L_TURB_M_MIN,	TURB_M_MIN,
	CASE WHEN L_NH4_CNT =0 THEN NULL ELSE '<' END	L_NH4_MIN,	NH4_MIN,
	CASE WHEN L_NO2_CNT =0 THEN NULL ELSE '<' END	L_NO2_MIN,	NO2_MIN,
	CASE WHEN L_NO3_CNT =0 THEN NULL ELSE '<' END	L_NO3_MIN,	NO3_MIN,
	CASE WHEN L_TKN_S_CNT =0 THEN NULL ELSE '<' END	L_TKN_S_MIN,	TKN_S_MIN,
	CASE WHEN L_TKN_P_CNT =0 THEN NULL ELSE '<' END	L_TKN_P_MIN,	TKN_P_MIN,
	CASE WHEN L_TKN_SP_CNT =0 THEN NULL ELSE '<' END	L_TKN_SP_MIN,	TKN_SP_MIN,
	CASE WHEN L_PO4_CNT =0 THEN NULL ELSE '<' END	L_PO4_MIN,	PO4_MIN,
	CASE WHEN L_TP_S_CNT =0 THEN NULL ELSE '<' END	L_TP_S_MIN,	TP_S_MIN,
	CASE WHEN L_TP_P_CNT =0 THEN NULL ELSE '<' END	L_TP_P_MIN,	TP_P_MIN,
	CASE WHEN L_TP_SP_CNT =0 THEN NULL ELSE '<' END	L_TP_SP_MIN,	TP_SP_MIN,
	CASE WHEN L_SIO2_CNT =0 THEN NULL ELSE '<' END	L_SIO2_MIN,	SIO2_MIN,
	CASE WHEN L_SS_CNT =0 THEN NULL ELSE '<' END	L_SS_MIN,	SS_MIN,
	CASE WHEN L_TVS_CNT =0 THEN NULL ELSE '<' END	L_TVS_MIN,	TVS_MIN,
	CASE WHEN L_CHL_CNT =0 THEN NULL ELSE '<' END	L_CHL_MIN,	CHL_MIN,
	CASE WHEN L_PHAE_CNT =0 THEN NULL ELSE '<' END	L_PHAE_MIN,	PHAE_MIN,
	SMB.SOL_RAD_MIN,
	SMB.AIR_TEMP_MIN,
	SMB.WIND_SP_MIN,
	SMB.SD_MIN,
	SMB.NH3_MIN,
	SMB.TIN_MIN,
	SMB.TN_MIN,
	SMB.NH4_NM_MIN,
	SMB.NO2_NM_MIN,
	SMB.NO3_NM_MIN,
	SMB.TKN_NM_MIN,
	SMB.NOX_NM_MIN,
	SMB.TIN_NM_MIN,
	SMB.TN_NM_MIN,
	SMB.PO4_PM_MIN,
	SMB.TP_PM_MIN,
	SMB.TIN_PO4_MMR_MIN,
	SMB.TN_TP_MMR_MIN,
	ST.CMMVIEW	VIEW_NO
FROM
	(SELECT	SITE_ID,
    YEAR(MDATE)	 	YR,
    COUNT(*)		TOTAL,
    MIN(TEMPER) 		TEMPER_MIN,
    MIN(PH_SC) 		PH_SC_MIN,
    MIN(SAL) 		SAL_MIN,
	MIN(COND) 		COND_MIN,
	MIN(DO)			DO_MIN,
	MIN(DO_SAT) 		DO_SAT_MIN,
	MIN(FLSCUFA)		FLSCUFA_MIN,
	MIN(TURB_SC) 		TURB_SC_MIN,
	MIN(PAR)		PAR_MIN,
	MIN(BOD5) 		BOD5_MIN,
	EXP(MIN(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)))	FC_MIN,
	EXP(MIN(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)))	ECOLI_MIN,
	MIN(PH_M) 		PH_M_MIN,
	MIN(TURB_M) 		TURB_M_MIN,
	MIN(NH4) 		NH4_MIN,
	MIN(NO2) 		NO2_MIN,
	MIN(NO3) 		NO3_MIN,
	MIN(TKN_S) 		TKN_S_MIN,
	MIN(TKN_P) 		TKN_P_MIN,
	MIN(TKN_SP) 		TKN_SP_MIN,
	MIN(PO4) 		PO4_MIN,
	MIN(TP_S) 		TP_S_MIN,
	MIN(TP_P) 		TP_P_MIN,
	MIN(TP_SP) 		TP_SP_MIN,
	MIN(SIO2) 		SIO2_MIN,
	MIN(SS) 			SS_MIN,
	MIN(TVS) 		TVS_MIN,
	MIN(CHL) 		CHL_MIN,
	MIN(PHAE) 		PHAE_MIN,
	MIN(SOL_RAD) 		SOL_RAD_MIN,
	MIN(AIR_TEMP) 		AIR_TEMP_MIN,
	MIN(WIND_SP) 		WIND_SP_MIN,
	MIN(SD)	 		SD_MIN,
	MIN(NH3) 		NH3_MIN,
	MIN(TIN) 		TIN_MIN,
	MIN(TN) 			TN_MIN,
	MIN(NH4_NM)		NH4_NM_MIN,
	MIN(NO2_NM)		NO2_NM_MIN,
	MIN(NO3_NM)		NO3_NM_MIN,
	MIN(TKN_NM)		TKN_NM_MIN,
	MIN(NOX_NM)		NOX_NM_MIN,
	MIN(TIN_NM)		TIN_NM_MIN,
	MIN(TN_NM) 		TN_NM_MIN,
	MIN(PO4_PM)		PO4_PM_MIN,
	MIN(TP_PM)		TP_PM_MIN,
	MIN(TIN_PO4_MMR)	TIN_PO4_MMR_MIN,
	MIN(TN_TP_MMR)		TN_TP_MMR_MIN,
	COUNT(L_BOD5)	L_BOD5_CNT,
	COUNT(L_FC)	L_FC_CNT,
	COUNT(L_ECOLI)	L_ECOLI_CNT,
	COUNT(L_PH_M)	L_PH_M_CNT,
	COUNT(L_TURB_M)	L_TURB_M_CNT,
	COUNT(L_NH4)	L_NH4_CNT,
	COUNT(L_NO2)	L_NO2_CNT,
	COUNT(L_NO3)	L_NO3_CNT,
	COUNT(L_TKN_S)	L_TKN_S_CNT,
	COUNT(L_TKN_P)	L_TKN_P_CNT,
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,
	COUNT(L_PO4)	L_PO4_CNT,
	COUNT(L_TP_S)	L_TP_S_CNT,
	COUNT(L_TP_P)	L_TP_P_CNT,
	COUNT(L_TP_SP)	L_TP_SP_CNT,
	COUNT(L_SIO2)	L_SIO2_CNT,
	COUNT(L_SS)	L_SS_CNT,
	COUNT(L_TVS)	L_TVS_CNT,
	COUNT(L_CHL)	L_CHL_CNT,
	COUNT(L_PHAE)	L_PHAE_CNT
	 FROM	WPG.MW_AA 	SMB
	GROUP BY SITE_ID, YEAR(MDATE)
	)	SMB
JOIN	WPG.MSTATION	ST	ON SMB.SITE_ID = ST.SITE_ID
JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_WATER_CRITERIA source

create view wpg.MARINE_WATER_CRITERIA as
select m.ZONE,m.WCZ,m.SUBZONE,m.STATION,m.DISP_STATS,m.TOTAL,m.YR,m.D_CODE,m.PARAMETER,l.L_MEASURE,m.MEASURE,m.SITE_ID,m.DISP_SEQ from 
(select ZONE,WCZ,SUBZONE,STATION,DISP_STATS,TOTAL,YR,D_CODE,SITE_ID,DISP_SEQ,PARAMETER,MEASURE
FROM
(select * from WPG.MARINE_WATER_STATISTICS10A1 where DISP_SEQ in (4,6)) as p
UNPIVOT
(MEASURE for PARAMETER in (TEMPER,PH_SC,SAL,COND,DO,DO_SAT,FLSCUFA,TURB_SC,PAR,BOD5,FC,ECOLI,PH_M,TURB_M,NH4,NO2,NO3,TKN_S,TKN_P,TKN_SP,PO4,TP_S,TP_P,TP_SP,SIO2,SS,TVS,CHL,PHAE,TIN,TN,NH3,SOL_RAD,AIR_TEMP,WIND_SP,SD,NH4_NM,NO2_NM,NO3_NM,TKN_NM,NOX_NM,TIN_NM,TN_NM,PO4_PM,TP_PM,TIN_PO4_MMR,TN_TP_MMR)
) as unpvt ) as m
left join
(select ZONE,WCZ,SUBZONE,STATION,DISP_STATS,TOTAL,YR,D_CODE,SITE_ID,DISP_SEQ,PARAMETER,L_MEASURE
FROM
(select * from WPG.MARINE_WATER_STATISTICS10A1 where DISP_SEQ in (4,6)) as p
UNPIVOT
(L_MEASURE for PARAMETER in (L_BOD5,L_FC,L_ECOLI,L_PH_M,L_TURB_M,L_NH4,L_NO2,L_NO3,L_TKN_S,L_TKN_P,L_TKN_SP,L_PO4,L_TP_S,L_TP_P,L_TP_SP,L_SIO2,L_SS,L_TVS,L_CHL,L_PHAE)
) as unpvt ) as l 
on m.STATION=l.STATION and m.SITE_ID=l.SITE_ID and m.YR=l.YR and m.D_CODE=l.D_CODE and m.DISP_SEQ=l.DISP_SEQ and 'L_'+m.PARAMETER = l.PARAMETER;


-- WPG.MARINE_WATER_FIELD1 source

CREATE VIEW WPG.MARINE_WATER_FIELD1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO	SAM_NO,
	FD.SOL_RAD,
	FD.AIR_TEMP,
	FD.WIND_SP,
	FD.WIND_DIR,
	FD.SEA_COND,
	FD.SEA_COL,
	FD.FISH_KILL,
	FD.SECCHIDISC	SD,
	FD.WEATHER
FROM 	WPG.MW_VISIT	VI
JOIN	WPG.MW_FIELD	FD		ON VI.MWVISIT_ID 	= FD.MWVISIT_ID
JOIN	WPG.MSTATION	ST		ON VI.SITE_ID		= ST.SITE_ID
JOIN	WPG.WPCO_SZ	SZ		ON ST.SZ_ID		= SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ		ON SZ.WCZ_ID		= CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ		ON CZ.ZONE_ID 		= TZ.ZONE_ID;


-- WPG.MARINE_WATER_GLABN1 source

CREATE VIEW WPG.MARINE_WATER_GLABN1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO	SAM_NO,
	GL.DEPTH_CODE,
	GL.L_NH4,
	GL.NH4,
	GL.L_NO2,
	GL.NO2,
	GL.L_NO3,
	GL.NO3,
	GL.L_TKN_S,
	GL.TKN_S,
	GL.L_TKN_P,
	GL.TKN_P,
	GL.L_TKN_SP,
	GL.TKN_SP,
	GL.L_PO4,
	GL.PO4,
	GL.L_TP_S,
	GL.TP_S,
	GL.L_TP_P,
	GL.TP_P,
	GL.L_TP_SP,
	GL.TP_SP,
	GL.L_SIO2,
	GL.SIO2,
	GL.L_SS,
	GL.SS,
	GL.L_TVS,
	GL.TVS,
	GL.L_CHL,
	GL.CHL,
	GL.L_PHAE,
	GL.PHAE,
	GL.TIN,
	GL.TN,
	GL.NH4_NM,
	GL.NO2_NM,
	GL.NO3_NM,
	GL.TKN_NM,
	GL.NOX_NM,
	GL.TIN_NM,
	GL.TN_NM,
	GL.PO4_PM,
	GL.TP_PM,
	GL.TIN_PO4_MMR,
	GL.TN_TP_MMR,
	GL.L_TUR,
	GL.TUR
FROM 	WPG.MW_VISIT		VI
JOIN	WPG.MW_GLABN_CAL	GL	ON VI.MWVISIT_ID 	= GL.MWVISIT_ID
JOIN	WPG.MSTATION		ST	ON VI.SITE_ID		= ST.SITE_ID
JOIN	WPG.WPCO_SZ		SZ	ON ST.SZ_ID		= SZ.SZ_ID
JOIN	WPG.WPCO_WCZ		CZ	ON SZ.WCZ_ID		= CZ.WCZ_ID
JOIN	WPG.TEN_ZONE		TZ	ON CZ.ZONE_ID 		= TZ.ZONE_ID;


-- WPG.MARINE_WATER_HKU source

CREATE VIEW WPG.MARINE_WATER_HKU
AS
SELECT          'Zone' 'Zone', 'Station' 'Station', 'Date' 'Date', 
                            'Depth Code : S=Surface  M=Mid-depth  B=Bottom' 'Depth Code : S=Surface  M=Mid-depth  B=Bottom ', 
                            'Water Temperature (°C)' 'Water Temperature (°C)', 'Salinity (NTU)' 'Salinity (NTU)', 
                            'E. Coli (cfu/100ml)' 'E Coli (cfu/100ml)', 'Dissolved Oxygen (mg/L)' 'Dissolved Oxygen (mg/L)', 'pH' 'pH', 
                            'Biochemical Oxygen Demand (mg/L)' 'Biochemical Oxygen Demand (mg/L)'
UNION ALL
SELECT          [ZONE], [STATION], CONVERT(VARCHAR(10), [MDATE], 111), [D_CODE], CAST(TEMPER AS VARCHAR(15)), 
                            CAST(SAL AS VARCHAR(10)), CAST(ECOLI AS VARCHAR(10)), CAST(DO AS VARCHAR(10)), 
                            CAST(PH_SC AS VARCHAR(10)), CAST(BOD5 AS VARCHAR(10))
FROM              WPG.MARINE_WATER2
WHERE          [STATION] IN
                                (SELECT          MW_NAME
                                  FROM               WPG.MSTATION
                                  WHERE           UPPER(SUBSTRING(MW_NAME, 2, 1)) <> 'T' AND UPPER(ACTIVE) = 'Y') AND DATEDIFF(MONTH, 
                            [MDATE], GETDATE()) = 1 AND [D_CODE] <> 'A';


-- WPG.MARINE_WATER_HKU_CSV source

CREATE VIEW WPG.MARINE_WATER_HKU_CSV
AS
SELECT          'Zone' 'Zone', 'Station' 'Station', 'Date' 'Date', 
                            'Depth Code : S=Surface  M=Mid-depth  B=Bottom' 'Depth Code : S=Surface  M=Mid-depth  B=Bottom ', 
                            'Water Temperature (°C)' 'Water Temperature (°C)', 'Salinity' 'Salinity', 'E. coli (cfu/100mL)' 'E coli (cfu/100mL)', 
                            'Dissolved Oxygen (mg/L)' 'Dissolved Oxygen (mg/L)', 'pH' 'pH', 
                            '5-day Biochemical Oxygen Demand (mg/L)' '5-day Biochemical Oxygen Demand (mg/L)'
UNION ALL
SELECT          [ZONE], [STATION], CONVERT(VARCHAR(10), [MDATE], 111), [D_CODE], CAST(TEMPER AS VARCHAR(15)), 
                            CAST(SAL AS VARCHAR(10)), CAST(ECOLI AS VARCHAR(10)), CAST(DO AS VARCHAR(10)), 
                            CAST(PH_SC AS VARCHAR(10)), CAST(BOD5 AS VARCHAR(10))
FROM              WPG.MARINE_WATER2
WHERE          [STATION] IN
                                (SELECT          MW_NAME
                                  FROM               WPG.MSTATION
                                  WHERE           UPPER(SUBSTRING(MW_NAME, 2, 1)) <> 'T' AND UPPER(ACTIVE) = 'Y') AND DATEDIFF(MONTH, 
                            [MDATE], GETDATE()) = 1 AND [D_CODE] <> 'A'
                       and  [STATION] not in ( 'VM14A', 'VM14B', 'VM14C');


-- WPG.MARINE_WATER_HKU_TMP source

CREATE VIEW [WPG].[MARINE_WATER_HKU_TMP] AS
SELECT         'Zone' 'Zone', 'Station' 'Station', 'Date' 'Date', 
                          'Depth Code : S=Surface  M=Mid-depth  B=Bottom' 'Depth Code : S=Surface  M=Mid-depth  B=Bottom ',
                           'Water Temperature (°C)' 'Water Temperature (°C)', 
                          'Salinity (NTU)' 'Salinity (NTU)', 'E. Coli (Count/100ml)' 'E Coli (Count/100ml)', 
                          'Dissolved Oxygen (mg/L)' 'Dissolved Oxygen (mg/L)', 'pH' 'pH', 
                          'Biochemical Oxygen Demand (mg/L)' 'Biochemical Oxygen Demand (mg/L)'
UNION ALL
SELECT         [ZONE], [STATION], CONVERT(VARCHAR(10), [MDATE], 111), [D_CODE], 
                          CAST(TEMPER AS VARCHAR(15)), CAST(SAL AS VARCHAR(10)), 
                          CAST(ECOLI AS VARCHAR(10)), CAST(DO AS VARCHAR(10)), 
                          CAST(PH_SC AS VARCHAR(10)), CAST(BOD5 AS VARCHAR(10))
FROM             WPG.MARINE_WATER2
WHERE         [STATION] IN
                              (SELECT         MW_NAME
                                FROM              WPG.MSTATION
                                WHERE          UPPER(SUBSTRING(MW_NAME, 2, 1)) <> 'T' AND 
                                                           UPPER(ACTIVE) = 'Y') AND DATEDIFF(MONTH, [MDATE], GETDATE()) = 3 AND [D_CODE] <> 'A';


-- WPG.MARINE_WATER_MAX1A source

CREATE  VIEW WPG.MARINE_WATER_MAX1A AS 
SELECT * FROM WPG.MARINE_WATER_SMB_MAX1A
UNION ALL 
SELECT * FROM WPG.MARINE_WATER_A_MAX1A;


-- WPG.MARINE_WATER_MIN1A source

CREATE  VIEW WPG.MARINE_WATER_MIN1A AS 
SELECT * FROM WPG.MARINE_WATER_SMB_MIN1A
UNION ALL 
SELECT * FROM WPG.MARINE_WATER_A_MIN1A;


-- WPG.MARINE_WATER_MLAB1 source

CREATE VIEW WPG.MARINE_WATER_MLAB1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO	SAM_NO,
	ML.DEPTH_CODE,
	ML.L_BOD5,
	ML.BOD5,
	ML.L_FC,
	ML.FC,
	ML.L_ECOLI,
	ML.ECOLI,
	ML.L_PH 	L_PH_M,
	ML.PH 		PH_M,
	ML.L_TURB 	L_TURB_M,
	ML.TURB 	TURB_M
FROM 	WPG.MW_VISIT	VI
JOIN	WPG.MW_MLAB	ML		ON VI.MWVISIT_ID 	= ML.MWVISIT_ID
JOIN	WPG.MSTATION	ST		ON VI.SITE_ID		= ST.SITE_ID
JOIN	WPG.WPCO_SZ	SZ		ON ST.SZ_ID		= SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ		ON SZ.WCZ_ID		= CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ		ON CZ.ZONE_ID 		= TZ.ZONE_ID;


-- WPG.MARINE_WATER_NH3_1 source

CREATE VIEW WPG.MARINE_WATER_NH3_1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO	SAM_NO,
	NH.L_NH3	L_NH3,
	NH.NH3		NH3
FROM 	WPG.MW_VISIT	VI
JOIN	WPG.MW_NH3	NH		ON VI.MWVISIT_ID	= NH.MWVISIT_ID
JOIN	WPG.MSTATION	ST		ON VI.SITE_ID		= ST.SITE_ID
JOIN	WPG.WPCO_SZ	SZ		ON ST.SZ_ID		= SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ		ON SZ.WCZ_ID		= CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ		ON CZ.ZONE_ID 		= TZ.ZONE_ID;


-- WPG.MARINE_WATER_SEACAT1 source

CREATE VIEW WPG.MARINE_WATER_SEACAT1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO	SAM_NO,
	SC.DEPTH,
	SC.DEPTH_CODE,
	SC.TEMPER,
	SC.PH 		PH_SC,
	SC.SAL,
	SC.COND,
	SC.DO,
	SC.DO_SAT,
	SC.FLSCUFA,		SC.TURB		TURB_SC,
	SC.PAR,
    ST.CMMVIEW	VIEW_NO
FROM 	WPG.MW_VISIT	VI
JOIN	WPG.MW_SEACAT	SC		ON VI.MWVISIT_ID 	= SC.MWVISIT_ID
JOIN	WPG.MSTATION	ST		ON VI.SITE_ID		= ST.SITE_ID
JOIN	WPG.WPCO_SZ	SZ		ON ST.SZ_ID		= SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ		ON SZ.WCZ_ID		= CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ		ON CZ.ZONE_ID 		= TZ.ZONE_ID;


-- WPG.MARINE_WATER_SEACAT2 source

CREATE VIEW WPG.MARINE_WATER_SEACAT2 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	DEPTH,
	DEPTH_CODE,
	TEMPER,
	PH_SC,
	SAL,
	COND,
	DO,
	DO_SAT,
	FLSCUFA,		TURB_SC,
    PAR
FROM 	WPG.MARINE_WATER_SEACAT1
WHERE	VIEW_NO >= 2
AND MDATE <= GETDATE();


-- WPG.MARINE_WATER_SMB1 source

CREATE VIEW WPG.MARINE_WATER_SMB1 AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	SMB.MDATE,
	SMB.STIME,
	SMB.SAM_NO,
	SMB.D_CODE,		
	SMB.TEMPER,
	SMB.PH_SC,
	SMB.SAL,
	SMB.COND,
	SMB.DO,
	SMB.DO_SAT,
	SMB.FLSCUFA,		SMB.TURB_SC,
    SMB.PAR,
	SMB.L_BOD5,
	SMB.BOD5,
	SMB.L_FC,
	SMB.FC,
	SMB.L_ECOLI,
	SMB.ECOLI,
	SMB.L_PH_M,
	SMB.PH_M,
	SMB.L_TURB_M,
	SMB.TURB_M,
	SMB.L_NH4,
	SMB.NH4,
	SMB.L_NO2,
	SMB.NO2,
	SMB.L_NO3,
	SMB.NO3,
	SMB.L_TKN_S,
	SMB.TKN_S,
	SMB.L_TKN_P,
	SMB.TKN_P,
	SMB.L_TKN_SP,
	SMB.TKN_SP,
	SMB.L_PO4,
	SMB.PO4,
	SMB.L_TP_S,
	SMB.TP_S,
	SMB.L_TP_P,
	SMB.TP_P,
	SMB.L_TP_SP,
	SMB.TP_SP,
	SMB.L_SIO2,
	SMB.SIO2,
	SMB.L_SS,
	SMB.SS,
	SMB.L_TVS,
	SMB.TVS,
	SMB.L_CHL,
	SMB.CHL,
	SMB.L_PHAE,
	SMB.PHAE,
	SMB.SOL_RAD,
	SMB.AIR_TEMP,
	SMB.WIND_SP,
	SMB.WIND_DIR,
	SMB.SEA_COND,
	SMB.SEA_COL,
	SMB.FISH_KILL,
	SMB.SD,
	SMB.WEATHER,
	SMB.NH3,
	SMB.TIN,
	SMB.TN,
	SMB.NH4_NM,
	SMB.NO2_NM,
	SMB.NO3_NM,
	SMB.TKN_NM,
	SMB.NOX_NM,
	SMB.TIN_NM,
	SMB.TN_NM,
	SMB.PO4_PM,
	SMB.TP_PM,
	SMB.TIN_PO4_MMR,
	SMB.TN_TP_MMR,
	ST.CMMVIEW		VIEW_NO
FROM	(	SELECT * FROM WPG.MW_S	UNION ALL 
		SELECT * FROM WPG.MW_M	UNION ALL 
		SELECT * FROM WPG.MW_B	UNION ALL
		SELECT * FROM WPG.MW_N)		SMB
JOIN	WPG.MSTATION	ST	ON SMB.SITE_ID = ST.SITE_ID
JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID 	= TZ.ZONE_ID;


-- WPG.MARINE_WATER_SMB2 source

CREATE VIEW WPG.MARINE_WATER_SMB2 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	D_CODE,
	TEMPER,
	PH_SC,
	SAL,
	COND,
	DO,
	DO_SAT,
	FLSCUFA,		TURB_SC,
    PAR,
	L_BOD5,
	BOD5,
	L_FC,
	FC,
	L_ECOLI,
	ECOLI,
	L_NH4,
	NH4,
	L_NO2,
	NO2,
	L_NO3,
	NO3,
	L_TKN_S,
	TKN_S,
	L_TKN_P,
	TKN_P,
	L_TKN_SP,
	TKN_SP,
	L_PO4,
	PO4,
	L_TP_S,
	TP_S,
	L_TP_P,
	TP_P,
	L_TP_SP,
	TP_SP,
	L_SIO2,
	SIO2,
	L_SS,
	SS,
	L_TVS,
	TVS,
	L_CHL,
	CHL,
	L_PHAE,
	PHAE,
	SOL_RAD,
	AIR_TEMP,
	WIND_SP,
	WIND_DIR,
	SEA_COND,
	SEA_COL,
	FISH_KILL,
	SD,
	WEATHER,
	NH3,
	TIN,
	TN
FROM	WPG.MARINE_WATER_SMB1
WHERE	VIEW_NO >= 2
AND	MDATE <= GETDATE();


-- WPG.MARINE_WATER_SMB_AVG1 source

CREATE VIEW WPG.MARINE_WATER_SMB_AVG1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	SMB.YR,
	SMB.D_CODE,		
	SMB.TOTAL,
	SMB.TEMPER,
	SMB.PH_SC,
	SMB.SAL,
	SMB.COND,
	SMB.DO,
	SMB.DO_SAT,
    SMB.FLSCUFA,
	SMB.TURB_SC,
    SMB.PAR,
	SMB.BOD5,
	SMB.FC,
	SMB.ECOLI,
	SMB.PH_M,
	SMB.TURB_M,
	SMB.NH4,
	SMB.NO2,
	SMB.NO3,
	SMB.TKN_S,
	SMB.TKN_P,
	SMB.TKN_SP,
	SMB.PO4,
	SMB.TP_S,
	SMB.TP_P,
	SMB.TP_SP,
	SMB.SIO2,
	SMB.SS,
	SMB.TVS,
	SMB.CHL,
	SMB.PHAE,
	SMB.SOL_RAD,
	SMB.AIR_TEMP,
	SMB.WIND_SP,
	SMB.SD,
	SMB.NH3,
	SMB.TIN,
	SMB.TN,
	SMB.NH4_NM,
	SMB.NO2_NM,
	SMB.NO3_NM,
	SMB.TKN_NM,
	SMB.NOX_NM,
	SMB.TIN_NM,
	SMB.TN_NM,
	SMB.PO4_PM,
	SMB.TP_PM,
	SMB.TIN_PO4_MMR,
	SMB.TN_TP_MMR,
	ST.CMMVIEW	VIEW_NO
FROM
	(SELECT	SITE_ID,
	YEAR(MDATE)	 	YR,
	D_CODE			D_CODE,
	COUNT(*)		TOTAL,
	AVG(TEMPER) 		TEMPER,
	AVG(PH_SC) 		PH_SC,
	AVG(SAL) 		SAL,
	AVG(COND) 		COND,
	AVG(DO)			DO,
	AVG(DO_SAT) 		DO_SAT,
    AVG(FLSCUFA)        FLSCUFA,
	AVG(TURB_SC) 		TURB_SC,
    AVG(PAR)        PAR,
	AVG(BOD5) 		BOD5,
	EXP(AVG(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)))	FC,
	EXP(AVG(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)))	ECOLI,
	AVG(PH_M) 		PH_M,
	AVG(TURB_M) 		TURB_M,
	AVG(NH4) 		NH4,
	AVG(NO2) 		NO2,
	AVG(NO3) 		NO3,
	AVG(TKN_S) 		TKN_S,
	AVG(TKN_P) 		TKN_P,
	AVG(TKN_SP) 		TKN_SP,
	AVG(PO4) 		PO4,
	AVG(TP_S) 		TP_S,
	AVG(TP_P) 		TP_P,
	AVG(TP_SP) 		TP_SP,
	AVG(SIO2) 		SIO2,
	AVG(SS) 			SS,
	AVG(TVS) 		TVS,
	AVG(CHL) 		CHL,
	AVG(PHAE) 		PHAE,
	AVG(SOL_RAD) 		SOL_RAD,
	AVG(AIR_TEMP) 		AIR_TEMP,
	AVG(WIND_SP) 		WIND_SP,
	AVG(SD)	 		SD,
	AVG(NH3) 		NH3,
	AVG(TIN) 		TIN,
	AVG(TN) 			TN,
	AVG(NH4_NM)		NH4_NM,
	AVG(NO2_NM)		NO2_NM,
	AVG(NO3_NM)		NO3_NM,
	AVG(TKN_NM)		TKN_NM,
	AVG(NOX_NM)		NOX_NM,
	AVG(TIN_NM)		TIN_NM,
	AVG(TN_NM) 		TN_NM,
	AVG(PO4_PM)		PO4_PM,
	AVG(TP_PM)		TP_PM,
	AVG(TIN_PO4_MMR)	TIN_PO4_MMR,
	AVG(TN_TP_MMR)		TN_TP_MMR
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B) SMB
GROUP BY SITE_ID, YEAR(MDATE), D_CODE
)	SMB
JOIN	WPG.MSTATION	ST	ON SMB.SITE_ID = ST.SITE_ID
JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_WATER_SMB_AVG1A source

CREATE  VIEW WPG.MARINE_WATER_SMB_AVG1A AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	SMB.YR,
	SMB.D_CODE,		
	SMB.TOTAL,
	SMB.TEMPER_AVG,
	SMB.PH_SC_AVG,
	SMB.SAL_AVG,
	SMB.COND_AVG,
	SMB.DO_AVG,
	SMB.DO_SAT_AVG,
	SMB.FLSCUFA_AVG,
	SMB.TURB_SC_AVG,
	SMB.PAR_AVG,
	CASE WHEN L_BOD5_CNT =0 THEN NULL ELSE '<' END	L_BOD5_AVG,	BOD5_AVG,
	CASE WHEN L_FC_CNT =0 THEN NULL ELSE '<' END	L_FC_AVG,	FC_AVG,
	CASE WHEN L_ECOLI_CNT =0 THEN NULL ELSE '<' END	L_ECOLI_AVG,	ECOLI_AVG,
	CASE WHEN L_PH_M_CNT =0 THEN NULL ELSE '<' END	L_PH_M_AVG,	PH_M_AVG,
	CASE WHEN L_TURB_M_CNT =0 THEN NULL ELSE '<' END	L_TURB_M_AVG,	TURB_M_AVG,
	CASE WHEN L_NH4_CNT =0 THEN NULL ELSE '<' END	L_NH4_AVG,	NH4_AVG,
	CASE WHEN L_NO2_CNT =0 THEN NULL ELSE '<' END	L_NO2_AVG,	NO2_AVG,
	CASE WHEN L_NO3_CNT =0 THEN NULL ELSE '<' END	L_NO3_AVG,	NO3_AVG,
	CASE WHEN L_TKN_S_CNT =0 THEN NULL ELSE '<' END	L_TKN_S_AVG,	TKN_S_AVG,
	CASE WHEN L_TKN_P_CNT =0 THEN NULL ELSE '<' END	L_TKN_P_AVG,	TKN_P_AVG,
	CASE WHEN L_TKN_SP_CNT =0 THEN NULL ELSE '<' END	L_TKN_SP_AVG,	TKN_SP_AVG,
	CASE WHEN L_PO4_CNT =0 THEN NULL ELSE '<' END	L_PO4_AVG,	PO4_AVG,
	CASE WHEN L_TP_S_CNT =0 THEN NULL ELSE '<' END	L_TP_S_AVG,	TP_S_AVG,
	CASE WHEN L_TP_P_CNT =0 THEN NULL ELSE '<' END	L_TP_P_AVG,	TP_P_AVG,
	CASE WHEN L_TP_SP_CNT =0 THEN NULL ELSE '<' END	L_TP_SP_AVG,	TP_SP_AVG,
	CASE WHEN L_SIO2_CNT =0 THEN NULL ELSE '<' END	L_SIO2_AVG,	SIO2_AVG,
	CASE WHEN L_SS_CNT =0 THEN NULL ELSE '<' END	L_SS_AVG,	SS_AVG,
	CASE WHEN L_TVS_CNT =0 THEN NULL ELSE '<' END	L_TVS_AVG,	TVS_AVG,
	CASE WHEN L_CHL_CNT =0 THEN NULL ELSE '<' END	L_CHL_AVG,	CHL_AVG,
	CASE WHEN L_PHAE_CNT =0 THEN NULL ELSE '<' END	L_PHAE_AVG,	PHAE_AVG,
	SMB.SOL_RAD_AVG,
	SMB.AIR_TEMP_AVG,
	SMB.WIND_SP_AVG,
	SMB.SD_AVG,
	SMB.NH3_AVG,
	SMB.TIN_AVG,
	SMB.TN_AVG,
	SMB.NH4_NM_AVG,
	SMB.NO2_NM_AVG,
	SMB.NO3_NM_AVG,
	SMB.TKN_NM_AVG,
	SMB.NOX_NM_AVG,
	SMB.TIN_NM_AVG,
	SMB.TN_NM_AVG,
	SMB.PO4_PM_AVG,
	SMB.TP_PM_AVG,
	SMB.TIN_PO4_MMR_AVG,
	SMB.TN_TP_MMR_AVG,
	ST.CMMVIEW	VIEW_NO
FROM
	(SELECT	SITE_ID,
	YEAR(MDATE)	 	YR,
	D_CODE			D_CODE,
	COUNT(*)		TOTAL,
	AVG(TEMPER) 		TEMPER_AVG,
	AVG(PH_SC) 		PH_SC_AVG,
	AVG(SAL) 		SAL_AVG,
	AVG(COND) 		COND_AVG,
	AVG(DO)			DO_AVG,
	AVG(DO_SAT) 		DO_SAT_AVG,
	AVG(FLSCUFA)		FLSCUFA_AVG,
	AVG(TURB_SC) 		TURB_SC_AVG,
	AVG(PAR)		PAR_AVG,
	AVG(BOD5) 		BOD5_AVG,
	EXP(AVG(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)))	FC_AVG,
	EXP(AVG(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)))	ECOLI_AVG,
	AVG(PH_M) 		PH_M_AVG,
	AVG(TURB_M) 		TURB_M_AVG,
	AVG(NH4) 		NH4_AVG,
	AVG(NO2) 		NO2_AVG,
	AVG(NO3) 		NO3_AVG,
	AVG(TKN_S) 		TKN_S_AVG,
	AVG(TKN_P) 		TKN_P_AVG,
	AVG(TKN_SP) 		TKN_SP_AVG,
	AVG(PO4) 		PO4_AVG,
	AVG(TP_S) 		TP_S_AVG,
	AVG(TP_P) 		TP_P_AVG,
	AVG(TP_SP) 		TP_SP_AVG,
	AVG(SIO2) 		SIO2_AVG,
	AVG(SS) 			SS_AVG,
	AVG(TVS) 		TVS_AVG,
	AVG(CHL) 		CHL_AVG,
	AVG(PHAE) 		PHAE_AVG,
	AVG(SOL_RAD) 		SOL_RAD_AVG,
	AVG(AIR_TEMP) 		AIR_TEMP_AVG,
	AVG(WIND_SP) 		WIND_SP_AVG,
	AVG(SD)	 		SD_AVG,
	AVG(NH3) 		NH3_AVG,
	AVG(TIN) 		TIN_AVG,
	AVG(TN) 			TN_AVG,
	AVG(NH4_NM)		NH4_NM_AVG,
	AVG(NO2_NM)		NO2_NM_AVG,
	AVG(NO3_NM)		NO3_NM_AVG,
	AVG(TKN_NM)		TKN_NM_AVG,
	AVG(NOX_NM)		NOX_NM_AVG,
	AVG(TIN_NM)		TIN_NM_AVG,
	AVG(TN_NM) 		TN_NM_AVG,
	AVG(PO4_PM)		PO4_PM_AVG,
	AVG(TP_PM)		TP_PM_AVG,
	AVG(TIN_PO4_MMR)	TIN_PO4_MMR_AVG,
	AVG(TN_TP_MMR)		TN_TP_MMR_AVG,
	COUNT(L_BOD5)	L_BOD5_CNT,
	COUNT(L_FC)	L_FC_CNT,
	COUNT(L_ECOLI)	L_ECOLI_CNT,
	COUNT(L_PH_M)	L_PH_M_CNT,
	COUNT(L_TURB_M)	L_TURB_M_CNT,
	COUNT(L_NH4)	L_NH4_CNT,
	COUNT(L_NO2)	L_NO2_CNT,
	COUNT(L_NO3)	L_NO3_CNT,
	COUNT(L_TKN_S)	L_TKN_S_CNT,
	COUNT(L_TKN_P)	L_TKN_P_CNT,
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,
	COUNT(L_PO4)	L_PO4_CNT,
	COUNT(L_TP_S)	L_TP_S_CNT,
	COUNT(L_TP_P)	L_TP_P_CNT,
	COUNT(L_TP_SP)	L_TP_SP_CNT,
	COUNT(L_SIO2)	L_SIO2_CNT,
	COUNT(L_SS)	L_SS_CNT,
	COUNT(L_TVS)	L_TVS_CNT,
	COUNT(L_CHL)	L_CHL_CNT,
	COUNT(L_PHAE)	L_PHAE_CNT
FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B) SMB
GROUP BY SITE_ID, YEAR(MDATE), D_CODE
)	SMB
JOIN	WPG.MSTATION	ST	ON SMB.SITE_ID = ST.SITE_ID
JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_WATER_SMB_AVG2 source

CREATE VIEW WPG.MARINE_WATER_SMB_AVG2 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	YR,
	D_CODE,
	TOTAL,
	TEMPER,
	PH_SC,
	SAL,
	COND,
	DO,
	DO_SAT,
	FLSCUFA,		TURB_SC,
    PAR,
	BOD5,
	FC,
	ECOLI,
	NH4,
	NO2,
	NO3,
	TKN_S,
	TKN_P,
	TKN_SP,
	PO4,
	TP_S,
	TP_P,
	TP_SP,
	SIO2,
	SS,
	TVS,
	CHL,
	PHAE,
	SOL_RAD,
	AIR_TEMP,
	WIND_SP,
	SD,
	NH3,
	TIN,
	TN
FROM 	WPG.MARINE_WATER_SMB_AVG1
WHERE	VIEW_NO >= 2
AND 		YR <= YEAR(GETDATE());


-- WPG.MARINE_WATER_SMB_MAX1A source

CREATE  VIEW WPG.MARINE_WATER_SMB_MAX1A AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	SMB.YR,
	SMB.D_CODE,		
	SMB.TOTAL,
	SMB.TEMPER_MAX,
	SMB.PH_SC_MAX,
	SMB.SAL_MAX,
	SMB.COND_MAX,
	SMB.DO_MAX,
	SMB.DO_SAT_MAX,
	SMB.FLSCUFA_MAX,
	SMB.TURB_SC_MAX,
	SMB.PAR_MAX,
	CASE WHEN L_BOD5_CNT = TOTAL THEN '<' ELSE NULL END	L_BOD5_MAX,	BOD5_MAX,
	CASE WHEN L_FC_CNT = TOTAL THEN '<' ELSE NULL END	L_FC_MAX,	FC_MAX,
	CASE WHEN L_ECOLI_CNT = TOTAL THEN '<' ELSE NULL END	L_ECOLI_MAX,	ECOLI_MAX,
	CASE WHEN L_PH_M_CNT = TOTAL THEN '<' ELSE NULL END	L_PH_M_MAX,	PH_M_MAX,
	CASE WHEN L_TURB_M_CNT = TOTAL THEN '<' ELSE NULL END	L_TURB_M_MAX,	TURB_M_MAX,
	CASE WHEN L_NH4_CNT = TOTAL THEN '<' ELSE NULL END	L_NH4_MAX,	NH4_MAX,
	CASE WHEN L_NO2_CNT = TOTAL THEN '<' ELSE NULL END	L_NO2_MAX,	NO2_MAX,
	CASE WHEN L_NO3_CNT = TOTAL THEN '<' ELSE NULL END	L_NO3_MAX,	NO3_MAX,
	CASE WHEN L_TKN_S_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_S_MAX,	TKN_S_MAX,
	CASE WHEN L_TKN_P_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_P_MAX,	TKN_P_MAX,
	CASE WHEN L_TKN_SP_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_SP_MAX,	TKN_SP_MAX,
	CASE WHEN L_PO4_CNT = TOTAL THEN '<' ELSE NULL END	L_PO4_MAX,	PO4_MAX,
	CASE WHEN L_TP_S_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_S_MAX,	TP_S_MAX,
	CASE WHEN L_TP_P_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_P_MAX,	TP_P_MAX,
	CASE WHEN L_TP_SP_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_SP_MAX,	TP_SP_MAX,
	CASE WHEN L_SIO2_CNT = TOTAL THEN '<' ELSE NULL END	L_SIO2_MAX,	SIO2_MAX,
	CASE WHEN L_SS_CNT = TOTAL THEN '<' ELSE NULL END	L_SS_MAX,	SS_MAX,
	CASE WHEN L_TVS_CNT = TOTAL THEN '<' ELSE NULL END	L_TVS_MAX,	TVS_MAX,
	CASE WHEN L_CHL_CNT = TOTAL THEN '<' ELSE NULL END	L_CHL_MAX,	CHL_MAX,
	CASE WHEN L_PHAE_CNT = TOTAL THEN '<' ELSE NULL END	L_PHAE_MAX,	PHAE_MAX,
	SMB.SOL_RAD_MAX,
	SMB.AIR_TEMP_MAX,
	SMB.WIND_SP_MAX,
	SMB.SD_MAX,
	SMB.NH3_MAX,
	SMB.TIN_MAX,
	SMB.TN_MAX,
	SMB.NH4_NM_MAX,
	SMB.NO2_NM_MAX,
	SMB.NO3_NM_MAX,
	SMB.TKN_NM_MAX,
	SMB.NOX_NM_MAX,
	SMB.TIN_NM_MAX,
	SMB.TN_NM_MAX,
	SMB.PO4_PM_MAX,
	SMB.TP_PM_MAX,
	SMB.TIN_PO4_MMR_MAX,
	SMB.TN_TP_MMR_MAX,
	ST.CMMVIEW	VIEW_NO
FROM
	(SELECT	SITE_ID,
	YEAR(MDATE)	 	YR,
	D_CODE			D_CODE,
	COUNT(*)		TOTAL,
	MAX(TEMPER) 		TEMPER_MAX,
	MAX(PH_SC) 		PH_SC_MAX,
	MAX(SAL) 		SAL_MAX,
	MAX(COND) 		COND_MAX,
	MAX(DO)			DO_MAX,
	MAX(DO_SAT) 		DO_SAT_MAX,
	MAX(FLSCUFA)		FLSCUFA_MAX,
	MAX(TURB_SC) 		TURB_SC_MAX,
	MAX(PAR)		PAR_MAX,
	MAX(BOD5) 		BOD5_MAX,
	EXP(MAX(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)))	FC_MAX,
	EXP(MAX(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)))	ECOLI_MAX,
	MAX(PH_M) 		PH_M_MAX,
	MAX(TURB_M) 		TURB_M_MAX,
	MAX(NH4) 		NH4_MAX,
	MAX(NO2) 		NO2_MAX,
	MAX(NO3) 		NO3_MAX,
	MAX(TKN_S) 		TKN_S_MAX,
	MAX(TKN_P) 		TKN_P_MAX,
	MAX(TKN_SP) 		TKN_SP_MAX,
	MAX(PO4) 		PO4_MAX,
	MAX(TP_S) 		TP_S_MAX,
	MAX(TP_P) 		TP_P_MAX,
	MAX(TP_SP) 		TP_SP_MAX,
	MAX(SIO2) 		SIO2_MAX,
	MAX(SS) 			SS_MAX,
	MAX(TVS) 		TVS_MAX,
	MAX(CHL) 		CHL_MAX,
	MAX(PHAE) 		PHAE_MAX,
	MAX(SOL_RAD) 		SOL_RAD_MAX,
	MAX(AIR_TEMP) 		AIR_TEMP_MAX,
	MAX(WIND_SP) 		WIND_SP_MAX,
	MAX(SD)	 		SD_MAX,
	MAX(NH3) 		NH3_MAX,
	MAX(TIN) 		TIN_MAX,
	MAX(TN) 			TN_MAX,
	MAX(NH4_NM)		NH4_NM_MAX,
	MAX(NO2_NM)		NO2_NM_MAX,
	MAX(NO3_NM)		NO3_NM_MAX,
	MAX(TKN_NM)		TKN_NM_MAX,
	MAX(NOX_NM)		NOX_NM_MAX,
	MAX(TIN_NM)		TIN_NM_MAX,
	MAX(TN_NM) 		TN_NM_MAX,
	MAX(PO4_PM)		PO4_PM_MAX,
	MAX(TP_PM)		TP_PM_MAX,
	MAX(TIN_PO4_MMR)	TIN_PO4_MMR_MAX,
	MAX(TN_TP_MMR)		TN_TP_MMR_MAX,
	COUNT(L_BOD5)	L_BOD5_CNT,
	COUNT(L_FC)	L_FC_CNT,
	COUNT(L_ECOLI)	L_ECOLI_CNT,
	COUNT(L_PH_M)	L_PH_M_CNT,
	COUNT(L_TURB_M)	L_TURB_M_CNT,
	COUNT(L_NH4)	L_NH4_CNT,
	COUNT(L_NO2)	L_NO2_CNT,
	COUNT(L_NO3)	L_NO3_CNT,
	COUNT(L_TKN_S)	L_TKN_S_CNT,
	COUNT(L_TKN_P)	L_TKN_P_CNT,
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,
	COUNT(L_PO4)	L_PO4_CNT,
	COUNT(L_TP_S)	L_TP_S_CNT,
	COUNT(L_TP_P)	L_TP_P_CNT,
	COUNT(L_TP_SP)	L_TP_SP_CNT,
	COUNT(L_SIO2)	L_SIO2_CNT,
	COUNT(L_SS)	L_SS_CNT,
	COUNT(L_TVS)	L_TVS_CNT,
	COUNT(L_CHL)	L_CHL_CNT,
	COUNT(L_PHAE)	L_PHAE_CNT
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B) SMB
GROUP BY SITE_ID, YEAR(MDATE), D_CODE
)	SMB
JOIN	WPG.MSTATION	ST	ON SMB.SITE_ID = ST.SITE_ID
JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_WATER_SMB_MIN1A source

CREATE  VIEW WPG.MARINE_WATER_SMB_MIN1A AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	SMB.YR,
	SMB.D_CODE,		
	SMB.TOTAL,
	SMB.TEMPER_MIN,
	SMB.PH_SC_MIN,
	SMB.SAL_MIN,
	SMB.COND_MIN,
	SMB.DO_MIN,
	SMB.DO_SAT_MIN,
	SMB.FLSCUFA_MIN,
	SMB.TURB_SC_MIN,
	SMB.PAR_MIN,
	CASE WHEN L_BOD5_CNT =0 THEN NULL ELSE '<' END	L_BOD5_MIN,	BOD5_MIN,
	CASE WHEN L_FC_CNT =0 THEN NULL ELSE '<' END	L_FC_MIN,	FC_MIN,
	CASE WHEN L_ECOLI_CNT =0 THEN NULL ELSE '<' END	L_ECOLI_MIN,	ECOLI_MIN,
	CASE WHEN L_PH_M_CNT =0 THEN NULL ELSE '<' END	L_PH_M_MIN,	PH_M_MIN,
	CASE WHEN L_TURB_M_CNT =0 THEN NULL ELSE '<' END	L_TURB_M_MIN,	TURB_M_MIN,
	CASE WHEN L_NH4_CNT =0 THEN NULL ELSE '<' END	L_NH4_MIN,	NH4_MIN,
	CASE WHEN L_NO2_CNT =0 THEN NULL ELSE '<' END	L_NO2_MIN,	NO2_MIN,
	CASE WHEN L_NO3_CNT =0 THEN NULL ELSE '<' END	L_NO3_MIN,	NO3_MIN,
	CASE WHEN L_TKN_S_CNT =0 THEN NULL ELSE '<' END	L_TKN_S_MIN,	TKN_S_MIN,
	CASE WHEN L_TKN_P_CNT =0 THEN NULL ELSE '<' END	L_TKN_P_MIN,	TKN_P_MIN,
	CASE WHEN L_TKN_SP_CNT =0 THEN NULL ELSE '<' END	L_TKN_SP_MIN,	TKN_SP_MIN,
	CASE WHEN L_PO4_CNT =0 THEN NULL ELSE '<' END	L_PO4_MIN,	PO4_MIN,
	CASE WHEN L_TP_S_CNT =0 THEN NULL ELSE '<' END	L_TP_S_MIN,	TP_S_MIN,
	CASE WHEN L_TP_P_CNT =0 THEN NULL ELSE '<' END	L_TP_P_MIN,	TP_P_MIN,
	CASE WHEN L_TP_SP_CNT =0 THEN NULL ELSE '<' END	L_TP_SP_MIN,	TP_SP_MIN,
	CASE WHEN L_SIO2_CNT =0 THEN NULL ELSE '<' END	L_SIO2_MIN,	SIO2_MIN,
	CASE WHEN L_SS_CNT =0 THEN NULL ELSE '<' END	L_SS_MIN,	SS_MIN,
	CASE WHEN L_TVS_CNT =0 THEN NULL ELSE '<' END	L_TVS_MIN,	TVS_MIN,
	CASE WHEN L_CHL_CNT =0 THEN NULL ELSE '<' END	L_CHL_MIN,	CHL_MIN,
	CASE WHEN L_PHAE_CNT =0 THEN NULL ELSE '<' END	L_PHAE_MIN,	PHAE_MIN,
	SMB.SOL_RAD_MIN,
	SMB.AIR_TEMP_MIN,
	SMB.WIND_SP_MIN,
	SMB.SD_MIN,
	SMB.NH3_MIN,
	SMB.TIN_MIN,
	SMB.TN_MIN,
	SMB.NH4_NM_MIN,
	SMB.NO2_NM_MIN,
	SMB.NO3_NM_MIN,
	SMB.TKN_NM_MIN,
	SMB.NOX_NM_MIN,
	SMB.TIN_NM_MIN,
	SMB.TN_NM_MIN,
	SMB.PO4_PM_MIN,
	SMB.TP_PM_MIN,
	SMB.TIN_PO4_MMR_MIN,
	SMB.TN_TP_MMR_MIN,
	ST.CMMVIEW	VIEW_NO
FROM
	(SELECT	SITE_ID,
	YEAR(MDATE)	 	YR,
	D_CODE			D_CODE,
	COUNT(*)		TOTAL,
	MIN(TEMPER) 		TEMPER_MIN,
	MIN(PH_SC) 		PH_SC_MIN,
	MIN(SAL) 		SAL_MIN,
	MIN(COND) 		COND_MIN,
	MIN(DO)			DO_MIN,
	MIN(DO_SAT) 		DO_SAT_MIN,
	MIN(FLSCUFA)		FLSCUFA_MIN,
	MIN(TURB_SC) 		TURB_SC_MIN,
	MIN(PAR)		PAR_MIN,
	MIN(BOD5) 		BOD5_MIN,
	EXP(MIN(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)))	FC_MIN,
	EXP(MIN(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)))	ECOLI_MIN,
	MIN(PH_M) 		PH_M_MIN,
	MIN(TURB_M) 		TURB_M_MIN,
	MIN(NH4) 		NH4_MIN,
	MIN(NO2) 		NO2_MIN,
	MIN(NO3) 		NO3_MIN,
	MIN(TKN_S) 		TKN_S_MIN,
	MIN(TKN_P) 		TKN_P_MIN,
	MIN(TKN_SP) 		TKN_SP_MIN,
	MIN(PO4) 		PO4_MIN,
	MIN(TP_S) 		TP_S_MIN,
	MIN(TP_P) 		TP_P_MIN,
	MIN(TP_SP) 		TP_SP_MIN,
	MIN(SIO2) 		SIO2_MIN,
	MIN(SS) 			SS_MIN,
	MIN(TVS) 		TVS_MIN,
	MIN(CHL) 		CHL_MIN,
	MIN(PHAE) 		PHAE_MIN,
	MIN(SOL_RAD) 		SOL_RAD_MIN,
	MIN(AIR_TEMP) 		AIR_TEMP_MIN,
	MIN(WIND_SP) 		WIND_SP_MIN,
	MIN(SD)	 		SD_MIN,
	MIN(NH3) 		NH3_MIN,
	MIN(TIN) 		TIN_MIN,
	MIN(TN) 			TN_MIN,
	MIN(NH4_NM)		NH4_NM_MIN,
	MIN(NO2_NM)		NO2_NM_MIN,
	MIN(NO3_NM)		NO3_NM_MIN,
	MIN(TKN_NM)		TKN_NM_MIN,
	MIN(NOX_NM)		NOX_NM_MIN,
	MIN(TIN_NM)		TIN_NM_MIN,
	MIN(TN_NM) 		TN_NM_MIN,
	MIN(PO4_PM)		PO4_PM_MIN,
	MIN(TP_PM)		TP_PM_MIN,
	MIN(TIN_PO4_MMR)	TIN_PO4_MMR_MIN,
	MIN(TN_TP_MMR)		TN_TP_MMR_MIN,
	COUNT(L_BOD5)	L_BOD5_CNT,
	COUNT(L_FC)	L_FC_CNT,
	COUNT(L_ECOLI)	L_ECOLI_CNT,
	COUNT(L_PH_M)	L_PH_M_CNT,
	COUNT(L_TURB_M)	L_TURB_M_CNT,
	COUNT(L_NH4)	L_NH4_CNT,
	COUNT(L_NO2)	L_NO2_CNT,
	COUNT(L_NO3)	L_NO3_CNT,
	COUNT(L_TKN_S)	L_TKN_S_CNT,
	COUNT(L_TKN_P)	L_TKN_P_CNT,
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,
	COUNT(L_PO4)	L_PO4_CNT,
	COUNT(L_TP_S)	L_TP_S_CNT,
	COUNT(L_TP_P)	L_TP_P_CNT,
	COUNT(L_TP_SP)	L_TP_SP_CNT,
	COUNT(L_SIO2)	L_SIO2_CNT,
	COUNT(L_SS)	L_SS_CNT,
	COUNT(L_TVS)	L_TVS_CNT,
	COUNT(L_CHL)	L_CHL_CNT,
	COUNT(L_PHAE)	L_PHAE_CNT
FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B) SMB
GROUP BY SITE_ID, YEAR(MDATE), D_CODE
)	SMB
JOIN	WPG.MSTATION	ST	ON SMB.SITE_ID = ST.SITE_ID
JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_WATER_STATISTICS10A1 source

CREATE VIEW WPG.MARINE_WATER_STATISTICS10A1
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, ST.MW_NAME AS STATION, 
                            SMB.DISP_STATS, SMB.TOTAL, SMB.YR, SMB.D_CODE, SMB.TEMPER, SMB.PH_SC, SMB.SAL, SMB.COND, 
                            SMB.DO, SMB.DO_SAT, SMB.FLSCUFA, SMB.TURB_SC, SMB.PAR, SMB.L_BOD5, SMB.BOD5, SMB.L_FC, SMB.FC, 
                            SMB.L_ECOLI, SMB.ECOLI, SMB.L_PH_M, SMB.PH_M, SMB.L_TURB_M, SMB.TURB_M, SMB.L_NH4, SMB.NH4, 
                            SMB.L_NO2, SMB.NO2, SMB.L_NO3, SMB.NO3, SMB.L_TKN_S, SMB.TKN_S, SMB.L_TKN_P, SMB.TKN_P, 
                            SMB.L_TKN_SP, SMB.TKN_SP, SMB.L_PO4, SMB.PO4, SMB.L_TP_S, SMB.TP_S, SMB.L_TP_P, SMB.TP_P, 
                            SMB.L_TP_SP, SMB.TP_SP, SMB.L_SIO2, SMB.SIO2, SMB.L_SS, SMB.SS, SMB.L_TVS, SMB.TVS, SMB.L_CHL, 
                            SMB.CHL, SMB.L_PHAE, SMB.PHAE, SMB.TIN, SMB.TN, SMB.NH3, SMB.SOL_RAD, SMB.AIR_TEMP, 
                            SMB.WIND_SP, NULL AS WIND_DIR, NULL AS SEA_COND, NULL AS SEA_COL, NULL AS FISH_KILL, SMB.SD, NULL 
                            AS WEATHER, SMB.NH4_NM, SMB.NO2_NM, SMB.NO3_NM, SMB.TKN_NM, SMB.NOX_NM, SMB.TIN_NM, 
                            SMB.TN_NM, SMB.PO4_PM, SMB.TP_PM, SMB.TIN_PO4_MMR, SMB.TN_TP_MMR, SMB.SITE_ID, SMB.DISP_SEQ, 
                            ST.CMMVIEW AS VIEW_NO
FROM              WPG.MW_STATISTICS10A AS SMB INNER JOIN
                            WPG.MSTATION AS ST ON SMB.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_WATER_SUMMARY1 source

CREATE  VIEW WPG.MARINE_WATER_SUMMARY1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	AV.STATION,
	AV.YR,
	AV.D_CODE,		
	AV.TOTAL,
	AV.TEMPER_AVG,
	AV.PH_SC_AVG,
	AV.SAL_AVG,
	AV.COND_AVG,
	AV.DO_AVG,
	AV.DO_SAT_AVG,
	AV.FLSCUFA_AVG,
	AV.TURB_SC_AVG,
	AV.PAR_AVG,
	AV.L_BOD5_AVG,	AV.BOD5_AVG,
	AV.L_FC_AVG,	AV.FC_AVG,
	AV.L_ECOLI_AVG,	AV.ECOLI_AVG,
	AV.L_PH_M_AVG,	AV.PH_M_AVG,
	AV.L_TURB_M_AVG,	AV.TURB_M_AVG,
	AV.L_NH4_AVG,	AV.NH4_AVG,
	AV.L_NO2_AVG,	AV.NO2_AVG,
	AV.L_NO3_AVG,	AV.NO3_AVG,
	AV.L_TKN_S_AVG,	AV.TKN_S_AVG,
	AV.L_TKN_P_AVG,	AV.TKN_P_AVG,
	AV.L_TKN_SP_AVG,	AV.TKN_SP_AVG,
	AV.L_PO4_AVG,	AV.PO4_AVG,
	AV.L_TP_S_AVG,	AV.TP_S_AVG,
	AV.L_TP_P_AVG,	AV.TP_P_AVG,
	AV.L_TP_SP_AVG,	AV.TP_SP_AVG,
	AV.L_SIO2_AVG,	AV.SIO2_AVG,
	AV.L_SS_AVG,	AV.SS_AVG,
	AV.L_TVS_AVG,	AV.TVS_AVG,
	AV.L_CHL_AVG,	AV.CHL_AVG,
	AV.L_PHAE_AVG,	AV.PHAE_AVG,
	AV.SOL_RAD_AVG,
	AV.AIR_TEMP_AVG,
	AV.WIND_SP_AVG,
	AV.SD_AVG,
	AV.NH3_AVG,
	AV.TIN_AVG,
	AV.TN_AVG,
	AV.NH4_NM_AVG,
	AV.NO2_NM_AVG,
	AV.NO3_NM_AVG,
	AV.TKN_NM_AVG,
	AV.NOX_NM_AVG,
	AV.TIN_NM_AVG,
	AV.TN_NM_AVG,
	AV.PO4_PM_AVG,
	AV.TP_PM_AVG,
	AV.TIN_PO4_MMR_AVG,
	AV.TN_TP_MMR_AVG,
	MI.TEMPER_MIN,
	MI.PH_SC_MIN,
	MI.SAL_MIN,
	MI.COND_MIN,
	MI.DO_MIN,
	MI.DO_SAT_MIN,
	MI.FLSCUFA_MIN,
	MI.TURB_SC_MIN,
	MI.PAR_MIN,
	MI.L_BOD5_MIN,	MI.BOD5_MIN,
	MI.L_FC_MIN,	MI.FC_MIN,
	MI.L_ECOLI_MIN,	MI.ECOLI_MIN,
	MI.L_PH_M_MIN,	MI.PH_M_MIN,
	MI.L_TURB_M_MIN,	MI.TURB_M_MIN,
	MI.L_NH4_MIN,	MI.NH4_MIN,
	MI.L_NO2_MIN,	MI.NO2_MIN,
	MI.L_NO3_MIN,	MI.NO3_MIN,
	MI.L_TKN_S_MIN,	MI.TKN_S_MIN,
	MI.L_TKN_P_MIN,	MI.TKN_P_MIN,
	MI.L_TKN_SP_MIN,	MI.TKN_SP_MIN,
	MI.L_PO4_MIN,	MI.PO4_MIN,
	MI.L_TP_S_MIN,	MI.TP_S_MIN,
	MI.L_TP_P_MIN,	MI.TP_P_MIN,
	MI.L_TP_SP_MIN,	MI.TP_SP_MIN,
	MI.L_SIO2_MIN,	MI.SIO2_MIN,
	MI.L_SS_MIN,	MI.SS_MIN,
	MI.L_TVS_MIN,	MI.TVS_MIN,
	MI.L_CHL_MIN,	MI.CHL_MIN,
	MI.L_PHAE_MIN,	MI.PHAE_MIN,
	MI.SOL_RAD_MIN,
	MI.AIR_TEMP_MIN,
	MI.WIND_SP_MIN,
	MI.SD_MIN,
	MI.NH3_MIN,
	MI.TIN_MIN,
	MI.TN_MIN,
	MI.NH4_NM_MIN,
	MI.NO2_NM_MIN,
	MI.NO3_NM_MIN,
	MI.TKN_NM_MIN,
	MI.NOX_NM_MIN,
	MI.TIN_NM_MIN,
	MI.TN_NM_MIN,
	MI.PO4_PM_MIN,
	MI.TP_PM_MIN,
	MI.TIN_PO4_MMR_MIN,
	MI.TN_TP_MMR_MIN,
	MX.TEMPER_MAX,
	MX.PH_SC_MAX,
	MX.SAL_MAX,
	MX.COND_MAX,
	MX.DO_MAX,
	MX.DO_SAT_MAX,
	MX.FLSCUFA_MAX,
	MX.TURB_SC_MAX,
	MX.PAR_MAX,
	MX.L_BOD5_MAX,	MX.BOD5_MAX,
	MX.L_FC_MAX,	MX.FC_MAX,
	MX.L_ECOLI_MAX,	MX.ECOLI_MAX,
	MX.L_PH_M_MAX,	MX.PH_M_MAX,
	MX.L_TURB_M_MAX,	MX.TURB_M_MAX,
	MX.L_NH4_MAX,	MX.NH4_MAX,
	MX.L_NO2_MAX,	MX.NO2_MAX,
	MX.L_NO3_MAX,	MX.NO3_MAX,
	MX.L_TKN_S_MAX,	MX.TKN_S_MAX,
	MX.L_TKN_P_MAX,	MX.TKN_P_MAX,
	MX.L_TKN_SP_MAX,	MX.TKN_SP_MAX,
	MX.L_PO4_MAX,	MX.PO4_MAX,
	MX.L_TP_S_MAX,	MX.TP_S_MAX,
	MX.L_TP_P_MAX,	MX.TP_P_MAX,
	MX.L_TP_SP_MAX,	MX.TP_SP_MAX,
	MX.L_SIO2_MAX,	MX.SIO2_MAX,
	MX.L_SS_MAX,	MX.SS_MAX,
	MX.L_TVS_MAX,	MX.TVS_MAX,
	MX.L_CHL_MAX,	MX.CHL_MAX,
	MX.L_PHAE_MAX,	MX.PHAE_MAX,
	MX.SOL_RAD_MAX,
	MX.AIR_TEMP_MAX,
	MX.WIND_SP_MAX,
	MX.SD_MAX,
	MX.NH3_MAX,
	MX.TIN_MAX,
	MX.TN_MAX,
	MX.NH4_NM_MAX,
	MX.NO2_NM_MAX,
	MX.NO3_NM_MAX,
	MX.TKN_NM_MAX,
	MX.NOX_NM_MAX,
	MX.TIN_NM_MAX,
	MX.TN_NM_MAX,
	MX.PO4_PM_MAX,
	MX.TP_PM_MAX,
	MX.TIN_PO4_MMR_MAX,
	MX.TN_TP_MMR_MAX,
	ST.CMMVIEW	VIEW_NO
FROM    WPG.MARINE_WATER_AVG1A  AV
LEFT OUTER JOIN	WPG.MARINE_WATER_MIN1A	MI	ON AV.STATION 	= MI.STATION	AND AV.YR = MI.YR   AND AV.D_CODE = MI.D_CODE
LEFT OUTER JOIN	WPG.MARINE_WATER_MAX1A	MX	ON AV.STATION 	= MX.STATION	AND AV.YR = MX.YR   AND AV.D_CODE = MX.D_CODE
JOIN	WPG.MSTATION	ST	ON AV.STATION = ST.MW_NAME
JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_WATER_VISIT1 source

CREATE VIEW WPG.MARINE_WATER_VISIT1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO	SAM_NO
FROM 	WPG.MW_VISIT	VI
JOIN	WPG.MSTATION	ST		ON VI.SITE_ID		= ST.SITE_ID
JOIN	WPG.WPCO_SZ	SZ		ON ST.SZ_ID		= SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ		ON SZ.WCZ_ID		= CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ		ON CZ.ZONE_ID 		= TZ.ZONE_ID;


-- WPG.MARINE_WATER_WQO_RAW1 source

CREATE VIEW WPG.MARINE_WATER_WQO_RAW1 AS
SELECT	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	ST.MW_NAME	STATION,
	V.MDATE,
	V.STIME,
	V.SAMPLE_NO,
	S.DOS,
	M.DOM,
	B.DOB,
	C.DOC,
	A.DOA,
	N.TIN,
	U.NH3,
	E.ECOLI,
	OB.MIN_DOS,
	OB.MIN_DOS_PC,
	OB.MIN_DOM,
	OB.MIN_DOM_PC,
	OB.MIN_DOB,
	OB.MIN_DOB_PC,
	OB.MIN_DOC,
	OB.MIN_DOC_PC,
	OB.MIN_DOA,
	OB.MIN_DOA_PC,
	OB.MAX_TIN_AAM,
	OB.MAX_NH3_AAM,
	OB.MAX_ECOLI_AGM,
	CASE SIGN(S.DOS - MIN_DOS) WHEN 1 THEN 'YES' WHEN 0 THEN 'YES' WHEN -1 THEN 'NO' ELSE NULL END		MEET_DOS,
	CASE SIGN(M.DOM - MIN_DOM) WHEN 1 THEN 'YES' WHEN 0 THEN 'YES' WHEN -1 THEN 'NO' ELSE NULL END	MEET_DOM,
	CASE SIGN(B.DOB - MIN_DOB) WHEN 1 THEN 'YES' WHEN 0 THEN 'YES' WHEN -1 THEN 'NO' ELSE NULL END		MEET_DOB,
	CASE SIGN(C.DOC - MIN_DOC) WHEN 1 THEN 'YES' WHEN 0 THEN 'YES' WHEN -1 THEN 'NO' ELSE NULL END		MEET_DOC,
	CASE SIGN(A.DOA - MIN_DOA) WHEN 1 THEN 'YES' WHEN 0 THEN 'YES' WHEN -1 THEN 'NO' ELSE NULL END		MEET_DOA
FROM	WPG.MW_VISIT	V
LEFT OUTER JOIN	(
	SELECT	MWVISIT_ID,
		DO		DOS
	FROM	WPG.MW_SEACAT
	WHERE	DEPTH_CODE = 'S'
	)	S	ON	V.MWVISIT_ID = S.MWVISIT_ID
LEFT OUTER JOIN	(
	SELECT	MWVISIT_ID,
		DO		DOM
	FROM	WPG.MW_SEACAT
	WHERE	DEPTH_CODE = 'M'
	)	M	ON	V.MWVISIT_ID = M.MWVISIT_ID
LEFT OUTER JOIN	(
	SELECT	MWVISIT_ID,
		DO		DOB
	FROM	WPG.MW_SEACAT
	WHERE	DEPTH_CODE = 'B'
	)	B	ON	V.MWVISIT_ID = B.MWVISIT_ID
LEFT OUTER JOIN	(
	SELECT	MWVISIT_ID,
		AVG(DO)		DOC
	FROM	WPG.MW_SEACAT
	WHERE	DEPTH_CODE IN ('S', 'M')
	GROUP BY MWVISIT_ID
	)	C	ON	V.MWVISIT_ID = C.MWVISIT_ID
LEFT OUTER JOIN	(
	SELECT	MWVISIT_ID,
		AVG(DO)		DOA
	FROM	WPG.MW_SEACAT
	WHERE	DEPTH_CODE IN ('S', 'M', 'B')
	GROUP BY MWVISIT_ID
	)	A	ON	V.MWVISIT_ID = A.MWVISIT_ID
LEFT OUTER JOIN	(
	SELECT	MWVISIT_ID,
		AVG(TIN)		TIN
	FROM	WPG.MW_GLABN_CAL
	WHERE	DEPTH_CODE IN ('S', 'M', 'B')
	GROUP BY MWVISIT_ID
	)	N	ON	V.MWVISIT_ID = N.MWVISIT_ID
LEFT OUTER JOIN	(
	SELECT	MWVISIT_ID,
		AVG(NH3)		NH3
	FROM	WPG.MW_NH3
	WHERE	DEPTH_CODE IN ('S', 'M', 'B')
	GROUP BY MWVISIT_ID
	)	U	ON	V.MWVISIT_ID = U.MWVISIT_ID
LEFT OUTER JOIN	(
	SELECT	MWVISIT_ID,
		EXP(AVG(LOG(CASE ECOLI WHEN 0 THEN 1 ELSE ECOLI END)))		ECOLI
	FROM	WPG.MW_MLAB
	WHERE	DEPTH_CODE IN ('S', 'M', 'B')
	GROUP BY MWVISIT_ID
	)	E	ON	V.MWVISIT_ID = E.MWVISIT_ID
JOIN	WPG.MSTATION	ST	ON	V.SITE_ID = ST.SITE_ID
JOIN	WPG.MW_SZ_WQO	OB	ON	ST.SZ_ID = OB.SZ_ID
JOIN	WPG.WPCO_SZ	SZ	ON	ST.SZ_ID = SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ	ON	SZ.WCZ_ID = CZ.WCZ_ID
JOIN	WPG.TEN_ZONE	TZ	ON	CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.MARINE_WATER_WQO_SUM1 source

CREATE VIEW WPG.MARINE_WATER_WQO_SUM1 AS
SELECT	ZONE, 
	WCZ, 
	SUBZONE, 
	STATION,
	YR,
	TOTAL,
	N_DOS,
	M_DOS,
	PC_DOS,
	MIN_DOS,
	MIN_DOS_PC,
	COMPLY_DOS,
	N_DOM,
	M_DOM,
	PC_DOM,
	MIN_DOM,
	MIN_DOM_PC,
	COMPLY_DOM,
	N_DOB,
	M_DOB,
	PC_DOB,
	MIN_DOB,
	MIN_DOB_PC,
	COMPLY_DOB,
	N_DOC,
	M_DOC,
	PC_DOC,
	MIN_DOC,
	MIN_DOC_PC,
	COMPLY_DOC,
	N_DOA,
	M_DOA,
	PC_DOA,
	MIN_DOA
	MIN_DOA_PC,
	COMPLY_DOA,
	CASE 	WHEN COMPLY_DOS = 'FALSE'  
			OR COMPLY_DOM = 'FALSE' 
			OR COMPLY_DOB = 'FALSE' 
			OR COMPLY_DOC = 'FALSE' 
			OR COMPLY_DOA = 'FALSE' THEN 'FALSE' 
		 WHEN COMPLY_DOS = 'TRUE'  
			OR COMPLY_DOM = 'TRUE' 
			OR COMPLY_DOB = 'TRUE' 
			OR COMPLY_DOC = 'TRUE' 
			OR COMPLY_DOA = 'TRUE' THEN 'TRUE' 
	ELSE NULL END	COMPLY_DO,
	TIN,
	MAX_TIN_AAM,
	CASE SIGN(MAX_TIN_AAM - TIN) WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END	COMPLY_TIN,
	NH3,
	MAX_NH3_AAM,
	CASE SIGN(MAX_NH3_AAM - NH3) WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END	COMPLY_NH3,
	ECOLI,
	MAX_ECOLI_AGM,
	CASE SIGN(MAX_ECOLI_AGM - ECOLI) WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END	COMPLY_ECOLI
FROM	(
	SELECT	ZONE, 
		WCZ, 
		SUBZONE, 
		STATION,
		YR,
		TOTAL,
		N_DOS,
		CASE WHEN MIN_DOS IS NULL THEN NULL ELSE M_DOS END		M_DOS,
		CASE WHEN N_DOS <> 0 AND MIN_DOS IS NOT NULL THEN 100 * M_DOS / N_DOS ELSE NULL END	PC_DOS,
		CASE WHEN N_DOS <> 0 THEN 
			CASE SIGN(100 * M_DOS / N_DOS - MIN_DOS_PC) 
				WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END
			ELSE NULL END						COMPLY_DOS,
		N_DOM,
		CASE WHEN MIN_DOM IS NULL THEN NULL ELSE M_DOM END		M_DOM,
		CASE WHEN N_DOM <> 0 AND MIN_DOM IS NOT NULL THEN 100 * M_DOM / N_DOM ELSE NULL END	PC_DOM,
		CASE WHEN N_DOM <> 0 THEN 
			CASE SIGN(100 * M_DOM / N_DOM - MIN_DOM_PC) 
				WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END
			ELSE NULL END						COMPLY_DOM,
		N_DOB,
		CASE WHEN MIN_DOB IS NULL THEN NULL ELSE M_DOB END		M_DOB,
		CASE WHEN N_DOB <> 0 AND MIN_DOB IS NOT NULL THEN 100 * M_DOB / N_DOB ELSE NULL END	PC_DOB,
		CASE WHEN N_DOB <> 0 THEN 
			CASE SIGN(100 * M_DOB / N_DOB - MIN_DOB_PC) 
				WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END
			ELSE NULL END						COMPLY_DOB,
		N_DOC,
		CASE WHEN MIN_DOC IS NULL THEN NULL ELSE M_DOC END		M_DOC,
		CASE WHEN N_DOC <> 0 AND MIN_DOC IS NOT NULL THEN 100 * M_DOC / N_DOC ELSE NULL END	PC_DOC,
		CASE WHEN N_DOC <> 0 THEN 
			CASE SIGN(100 * M_DOC / N_DOC - MIN_DOC_PC) 
				WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END
			ELSE NULL END						COMPLY_DOC,
		N_DOA,
		CASE WHEN MIN_DOS IS NULL THEN NULL ELSE M_DOA END		M_DOA,
		CASE WHEN N_DOA <> 0 AND MIN_DOA IS NOT NULL THEN 100 * M_DOA / N_DOA ELSE NULL END	PC_DOA,
		CASE WHEN N_DOA <> 0 THEN 
			CASE SIGN(100 * M_DOA / N_DOA - MIN_DOA_PC) 
				WHEN 1 THEN 'TRUE' WHEN 0 THEN 'TRUE' WHEN -1 THEN 'FALSE' ELSE NULL END
			ELSE NULL END						COMPLY_DOA,
		TIN,
		NH3,
		ECOLI,
		MIN_DOS,
		MIN_DOS_PC,
		MIN_DOM,
		MIN_DOM_PC,
		MIN_DOB,
		MIN_DOB_PC,
		MIN_DOC,
		MIN_DOC_PC,
		MIN_DOA,
		MIN_DOA_PC,
		MAX_TIN_AAM,
		MAX_NH3_AAM,
		MAX_ECOLI_AGM	
	FROM	(
		SELECT	MAX(ZONE)	ZONE, 
			MAX(WCZ)	WCZ, 
			MAX(SUBZONE)	SUBZONE, 
			STATION,
			YEAR(MDATE)		YR,
			COUNT(*)		TOTAL,
			COUNT(DOS)		N_DOS,
			COUNT(CASE MEET_DOS WHEN 'YES' THEN 1 ELSE NULL END)	M_DOS,
			COUNT(DOM)		N_DOM,
			COUNT(CASE MEET_DOM WHEN 'YES' THEN 1 ELSE NULL END)	M_DOM,
			COUNT(DOB)		N_DOB,
			COUNT(CASE MEET_DOB WHEN 'YES' THEN 1 ELSE NULL END)	M_DOB,
			COUNT(DOC)		N_DOC,
			COUNT(CASE MEET_DOC WHEN 'YES' THEN 1 ELSE NULL END)	M_DOC,
			COUNT(DOA)		N_DOA,
			COUNT(CASE MEET_DOA WHEN 'YES' THEN 1 ELSE NULL END)	M_DOA,
			AVG(TIN)			TIN,
			AVG(NH3)		NH3,
			EXP(AVG(LOG10(CASE ECOLI WHEN 0 THEN 1 ELSE ECOLI END)))	ECOLI,
			MIN_DOS,
			MIN_DOS_PC,
			MIN_DOM,
			MIN_DOM_PC,
			MIN_DOB,
			MIN_DOB_PC,
			MIN_DOC,
			MIN_DOC_PC,
			MIN_DOA,
			MIN_DOA_PC,
			MAX_TIN_AAM,
			MAX_NH3_AAM,
			MAX_ECOLI_AGM
		FROM	WPG.MARINE_WATER_WQO_RAW1
		GROUP BY 	ZONE, WCZ, SUBZONE, STATION, YEAR(MDATE), MIN_DOS, MIN_DOS_PC, 
				MIN_DOM, MIN_DOM_PC, MIN_DOB, MIN_DOB_PC, MIN_DOC, MIN_DOC_PC, 
				MIN_DOA, MIN_DOA_PC, MAX_TIN_AAM, MAX_NH3_AAM, MAX_ECOLI_AGM
		)	A
	)	B;


-- WPG.MS_EPIC_HISTORICAL source

CREATE VIEW WPG.MS_EPIC_HISTORICAL
AS
SELECT         j.ZONE_NAME AS WCZ, f.MS_NAME AS STATNAME, a.MDATE, 
                          a.SAMPLE_NO AS SAM_NO, b.TYPE, c.L_NH, c.NH, c.L_TKN, c.TKN, c.L_TP, 
                          c.TP, c.L_TVS, c.TVS, c.L_TS, c.TS, c.L_COD, c.COD, c.L_SULPHIDE AS L_INS, 
                          c.SULPHIDE AS INS, c.L_TC, c.TC, c.L_CN, c.CN, b.L_AL, b.AL, 
                          b.L_ARSENIC AS L_ARS, b.ARSENIC AS ARS, b.L_BA, b.BA, b.L_B, b.B, b.L_CD, 
                          b.CD, b.L_CR, b.CR, b.L_CU, b.CU, b.L_FE, b.FE, b.L_HG, b.HG, b.L_MN, b.MN, 
                          b.L_NI, b.NI, b.L_PB, b.PB, b.L_ZN, b.ZN, b.L_V, b.V, b.L_AG, b.AG, 
                          b.MSM_DWR, k.L_PCB, k.PCB, d.L_FLUO, d.FLUO, d.L_PHEN, d.PHEN, 
                          d.L_ANTH, d.ANTH, d.L_FLUT, d.FLUT, d.L_PYRE, d.PYRE, d.L_CHRY, d.CHRY, 
                          d.L_BANT, d.BANT, d.L_ACEN, d.ACEN, d.L_ACPH, d.ACPH, d.L_BBFL, d.BBFL, 
                          d.L_BKFL, d.BKFL, d.L_BAPY, d.BAPY, d.L_BGPE, d.BGPE, d.L_DAAN, d.DAAN, 
                          d.L_INPY, d.INPY, e.EH, e.SZ_63 AS SZ63, l.SUM18PCB
FROM             WPG.MS_VISIT a LEFT OUTER JOIN
                          WPG.MS_GLABM b ON a.MSVISIT_ID = b.MSVISIT_ID LEFT OUTER JOIN
                          WPG.MS_GLABN c ON a.MSVISIT_ID = c.MSVISIT_ID AND 
                          b.TYPE = c.TYPE LEFT OUTER JOIN
                          WPG.MS_GLAB_PAH d ON a.MSVISIT_ID = d.MSVISIT_ID AND 
                          b.TYPE = d.TYPE LEFT OUTER JOIN
                          WPG.MS_PS e ON a.MSVISIT_ID = e.MSVISIT_ID LEFT OUTER JOIN
                          WPG.MSTATION f ON a.SITE_ID = f.SITE_ID LEFT OUTER JOIN
                          WPG.WPCO_SZ g ON f.SZ_ID = g.SZ_ID LEFT OUTER JOIN
                          WPG.WPCO_WCZ h ON g.WCZ_ID = h.WCZ_ID LEFT OUTER JOIN
                          WPG.TEN_ZONE j ON h.ZONE_ID = j.ZONE_ID LEFT OUTER JOIN
                          WPG.MS_GLAB_PCB k ON k.MSVISIT_ID = a.MSVISIT_ID AND 
                          b.TYPE = k.TYPE LEFT OUTER JOIN
                          WPG.MS_PCB_CAL l ON a.MSVISIT_ID = l.MSVISIT_ID AND b.TYPE = l.TYPE;


-- WPG.MS_PAH_CAL source

CREATE VIEW WPG.MS_PAH_CAL AS
SELECT 
	MSVISIT_ID,
	TYPE,
	L_FLUO,
	FLUO,
	L_PHEN,
	PHEN,
	L_ANTH,
	ANTH,
	L_FLUT,
	FLUT,
	L_PYRE,
	PYRE,
	L_CHRY,
	CHRY,
	L_BBFL,
	BBFL,
	L_BKFL,
	BKFL,
	L_BAPY,
	BAPY,
	L_BGPE,
	BGPE,
	L_ACPH,
	ACPH,
	L_ACEN,
	ACEN,
	L_DAAN,
	DAAN,
	L_BANT,
	BANT,
	L_INPY,
	INPY,
	L_NAPH,
	NAPH,
	L_PAH,
	PAH,
	CASE L_FLUO WHEN '<' THEN  FLUO/2 ELSE FLUO END
		+ CASE L_NAPH WHEN '<' THEN  NAPH/2 ELSE NAPH END
		+ CASE L_PHEN WHEN '<' THEN  PHEN/2 ELSE PHEN END
		+ CASE L_ACPH WHEN '<' THEN  ACPH/2 ELSE ACPH END
		+ CASE L_ANTH WHEN '<' THEN  ANTH/2 ELSE ANTH END
		+ CASE L_ACEN WHEN '<' THEN  ACEN/2 ELSE ACEN END
			SUM6LMPAH,
	CASE L_FLUT WHEN '<' THEN  FLUT/2 ELSE FLUT END
		+ CASE L_BBFL WHEN '<' THEN  BBFL/2 ELSE BBFL END
		+ CASE L_BGPE WHEN '<' THEN  BGPE/2 ELSE BGPE END
		+ CASE L_DAAN WHEN '<' THEN  DAAN/2 ELSE DAAN END
		+ CASE L_PYRE WHEN '<' THEN  PYRE/2 ELSE PYRE END
		+ CASE L_BKFL WHEN '<' THEN  BKFL/2 ELSE BKFL END
		+ CASE L_BANT WHEN '<' THEN  BANT/2 ELSE BANT END
		+ CASE L_CHRY WHEN '<' THEN  CHRY/2 ELSE CHRY END
		+ CASE L_BAPY WHEN '<' THEN  BAPY/2 ELSE BAPY END
		+ CASE L_INPY WHEN '<' THEN  INPY/2 ELSE INPY END
			 SUM10HMPAH,
	CASE L_FLUO WHEN '<' THEN  FLUO/2 ELSE FLUO END
		+ CASE L_NAPH WHEN '<' THEN  NAPH/2 ELSE NAPH END
		+ CASE L_PHEN WHEN '<' THEN  PHEN/2 ELSE PHEN END
		+ CASE L_ACPH WHEN '<' THEN  ACPH/2 ELSE ACPH END
		+ CASE L_ANTH WHEN '<' THEN  ANTH/2 ELSE ANTH END
		+ CASE L_ACEN WHEN '<' THEN  ACEN/2 ELSE ACEN END
		+ CASE L_FLUT WHEN '<' THEN  FLUT/2 ELSE FLUT END
		+ CASE L_BBFL WHEN '<' THEN  BBFL/2 ELSE BBFL END
		+ CASE L_BGPE WHEN '<' THEN  BGPE/2 ELSE BGPE END
		+ CASE L_DAAN WHEN '<' THEN  DAAN/2 ELSE DAAN END
		+ CASE L_PYRE WHEN '<' THEN  PYRE/2 ELSE PYRE END
		+ CASE L_BKFL WHEN '<' THEN  BKFL/2 ELSE BKFL END
		+ CASE L_BANT WHEN '<' THEN  BANT/2 ELSE BANT END
		+ CASE L_CHRY WHEN '<' THEN  CHRY/2 ELSE CHRY END
		+ CASE L_BAPY WHEN '<' THEN  BAPY/2 ELSE BAPY END
		+ CASE L_INPY WHEN '<' THEN  INPY/2 ELSE INPY END
			SUM16PAH
FROM	WPG.MS_GLAB_PAH;


-- WPG.MS_PCB_CAL source

CREATE VIEW WPG.MS_PCB_CAL AS
SELECT 
	MSVISIT_ID,
	TYPE,
	MSO_DWR,
	L_PCB,
	PCB,
	L_PCB8,
	PCB8,
	L_PCB18,
	PCB18,
	L_PCB28,
	PCB28,
	L_PCB31,
	PCB31,
	L_PCB44,
	PCB44,
	L_PCB52,
	PCB52,
	L_PCB66,
	PCB66,
	L_PCB77,
	PCB77,
	L_PCB81,
	PCB81,
	L_PCB101,
	PCB101,
	L_PCB105,
	PCB105,
	L_PCB114,
	PCB114,
	L_PCB118,
	PCB118,
	L_PCB123,
	PCB123,
	L_PCB126,
	PCB126,
	L_PCB128,
	PCB128,
	L_PCB138,
	PCB138,
	L_PCB149,
	PCB149,
	L_PCB153,
	PCB153,
	L_PCB156,
	PCB156,
	L_PCB157,
	PCB157,
	L_PCB167,
	PCB167,
	L_PCB169,
	PCB169,
	L_PCB170,
	PCB170,
	L_PCB180,
	PCB180,
	L_PCB187,
	PCB187,
	L_PCB189,
	PCB189,
	CASE L_PCB8  WHEN '<' THEN PCB8/2 ELSE PCB8 END
		+ CASE L_PCB18 WHEN '<' THEN  PCB18/2 ELSE PCB18 END
		+ CASE L_PCB28 WHEN '<' THEN  PCB28/2 ELSE PCB28 END
		+ CASE L_PCB44 WHEN '<' THEN  PCB44/2 ELSE PCB44 END
		+ CASE L_PCB52 WHEN '<' THEN  PCB52/2 ELSE PCB52 END
		+ CASE L_PCB66 WHEN '<' THEN  PCB66/2 ELSE PCB66 END
		+ CASE L_PCB77 WHEN '<' THEN  PCB77/2 ELSE PCB77 END
		+ CASE L_PCB101 WHEN '<' THEN  PCB101/2 ELSE PCB101 END
		+ CASE L_PCB105 WHEN '<' THEN  PCB105/2 ELSE PCB105 END
		+ CASE L_PCB118 WHEN '<' THEN  PCB118/2 ELSE PCB118 END
		+ CASE L_PCB126 WHEN '<' THEN  PCB126/2 ELSE PCB126 END
		+ CASE L_PCB128 WHEN '<' THEN  PCB128/2 ELSE PCB128 END
		+ CASE L_PCB138 WHEN '<' THEN  PCB138/2 ELSE PCB138 END
		+ CASE L_PCB153 WHEN '<' THEN  PCB153/2 ELSE PCB153 END
		+ CASE L_PCB169 WHEN '<' THEN  PCB169/2 ELSE PCB169 END
		+ CASE L_PCB170 WHEN '<' THEN  PCB170/2 ELSE PCB170 END
		+ CASE L_PCB180 WHEN '<' THEN  PCB180/2 ELSE PCB180 END
		+ CASE L_PCB187 WHEN '<' THEN  PCB187/2 ELSE PCB187 END
			SUM18PCB
FROM		WPG.MS_GLAB_PCB;


-- WPG.MT_A source

CREATE VIEW WPG.MT_A
AS
SELECT          VI.MWVISIT_ID, VI.SITE_ID, VI.MDATE, VI.STIME, VI.SAMPLE_NO AS SAM_NO, 'A' AS D_CODE, SC.TEMPER, 
                            SC.PH AS PH_SC, SC.SAL, SC.COND, SC.DO, SC.DO_SAT, SC.FLSCUFA, SC.TURB AS TURB_SC, 
                            CASE WHEN SC.PAR < 0.14 THEN 0 ELSE SC.PAR END AS PAR, ML.BOD5, ML.FC, ML.ECOLI, ML.PH AS PH_M, 
                            ML.TURB AS TURB_M, GL.NH4, GL.NO2, GL.NO3, GL.TKN_S, GL.TKN_P, GL.TKN_SP, GL.PO4, GL.TP_S, GL.TP_P, 
                            GL.TP_SP, GL.SIO2, GL.SS, GL.TVS, GL.CHL, GL.PHAE, FD.SOL_RAD, FD.AIR_TEMP, FD.WIND_SP, FD.WIND_DIR, 
                            FD.SEA_COND, FD.SEA_COL, FD.FISH_KILL, FD.SECCHIDISC AS SD, FD.WEATHER, CA.NH3, GL.TIN, GL.TN, 
                            GL.NH4_NM, GL.NO2_NM, GL.NO3_NM, GL.TKN_NM, GL.NOX_NM, GL.TIN_NM, GL.TN_NM, GL.PO4_PM, GL.TP_PM, 
                            GL.TIN_PO4_MMR, GL.TN_TP_MMR
FROM              WPG.MT_VISIT AS VI LEFT OUTER JOIN
                            WPG.MT_GLABN_CAL_A AS GL ON VI.MWVISIT_ID = GL.MWVISIT_ID LEFT OUTER JOIN
                            WPG.MT_MLAB_A AS ML ON VI.MWVISIT_ID = ML.MWVISIT_ID LEFT OUTER JOIN
                            WPG.MT_SEACAT_A AS SC ON VI.MWVISIT_ID = SC.MWVISIT_ID LEFT OUTER JOIN
                            WPG.MT_NH3_A AS CA ON VI.MWVISIT_ID = CA.MWVISIT_ID LEFT OUTER JOIN
                            WPG.MT_FIELD AS FD ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE          (SC.MWVISIT_ID IS NOT NULL) OR
                            (GL.MWVISIT_ID IS NOT NULL) OR
                            (ML.MWVISIT_ID IS NOT NULL);


-- WPG.MT_AA source

CREATE   VIEW [WPG].[MT_AA] AS
SELECT
	VI.MWVISIT_ID,
	VI.SITE_ID,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO	SAM_NO,
	'A'		D_CODE,
	SC.TEMPER,
	SC.PH 		PH_SC,
	SC.SAL,
	SC.COND,
	SC.DO,
	SC.DO_SAT,
	SC.FLSCUFA,	-- Cyril Leung 20090224 For Chlorophyll Column
	SC.TURB		TURB_SC,
	'PAR' = Case when 	SC.PAR < 0.14 then 0 else SC.PAR end ,
	ML.L_BOD5,
	ML.BOD5,
	ML.L_FC,
	ML.FC,
	ML.L_ECOLI,
	ML.ECOLI,
	ML.L_PH 	L_PH_M,
	ML.PH 		PH_M,
	ML.L_TURB 	L_TURB_M,
	ML.TURB 	TURB_M,
	GL.L_NH4,
	GL.NH4,
	GL.L_NO2,
	GL.NO2,
	GL.L_NO3,
	GL.NO3,
	GL.L_TKN_S,
	GL.TKN_S,
	GL.L_TKN_P,
	GL.TKN_P,
	GL.L_TKN_SP,
	GL.TKN_SP,
	GL.L_PO4,
	GL.PO4,
	GL.L_TP_S,
	GL.TP_S,
	GL.L_TP_P,
	GL.TP_P,
	GL.L_TP_SP,
	GL.TP_SP,
	GL.L_SIO2,
	GL.SIO2,
	GL.L_SS,
	GL.SS,
	GL.L_TVS,
	GL.TVS,
	GL.L_CHL,
	GL.CHL,
	GL.L_PHAE,
	GL.PHAE,
	FD.SOL_RAD,
	FD.AIR_TEMP,
	FD.WIND_SP,
	FD.WIND_DIR,
	FD.SEA_COND,
	FD.SEA_COL,
	FD.FISH_KILL,
	FD.SECCHIDISC	SD,
	FD.WEATHER,
	CA.NH3,
	GL.TIN,
	GL.TN,
	GL.NH4_NM,
 	GL.NO2_NM,
 	GL.NO3_NM,
 	GL.TKN_NM,
 	GL.NOX_NM,
 	GL.TIN_NM,
 	GL.TN_NM,
 	GL.PO4_PM,
 	GL.TP_PM,
 	GL.TIN_PO4_MMR,
	GL.TN_TP_MMR
FROM 	WPG.MT_VISIT	VI
LEFT OUTER JOIN	WPG.MT_GLABN_CAL_AA	GL	ON VI.MWVISIT_ID = GL.MWVISIT_ID
LEFT OUTER JOIN	WPG.MT_MLAB_AA 		ML	ON VI.MWVISIT_ID = ML.MWVISIT_ID
LEFT OUTER JOIN	WPG.MT_SEACAT_A 	SC	ON VI.MWVISIT_ID = SC.MWVISIT_ID
LEFT OUTER JOIN	WPG.MT_NH3_A		CA	ON VI.MWVISIT_ID = CA.MWVISIT_ID
LEFT OUTER JOIN	WPG.MT_FIELD		FD	ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE SC.MWVISIT_ID IS NOT NULL OR GL.MWVISIT_ID IS NOT NULL OR ML.MWVISIT_ID IS NOT NULL;


-- WPG.MT_B source

CREATE VIEW WPG.MT_B
AS
SELECT          VI.MWVISIT_ID, VI.SITE_ID, VI.MDATE, VI.STIME, VI.SAMPLE_NO AS SAM_NO, 'B' AS D_CODE, SC.TEMPER, 
                            SC.PH AS PH_SC, SC.SAL, SC.COND, SC.DO, SC.DO_SAT, SC.FLSCUFA, SC.TURB AS TURB_SC, 
                            CASE WHEN SC.PAR < 0.14 THEN 0 ELSE SC.PAR END AS PAR, ML.L_BOD5, ML.BOD5, ML.L_FC, ML.FC, 
                            ML.L_ECOLI, ML.ECOLI, ML.L_PH AS L_PH_M, ML.PH AS PH_M, ML.L_TURB AS L_TURB_M, ML.TURB AS TURB_M, 
                            GL.L_NH4, GL.NH4, GL.L_NO2, GL.NO2, GL.L_NO3, GL.NO3, GL.L_TKN_S, GL.TKN_S, GL.L_TKN_P, GL.TKN_P, 
                            GL.L_TKN_SP, GL.TKN_SP, GL.L_PO4, GL.PO4, GL.L_TP_S, GL.TP_S, GL.L_TP_P, GL.TP_P, GL.L_TP_SP, GL.TP_SP, 
                            GL.L_SIO2, GL.SIO2, GL.L_SS, GL.SS, GL.L_TVS, GL.TVS, GL.L_CHL, GL.CHL, GL.L_PHAE, GL.PHAE, FD.SOL_RAD, 
                            FD.AIR_TEMP, FD.WIND_SP, FD.WIND_DIR, FD.SEA_COND, FD.SEA_COL, FD.FISH_KILL, FD.SECCHIDISC AS SD, 
                            FD.WEATHER, CA.NH3, GL.TIN, GL.TN, GL.NH4_NM, GL.NO2_NM, GL.NO3_NM, GL.TKN_NM, GL.NOX_NM, 
                            GL.TIN_NM, GL.TN_NM, GL.PO4_PM, GL.TP_PM, GL.TIN_PO4_MMR, GL.TN_TP_MMR
FROM              WPG.MT_VISIT AS VI LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DEPTH_CODE, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, 
                                                              TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, 
                                                              SIO2, L_SS, SS, L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, TIN, TN, NH4_NM, NO2_NM, NO3_NM, 
                                                              TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR, L_TUR, 
                                                              TUR
                                  FROM               WPG.MT_GLABN_CAL
                                  WHERE           (DEPTH_CODE = 'B')) AS GL ON VI.MWVISIT_ID = GL.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, DEPTH_CODE, L_PH, PH, L_BOD5, BOD5, L_TURB, TURB, L_FC, 
                                                              FC, L_ECOLI, ECOLI, SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, 
                                                              VALID_DATE, VALID_CODE
                                  FROM               WPG.MT_MLAB
                                  WHERE           (DEPTH_CODE = 'B')) AS ML ON VI.MWVISIT_ID = ML.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, DEPTH, DEPTH_CODE, TEMPER, PH, SAL, COND, DO, DO_SAT, 
                                                              FLSCUFA, TURB, PAR, VALID_USER, VALID_DATE, VALID_CODE
                                  FROM               WPG.MT_SEACAT
                                  WHERE           (DEPTH_CODE = 'B')) AS SC ON VI.MWVISIT_ID = SC.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DEPTH_CODE, SAL, TEMPER, PH, L_NH4, NH4, L_NH3, NH3
                                  FROM               WPG.MT_NH3
                                  WHERE           (DEPTH_CODE = 'B')) AS CA ON VI.MWVISIT_ID = CA.MWVISIT_ID LEFT OUTER JOIN
                            WPG.MT_FIELD AS FD ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE          (GL.DEPTH_CODE IS NOT NULL) OR
                            (ML.DEPTH_CODE IS NOT NULL) OR
                            (SC.DEPTH_CODE IS NOT NULL);


-- WPG.MT_C source

CREATE VIEW WPG.MT_C
AS
SELECT          VI.MWVISIT_ID, VI.SITE_ID, VI.MDATE, VI.STIME, VI.SAMPLE_NO AS SAM_NO, 'C' AS D_CODE, SC.TEMPER, 
                            SC.PH AS PH_SC, SC.SAL, SC.COND, SC.DO, SC.DO_SAT, SC.FLSCUFA, SC.TURB AS TURB_SC, 
                            CASE WHEN SC.PAR < 0.14 THEN 0 ELSE SC.PAR END AS PAR, ML.L_BOD5, ML.BOD5, ML.L_FC, ML.FC, 
                            ML.L_ECOLI, ML.ECOLI, ML.L_PH AS L_PH_M, ML.PH AS PH_M, ML.L_TURB AS L_TURB_M, ML.TURB AS TURB_M, 
                            GL.L_NH4, GL.NH4, GL.L_NO2, GL.NO2, GL.L_NO3, GL.NO3, GL.L_TKN_S, GL.TKN_S, GL.L_TKN_P, GL.TKN_P, 
                            GL.L_TKN_SP, GL.TKN_SP, GL.L_PO4, GL.PO4, GL.L_TP_S, GL.TP_S, GL.L_TP_P, GL.TP_P, GL.L_TP_SP, GL.TP_SP, 
                            GL.L_SIO2, GL.SIO2, GL.L_SS, GL.SS, GL.L_TVS, GL.TVS, GL.L_CHL, GL.CHL, GL.L_PHAE, GL.PHAE, FD.SOL_RAD, 
                            FD.AIR_TEMP, FD.WIND_SP, FD.WIND_DIR, FD.SEA_COND, FD.SEA_COL, FD.FISH_KILL, FD.SECCHIDISC AS SD, 
                            FD.WEATHER, CA.NH3, GL.TIN, GL.TN, GL.NH4_NM, GL.NO2_NM, GL.NO3_NM, GL.TKN_NM, GL.NOX_NM, 
                            GL.TIN_NM, GL.TN_NM, GL.PO4_PM, GL.TP_PM, GL.TIN_PO4_MMR, GL.TN_TP_MMR
FROM              WPG.MT_VISIT AS VI LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DEPTH_CODE, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, 
                                                              TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, 
                                                              SIO2, L_SS, SS, L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, TIN, TN, NH4_NM, NO2_NM, NO3_NM, 
                                                              TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR, L_TUR, 
                                                              TUR
                                  FROM               WPG.MT_GLABN_CAL
                                  WHERE           (DEPTH_CODE = 'C')) AS GL ON VI.MWVISIT_ID = GL.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, DEPTH_CODE, L_PH, PH, L_BOD5, BOD5, L_TURB, TURB, L_FC, 
                                                              FC, L_ECOLI, ECOLI, SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, 
                                                              VALID_DATE, VALID_CODE
                                  FROM               WPG.MT_MLAB
                                  WHERE           (DEPTH_CODE = 'C')) AS ML ON VI.MWVISIT_ID = ML.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, DEPTH, DEPTH_CODE, TEMPER, PH, SAL, COND, DO, DO_SAT, 
                                                              FLSCUFA, TURB, PAR, VALID_USER, VALID_DATE, VALID_CODE
                                  FROM               WPG.MT_SEACAT
                                  WHERE           (DEPTH_CODE = 'C')) AS SC ON VI.MWVISIT_ID = SC.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DEPTH_CODE, SAL, TEMPER, PH, L_NH4, NH4, L_NH3, NH3
                                  FROM               WPG.MT_NH3
                                  WHERE           (DEPTH_CODE = 'C')) AS CA ON VI.MWVISIT_ID = CA.MWVISIT_ID LEFT OUTER JOIN
                            WPG.MT_FIELD AS FD ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE          (GL.DEPTH_CODE IS NOT NULL) OR
                            (ML.DEPTH_CODE IS NOT NULL) OR
                            (SC.DEPTH_CODE IS NOT NULL);


-- WPG.MT_GLABN_CAL source

CREATE VIEW [WPG].[MT_GLABN_CAL] AS
SELECT
 	MWVISIT_ID,	
	DEPTH_CODE,
	L_NH4,
	NH4,
	L_NO2,
	NO2,
	L_NO3,
	NO3,
	L_TKN_S,
	TKN_S,
	L_TKN_P,
	TKN_P,
	L_TKN_SP,
	TKN_SP,
	L_PO4,
	PO4,
	L_TP_S,
	TP_S,
	L_TP_P,
	TP_P,
	L_TP_SP,
	TP_SP,
	L_SIO2,
	SIO2,
	L_SS,
	SS,
	L_TVS,
	TVS,
	L_CHL,
	CHL,
	L_PHAE,
	PHAE,
	NH4 + NO2 + NO3			TIN,
	TKN_SP + NO2 + NO3		TN,
	NH4 / NMMW			NH4_NM,
	NO2 / NMMW			NO2_NM,
	NO3 / NMMW			NO3_NM,
	TKN_SP / NMMW			TKN_NM,
	NO2 + NO3 / NMMW	 	NOX_NM,
	(NH4 + NO2 + NO3) / NMMW		TIN_NM,
	(TKN_SP + NO2 + NO3) / NMMW	TN_NM,
	PO4 / PMMW			PO4_PM,
	TP_SP / PMMW			TP_PM,
	CASE WHEN PO4 = 0 THEN NULL 
		ELSE((NH4 + NO2 + NO3) / NMMW) /  (PO4 / PMMW) END		TIN_PO4_MMR,
	CASE WHEN TP_SP = 0 THEN NULL 
		ELSE((TKN_SP + NO2 + NO3) / NMMW)/(TP_SP / PMMW) END 	TN_TP_MMR,
	L_TUR,
	TUR
FROM 	(SELECT	*,
		0.0140067		NMMW,	/*NITROGEN MILLIMOLAR WEIGHT*/
		0.0309738		PMMW	/*PHOSPHROUS MILLIMOLAR WEIGHT*/
	FROM	WPG.MT_GLABN
	)	GN;


-- WPG.MT_GLABN_CAL_A source

CREATE VIEW [WPG].[MT_GLABN_CAL_A] AS
SELECT
	MWVISIT_ID,	
	AVG(NH4)		NH4,
	AVG(NO2)		NO2,
	AVG(NO3)		NO3,
	AVG(TKN_S)		TKN_S,
	AVG(TKN_P)		TKN_P,
	AVG(TKN_SP)		TKN_SP,
	AVG(PO4)		PO4,
	AVG(TP_S)		TP_S,
	AVG(TP_P)		TP_P,
	AVG(TP_SP)		TP_SP,
	AVG(SIO2)		SIO2,
	AVG(SS)			SS,
	AVG(TVS)		TVS,
	AVG(CHL)		CHL,
	AVG(PHAE)		PHAE,
	AVG(TIN)		TIN,
	AVG(TN)			TN,
	AVG(NH4_NM)		NH4_NM,
	AVG(NO2_NM)		NO2_NM,
	AVG(NO3_NM)		NO3_NM,
	AVG(TKN_NM)		TKN_NM,
	AVG(NOX_NM)		NOX_NM,
	AVG(TIN_NM)		TIN_NM,
	AVG(TN_NM) 		TN_NM,
	AVG(PO4_PM)		PO4_PM,
	AVG(TP_PM)		TP_PM,
	AVG(TIN_PO4_MMR)	TIN_PO4_MMR,
	AVG(TN_TP_MMR) 		TN_TP_MMR
FROM 	WPG.MT_GLABN_CAL
WHERE DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID;


-- WPG.MT_GLABN_CAL_AA source

CREATE VIEW [WPG].[MT_GLABN_CAL_AA] AS
SELECT
	MWVISIT_ID,
	CASE WHEN L_NH4_CNT = TOTAL THEN '<' ELSE NULL END	L_NH4,	NH4,
	CASE WHEN L_NO2_CNT = TOTAL THEN '<' ELSE NULL END	L_NO2,	NO2,
	CASE WHEN L_NO3_CNT = TOTAL THEN '<' ELSE NULL END	L_NO3,	NO3,
	CASE WHEN L_TKN_S_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_S,	TKN_S,
	CASE WHEN L_TKN_P_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_P,	TKN_P,
	CASE WHEN L_TKN_SP_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_SP,	TKN_SP,
	CASE WHEN L_PO4_CNT = TOTAL THEN '<' ELSE NULL END	L_PO4,	PO4,
	CASE WHEN L_TP_S_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_S,	TP_S,
	CASE WHEN L_TP_P_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_P,	TP_P,
	CASE WHEN L_TP_SP_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_SP,	TP_SP,
	CASE WHEN L_SIO2_CNT = TOTAL THEN '<' ELSE NULL END	L_SIO2,	SIO2,
	CASE WHEN L_SS_CNT = TOTAL THEN '<' ELSE NULL END	L_SS,	SS,
	CASE WHEN L_TVS_CNT = TOTAL THEN '<' ELSE NULL END	L_TVS,	TVS,
	CASE WHEN L_CHL_CNT = TOTAL THEN '<' ELSE NULL END	L_CHL,	CHL,
	CASE WHEN L_PHAE_CNT = TOTAL THEN '<' ELSE NULL END	L_PHAE,	PHAE,
			TIN,
			TN,
			NH4_NM,
			NO2_NM,
			NO3_NM,
			TKN_NM,
			NOX_NM,
			TIN_NM,
			TN_NM,
			PO4_PM,
			TP_PM,
			TIN_PO4_MMR,
			TN_TP_MMR
FROM
(SELECT
	MWVISIT_ID,	
    COUNT(*)        TOTAL,
	AVG(NH4)		NH4,
	AVG(NO2)		NO2,
	AVG(NO3)		NO3,
	AVG(TKN_S)		TKN_S,
	AVG(TKN_P)		TKN_P,
	AVG(TKN_SP)		TKN_SP,
	AVG(PO4)		PO4,
	AVG(TP_S)		TP_S,
	AVG(TP_P)		TP_P,
	AVG(TP_SP)		TP_SP,
	AVG(SIO2)		SIO2,
	AVG(SS)			SS,
	AVG(TVS)		TVS,
	AVG(CHL)		CHL,
	AVG(PHAE)		PHAE,
	AVG(TIN)		TIN,
	AVG(TN)			TN,
	AVG(NH4_NM)		NH4_NM,
	AVG(NO2_NM)		NO2_NM,
	AVG(NO3_NM)		NO3_NM,
	AVG(TKN_NM)		TKN_NM,
	AVG(NOX_NM)		NOX_NM,
	AVG(TIN_NM)		TIN_NM,
	AVG(TN_NM) 		TN_NM,
	AVG(PO4_PM)		PO4_PM,
	AVG(TP_PM)		TP_PM,
	AVG(TIN_PO4_MMR)	TIN_PO4_MMR,
	AVG(TN_TP_MMR) 		TN_TP_MMR,
	COUNT(L_NH4)	L_NH4_CNT,
	COUNT(L_NO2)	L_NO2_CNT,
	COUNT(L_NO3)	L_NO3_CNT,
	COUNT(L_TKN_S)	L_TKN_S_CNT,
	COUNT(L_TKN_P)	L_TKN_P_CNT,
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,
	COUNT(L_PO4)	L_PO4_CNT,
	COUNT(L_TP_S)	L_TP_S_CNT,
	COUNT(L_TP_P)	L_TP_P_CNT,
	COUNT(L_TP_SP)	L_TP_SP_CNT,
	COUNT(L_SIO2)	L_SIO2_CNT,
	COUNT(L_SS)	L_SS_CNT,
	COUNT(L_TVS)	L_TVS_CNT,
	COUNT(L_CHL)	L_CHL_CNT,
	COUNT(L_PHAE)	L_PHAE_CNT
FROM 	WPG.MT_GLABN_CAL
WHERE DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID ) D;


-- WPG.MT_M source

CREATE VIEW WPG.MT_M
AS
SELECT          VI.MWVISIT_ID, VI.SITE_ID, VI.MDATE, VI.STIME, VI.SAMPLE_NO AS SAM_NO, 'M' AS D_CODE, SC.TEMPER, 
                            SC.PH AS PH_SC, SC.SAL, SC.COND, SC.DO, SC.DO_SAT, SC.FLSCUFA, SC.TURB AS TURB_SC, 
                            CASE WHEN SC.PAR < 0.14 THEN 0 ELSE SC.PAR END AS PAR, ML.L_BOD5, ML.BOD5, ML.L_FC, ML.FC, 
                            ML.L_ECOLI, ML.ECOLI, ML.L_PH AS L_PH_M, ML.PH AS PH_M, ML.L_TURB AS L_TURB_M, ML.TURB AS TURB_M, 
                            GL.L_NH4, GL.NH4, GL.L_NO2, GL.NO2, GL.L_NO3, GL.NO3, GL.L_TKN_S, GL.TKN_S, GL.L_TKN_P, GL.TKN_P, 
                            GL.L_TKN_SP, GL.TKN_SP, GL.L_PO4, GL.PO4, GL.L_TP_S, GL.TP_S, GL.L_TP_P, GL.TP_P, GL.L_TP_SP, GL.TP_SP, 
                            GL.L_SIO2, GL.SIO2, GL.L_SS, GL.SS, GL.L_TVS, GL.TVS, GL.L_CHL, GL.CHL, GL.L_PHAE, GL.PHAE, FD.SOL_RAD, 
                            FD.AIR_TEMP, FD.WIND_SP, FD.WIND_DIR, FD.SEA_COND, FD.SEA_COL, FD.FISH_KILL, FD.SECCHIDISC AS SD, 
                            FD.WEATHER, CA.NH3, GL.TIN, GL.TN, GL.NH4_NM, GL.NO2_NM, GL.NO3_NM, GL.TKN_NM, GL.NOX_NM, 
                            GL.TIN_NM, GL.TN_NM, GL.PO4_PM, GL.TP_PM, GL.TIN_PO4_MMR, GL.TN_TP_MMR
FROM              WPG.MT_VISIT AS VI LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DEPTH_CODE, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, 
                                                              TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, 
                                                              SIO2, L_SS, SS, L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, TIN, TN, NH4_NM, NO2_NM, NO3_NM, 
                                                              TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR, L_TUR, 
                                                              TUR
                                  FROM               WPG.MT_GLABN_CAL
                                  WHERE           (DEPTH_CODE = 'M')) AS GL ON VI.MWVISIT_ID = GL.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, DEPTH_CODE, L_PH, PH, L_BOD5, BOD5, L_TURB, TURB, L_FC, 
                                                              FC, L_ECOLI, ECOLI, SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, 
                                                              VALID_DATE, VALID_CODE
                                  FROM               WPG.MT_MLAB
                                  WHERE           (DEPTH_CODE = 'M')) AS ML ON VI.MWVISIT_ID = ML.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, DEPTH, DEPTH_CODE, TEMPER, PH, SAL, COND, DO, DO_SAT, 
                                                              FLSCUFA, TURB, PAR, VALID_USER, VALID_DATE, VALID_CODE
                                  FROM               WPG.MT_SEACAT
                                  WHERE           (DEPTH_CODE = 'M')) AS SC ON VI.MWVISIT_ID = SC.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DEPTH_CODE, SAL, TEMPER, PH, L_NH4, NH4, L_NH3, NH3
                                  FROM               WPG.MT_NH3
                                  WHERE           (DEPTH_CODE = 'M')) AS CA ON VI.MWVISIT_ID = CA.MWVISIT_ID LEFT OUTER JOIN
                            WPG.MT_FIELD AS FD ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE          (GL.DEPTH_CODE IS NOT NULL) OR
                            (ML.DEPTH_CODE IS NOT NULL) OR
                            (SC.DEPTH_CODE IS NOT NULL);


-- WPG.MT_MLAB_A source

CREATE VIEW [WPG].[MT_MLAB_A] AS
SELECT
	MWVISIT_ID,
	AVG(PH)								PH,
	AVG(BOD5)   					 		BOD5,
	AVG(TURB)     							TURB, 
	EXP(SUM(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END))/COUNT(FC))		FC,
	EXP(SUM(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))/COUNT(ECOLI))	ECOLI
FROM	WPG.MT_MLAB
WHERE 	DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID;


-- WPG.MT_MLAB_AA source

CREATE VIEW [WPG].[MT_MLAB_AA] AS
SELECT
	MWVISIT_ID,
	CASE WHEN L_PH_CNT = TOTAL THEN '<' ELSE NULL END	L_PH,	PH,
	CASE WHEN L_BOD5_CNT = TOTAL THEN '<' ELSE NULL END	L_BOD5,	BOD5,
	CASE WHEN L_TURB_CNT = TOTAL THEN '<' ELSE NULL END	L_TURB,	TURB,
    CASE WHEN L_FC_CNT = TOTAL THEN '<' ELSE NULL END	L_FC,	FC,
	CASE WHEN L_ECOLI_CNT = TOTAL THEN '<' ELSE NULL END	L_ECOLI,	ECOLI
FROM
(SELECT
	MWVISIT_ID,
    COUNT(*)        TOTAL,
	AVG(PH)								PH,
	AVG(BOD5)   					 		BOD5,
	AVG(TURB)     							TURB, 
	EXP(SUM(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END))/COUNT(FC))		FC,
	EXP(SUM(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))/COUNT(ECOLI))	ECOLI,
	COUNT(L_PH)	    L_PH_CNT,
	COUNT(L_BOD5)	L_BOD5_CNT,
	COUNT(L_TURB)	L_TURB_CNT,
	COUNT(L_FC)	    L_FC_CNT,
	COUNT(L_ECOLI)	    L_ECOLI_CNT
FROM	WPG.MT_MLAB
WHERE 	DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID ) D;


-- WPG.MT_N source

CREATE VIEW [WPG].[MT_N]
AS
SELECT          VI.MWVISIT_ID, VI.SITE_ID, VI.MDATE, VI.STIME, VI.SAMPLE_NO AS SAM_NO, CONVERT(NVARCHAR, NULL) 
                            AS D_CODE, NULL AS TEMPER, NULL AS PH_SC, NULL AS SAL, NULL AS COND, NULL AS DO, NULL 
                            AS DO_SAT, NULL AS FLSCUFA, NULL AS TURB_SC, NULL AS PAR, CONVERT(NVARCHAR, NULL) AS L_BOD5, NULL 
                            AS BOD5, CONVERT(NVARCHAR, NULL) AS L_FC, NULL AS FC, CONVERT(NVARCHAR, NULL) AS L_ECOLI, NULL 
                            AS ECOLI, CONVERT(NVARCHAR, NULL) AS L_PH_M, NULL AS PH_M, CONVERT(NVARCHAR, NULL) 
                            AS L_TURB_M, NULL AS TURB_M, CONVERT(NVARCHAR, NULL) AS L_NH4, NULL AS NH4, 
                            CONVERT(NVARCHAR, NULL) AS L_NO2, NULL AS NO2, CONVERT(NVARCHAR, NULL) AS L_NO3, NULL AS NO3, 
                            CONVERT(NVARCHAR, NULL) AS L_TKN_S, NULL AS TKN_S, CONVERT(NVARCHAR, NULL) AS L_TKN_P, NULL 
                            AS TKN_P, CONVERT(NVARCHAR, NULL) AS L_TKN_SP, NULL AS TKN_SP, CONVERT(NVARCHAR, NULL) 
                            AS L_PO4, NULL AS PO4, CONVERT(NVARCHAR, NULL) AS L_TP_S, NULL AS TP_S, CONVERT(NVARCHAR, NULL) 
                            AS L_TP_P, NULL AS TP_P, CONVERT(NVARCHAR, NULL) AS L_TP_SP, NULL AS TP_SP, CONVERT(NVARCHAR, NULL)
                             AS L_SIO2, NULL AS SIO2, CONVERT(NVARCHAR, NULL) AS L_SS, NULL AS SS, CONVERT(NVARCHAR, NULL) 
                            AS L_TVS, NULL AS TVS, CONVERT(NVARCHAR, NULL) AS L_CHL, NULL AS CHL, CONVERT(NVARCHAR, NULL) 
                            AS L_PHAE, NULL AS PHAE, FD.SOL_RAD, FD.AIR_TEMP, FD.WIND_SP, FD.WIND_DIR, FD.SEA_COND, FD.SEA_COL, 
                            FD.FISH_KILL, FD.SECCHIDISC AS SD, FD.WEATHER, NULL AS NH3, NULL AS TIN, NULL AS TN, NULL 
                            AS NH4_NM, NULL AS NO2_NM, NULL AS NO3_NM, NULL AS TKN_NM, NULL AS NOX_NM, NULL AS TIN_NM, NULL 
                            AS TN_NM, NULL AS PO4_PM, NULL AS TP_PM, NULL AS TIN_PO4_MMR, NULL AS TN_TP_MMR
FROM              (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, SITE_ID, STATION_ID, MDATE, STIME, SAMPLE_NO, VALID_USER, 
                                                        VALID_DATE, VALID_CODE
                            FROM               WPG.MT_VISIT
                            WHERE           (MWVISIT_ID NOT IN
                                                            (SELECT          MWVISIT_ID
                                                              FROM               WPG.MT_SEACAT
                                                              WHERE           (DEPTH_CODE IS NOT NULL)
                                                              UNION ALL
                                                              SELECT          MWVISIT_ID
                                                              FROM              WPG.MT_MLAB
                                                              UNION ALL
                                                              SELECT          MWVISIT_ID
                                                              FROM              WPG.MT_GLABN))) AS VI LEFT OUTER JOIN
                            WPG.MT_FIELD AS FD ON VI.MWVISIT_ID = FD.MWVISIT_ID;


-- WPG.MT_NH3 source

CREATE VIEW [WPG].[MT_NH3] AS
SELECT
 	GN.MWVISIT_ID,
	GN.DEPTH_CODE,
	SC.SAL,
	SC.TEMPER,
	SC.PH,
	GN.L_NH4,
	GN.NH4,
	GN.L_NH4					L_NH3,
	WPG.F_NH3(SC.SAL, SC.TEMPER, SC.PH, GN.NH4)	NH3
FROM	WPG.MT_SEACAT		SC
JOIN	WPG.MT_GLABN		GN
	ON	GN.MWVISIT_ID	= SC.MWVISIT_ID
	AND 	GN.DEPTH_CODE 	= SC.DEPTH_CODE
WHERE 	SC.SAL IS NOT NULL 
AND 	SC.TEMPER IS NOT NULL 
AND 	SC.PH IS NOT NULL
AND 	GN.NH4 IS NOT NULL;


-- WPG.MT_NH3_A source

CREATE VIEW [WPG].[MT_NH3_A] AS
SELECT
	MWVISIT_ID,
	AVG(NH3)	NH3
FROM	WPG.MT_NH3
WHERE	DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID;


-- WPG.MT_S source

CREATE VIEW WPG.MT_S
AS
SELECT          VI.MWVISIT_ID, VI.SITE_ID, VI.MDATE, VI.STIME, VI.SAMPLE_NO AS SAM_NO, 'S' AS D_CODE, SC.TEMPER, 
                            SC.PH AS PH_SC, SC.SAL, SC.COND, SC.DO, SC.DO_SAT, SC.FLSCUFA, SC.TURB AS TURB_SC, 
                            CASE WHEN SC.PAR < 0.14 THEN 0 ELSE SC.PAR END AS PAR, ML.L_BOD5, ML.BOD5, ML.L_FC, ML.FC, 
                            ML.L_ECOLI, ML.ECOLI, ML.L_PH AS L_PH_M, ML.PH AS PH_M, ML.L_TURB AS L_TURB_M, ML.TURB AS TURB_M, 
                            GL.L_NH4, GL.NH4, GL.L_NO2, GL.NO2, GL.L_NO3, GL.NO3, GL.L_TKN_S, GL.TKN_S, GL.L_TKN_P, GL.TKN_P, 
                            GL.L_TKN_SP, GL.TKN_SP, GL.L_PO4, GL.PO4, GL.L_TP_S, GL.TP_S, GL.L_TP_P, GL.TP_P, GL.L_TP_SP, GL.TP_SP, 
                            GL.L_SIO2, GL.SIO2, GL.L_SS, GL.SS, GL.L_TVS, GL.TVS, GL.L_CHL, GL.CHL, GL.L_PHAE, GL.PHAE, FD.SOL_RAD, 
                            FD.AIR_TEMP, FD.WIND_SP, FD.WIND_DIR, FD.SEA_COND, FD.SEA_COL, FD.FISH_KILL, FD.SECCHIDISC AS SD, 
                            FD.WEATHER, CA.NH3, GL.TIN, GL.TN, GL.NH4_NM, GL.NO2_NM, GL.NO3_NM, GL.TKN_NM, GL.NOX_NM, 
                            GL.TIN_NM, GL.TN_NM, GL.PO4_PM, GL.TP_PM, GL.TIN_PO4_MMR, GL.TN_TP_MMR
FROM              WPG.MT_VISIT AS VI LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DEPTH_CODE, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, 
                                                              TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, 
                                                              SIO2, L_SS, SS, L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, TIN, TN, NH4_NM, NO2_NM, NO3_NM, 
                                                              TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR, L_TUR, 
                                                              TUR
                                  FROM               WPG.MT_GLABN_CAL
                                  WHERE           (DEPTH_CODE = 'S')) AS GL ON VI.MWVISIT_ID = GL.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, DEPTH_CODE, L_PH, PH, L_BOD5, BOD5, L_TURB, TURB, L_FC, 
                                                              FC, L_ECOLI, ECOLI, SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, 
                                                              VALID_DATE, VALID_CODE
                                  FROM               WPG.MT_MLAB
                                  WHERE           (DEPTH_CODE = 'S')) AS ML ON VI.MWVISIT_ID = ML.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, MWVISIT_ID_OLD, DEPTH, DEPTH_CODE, TEMPER, PH, SAL, COND, DO, DO_SAT, 
                                                              FLSCUFA, TURB, PAR, VALID_USER, VALID_DATE, VALID_CODE
                                  FROM               WPG.MT_SEACAT
                                  WHERE           (DEPTH_CODE = 'S')) AS SC ON VI.MWVISIT_ID = SC.MWVISIT_ID LEFT OUTER JOIN
                                (SELECT          MWVISIT_ID, DEPTH_CODE, SAL, TEMPER, PH, L_NH4, NH4, L_NH3, NH3
                                  FROM               WPG.MT_NH3
                                  WHERE           (DEPTH_CODE = 'S')) AS CA ON VI.MWVISIT_ID = CA.MWVISIT_ID LEFT OUTER JOIN
                            WPG.MT_FIELD AS FD ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE          (GL.DEPTH_CODE IS NOT NULL) OR
                            (ML.DEPTH_CODE IS NOT NULL) OR
                            (SC.DEPTH_CODE IS NOT NULL);


-- WPG.MT_SEACAT_A source

CREATE VIEW [WPG].[MT_SEACAT_A] AS
SELECT
	MWVISIT_ID, 
	AVG(TEMPER)	TEMPER, 
	AVG(PH)	PH, 
	AVG(SAL)	SAL, 
	AVG(COND)	COND, 
	AVG(DO)	DO, 
	AVG(DO_SAT)	DO_SAT, 
	AVG(FLSCUFA)	FLSCUFA,		AVG(TURB)	TURB,
    AVG(PAR)    PAR
FROM 	WPG.MT_SEACAT
WHERE 	DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID;


-- WPG.MW_A source

CREATE  VIEW WPG.MW_A AS
SELECT
	VI.MWVISIT_ID,
	VI.SITE_ID,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO	SAM_NO,
	'A'		D_CODE,
	SC.TEMPER,
	SC.PH 		PH_SC,
	SC.SAL,
	SC.COND,
	SC.DO,
	SC.DO_SAT,
	SC.FLSCUFA,		SC.TURB		TURB_SC,
	'PAR' = Case when 	SC.PAR < 0.14 then 0 else SC.PAR end ,
	ML.BOD5,
	ML.FC,
	ML.ECOLI,
	ML.PH 		PH_M,
	ML.TURB 	TURB_M,
	GL.NH4,
	GL.NO2,
	GL.NO3,
	GL.TKN_S,
	GL.TKN_P,
	GL.TKN_SP,
	GL.PO4,
	GL.TP_S,
	GL.TP_P,
	GL.TP_SP,
	GL.SIO2,
	GL.SS,
	GL.TVS,
	GL.CHL,
	GL.PHAE,
	FD.SOL_RAD,
	FD.AIR_TEMP,
	FD.WIND_SP,
	FD.WIND_DIR,
	FD.SEA_COND,
	FD.SEA_COL,
	FD.FISH_KILL,
	FD.SECCHIDISC	SD,
	FD.WEATHER,
	CA.NH3,
	GL.TIN,
	GL.TN,
	GL.NH4_NM,
	GL.NO2_NM,
	GL.NO3_NM,
	GL.TKN_NM,
	GL.NOX_NM,
	GL.TIN_NM,
	GL.TN_NM,
	GL.PO4_PM,
	GL.TP_PM,
	GL.TIN_PO4_MMR,
	GL.TN_TP_MMR
FROM 	WPG.MW_VISIT	VI
LEFT OUTER JOIN	WPG.MW_GLABN_CAL_A	GL	ON VI.MWVISIT_ID = GL.MWVISIT_ID
LEFT OUTER JOIN	WPG.MW_MLAB_A 		ML	ON VI.MWVISIT_ID = ML.MWVISIT_ID
LEFT OUTER JOIN	WPG.MW_SEACAT_A 	SC	ON VI.MWVISIT_ID = SC.MWVISIT_ID
LEFT OUTER JOIN	WPG.MW_NH3_A		CA	ON VI.MWVISIT_ID = CA.MWVISIT_ID
LEFT OUTER JOIN	WPG.MW_FIELD		FD	ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE SC.MWVISIT_ID IS NOT NULL OR GL.MWVISIT_ID IS NOT NULL OR ML.MWVISIT_ID IS NOT NULL;


-- WPG.MW_AA source

CREATE   VIEW WPG.MW_AA AS
SELECT
	VI.MWVISIT_ID,
	VI.SITE_ID,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO	SAM_NO,
	'A'		D_CODE,
	SC.TEMPER,
	SC.PH 		PH_SC,
	SC.SAL,
	SC.COND,
	SC.DO,
	SC.DO_SAT,
	SC.FLSCUFA,	-- Cyril Leung 20090224 For Chlorophyll Column
	SC.TURB		TURB_SC,
	'PAR' = Case when 	SC.PAR < 0.14 then 0 else SC.PAR end ,
	ML.L_BOD5,
	ML.BOD5,
	ML.L_FC,
	ML.FC,
	ML.L_ECOLI,
	ML.ECOLI,
	ML.L_PH 	L_PH_M,
	ML.PH 		PH_M,
	ML.L_TURB 	L_TURB_M,
	ML.TURB 	TURB_M,
	GL.L_NH4,
	GL.NH4,
	GL.L_NO2,
	GL.NO2,
	GL.L_NO3,
	GL.NO3,
	GL.L_TKN_S,
	GL.TKN_S,
	GL.L_TKN_P,
	GL.TKN_P,
	GL.L_TKN_SP,
	GL.TKN_SP,
	GL.L_PO4,
	GL.PO4,
	GL.L_TP_S,
	GL.TP_S,
	GL.L_TP_P,
	GL.TP_P,
	GL.L_TP_SP,
	GL.TP_SP,
	GL.L_SIO2,
	GL.SIO2,
	GL.L_SS,
	GL.SS,
	GL.L_TVS,
	GL.TVS,
	GL.L_CHL,
	GL.CHL,
	GL.L_PHAE,
	GL.PHAE,
	FD.SOL_RAD,
	FD.AIR_TEMP,
	FD.WIND_SP,
	FD.WIND_DIR,
	FD.SEA_COND,
	FD.SEA_COL,
	FD.FISH_KILL,
	FD.SECCHIDISC	SD,
	FD.WEATHER,
	CA.NH3,
	GL.TIN,
	GL.TN,
	GL.NH4_NM,
 	GL.NO2_NM,
 	GL.NO3_NM,
 	GL.TKN_NM,
 	GL.NOX_NM,
 	GL.TIN_NM,
 	GL.TN_NM,
 	GL.PO4_PM,
 	GL.TP_PM,
 	GL.TIN_PO4_MMR,
	GL.TN_TP_MMR
FROM 	WPG.MW_VISIT	VI
LEFT OUTER JOIN	WPG.MW_GLABN_CAL_AA	GL	ON VI.MWVISIT_ID = GL.MWVISIT_ID
LEFT OUTER JOIN	WPG.MW_MLAB_AA 		ML	ON VI.MWVISIT_ID = ML.MWVISIT_ID
LEFT OUTER JOIN	WPG.MW_SEACAT_A 	SC	ON VI.MWVISIT_ID = SC.MWVISIT_ID
LEFT OUTER JOIN	WPG.MW_NH3_A		CA	ON VI.MWVISIT_ID = CA.MWVISIT_ID
LEFT OUTER JOIN	WPG.MW_FIELD		FD	ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE SC.MWVISIT_ID IS NOT NULL OR GL.MWVISIT_ID IS NOT NULL OR ML.MWVISIT_ID IS NOT NULL;


-- WPG.MW_ALERT source

CREATE VIEW [WPG].[MW_ALERT] AS
SELECT          A.MDATE, A.STIME, A.SAM_NO, A.D_CODE, A.PARAMETER, A.MEASURE, 
                            B.MEASURE AS LIMIT, B.DISP_STATS, B.TOTAL, B.YR, B.SITE_ID, B.DISP_SEQ, A.MWVISIT_ID
FROM              WPG.MW_TESTING AS A INNER JOIN
                            WPG.MW_CRITERIA AS B ON A.SITE_ID = B.SITE_ID AND A.D_CODE = B.D_CODE AND 
                            A.PARAMETER = B.PARAMETER AND YEAR(A.MDATE) - 1 = B.YR
WHERE          (B.DISP_SEQ IN (7,8)) AND (B.PARAMETER IN ('TEMPER', 'PH_SC', 'SAL', 'COND', 'DO', 'DO_SAT', 'FLSCUFA', 'TURB_SC', 
                            'PAR', 'BOD5', 'FC', 'ECOLI', 'PH_M', 'TURB_M', 'NH4', 'NO2', 'NO3', 'TKN_S', 'TKN_P', 'TKN_SP', 'PO4', 'TP_S', 
                            'TP_P', 'TP_SP', 'SIO2', 'SS', 'TVS', 'CHL', 'PHAE', 'TIN', 'TN', 'NH3', 'SOL_RAD', 'AIR_TEMP', 'WIND_SP', 'SD', 
                            'NH4_NM', 'NO2_NM', 'NO3_NM', 'TKN_NM', 'NOX_NM', 'TIN_NM', 'TN_NM', 'PO4_PM', 'TP_PM', 'TIN_PO4_MMR', 
                            'TN_TP_MMR')) AND (A.MEASURE > B.MEASURE) OR
                            (B.DISP_SEQ IN (4,5)) AND (B.PARAMETER IN ('DO', 'DO_SAT')) AND (A.MEASURE < B.MEASURE);


-- WPG.MW_ALERT_A source

CREATE VIEW [WPG].[MW_ALERT_A] AS
SELECT          A.MDATE, A.STIME, A.SAM_NO, A.D_CODE, A.PARAMETER, A.L_MEASURE, A.MEASURE, 
				B.MEASURE AS LIMIT, B.DISP_STATS, B.TOTAL, B.YR, B.SITE_ID, B.DISP_SEQ, A.MWVISIT_ID,
				SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM              WPG.MW_TESTING_A AS A INNER JOIN
                            WPG.MW_CRITERIA AS B ON A.SITE_ID = B.SITE_ID AND A.D_CODE = B.D_CODE AND 
                            A.PARAMETER = B.PARAMETER AND YEAR(A.MDATE) - 1 = B.YR
WHERE          (B.DISP_SEQ IN (7,8)) AND (B.PARAMETER IN ('TEMPER', 'PH_SC', 'SAL', 'COND', 'DO', 'DO_SAT', 'FLSCUFA', 'TURB_SC', 
                            'PAR', 'BOD5', 'FC', 'ECOLI', 'PH_M', 'TURB_M', 'NH4', 'NO2', 'NO3', 'TKN_S', 'TKN_P', 'TKN_SP', 'PO4', 'TP_S', 
                            'TP_P', 'TP_SP', 'SIO2', 'SS', 'TVS', 'CHL', 'PHAE', 'TIN', 'TN', 'NH3', 'SOL_RAD', 'AIR_TEMP', 'WIND_SP', 'SD', 
                            'NH4_NM', 'NO2_NM', 'NO3_NM', 'TKN_NM', 'NOX_NM', 'TIN_NM', 'TN_NM', 'PO4_PM', 'TP_PM', 'TIN_PO4_MMR', 
                            'TN_TP_MMR')) AND (A.MEASURE > B.MEASURE) OR
                            (B.DISP_SEQ IN (4,5)) AND (B.PARAMETER IN ('DO', 'DO_SAT')) AND (A.MEASURE < B.MEASURE);


-- WPG.MW_B source

CREATE  VIEW [WPG].[MW_B] AS
SELECT
	VI.MWVISIT_ID,
	VI.SITE_ID,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO	SAM_NO,
	'B'	 	D_CODE,
	SC.TEMPER,
	SC.PH 		PH_SC,
	SC.SAL,
	SC.COND,
	SC.DO,
	SC.DO_SAT,
	SC.FLSCUFA,		SC.TURB		TURB_SC,	
	'PAR' = Case when 	SC.PAR < 0.14 then 0 else SC.PAR end ,
    ML.L_BOD5,
	ML.BOD5,
	ML.L_FC,
	ML.FC,
	ML.L_ECOLI,
	ML.ECOLI,
	ML.L_PH 	L_PH_M,
	ML.PH 		PH_M,
	ML.L_TURB 	L_TURB_M,
	ML.TURB 	TURB_M,
	GL.L_NH4,
	GL.NH4,
	GL.L_NO2,
	GL.NO2,
	GL.L_NO3,
	GL.NO3,
	GL.L_TKN_S,
	GL.TKN_S,
	GL.L_TKN_P,
	GL.TKN_P,
	GL.L_TKN_SP,
	GL.TKN_SP,
	GL.L_PO4,
	GL.PO4,
	GL.L_TP_S,
	GL.TP_S,
	GL.L_TP_P,
	GL.TP_P,
	GL.L_TP_SP,
	GL.TP_SP,
	GL.L_SIO2,
	GL.SIO2,
	GL.L_SS,
	GL.SS,
	GL.L_TVS,
	GL.TVS,
	GL.L_CHL,
	GL.CHL,
	GL.L_PHAE,
	GL.PHAE,
	FD.SOL_RAD,
	FD.AIR_TEMP,
	FD.WIND_SP,
	FD.WIND_DIR,
	FD.SEA_COND,
	FD.SEA_COL,
	FD.FISH_KILL,
	FD.SECCHIDISC	SD,
	FD.WEATHER,
	CA.NH3,
	GL.TIN,
	GL.TN,
	GL.NH4_NM,
 	GL.NO2_NM,
 	GL.NO3_NM,
 	GL.TKN_NM,
 	GL.NOX_NM,
 	GL.TIN_NM,
 	GL.TN_NM,
 	GL.PO4_PM,
 	GL.TP_PM,
 	GL.TIN_PO4_MMR,
	GL.TN_TP_MMR
FROM 	WPG.MW_VISIT	VI
LEFT OUTER JOIN	WPG.MW_GLABN_CAL GL 
	ON VI.MWVISIT_ID = GL.MWVISIT_ID AND GL.DEPTH_CODE = 'B'
LEFT OUTER JOIN	WPG.MW_MLAB      ML
	ON VI.MWVISIT_ID = ML.MWVISIT_ID AND ML.DEPTH_CODE = 'B'
LEFT OUTER JOIN	WPG.MW_SEACAT    SC
	ON VI.MWVISIT_ID = SC.MWVISIT_ID AND SC.DEPTH_CODE = 'B'
LEFT OUTER JOIN	WPG.MW_NH3       CA
	ON VI.MWVISIT_ID = CA.MWVISIT_ID AND CA.DEPTH_CODE = 'B'
LEFT OUTER JOIN	WPG.MW_FIELD	FD
	ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE GL.DEPTH_CODE IS NOT NULL OR ML.DEPTH_CODE IS NOT NULL OR SC.DEPTH_CODE IS NOT NULL;


-- WPG.MW_C source

CREATE  VIEW [WPG].[MW_C] AS
SELECT
	VI.MWVISIT_ID,
	VI.SITE_ID,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO	SAM_NO,
	'C'	 	D_CODE,
	SC.TEMPER,
	SC.PH 		PH_SC,
	SC.SAL,
	SC.COND,
	SC.DO,
	SC.DO_SAT,
	SC.FLSCUFA,		SC.TURB		TURB_SC,	
	'PAR' = Case when 	SC.PAR < 0.14 then 0 else SC.PAR end ,
    ML.L_BOD5,
	ML.BOD5,
	ML.L_FC,
	ML.FC,
	ML.L_ECOLI,
	ML.ECOLI,
	ML.L_PH 	L_PH_M,
	ML.PH 		PH_M,
	ML.L_TURB 	L_TURB_M,
	ML.TURB 	TURB_M,
	GL.L_NH4,
	GL.NH4,
	GL.L_NO2,
	GL.NO2,
	GL.L_NO3,
	GL.NO3,
	GL.L_TKN_S,
	GL.TKN_S,
	GL.L_TKN_P,
	GL.TKN_P,
	GL.L_TKN_SP,
	GL.TKN_SP,
	GL.L_PO4,
	GL.PO4,
	GL.L_TP_S,
	GL.TP_S,
	GL.L_TP_P,
	GL.TP_P,
	GL.L_TP_SP,
	GL.TP_SP,
	GL.L_SIO2,
	GL.SIO2,
	GL.L_SS,
	GL.SS,
	GL.L_TVS,
	GL.TVS,
	GL.L_CHL,
	GL.CHL,
	GL.L_PHAE,
	GL.PHAE,
	FD.SOL_RAD,
	FD.AIR_TEMP,
	FD.WIND_SP,
	FD.WIND_DIR,
	FD.SEA_COND,
	FD.SEA_COL,
	FD.FISH_KILL,
	FD.SECCHIDISC	SD,
	FD.WEATHER,
	CA.NH3,
	GL.TIN,
	GL.TN,
	GL.NH4_NM,
 	GL.NO2_NM,
 	GL.NO3_NM,
 	GL.TKN_NM,
 	GL.NOX_NM,
 	GL.TIN_NM,
 	GL.TN_NM,
 	GL.PO4_PM,
 	GL.TP_PM,
 	GL.TIN_PO4_MMR,
	GL.TN_TP_MMR
FROM 	WPG.MW_VISIT	VI
LEFT OUTER JOIN	WPG.MW_GLABN_CAL GL 
	ON VI.MWVISIT_ID = GL.MWVISIT_ID AND GL.DEPTH_CODE = 'C'
LEFT OUTER JOIN	WPG.MW_MLAB      ML
	ON VI.MWVISIT_ID = ML.MWVISIT_ID AND ML.DEPTH_CODE = 'C'
LEFT OUTER JOIN	WPG.MW_SEACAT    SC
	ON VI.MWVISIT_ID = SC.MWVISIT_ID AND SC.DEPTH_CODE = 'C'
LEFT OUTER JOIN	WPG.MW_NH3       CA
	ON VI.MWVISIT_ID = CA.MWVISIT_ID AND CA.DEPTH_CODE = 'C'
LEFT OUTER JOIN	WPG.MW_FIELD	FD
	ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE GL.DEPTH_CODE IS NOT NULL OR ML.DEPTH_CODE IS NOT NULL OR SC.DEPTH_CODE IS NOT NULL;


-- WPG.MW_CRITERIA source

CREATE VIEW WPG.MW_CRITERIA AS
SELECT          DISP_STATS, TOTAL, YR, D_CODE, PARAMETER, MEASURE, SITE_ID, 
                            DISP_SEQ
FROM              (SELECT          DISP_STATS, TOTAL, YR, D_CODE, SITE_ID, DISP_SEQ, 
                                                        CAST(TEMPER AS float) TEMPER, CAST(PH_SC AS float) PH_SC, CAST(SAL AS float) SAL, 
                                                        CAST(COND AS float) COND, CAST(DO AS float) DO, CAST(DO_SAT AS float) DO_SAT, 
                                                        CAST(FLSCUFA AS float) FLSCUFA, CAST(TURB_SC AS float) TURB_SC, CAST(PAR AS float) PAR, 
                                                        CAST(BOD5 AS float) BOD5, CAST(FC AS float) FC, CAST(ECOLI AS float) ECOLI, CAST(PH_M AS float) 
                                                        PH_M, CAST(TURB_M AS float) TURB_M, CAST(NH4 AS float) NH4, CAST(NO2 AS float) NO2, 
                                                        CAST(NO3 AS float) NO3, CAST(TKN_S AS float) TKN_S, CAST(TKN_P AS float) TKN_P, 
                                                        CAST(TKN_SP AS float) TKN_SP, CAST(PO4 AS float) PO4, CAST(TP_S AS float) TP_S, CAST(TP_P AS float) 
                                                        TP_P, CAST(TP_SP AS float) TP_SP, CAST(SIO2 AS float) SIO2, CAST(SS AS float) SS, CAST(TVS AS float) 
                                                        TVS, CAST(CHL AS float) CHL, CAST(PHAE AS float) PHAE, CAST(TIN AS float) TIN, CAST(TN AS float) TN, 
                                                        CAST(NH3 AS float) NH3, CAST(SOL_RAD AS float) SOL_RAD, CAST(AIR_TEMP AS float) AIR_TEMP, 
                                                        CAST(WIND_SP AS float) WIND_SP, CAST(WIND_DIR AS float) WIND_DIR, CAST(SEA_COND AS float) 
                                                        SEA_COND, CAST(SEA_COL AS float) SEA_COL, CAST(FISH_KILL AS float) FISH_KILL, CAST(SD AS float) 
                                                        SD, CAST(WEATHER AS float) WEATHER, CAST(NH4_NM AS float) NH4_NM, CAST(NO2_NM AS float) 
                                                        NO2_NM, CAST(NO3_NM AS float) NO3_NM, CAST(TKN_NM AS float) TKN_NM, CAST(NOX_NM AS float) 
                                                        NOX_NM, CAST(TIN_NM AS float) TIN_NM, CAST(TN_NM AS float) TN_NM, CAST(PO4_PM AS float) 
                                                        PO4_PM, CAST(TP_PM AS float) TP_PM, CAST(TIN_PO4_MMR AS float) TIN_PO4_MMR, 
                                                        CAST(TN_TP_MMR AS float) TN_TP_MMR
                            FROM               WPG.MARINE_WATER_STATISTICS10A1) AS p UNPIVOT (MEASURE FOR PARAMETER IN (TEMPER, 
                            PH_SC, SAL, COND, DO, DO_SAT, FLSCUFA, TURB_SC, PAR, BOD5, FC, ECOLI, PH_M, TURB_M, NH4, NO2, NO3, 
                            TKN_S, TKN_P, TKN_SP, PO4, TP_S, TP_P, TP_SP, SIO2, SS, TVS, CHL, PHAE, TIN, TN, NH3, SOL_RAD, AIR_TEMP, 
                            WIND_SP, SD, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, 
                            TIN_PO4_MMR, TN_TP_MMR)) AS unpvt;


-- WPG.MW_CRITERIA_MM source

CREATE VIEW [WPG].[MW_CRITERIA_MM] AS	
SELECT TOTAL, YR, D_CODE, PARAMETER, SITE_ID, [MIN] MINIMUM, [AVG] AVERAGE, [MEDIAN] MEDIAN, [MAX] MAXIMUM
FROM (SELECT DISP_STATS, TOTAL, YR, D_CODE, PARAMETER, MEASURE, SITE_ID
FROM WPG.MW_CRITERIA) AS P
PIVOT( SUM(MEASURE)       
	FOR DISP_STATS IN ([MIN],[AVG],[MEDIAN],[MAX])
	) AS PVT;


-- WPG.MW_CRITERIA_PCTL source

CREATE VIEW [WPG].[MW_CRITERIA_PCTL] AS	
SELECT TOTAL, YR, D_CODE, PARAMETER, SITE_ID, [AVG] AVERAGE, [MIN] MINIMUM, [5 PERCENTILE] [05_PCTL], [10 PERCENTILE] [10_PCTL], [MEDIAN] MEDIAN, [90 PERCENTILE] [90_PCTL], [95 PERCENTILE] [95_PCTL], [MAX] MAXIMUM
FROM (SELECT DISP_STATS, TOTAL, YR, D_CODE, PARAMETER, MEASURE, SITE_ID
FROM WPG.MW_CRITERIA) AS P
PIVOT( SUM(MEASURE)       
	FOR DISP_STATS IN ([AVG],[MIN],[5 PERCENTILE],[10 PERCENTILE],[MEDIAN],[90 PERCENTILE],[95 PERCENTILE],[MAX])
	) AS PVT;


-- WPG.MW_EPIC_HISTORICAL source

CREATE VIEW WPG.MW_EPIC_HISTORICAL
AS
SELECT          f.ZONE_NAME AS WCZ, b.MW_NAME AS STATNAME, A.MDATE, A.SAM_NO, A.D_CODE, A.TEMPER, A.PH_SC, A.SAL, 
                            A.DO, A.DO_SAT, A.FLSCUFA, A.TURB_SC, A.PAR, A.L_BOD5, A.BOD5, A.L_FC, A.FC, A.L_ECOLI, A.ECOLI, A.L_NH4, 
                            A.NH4, A.L_NO2, A.NO2, A.L_NO3, A.NO3, A.L_TKN_SP, A.TKN_SP, A.L_PO4, A.PO4, A.L_TP_SP, A.TP_SP, A.L_SIO2, 
                            A.SIO2, A.L_SS, A.SS, A.L_TVS, A.TVS, A.L_CHL, A.CHL, A.L_PHAE, A.PHAE, A.TIN, A.TN, A.NH3, A.SD
FROM              (SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, 
                                                        FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, 
                                                        TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, 
                                                        TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, L_TVS, 
                                                        TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, 
                                                        FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, 
                                                        TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR
                            FROM               WPG.MW_S
                            UNION
                            SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, 
                                                        FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, 
                                                        TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, 
                                                        TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, L_TVS, 
                                                        TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, 
                                                        FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, 
                                                        TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR
                            FROM              WPG.MW_M
                            UNION
                            SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, 
                                                        FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, 
                                                        TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, 
                                                        TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, L_TVS, 
                                                        TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, 
                                                        FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, 
                                                        TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR
                            FROM              WPG.MW_B) AS A LEFT OUTER JOIN
                            WPG.MSTATION AS b ON A.SITE_ID = b.SITE_ID LEFT OUTER JOIN
                            WPG.WPCO_SZ AS d ON b.SZ_ID = d.SZ_ID LEFT OUTER JOIN
                            WPG.WPCO_WCZ AS e ON d.WCZ_ID = e.WCZ_ID LEFT OUTER JOIN
                            WPG.TEN_ZONE AS f ON e.ZONE_ID = f.ZONE_ID;


-- WPG.MW_GLABN_CAL source

CREATE VIEW WPG.MW_GLABN_CAL AS
SELECT
 	MWVISIT_ID,	
	DEPTH_CODE,
	L_NH4,
	NH4,
	L_NO2,
	NO2,
	L_NO3,
	NO3,
	L_TKN_S,
	TKN_S,
	L_TKN_P,
	TKN_P,
	L_TKN_SP,
	TKN_SP,
	L_PO4,
	PO4,
	L_TP_S,
	TP_S,
	L_TP_P,
	TP_P,
	L_TP_SP,
	TP_SP,
	L_SIO2,
	SIO2,
	L_SS,
	SS,
	L_TVS,
	TVS,
	L_CHL,
	CHL,
	L_PHAE,
	PHAE,
	NH4 + NO2 + NO3			TIN,
	TKN_SP + NO2 + NO3		TN,
	NH4 / NMMW			NH4_NM,
	NO2 / NMMW			NO2_NM,
	NO3 / NMMW			NO3_NM,
	TKN_SP / NMMW			TKN_NM,
	NO2 + NO3 / NMMW	 	NOX_NM,
	(NH4 + NO2 + NO3) / NMMW		TIN_NM,
	(TKN_SP + NO2 + NO3) / NMMW	TN_NM,
	PO4 / PMMW			PO4_PM,
	TP_SP / PMMW			TP_PM,
	CASE WHEN PO4 = 0 THEN NULL 
		ELSE((NH4 + NO2 + NO3) / NMMW) /  (PO4 / PMMW) END		TIN_PO4_MMR,
	CASE WHEN TP_SP = 0 THEN NULL 
		ELSE((TKN_SP + NO2 + NO3) / NMMW)/(TP_SP / PMMW) END 	TN_TP_MMR,
	L_TUR,
	TUR
FROM 	(SELECT	*,
		0.0140067		NMMW,	/*NITROGEN MILLIMOLAR WEIGHT*/
		0.0309738		PMMW	/*PHOSPHROUS MILLIMOLAR WEIGHT*/
	FROM	WPG.MW_GLABN
	)	GN;


-- WPG.MW_GLABN_CAL_A source

CREATE VIEW WPG.MW_GLABN_CAL_A AS
SELECT
	MWVISIT_ID,	
	AVG(NH4)		NH4,
	AVG(NO2)		NO2,
	AVG(NO3)		NO3,
	AVG(TKN_S)		TKN_S,
	AVG(TKN_P)		TKN_P,
	AVG(TKN_SP)		TKN_SP,
	AVG(PO4)		PO4,
	AVG(TP_S)		TP_S,
	AVG(TP_P)		TP_P,
	AVG(TP_SP)		TP_SP,
	AVG(SIO2)		SIO2,
	AVG(SS)			SS,
	AVG(TVS)		TVS,
	AVG(CHL)		CHL,
	AVG(PHAE)		PHAE,
	AVG(TIN)		TIN,
	AVG(TN)			TN,
	AVG(NH4_NM)		NH4_NM,
	AVG(NO2_NM)		NO2_NM,
	AVG(NO3_NM)		NO3_NM,
	AVG(TKN_NM)		TKN_NM,
	AVG(NOX_NM)		NOX_NM,
	AVG(TIN_NM)		TIN_NM,
	AVG(TN_NM) 		TN_NM,
	AVG(PO4_PM)		PO4_PM,
	AVG(TP_PM)		TP_PM,
	AVG(TIN_PO4_MMR)	TIN_PO4_MMR,
	AVG(TN_TP_MMR) 		TN_TP_MMR
FROM 	WPG.MW_GLABN_CAL
WHERE DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID;


-- WPG.MW_GLABN_CAL_AA source

CREATE VIEW WPG.MW_GLABN_CAL_AA AS
SELECT
	MWVISIT_ID,
	CASE WHEN L_NH4_CNT = TOTAL THEN '<' ELSE NULL END	L_NH4,	NH4,
	CASE WHEN L_NO2_CNT = TOTAL THEN '<' ELSE NULL END	L_NO2,	NO2,
	CASE WHEN L_NO3_CNT = TOTAL THEN '<' ELSE NULL END	L_NO3,	NO3,
	CASE WHEN L_TKN_S_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_S,	TKN_S,
	CASE WHEN L_TKN_P_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_P,	TKN_P,
	CASE WHEN L_TKN_SP_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_SP,	TKN_SP,
	CASE WHEN L_PO4_CNT = TOTAL THEN '<' ELSE NULL END	L_PO4,	PO4,
	CASE WHEN L_TP_S_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_S,	TP_S,
	CASE WHEN L_TP_P_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_P,	TP_P,
	CASE WHEN L_TP_SP_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_SP,	TP_SP,
	CASE WHEN L_SIO2_CNT = TOTAL THEN '<' ELSE NULL END	L_SIO2,	SIO2,
	CASE WHEN L_SS_CNT = TOTAL THEN '<' ELSE NULL END	L_SS,	SS,
	CASE WHEN L_TVS_CNT = TOTAL THEN '<' ELSE NULL END	L_TVS,	TVS,
	CASE WHEN L_CHL_CNT = TOTAL THEN '<' ELSE NULL END	L_CHL,	CHL,
	CASE WHEN L_PHAE_CNT = TOTAL THEN '<' ELSE NULL END	L_PHAE,	PHAE,
			TIN,
			TN,
			NH4_NM,
			NO2_NM,
			NO3_NM,
			TKN_NM,
			NOX_NM,
			TIN_NM,
			TN_NM,
			PO4_PM,
			TP_PM,
			TIN_PO4_MMR,
			TN_TP_MMR
FROM
(SELECT
	MWVISIT_ID,	
    COUNT(*)        TOTAL,
	AVG(NH4)		NH4,
	AVG(NO2)		NO2,
	AVG(NO3)		NO3,
	AVG(TKN_S)		TKN_S,
	AVG(TKN_P)		TKN_P,
	AVG(TKN_SP)		TKN_SP,
	AVG(PO4)		PO4,
	AVG(TP_S)		TP_S,
	AVG(TP_P)		TP_P,
	AVG(TP_SP)		TP_SP,
	AVG(SIO2)		SIO2,
	AVG(SS)			SS,
	AVG(TVS)		TVS,
	AVG(CHL)		CHL,
	AVG(PHAE)		PHAE,
	AVG(TIN)		TIN,
	AVG(TN)			TN,
	AVG(NH4_NM)		NH4_NM,
	AVG(NO2_NM)		NO2_NM,
	AVG(NO3_NM)		NO3_NM,
	AVG(TKN_NM)		TKN_NM,
	AVG(NOX_NM)		NOX_NM,
	AVG(TIN_NM)		TIN_NM,
	AVG(TN_NM) 		TN_NM,
	AVG(PO4_PM)		PO4_PM,
	AVG(TP_PM)		TP_PM,
	AVG(TIN_PO4_MMR)	TIN_PO4_MMR,
	AVG(TN_TP_MMR) 		TN_TP_MMR,
	COUNT(L_NH4)	L_NH4_CNT,
	COUNT(L_NO2)	L_NO2_CNT,
	COUNT(L_NO3)	L_NO3_CNT,
	COUNT(L_TKN_S)	L_TKN_S_CNT,
	COUNT(L_TKN_P)	L_TKN_P_CNT,
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,
	COUNT(L_PO4)	L_PO4_CNT,
	COUNT(L_TP_S)	L_TP_S_CNT,
	COUNT(L_TP_P)	L_TP_P_CNT,
	COUNT(L_TP_SP)	L_TP_SP_CNT,
	COUNT(L_SIO2)	L_SIO2_CNT,
	COUNT(L_SS)	L_SS_CNT,
	COUNT(L_TVS)	L_TVS_CNT,
	COUNT(L_CHL)	L_CHL_CNT,
	COUNT(L_PHAE)	L_PHAE_CNT
FROM 	WPG.MW_GLABN_CAL
WHERE DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID ) D;


-- WPG.MW_M source

CREATE  VIEW [WPG].[MW_M] AS
SELECT
	VI.MWVISIT_ID,
	VI.SITE_ID,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO	SAM_NO,
	'M'	 	D_CODE,
	SC.TEMPER,
	SC.PH 		PH_SC,
	SC.SAL,
	SC.COND,
	SC.DO,
	SC.DO_SAT,
	SC.FLSCUFA,		SC.TURB		TURB_SC,
	'PAR' = Case when 	SC.PAR < 0.14 then 0 else SC.PAR end ,
    ML.L_BOD5,
	ML.BOD5,
	ML.L_FC,
	ML.FC,
	ML.L_ECOLI,
	ML.ECOLI,
	ML.L_PH 	L_PH_M,
	ML.PH 		PH_M,
	ML.L_TURB 	L_TURB_M,
	ML.TURB 	TURB_M,
	GL.L_NH4,
	GL.NH4,
	GL.L_NO2,
	GL.NO2,
	GL.L_NO3,
	GL.NO3,
	GL.L_TKN_S,
	GL.TKN_S,
	GL.L_TKN_P,
	GL.TKN_P,
	GL.L_TKN_SP,
	GL.TKN_SP,
	GL.L_PO4,
	GL.PO4,
	GL.L_TP_S,
	GL.TP_S,
	GL.L_TP_P,
	GL.TP_P,
	GL.L_TP_SP,
	GL.TP_SP,
	GL.L_SIO2,
	GL.SIO2,
	GL.L_SS,
	GL.SS,
	GL.L_TVS,
	GL.TVS,
	GL.L_CHL,
	GL.CHL,
	GL.L_PHAE,
	GL.PHAE,
	FD.SOL_RAD,
	FD.AIR_TEMP,
	FD.WIND_SP,
	FD.WIND_DIR,
	FD.SEA_COND,
	FD.SEA_COL,
	FD.FISH_KILL,
	FD.SECCHIDISC	SD,
	FD.WEATHER,
	CA.NH3,
	GL.TIN,
	GL.TN,
	GL.NH4_NM,
 	GL.NO2_NM,
 	GL.NO3_NM,
 	GL.TKN_NM,
 	GL.NOX_NM,
 	GL.TIN_NM,
 	GL.TN_NM,
 	GL.PO4_PM,
 	GL.TP_PM,
 	GL.TIN_PO4_MMR,
	GL.TN_TP_MMR
FROM 	WPG.MW_VISIT	VI
LEFT OUTER JOIN	WPG.MW_GLABN_CAL GL 
	ON VI.MWVISIT_ID = GL.MWVISIT_ID AND GL.DEPTH_CODE = 'M'
LEFT OUTER JOIN	WPG.MW_MLAB      ML
	ON VI.MWVISIT_ID = ML.MWVISIT_ID AND ML.DEPTH_CODE = 'M'
LEFT OUTER JOIN	WPG.MW_SEACAT    SC
	ON VI.MWVISIT_ID = SC.MWVISIT_ID AND SC.DEPTH_CODE = 'M'
LEFT OUTER JOIN	WPG.MW_NH3       CA
	ON VI.MWVISIT_ID = CA.MWVISIT_ID AND CA.DEPTH_CODE = 'M'
LEFT OUTER JOIN	WPG.MW_FIELD	FD
	ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE GL.DEPTH_CODE IS NOT NULL OR ML.DEPTH_CODE IS NOT NULL OR SC.DEPTH_CODE IS NOT NULL;


-- WPG.MW_MLAB_A source

CREATE VIEW WPG.MW_MLAB_A AS
SELECT
	MWVISIT_ID,
	AVG(PH)								PH,
	AVG(BOD5)   					 		BOD5,
	AVG(TURB)     							TURB, 
	EXP(SUM(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END))/COUNT(FC))		FC,
	EXP(SUM(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))/COUNT(ECOLI))	ECOLI
FROM	WPG.MW_MLAB
WHERE 	DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID;


-- WPG.MW_MLAB_AA source

CREATE VIEW WPG.MW_MLAB_AA AS
SELECT
	MWVISIT_ID,
	CASE WHEN L_PH_CNT = TOTAL THEN '<' ELSE NULL END	L_PH,	PH,
	CASE WHEN L_BOD5_CNT = TOTAL THEN '<' ELSE NULL END	L_BOD5,	BOD5,
	CASE WHEN L_TURB_CNT = TOTAL THEN '<' ELSE NULL END	L_TURB,	TURB,
    CASE WHEN L_FC_CNT = TOTAL THEN '<' ELSE NULL END	L_FC,	FC,
	CASE WHEN L_ECOLI_CNT = TOTAL THEN '<' ELSE NULL END	L_ECOLI,	ECOLI
FROM
(SELECT
	MWVISIT_ID,
    COUNT(*)        TOTAL,
	AVG(PH)								PH,
	AVG(BOD5)   					 		BOD5,
	AVG(TURB)     							TURB, 
	EXP(SUM(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END))/COUNT(FC))		FC,
	EXP(SUM(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))/COUNT(ECOLI))	ECOLI,
	COUNT(L_PH)	    L_PH_CNT,
	COUNT(L_BOD5)	L_BOD5_CNT,
	COUNT(L_TURB)	L_TURB_CNT,
	COUNT(L_FC)	    L_FC_CNT,
	COUNT(L_ECOLI)	    L_ECOLI_CNT
FROM	WPG.MW_MLAB
WHERE 	DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID ) D;


-- WPG.MW_MONTHLY_2014 source

CREATE VIEW [WPG].[MW_MONTHLY_2014] AS
SELECT ST.MW_NAME STATION, ST.SITE_ID, MWVISIT_ID, CAST(LEFT(MWVISIT_ID,4) AS INT) YR, CAST(SUBSTRING(MWVISIT_ID, 5,2) AS INT) MTH, PARA, MEASURE
FROM 
(SELECT SMB.MWVISIT_ID, 'DO_B' PARA, SMB.DO MEASURE  
	  FROM WPG.MW_B 	SMB where SMB.MWVISIT_ID >= '2014'
UNION SELECT AA.MWVISIT_ID, 'DO' PARA, AA.DO MEASURE  
	  FROM WPG.MW_A 	AA where AA.MWVISIT_ID >= '2014'
UNION SELECT AA.MWVISIT_ID, 'DOS' PARA, AA.DO_SAT MEASURE   
	  FROM WPG.MW_A 	AA where AA.MWVISIT_ID >= '2014'
UNION SELECT AA.MWVISIT_ID, 'TURB' PARA, AA.TURB_SC MEASURE   
	  FROM WPG.MW_A 	AA where AA.MWVISIT_ID >= '2014'
UNION SELECT AA.MWVISIT_ID, 'SS' PARA, AA.SS MEASURE   
	  FROM WPG.MW_A		AA where AA.MWVISIT_ID >= '2014'
UNION SELECT AA.MWVISIT_ID, 'BOD5' PARA, AA.BOD5 MEASURE   
	  FROM WPG.MW_A		AA where AA.MWVISIT_ID >= '2014'
UNION SELECT AA.MWVISIT_ID, 'EC' PARA, AA.ECOLI MEASURE   
	  FROM WPG.MW_A		AA where AA.MWVISIT_ID >= '2014'
UNION SELECT AA.MWVISIT_ID, 'PO4' PARA, AA.PO4 MEASURE   
	  FROM WPG.MW_A		AA where AA.MWVISIT_ID >= '2014'
UNION SELECT AA.MWVISIT_ID, 'TP_SP' PARA, AA.TP_SP MEASURE   
	  FROM WPG.MW_A		AA where AA.MWVISIT_ID >= '2014'
UNION SELECT AA.MWVISIT_ID, 'NH4' PARA, AA.NH4 MEASURE   
	  FROM WPG.MW_A		AA where AA.MWVISIT_ID >= '2014'
UNION SELECT AA.MWVISIT_ID, 'NH3' PARA, AA.NH3 MEASURE   
	  FROM WPG.MW_A		AA where AA.MWVISIT_ID >= '2014'
UNION SELECT AA.MWVISIT_ID, 'TIN' PARA, AA.TIN MEASURE   
	  FROM WPG.MW_A		AA where AA.MWVISIT_ID >= '2014'
UNION SELECT AA.MWVISIT_ID, 'TN' PARA, AA.TN MEASURE   
	  FROM WPG.MW_A		AA where AA.MWVISIT_ID >= '2014'
UNION SELECT AA.MWVISIT_ID, 'CHL' PARA, AA.CHL MEASURE   
	  FROM WPG.MW_A 	AA where AA.MWVISIT_ID >= '2014'
UNION SELECT AA.MWVISIT_ID, 'PH' PARA, AA.PH_SC MEASURE   
	  FROM WPG.MW_A 	AA where AA.MWVISIT_ID >= '2014'
UNION SELECT AA.MWVISIT_ID, 'SAL' PARA, AA.SAL MEASURE   
	  FROM WPG.MW_A		AA where AA.MWVISIT_ID >= '2014'
) MSR 
INNER JOIN WPG.MSTATION  ST ON ST.SITE_ID = CAST(SUBSTRING(MSR.MWVISIT_ID,9,4) AS int);


-- WPG.MW_MONTHLY_WEB source

CREATE VIEW WPG.MW_MONTHLY_WEB
AS
SELECT         [ZONE], STATION, MDATE, ECOLI, DO, SAL, PH_SC
FROM             WPG.MARINE_WATER_A1
WHERE         (LTRIM(RTRIM(UPPER(STATION))) IN ('DM3', 'EM2', 'JM4', 'MM15', 'NM3', 
                          'PM7', 'SM6', 'TM3', 'VM5', 'WM2')) AND (VIEW_NO >= 3);


-- WPG.MW_MS_SAMPLE_MARK source

CREATE VIEW WPG.MW_MS_SAMPLE_MARK
AS
SELECT         *
FROM             WPG.MW_SAMPLE_MARK
UNION
SELECT         *
FROM             WPG.MS_SAMPLE_MARK;


-- WPG.MW_N source

CREATE VIEW WPG.MW_N AS
SELECT
 	VI.MWVISIT_ID,
	VI.SITE_ID,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO			SAM_NO,
	CONVERT(NVARCHAR, NULL) 	D_CODE,
	NULL 				TEMPER,
	NULL 				PH_SC,
	NULL 				SAL,
	NULL 				COND,
	NULL 				DO,
	NULL 				DO_SAT,
	NULL				FLSCUFA,		NULL 				TURB_SC,
	NULL 				PAR,
	CONVERT(NVARCHAR, NULL) 	L_BOD5,
	NULL 				BOD5,
	CONVERT(NVARCHAR, NULL) 	L_FC,
	NULL 				FC,
	CONVERT(NVARCHAR, NULL)	L_ECOLI,
	NULL 				ECOLI,
	CONVERT(NVARCHAR, NULL) 	L_PH_M,
	NULL 				PH_M,
	CONVERT(NVARCHAR, NULL) 	L_TURB_M,
	NULL 				TURB_M,
	CONVERT(NVARCHAR, NULL) 	L_NH4,
	NULL 				NH4,
	CONVERT(NVARCHAR, NULL) 	L_NO2,
	NULL 				NO2,
	CONVERT(NVARCHAR, NULL) 	L_NO3,
	NULL 				NO3,
	CONVERT(NVARCHAR, NULL) 	L_TKN_S,
	NULL 				TKN_S,
	CONVERT(NVARCHAR, NULL) 	L_TKN_P,
	NULL 				TKN_P,
	CONVERT(NVARCHAR, NULL) 	L_TKN_SP,
	NULL 				TKN_SP,
	CONVERT(NVARCHAR, NULL) 	L_PO4,
	NULL 				PO4,
	CONVERT(NVARCHAR, NULL) 	L_TP_S,
	NULL 				TP_S,
	CONVERT(NVARCHAR, NULL)	L_TP_P,
	NULL 				TP_P,
	CONVERT(NVARCHAR, NULL)	L_TP_SP,
	NULL 				TP_SP,
	CONVERT(NVARCHAR, NULL) 	L_SIO2,
	NULL 				SIO2,
	CONVERT(NVARCHAR, NULL) 	L_SS,
	NULL 				SS,
	CONVERT(NVARCHAR, NULL) 	L_TVS,
	NULL 				TVS,
	CONVERT(NVARCHAR, NULL)	L_CHL,
	NULL 				CHL,
	CONVERT(NVARCHAR, NULL) 	L_PHAE,
	NULL 				PHAE,
	FD.SOL_RAD,
	FD.AIR_TEMP,
	FD.WIND_SP,
	FD.WIND_DIR,
	FD.SEA_COND,
	FD.SEA_COL,
	FD.FISH_KILL,
	FD.SECCHIDISC			SD,
	FD.WEATHER,
	NULL				NH3,
	NULL				TIN,
	NULL				TN,
	NULL				NH4_NM,
 	NULL				NO2_NM,
 	NULL				NO3_NM,
 	NULL				TKN_NM,
 	NULL				NOX_NM,
 	NULL				TIN_NM,
 	NULL				TN_NM,
 	NULL				PO4_PM,
 	NULL				TP_PM,
 	NULL				TIN_PO4_MMR,
	NULL				TN_TP_MMR
FROM 	(SELECT 	* 
	FROM 	WPG.MW_VISIT 
	WHERE 	MWVISIT_ID NOT IN 
		(SELECT MWVISIT_ID FROM WPG.MW_SEACAT WHERE DEPTH_CODE IS NOT NULL UNION ALL
		SELECT MWVISIT_ID FROM WPG.MW_MLAB UNION ALL
		SELECT MWVISIT_ID FROM WPG.MW_GLABN) 
		)	VI
LEFT OUTER JOIN	WPG.MW_FIELD	FD	ON VI.MWVISIT_ID = FD.MWVISIT_ID;


-- WPG.MW_NH3 source

CREATE VIEW WPG.MW_NH3 AS
SELECT
 	GN.MWVISIT_ID,
	GN.DEPTH_CODE,
	SC.SAL,
	SC.TEMPER,
	SC.PH,
	GN.L_NH4,
	GN.NH4,
	GN.L_NH4					L_NH3,
	WPG.F_NH3(SC.SAL, SC.TEMPER, SC.PH, GN.NH4)	NH3
FROM	WPG.MW_SEACAT		SC
JOIN	WPG.MW_GLABN		GN
	ON	GN.MWVISIT_ID	= SC.MWVISIT_ID
	AND 	GN.DEPTH_CODE 	= SC.DEPTH_CODE
WHERE 	SC.SAL IS NOT NULL 
AND 	SC.TEMPER IS NOT NULL 
AND 	SC.PH IS NOT NULL
AND 	GN.NH4 IS NOT NULL;


-- WPG.MW_NH3_A source

CREATE VIEW WPG.MW_NH3_A AS
SELECT
	MWVISIT_ID,
	AVG(NH3)	NH3
FROM	WPG.MW_NH3
WHERE	DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID;


-- WPG.MW_PCTLVALUE10A source

CREATE  VIEW [WPG].[MW_PCTLVALUE10A] AS		
SELECT LMT.SITE_ID, LMT.YR, LMT.D_CODE, LMT.TOTAL, LMT.PARMETER, L_LMT.LIMIT AS L_LIMIT, LMT.LIMIT, LMT.DISP_STATS, LMT.DISP_SEQ
FROM 
(SELECT SITE_ID,YR,D_CODE,TOTAL,PARMETER,LIMIT,DISP_STATS,DISP_SEQ
FROM 
   (SELECT * FROM [WPG].[MW_STATISTICS10A] WHERE DISP_SEQ IN (4,6)) p
UNPIVOT
   (LIMIT FOR PARMETER IN 
      (TEMPER,PH_SC,SAL,COND,DO,DO_SAT,FLSCUFA,TURB_SC,PAR,BOD5,FC,ECOLI,PH_M,TURB_M,NH4,NO2,NO3,TKN_S,TKN_P,TKN_SP,PO4,TP_S,TP_P,TP_SP,SIO2,SS,TVS,CHL,PHAE,SOL_RAD,AIR_TEMP,WIND_SP,SD,NH3,TIN,TN,NH4_NM,NO2_NM,NO3_NM,TKN_NM,NOX_NM,TIN_NM,TN_NM,PO4_PM,TP_PM,TIN_PO4_MMR,TN_TP_MMR)
)AS unpvt ) LMT
LEFT JOIN
(SELECT SITE_ID,YR,D_CODE,TOTAL,PARMETER,LIMIT,DISP_STATS,DISP_SEQ
FROM 
   (SELECT * FROM [WPG].[MW_STATISTICS10A] WHERE DISP_SEQ IN (4,6)) p
UNPIVOT
   (LIMIT FOR PARMETER IN 
      (L_BOD5,L_FC,L_ECOLI,L_PH_M,L_TURB_M,L_NH4,L_NO2,L_NO3,L_TKN_S,L_TKN_P,L_TKN_SP,L_PO4,L_TP_S,L_TP_P,L_TP_SP,L_SIO2,L_SS,L_TVS,L_CHL,L_PHAE)
)AS unpvt ) L_LMT
ON LMT.SITE_ID = L_LMT.SITE_ID AND LMT.YR = L_LMT.YR AND LMT.D_CODE = L_LMT.D_CODE AND 'L_'+LMT.PARMETER = L_LMT.PARMETER;


-- WPG.MW_S source

CREATE  VIEW [WPG].[MW_S] AS
SELECT
 	VI.MWVISIT_ID,
	VI.SITE_ID,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO	SAM_NO,
	'S'	 	D_CODE,
	SC.TEMPER,
	SC.PH 		PH_SC,
	SC.SAL,
	SC.COND,
	SC.DO,
	SC.DO_SAT,
	SC.FLSCUFA,		SC.TURB		TURB_SC,	
	'PAR' = Case when 	SC.PAR < 0.14 then 0 else SC.PAR end ,
    ML.L_BOD5,
	ML.BOD5,
	ML.L_FC,
	ML.FC,
	ML.L_ECOLI,
	ML.ECOLI,
	ML.L_PH 	L_PH_M,
	ML.PH 		PH_M,
	ML.L_TURB 	L_TURB_M,
	ML.TURB 	TURB_M,
	GL.L_NH4,
	GL.NH4,
	GL.L_NO2,
	GL.NO2,
	GL.L_NO3,
	GL.NO3,
	GL.L_TKN_S,
	GL.TKN_S,
	GL.L_TKN_P,
	GL.TKN_P,
	GL.L_TKN_SP,
	GL.TKN_SP,
	GL.L_PO4,
	GL.PO4,
	GL.L_TP_S,
	GL.TP_S,
	GL.L_TP_P,
	GL.TP_P,
	GL.L_TP_SP,
	GL.TP_SP,
	GL.L_SIO2,
	GL.SIO2,
	GL.L_SS,
	GL.SS,
	GL.L_TVS,
	GL.TVS,
	GL.L_CHL,
	GL.CHL,
	GL.L_PHAE,
	GL.PHAE,
	FD.SOL_RAD,
	FD.AIR_TEMP,
	FD.WIND_SP,
	FD.WIND_DIR,
	FD.SEA_COND,
	FD.SEA_COL,
	FD.FISH_KILL,
	FD.SECCHIDISC	SD,
	FD.WEATHER,
	CA.NH3,
	GL.TIN,
	GL.TN,
	GL.NH4_NM,
 	GL.NO2_NM,
 	GL.NO3_NM,
 	GL.TKN_NM,
 	GL.NOX_NM,
 	GL.TIN_NM,
 	GL.TN_NM,
 	GL.PO4_PM,
 	GL.TP_PM,
 	GL.TIN_PO4_MMR,
	GL.TN_TP_MMR
FROM 	WPG.MW_VISIT	VI
LEFT OUTER JOIN	WPG.MW_GLABN_CAL GL 
	ON VI.MWVISIT_ID = GL.MWVISIT_ID AND GL.DEPTH_CODE = 'S'
LEFT OUTER JOIN	WPG.MW_MLAB      ML
	ON VI.MWVISIT_ID = ML.MWVISIT_ID AND ML.DEPTH_CODE = 'S'
LEFT OUTER JOIN	WPG.MW_SEACAT    SC
	ON VI.MWVISIT_ID = SC.MWVISIT_ID AND SC.DEPTH_CODE = 'S'
LEFT OUTER JOIN	WPG.MW_NH3       CA
	ON VI.MWVISIT_ID = CA.MWVISIT_ID AND CA.DEPTH_CODE = 'S'
LEFT OUTER JOIN	WPG.MW_FIELD	FD
	ON VI.MWVISIT_ID = FD.MWVISIT_ID
WHERE GL.DEPTH_CODE IS NOT NULL OR ML.DEPTH_CODE IS NOT NULL OR SC.DEPTH_CODE IS NOT NULL;


-- WPG.MW_SEACAT_A source

CREATE VIEW WPG.MW_SEACAT_A AS
SELECT
	MWVISIT_ID, 
	AVG(TEMPER)	TEMPER, 
	AVG(PH)	PH, 
	AVG(SAL)	SAL, 
	AVG(COND)	COND, 
	AVG(DO)	DO, 
	AVG(DO_SAT)	DO_SAT, 
	AVG(FLSCUFA)	FLSCUFA,		AVG(TURB)	TURB,
    AVG(PAR)    PAR
FROM 	WPG.MW_SEACAT
WHERE 	DEPTH_CODE IN ('S', 'M', 'B')
GROUP BY MWVISIT_ID;


-- WPG.MW_STATS10A source

CREATE  VIEW [WPG].[MW_STATS10A] AS				
SELECT	*			
	,CAST('MIN' AS nvarchar(15))	DISP_STATS		
	,CAST(1 AS int)	DISP_SEQ		
	FROM	WQPLIS.WPG.MW_STATS_MIN10A		
UNION ALL				
SELECT	*			
	,'AVG'	DISP_STATS		
	,2	DISP_SEQ		
	FROM	WQPLIS.WPG.MW_STATS_AVG10A		
UNION ALL				
SELECT	*			
	,'MAX'	DISP_STATS		
	,3	DISP_SEQ		
	FROM	WQPLIS.WPG.MW_STATS_MAX10A		
UNION ALL				
SELECT	*			
	,'5 PERCENTILE'	DISP_STATS		
	,4	DISP_SEQ		
	FROM	WQPLIS.WPG.MW_STATS_PCTL05A		
UNION ALL				
SELECT	*			
	,'10 PERCENTILE'	DISP_STATS		
	,5	DISP_SEQ		
	FROM	WQPLIS.WPG.MW_STATS_PCTL10A		
UNION ALL	SELECT	*			
	,'MEDIAN'	DISP_STATS		
	,6	DISP_SEQ		
	FROM	WQPLIS.WPG.MW_STATS_PCTL50A		
UNION ALL				
SELECT	*			
	,'90 PERCENTILE'	DISP_STATS		
	,7	DISP_SEQ		
	FROM	WQPLIS.WPG.MW_STATS_PCTL90A		
UNION ALL	SELECT	*			
	,'95 PERCENTILE'	DISP_STATS		
	,8	DISP_SEQ		
	FROM	WQPLIS.WPG.MW_STATS_PCTL95A;


-- WPG.MW_STATS_AVG10A source

CREATE VIEW [WPG].[MW_STATS_AVG10A] AS				
SELECT	SMB.SITE_ID	SITE_ID,		
	SMB.YR	YR,		
	SMB.D_CODE	D_CODE,		
	SMB.TOTAL	TOTAL,		
	SMB.TEMPER_AVG	TEMPER,		
	SMB.PH_SC_AVG	PH_SC,		
	SMB.SAL_AVG	SAL,		
	SMB.COND_AVG	COND,		
	SMB.DO_AVG	DO,		
	SMB.DO_SAT_AVG	DO_SAT,		
	SMB.FLSCUFA_AVG	FLSCUFA,		
	SMB.TURB_SC_AVG	TURB_SC,		
	SMB.PAR_AVG	PAR,		
	CASE WHEN L_BOD5_CNT =0 THEN NULL ELSE '<' END	L_BOD5,	BOD5_AVG	BOD5,
	CASE WHEN L_FC_CNT =0 THEN NULL ELSE '<' END	L_FC,	FC_AVG	FC,
	CASE WHEN L_ECOLI_CNT =0 THEN NULL ELSE '<' END	L_ECOLI,	ECOLI_AVG	ECOLI,
	CASE WHEN L_PH_M_CNT =0 THEN NULL ELSE '<' END	L_PH_M,	PH_M_AVG	PH_M,
	CASE WHEN L_TURB_M_CNT =0 THEN NULL ELSE '<' END	L_TURB_M,	TURB_M_AVG	TURB_M,
	CASE WHEN L_NH4_CNT =0 THEN NULL ELSE '<' END	L_NH4,	NH4_AVG	NH4,
	CASE WHEN L_NO2_CNT =0 THEN NULL ELSE '<' END	L_NO2,	NO2_AVG	NO2,
	CASE WHEN L_NO3_CNT =0 THEN NULL ELSE '<' END	L_NO3,	NO3_AVG	NO3,
	CASE WHEN L_TKN_S_CNT =0 THEN NULL ELSE '<' END	L_TKN_S,	TKN_S_AVG	TKN_S,
	CASE WHEN L_TKN_P_CNT =0 THEN NULL ELSE '<' END	L_TKN_P,	TKN_P_AVG	TKN_P,
	CASE WHEN L_TKN_SP_CNT =0 THEN NULL ELSE '<' END	L_TKN_SP,	TKN_SP_AVG	TKN_SP,
	CASE WHEN L_PO4_CNT =0 THEN NULL ELSE '<' END	L_PO4,	PO4_AVG	PO4,
	CASE WHEN L_TP_S_CNT =0 THEN NULL ELSE '<' END	L_TP_S,	TP_S_AVG	TP_S,
	CASE WHEN L_TP_P_CNT =0 THEN NULL ELSE '<' END	L_TP_P,	TP_P_AVG	TP_P,
	CASE WHEN L_TP_SP_CNT =0 THEN NULL ELSE '<' END	L_TP_SP,	TP_SP_AVG	TP_SP,
	CASE WHEN L_SIO2_CNT =0 THEN NULL ELSE '<' END	L_SIO2,	SIO2_AVG	SIO2,
	CASE WHEN L_SS_CNT =0 THEN NULL ELSE '<' END	L_SS,	SS_AVG	SS,
	CASE WHEN L_TVS_CNT =0 THEN NULL ELSE '<' END	L_TVS,	TVS_AVG	TVS,
	CASE WHEN L_CHL_CNT =0 THEN NULL ELSE '<' END	L_CHL,	CHL_AVG	CHL,
	CASE WHEN L_PHAE_CNT =0 THEN NULL ELSE '<' END	L_PHAE,	PHAE_AVG	PHAE,
	SMB.SOL_RAD_AVG	SOL_RAD,		
	SMB.AIR_TEMP_AVG	AIR_TEMP,		
	SMB.WIND_SP_AVG	WIND_SP,		
	SMB.SD_AVG	SD,		
	SMB.NH3_AVG	NH3,		
	SMB.TIN_AVG	TIN,		
	SMB.TN_AVG	TN,		
	SMB.NH4_NM_AVG	NH4_NM,		
	SMB.NO2_NM_AVG	NO2_NM,		
	SMB.NO3_NM_AVG	NO3_NM,		
	SMB.TKN_NM_AVG	TKN_NM,		
	SMB.NOX_NM_AVG	NOX_NM,		
	SMB.TIN_NM_AVG	TIN_NM,		
	SMB.TN_NM_AVG	TN_NM,		
	SMB.PO4_PM_AVG	PO4_PM,		
	SMB.TP_PM_AVG	TP_PM,		
	SMB.TIN_PO4_MMR_AVG	TIN_PO4_MMR,		
	SMB.TN_TP_MMR_AVG	TN_TP_MMR		
FROM				
	(SELECT	SITE_ID,		
	REPORT_YR.ACC_YR	YR,		
--	YEAR(MDATE)	YR,		
	D_CODE	D_CODE,		
	COUNT(*)	TOTAL,		
	AVG(TEMPER) 	TEMPER_AVG,		
	AVG(PH_SC) 	PH_SC_AVG,		
	AVG(SAL) 	SAL_AVG,		
	AVG(COND) 	COND_AVG,		
	AVG(DO)	DO_AVG,		
	AVG(DO_SAT) 	DO_SAT_AVG,		
	AVG(FLSCUFA)	FLSCUFA_AVG,		
	AVG(TURB_SC) 	TURB_SC_AVG,		
	AVG(PAR)	PAR_AVG,		
	AVG(BOD5) 	BOD5_AVG,		
	EXP(AVG(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)))	FC_AVG,		
	EXP(AVG(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)))	ECOLI_AVG,		
	AVG(PH_M) 	PH_M_AVG,		
	AVG(TURB_M) 	TURB_M_AVG,		
	AVG(NH4) 	NH4_AVG,		
	AVG(NO2) 	NO2_AVG,		
	AVG(NO3) 	NO3_AVG,		
	AVG(TKN_S) 	TKN_S_AVG,		
	AVG(TKN_P) 	TKN_P_AVG,		
	AVG(TKN_SP) 	TKN_SP_AVG,		
	AVG(PO4) 	PO4_AVG,		
	AVG(TP_S) 	TP_S_AVG,		
	AVG(TP_P) 	TP_P_AVG,		
	AVG(TP_SP) 	TP_SP_AVG,		
	AVG(SIO2) 	SIO2_AVG,		
	AVG(SS) 	SS_AVG,		
	AVG(TVS) 	TVS_AVG,		
	AVG(CHL) 	CHL_AVG,		
	AVG(PHAE) 	PHAE_AVG,		
	AVG(SOL_RAD) 	SOL_RAD_AVG,		
	AVG(AIR_TEMP) 	AIR_TEMP_AVG,		
	AVG(WIND_SP) 	WIND_SP_AVG,		
	AVG(SD)	SD_AVG,		
	AVG(NH3) 	NH3_AVG,		
	AVG(TIN) 	TIN_AVG,		
	AVG(TN) 	TN_AVG,		
	AVG(NH4_NM)	NH4_NM_AVG,		
	AVG(NO2_NM)	NO2_NM_AVG,		
	AVG(NO3_NM)	NO3_NM_AVG,		
	AVG(TKN_NM)	TKN_NM_AVG,		
	AVG(NOX_NM)	NOX_NM_AVG,		
	AVG(TIN_NM)	TIN_NM_AVG,		
	AVG(TN_NM) 	TN_NM_AVG,		
	AVG(PO4_PM)	PO4_PM_AVG,		
	AVG(TP_PM)	TP_PM_AVG,		
	AVG(TIN_PO4_MMR)	TIN_PO4_MMR_AVG,		
	AVG(TN_TP_MMR)	TN_TP_MMR_AVG,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	L_FC_CNT,		
	COUNT(L_ECOLI)	L_ECOLI_CNT,		
	COUNT(L_PH_M)	L_PH_M_CNT,		
	COUNT(L_TURB_M)	L_TURB_M_CNT,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_TKN_S)	L_TKN_S_CNT,		
	COUNT(L_TKN_P)	L_TKN_P_CNT,		
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TP_S)	L_TP_S_CNT,		
	COUNT(L_TP_P)	L_TP_P_CNT,		
	COUNT(L_TP_SP)	L_TP_SP_CNT,		
	COUNT(L_SIO2)	L_SIO2_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHAE)	L_PHAE_CNT		
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B UNION ALL SELECT * FROM WPG.MW_AA) SMB,			
    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 				
    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR				
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR, D_CODE				
)	SMB;


-- WPG.MW_STATS_MAX10A source

CREATE VIEW [WPG].[MW_STATS_MAX10A] AS				
SELECT	SMB.SITE_ID	SITE_ID,		
	SMB.YR	YR,		
	SMB.D_CODE	D_CODE,		
	SMB.TOTAL	TOTAL,		
	SMB.TEMPER_MAX	TEMPER,		
	SMB.PH_SC_MAX	PH_SC,		
	SMB.SAL_MAX	SAL,		
	SMB.COND_MAX	COND,		
	SMB.DO_MAX	DO,		
	SMB.DO_SAT_MAX	DO_SAT,		
	SMB.FLSCUFA_MAX	FLSCUFA,		
	SMB.TURB_SC_MAX	TURB_SC,		
	SMB.PAR_MAX	PAR,		
	CASE WHEN L_BOD5_CNT = TOTAL THEN '<' ELSE NULL END	L_BOD5,	BOD5_MAX	BOD5,
	CASE WHEN L_FC_CNT = TOTAL THEN '<' ELSE NULL END	L_FC,	FC_MAX	FC,
	CASE WHEN L_ECOLI_CNT = TOTAL THEN '<' ELSE NULL END	L_ECOLI,	ECOLI_MAX	ECOLI,
	CASE WHEN L_PH_M_CNT = TOTAL THEN '<' ELSE NULL END	L_PH_M,	PH_M_MAX	PH_M,
	CASE WHEN L_TURB_M_CNT = TOTAL THEN '<' ELSE NULL END	L_TURB_M,	TURB_M_MAX	TURB_M,
	CASE WHEN L_NH4_CNT = TOTAL THEN '<' ELSE NULL END	L_NH4,	NH4_MAX	NH4,
	CASE WHEN L_NO2_CNT = TOTAL THEN '<' ELSE NULL END	L_NO2,	NO2_MAX	NO2,
	CASE WHEN L_NO3_CNT = TOTAL THEN '<' ELSE NULL END	L_NO3,	NO3_MAX	NO3,
	CASE WHEN L_TKN_S_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_S,	TKN_S_MAX	TKN_S,
	CASE WHEN L_TKN_P_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_P,	TKN_P_MAX	TKN_P,
	CASE WHEN L_TKN_SP_CNT = TOTAL THEN '<' ELSE NULL END	L_TKN_SP,	TKN_SP_MAX	TKN_SP,
	CASE WHEN L_PO4_CNT = TOTAL THEN '<' ELSE NULL END	L_PO4,	PO4_MAX	PO4,
	CASE WHEN L_TP_S_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_S,	TP_S_MAX	TP_S,
	CASE WHEN L_TP_P_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_P,	TP_P_MAX	TP_P,
	CASE WHEN L_TP_SP_CNT = TOTAL THEN '<' ELSE NULL END	L_TP_SP,	TP_SP_MAX	TP_SP,
	CASE WHEN L_SIO2_CNT = TOTAL THEN '<' ELSE NULL END	L_SIO2,	SIO2_MAX	SIO2,
	CASE WHEN L_SS_CNT = TOTAL THEN '<' ELSE NULL END	L_SS,	SS_MAX	SS,
	CASE WHEN L_TVS_CNT = TOTAL THEN '<' ELSE NULL END	L_TVS,	TVS_MAX	TVS,
	CASE WHEN L_CHL_CNT = TOTAL THEN '<' ELSE NULL END	L_CHL,	CHL_MAX	CHL,
	CASE WHEN L_PHAE_CNT = TOTAL THEN '<' ELSE NULL END	L_PHAE,	PHAE_MAX	PHAE,
	SMB.SOL_RAD_MAX	SOL_RAD,		
	SMB.AIR_TEMP_MAX	AIR_TEMP,		
	SMB.WIND_SP_MAX	WIND_SP,		
	SMB.SD_MAX	SD,		
	SMB.NH3_MAX	NH3,		
	SMB.TIN_MAX	TIN,		
	SMB.TN_MAX	TN,		
	SMB.NH4_NM_MAX	NH4_NM,		
	SMB.NO2_NM_MAX	NO2_NM,		
	SMB.NO3_NM_MAX	NO3_NM,		
	SMB.TKN_NM_MAX	TKN_NM,		
	SMB.NOX_NM_MAX	NOX_NM,		
	SMB.TIN_NM_MAX	TIN_NM,		
	SMB.TN_NM_MAX	TN_NM,		
	SMB.PO4_PM_MAX	PO4_PM,		
	SMB.TP_PM_MAX	TP_PM,		
	SMB.TIN_PO4_MMR_MAX	TIN_PO4_MMR,		
	SMB.TN_TP_MMR_MAX	TN_TP_MMR		
FROM				
	(SELECT	SITE_ID,		
	REPORT_YR.ACC_YR	YR,		
--	YEAR(MDATE)	YR,		
	D_CODE	D_CODE,		
	COUNT(*)	TOTAL,		
	MAX(TEMPER) 	TEMPER_MAX,		
	MAX(PH_SC) 	PH_SC_MAX,		
	MAX(SAL) 	SAL_MAX,		
	MAX(COND) 	COND_MAX,		
	MAX(DO)	DO_MAX,		
	MAX(DO_SAT) 	DO_SAT_MAX,		
	MAX(FLSCUFA)	FLSCUFA_MAX,		
	MAX(TURB_SC) 	TURB_SC_MAX,		
	MAX(PAR)	PAR_MAX,		
	MAX(BOD5) 	BOD5_MAX,		
	EXP(MAX(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)))	FC_MAX,		
	EXP(MAX(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)))	ECOLI_MAX,		
	MAX(PH_M) 	PH_M_MAX,		
	MAX(TURB_M) 	TURB_M_MAX,		
	MAX(NH4) 	NH4_MAX,		
	MAX(NO2) 	NO2_MAX,		
	MAX(NO3) 	NO3_MAX,		
	MAX(TKN_S) 	TKN_S_MAX,		
	MAX(TKN_P) 	TKN_P_MAX,		
	MAX(TKN_SP) 	TKN_SP_MAX,		
	MAX(PO4) 	PO4_MAX,		
	MAX(TP_S) 	TP_S_MAX,		
	MAX(TP_P) 	TP_P_MAX,		
	MAX(TP_SP) 	TP_SP_MAX,		
	MAX(SIO2) 	SIO2_MAX,		
	MAX(SS) 	SS_MAX,		
	MAX(TVS) 	TVS_MAX,		
	MAX(CHL) 	CHL_MAX,		
	MAX(PHAE) 	PHAE_MAX,		
	MAX(SOL_RAD) 	SOL_RAD_MAX,		
	MAX(AIR_TEMP) 	AIR_TEMP_MAX,		
	MAX(WIND_SP) 	WIND_SP_MAX,		
	MAX(SD)	SD_MAX,		
	MAX(NH3) 	NH3_MAX,		
	MAX(TIN) 	TIN_MAX,		
	MAX(TN) 	TN_MAX,		
	MAX(NH4_NM)	NH4_NM_MAX,		
	MAX(NO2_NM)	NO2_NM_MAX,		
	MAX(NO3_NM)	NO3_NM_MAX,		
	MAX(TKN_NM)	TKN_NM_MAX,		
	MAX(NOX_NM)	NOX_NM_MAX,		
	MAX(TIN_NM)	TIN_NM_MAX,		
	MAX(TN_NM) 	TN_NM_MAX,		
	MAX(PO4_PM)	PO4_PM_MAX,		
	MAX(TP_PM)	TP_PM_MAX,		
	MAX(TIN_PO4_MMR)	TIN_PO4_MMR_MAX,		
	MAX(TN_TP_MMR)	TN_TP_MMR_MAX,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	L_FC_CNT,		
	COUNT(L_ECOLI)	L_ECOLI_CNT,		
	COUNT(L_PH_M)	L_PH_M_CNT,		
	COUNT(L_TURB_M)	L_TURB_M_CNT,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_TKN_S)	L_TKN_S_CNT,		
	COUNT(L_TKN_P)	L_TKN_P_CNT,		
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TP_S)	L_TP_S_CNT,		
	COUNT(L_TP_P)	L_TP_P_CNT,		
	COUNT(L_TP_SP)	L_TP_SP_CNT,		
	COUNT(L_SIO2)	L_SIO2_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHAE)	L_PHAE_CNT		
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B UNION ALL SELECT * FROM WPG.MW_AA) SMB,			
    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 				
    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR				
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR, D_CODE				
)	SMB;


-- WPG.MW_STATS_MED10A source

CREATE VIEW [WPG].[MW_STATS_MED10A] AS				
SELECT	SMB.SITE_ID	SITE_ID,		
	SMB.YR	YR,		
	SMB.D_CODE	D_CODE,		
	TOTAL	TOTAL,		
	SMB.TEMPER_MED	TEMPER,		
	SMB.PH_SC_MED	PH_SC,		
	SMB.SAL_MED	SAL,		
	SMB.COND_MED	COND,		
	SMB.DO_MED	DO,		
	SMB.DO_SAT_MED	DO_SAT,		
	SMB.FLSCUFA_MED	FLSCUFA,		
	SMB.TURB_SC_MED	TURB_SC,		
	SMB.PAR_MED	PAR,		
	CASE WHEN L_BOD5_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_BOD5,	BOD5_MED	BOD5,
	CASE WHEN L_FC_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_FC,	EXP(LOG_FC_MED)	FC,
	CASE WHEN L_ECOLI_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_ECOLI,	EXP(LOG_ECOLI_MED)	ECOLI,
	CASE WHEN L_PH_M_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_PH_M,	PH_M_MED	PH_M,
	CASE WHEN L_TURB_M_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TURB_M,	TURB_M_MED	TURB_M,
	CASE WHEN L_NH4_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_NH4,	NH4_MED	NH4,
	CASE WHEN L_NO2_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_NO2,	NO2_MED	NO2,
	CASE WHEN L_NO3_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_NO3,	NO3_MED	NO3,
	CASE WHEN L_TKN_S_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TKN_S,	TKN_S_MED	TKN_S,
	CASE WHEN L_TKN_P_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TKN_P,	TKN_P_MED	TKN_P,
	CASE WHEN L_TKN_SP_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TKN_SP,	TKN_SP_MED	TKN_SP,
	CASE WHEN L_PO4_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_PO4,	PO4_MED	PO4,
	CASE WHEN L_TP_S_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TP_S,	TP_S_MED	TP_S,
	CASE WHEN L_TP_P_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TP_P,	TP_P_MED	TP_P,
	CASE WHEN L_TP_SP_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TP_SP,	TP_SP_MED	TP_SP,
	CASE WHEN L_SIO2_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_SIO2,	SIO2_MED	SIO2,
	CASE WHEN L_SS_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_SS,	SS_MED	SS,
	CASE WHEN L_TVS_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TVS,	TVS_MED	TVS,
	CASE WHEN L_CHL_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_CHL,	CHL_MED	CHL,
	CASE WHEN L_PHAE_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_PHAE,	PHAE_MED	PHAE,
	SMB.SOL_RAD_MED	SOL_RAD,		
	SMB.AIR_TEMP_MED	AIR_TEMP,		
	SMB.WIND_SP_MED	WIND_SP,		
	SMB.SD_MED	SD,		
	SMB.NH3_MED	NH3,		
	SMB.TIN_MED	TIN,		
	SMB.TN_MED	TN,		
	SMB.NH4_NM_MED	NH4_NM,		
	SMB.NO2_NM_MED	NO2_NM,		
	SMB.NO3_NM_MED	NO3_NM,		
	SMB.TKN_NM_MED	TKN_NM,		
	SMB.NOX_NM_MED	NOX_NM,		
	SMB.TIN_NM_MED	TIN_NM,		
	SMB.TN_NM_MED	TN_NM,		
	SMB.PO4_PM_MED	PO4_PM,		
	SMB.TP_PM_MED	TP_PM,		
	SMB.TIN_PO4_MMR_MED	TIN_PO4_MMR,		
	SMB.TN_TP_MMR_MED	TN_TP_MMR		
FROM				
(SELECT DISTINCT				
	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	D_CODE	D_CODE,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TEMPER)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TEMPER_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PH_SC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PH_SC_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SAL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SAL_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY COND)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	COND_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DO) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	DO_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DO_SAT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	DO_SAT_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY FLSCUFA) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	FLSCUFA_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TURB_SC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TURB_SC_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PAR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PAR_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY BOD5)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	BOD5_MED,		
    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	LOG_FC_MED,			
    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	LOG_ECOLI_MED,			
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PH_M)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PH_M_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TURB_M)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TURB_M_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NH4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH4_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO2_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NO3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO3_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TKN_S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_S_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TKN_P)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_P_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TKN_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_SP_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PO4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PO4_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TP_S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_S_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TP_P)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_P_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TP_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_SP_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SIO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SIO2_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SS_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TVS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TVS_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CHL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	CHL_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PHAE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PHAE_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SOL_RAD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SOL_RAD_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY AIR_TEMP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	AIR_TEMP_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY WIND_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	WIND_SP_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SD) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SD_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NH3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH3_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TIN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NH4_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH4_NM_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NO2_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO2_NM_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NO3_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO3_NM_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TKN_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_NM_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NOX_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NOX_NM_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TIN_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_NM_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TN_NM)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_NM_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PO4_PM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PO4_PM_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TP_PM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_PM_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TIN_PO4_MMR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_PO4_MMR_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TN_TP_MMR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_TP_MMR_MED		
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B UNION ALL SELECT * FROM WPG.MW_AA) SMB,			
    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 				
    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR				
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9	) SMB			
INNER JOIN				
(SELECT	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	D_CODE	D_CODE,		
	COUNT(*)	TOTAL,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	L_FC_CNT,		
	COUNT(L_ECOLI)	L_ECOLI_CNT,		
	COUNT(L_PH_M)	L_PH_M_CNT,		
	COUNT(L_TURB_M)	L_TURB_M_CNT,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_TKN_S)	L_TKN_S_CNT,		
	COUNT(L_TKN_P)	L_TKN_P_CNT,		
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TP_S)	L_TP_S_CNT,		
	COUNT(L_TP_P)	L_TP_P_CNT,		
	COUNT(L_TP_SP)	L_TP_SP_CNT,		
	COUNT(L_SIO2)	L_SIO2_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHAE)	L_PHAE_CNT		
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B UNION ALL SELECT * FROM WPG.MW_AA) SMB,			
    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 				
    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR				
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR, D_CODE	) L_SMB			
ON SMB.SITE_ID = L_SMB.SITE_ID AND SMB.YR = L_SMB.YR AND SMB.D_CODE = L_SMB.D_CODE;


-- WPG.MW_STATS_MIN10A source

CREATE VIEW [WPG].[MW_STATS_MIN10A] AS				
SELECT	SMB.SITE_ID	SITE_ID,		
	SMB.YR	YR,		
	SMB.D_CODE	D_CODE,		
	SMB.TOTAL	TOTAL,		
	SMB.TEMPER_MIN	TEMPER,		
	SMB.PH_SC_MIN	PH_SC,		
	SMB.SAL_MIN	SAL,		
	SMB.COND_MIN	COND,		
	SMB.DO_MIN	DO,		
	SMB.DO_SAT_MIN	DO_SAT,		
	SMB.FLSCUFA_MIN	FLSCUFA,		
	SMB.TURB_SC_MIN	TURB_SC,		
	SMB.PAR_MIN	PAR,		
	CASE WHEN L_BOD5_CNT =0 THEN NULL ELSE '<' END	L_BOD5,	BOD5_MIN	BOD5,
	CASE WHEN L_FC_CNT =0 THEN NULL ELSE '<' END	L_FC,	FC_MIN	FC,
	CASE WHEN L_ECOLI_CNT =0 THEN NULL ELSE '<' END	L_ECOLI,	ECOLI_MIN	ECOLI,
	CASE WHEN L_PH_M_CNT =0 THEN NULL ELSE '<' END	L_PH_M,	PH_M_MIN	PH_M,
	CASE WHEN L_TURB_M_CNT =0 THEN NULL ELSE '<' END	L_TURB_M,	TURB_M_MIN	TURB_M,
	CASE WHEN L_NH4_CNT =0 THEN NULL ELSE '<' END	L_NH4,	NH4_MIN	NH4,
	CASE WHEN L_NO2_CNT =0 THEN NULL ELSE '<' END	L_NO2,	NO2_MIN	NO2,
	CASE WHEN L_NO3_CNT =0 THEN NULL ELSE '<' END	L_NO3,	NO3_MIN	NO3,
	CASE WHEN L_TKN_S_CNT =0 THEN NULL ELSE '<' END	L_TKN_S,	TKN_S_MIN	TKN_S,
	CASE WHEN L_TKN_P_CNT =0 THEN NULL ELSE '<' END	L_TKN_P,	TKN_P_MIN	TKN_P,
	CASE WHEN L_TKN_SP_CNT =0 THEN NULL ELSE '<' END	L_TKN_SP,	TKN_SP_MIN	TKN_SP,
	CASE WHEN L_PO4_CNT =0 THEN NULL ELSE '<' END	L_PO4,	PO4_MIN	PO4,
	CASE WHEN L_TP_S_CNT =0 THEN NULL ELSE '<' END	L_TP_S,	TP_S_MIN	TP_S,
	CASE WHEN L_TP_P_CNT =0 THEN NULL ELSE '<' END	L_TP_P,	TP_P_MIN	TP_P,
	CASE WHEN L_TP_SP_CNT =0 THEN NULL ELSE '<' END	L_TP_SP,	TP_SP_MIN	TP_SP,
	CASE WHEN L_SIO2_CNT =0 THEN NULL ELSE '<' END	L_SIO2,	SIO2_MIN	SIO2,
	CASE WHEN L_SS_CNT =0 THEN NULL ELSE '<' END	L_SS,	SS_MIN	SS,
	CASE WHEN L_TVS_CNT =0 THEN NULL ELSE '<' END	L_TVS,	TVS_MIN	TVS,
	CASE WHEN L_CHL_CNT =0 THEN NULL ELSE '<' END	L_CHL,	CHL_MIN	CHL,
	CASE WHEN L_PHAE_CNT =0 THEN NULL ELSE '<' END	L_PHAE,	PHAE_MIN	PHAE,
	SMB.SOL_RAD_MIN	SOL_RAD,		
	SMB.AIR_TEMP_MIN	AIR_TEMP,		
	SMB.WIND_SP_MIN	WIND_SP,		
	SMB.SD_MIN	SD,		
	SMB.NH3_MIN	NH3,		
	SMB.TIN_MIN	TIN,		
	SMB.TN_MIN	TN,		
	SMB.NH4_NM_MIN	NH4_NM,		
	SMB.NO2_NM_MIN	NO2_NM,		
	SMB.NO3_NM_MIN	NO3_NM,		
	SMB.TKN_NM_MIN	TKN_NM,		
	SMB.NOX_NM_MIN	NOX_NM,		
	SMB.TIN_NM_MIN	TIN_NM,		
	SMB.TN_NM_MIN	TN_NM,		
	SMB.PO4_PM_MIN	PO4_PM,		
	SMB.TP_PM_MIN	TP_PM,		
	SMB.TIN_PO4_MMR_MIN	TIN_PO4_MMR,		
	SMB.TN_TP_MMR_MIN	TN_TP_MMR		
FROM				
	(SELECT	SITE_ID,		
	REPORT_YR.ACC_YR	YR,		
--	YEAR(MDATE)	YR,		
	D_CODE	D_CODE,		
	COUNT(*)	TOTAL,		
	MIN(TEMPER) 	TEMPER_MIN,		
	MIN(PH_SC) 	PH_SC_MIN,		
	MIN(SAL) 	SAL_MIN,		
	MIN(COND) 	COND_MIN,		
	MIN(DO)	DO_MIN,		
	MIN(DO_SAT) 	DO_SAT_MIN,		
	MIN(FLSCUFA)	FLSCUFA_MIN,		
	MIN(TURB_SC) 	TURB_SC_MIN,		
	MIN(PAR)	PAR_MIN,		
	MIN(BOD5) 	BOD5_MIN,		
	EXP(MIN(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)))	FC_MIN,		
	EXP(MIN(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)))	ECOLI_MIN,		
	MIN(PH_M) 	PH_M_MIN,		
	MIN(TURB_M) 	TURB_M_MIN,		
	MIN(NH4) 	NH4_MIN,		
	MIN(NO2) 	NO2_MIN,		
	MIN(NO3) 	NO3_MIN,		
	MIN(TKN_S) 	TKN_S_MIN,		
	MIN(TKN_P) 	TKN_P_MIN,		
	MIN(TKN_SP) 	TKN_SP_MIN,		
	MIN(PO4) 	PO4_MIN,		
	MIN(TP_S) 	TP_S_MIN,		
	MIN(TP_P) 	TP_P_MIN,		
	MIN(TP_SP) 	TP_SP_MIN,		
	MIN(SIO2) 	SIO2_MIN,		
	MIN(SS) 	SS_MIN,		
	MIN(TVS) 	TVS_MIN,		
	MIN(CHL) 	CHL_MIN,		
	MIN(PHAE) 	PHAE_MIN,		
	MIN(SOL_RAD) 	SOL_RAD_MIN,		
	MIN(AIR_TEMP) 	AIR_TEMP_MIN,		
	MIN(WIND_SP) 	WIND_SP_MIN,		
	MIN(SD)	SD_MIN,		
	MIN(NH3) 	NH3_MIN,		
	MIN(TIN) 	TIN_MIN,		
	MIN(TN) 	TN_MIN,		
	MIN(NH4_NM)	NH4_NM_MIN,		
	MIN(NO2_NM)	NO2_NM_MIN,		
	MIN(NO3_NM)	NO3_NM_MIN,		
	MIN(TKN_NM)	TKN_NM_MIN,		
	MIN(NOX_NM)	NOX_NM_MIN,		
	MIN(TIN_NM)	TIN_NM_MIN,		
	MIN(TN_NM) 	TN_NM_MIN,		
	MIN(PO4_PM)	PO4_PM_MIN,		
	MIN(TP_PM)	TP_PM_MIN,		
	MIN(TIN_PO4_MMR)	TIN_PO4_MMR_MIN,		
	MIN(TN_TP_MMR)	TN_TP_MMR_MIN,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	L_FC_CNT,		
	COUNT(L_ECOLI)	L_ECOLI_CNT,		
	COUNT(L_PH_M)	L_PH_M_CNT,		
	COUNT(L_TURB_M)	L_TURB_M_CNT,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_TKN_S)	L_TKN_S_CNT,		
	COUNT(L_TKN_P)	L_TKN_P_CNT,		
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TP_S)	L_TP_S_CNT,		
	COUNT(L_TP_P)	L_TP_P_CNT,		
	COUNT(L_TP_SP)	L_TP_SP_CNT,		
	COUNT(L_SIO2)	L_SIO2_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHAE)	L_PHAE_CNT		
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B UNION ALL SELECT * FROM WPG.MW_AA) SMB,			
    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 				
    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR				
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR, D_CODE				
)	SMB;


-- WPG.MW_STATS_PCTL05A source

CREATE VIEW [WPG].[MW_STATS_PCTL05A] AS				
SELECT	SMB.SITE_ID	SITE_ID,		
	SMB.YR	YR,		
	SMB.D_CODE	D_CODE,		
	TOTAL	TOTAL,		
	SMB.TEMPER_PCTL	TEMPER,		
	SMB.PH_SC_PCTL	PH_SC,		
	SMB.SAL_PCTL	SAL,		
	SMB.COND_PCTL	COND,		
	SMB.DO_PCTL	DO,		
	SMB.DO_SAT_PCTL	DO_SAT,		
	SMB.FLSCUFA_PCTL	FLSCUFA,		
	SMB.TURB_SC_PCTL	TURB_SC,		
	SMB.PAR_PCTL	PAR,		
	CASE WHEN L_BOD5_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_BOD5_PCTL,	BOD5_PCTL	BOD5,
	CASE WHEN L_FC_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_FC_PCTL,	EXP(LOG_FC_PCTL)	FC,
	CASE WHEN L_ECOLI_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_ECOLI_PCTL,	EXP(LOG_ECOLI_PCTL)	ECOLI,
	CASE WHEN L_PH_M_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_PH_M_PCTL,	PH_M_PCTL	PH_M,
	CASE WHEN L_TURB_M_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TURB_M_PCTL,	TURB_M_PCTL	TURB_M,
	CASE WHEN L_NH4_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_NH4_PCTL,	NH4_PCTL	NH4,
	CASE WHEN L_NO2_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_NO2_PCTL,	NO2_PCTL	NO2,
	CASE WHEN L_NO3_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_NO3_PCTL,	NO3_PCTL	NO3,
	CASE WHEN L_TKN_S_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TKN_S_PCTL,	TKN_S_PCTL	TKN_S,
	CASE WHEN L_TKN_P_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TKN_P_PCTL,	TKN_P_PCTL	TKN_P,
	CASE WHEN L_TKN_SP_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TKN_SP_PCTL,	TKN_SP_PCTL	TKN_SP,
	CASE WHEN L_PO4_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_PO4_PCTL,	PO4_PCTL	PO4,
	CASE WHEN L_TP_S_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TP_S_PCTL,	TP_S_PCTL	TP_S,
	CASE WHEN L_TP_P_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TP_P_PCTL,	TP_P_PCTL	TP_P,
	CASE WHEN L_TP_SP_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TP_SP_PCTL,	TP_SP_PCTL	TP_SP,
	CASE WHEN L_SIO2_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_SIO2_PCTL,	SIO2_PCTL	SIO2,
	CASE WHEN L_SS_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_SS_PCTL,	SS_PCTL	SS,
	CASE WHEN L_TVS_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TVS_PCTL,	TVS_PCTL	TVS,
	CASE WHEN L_CHL_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_CHL_PCTL,	CHL_PCTL	CHL,
	CASE WHEN L_PHAE_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_PHAE_PCTL,	PHAE_PCTL	PHAE,
	SMB.SOL_RAD_PCTL	SOL_RAD,		
	SMB.AIR_TEMP_PCTL	AIR_TEMP,		
	SMB.WIND_SP_PCTL	WIND_SP,		
	SMB.SD_PCTL	SD,		
	SMB.NH3_PCTL	NH3,		
	SMB.TIN_PCTL	TIN,		
	SMB.TN_PCTL	TN,		
	SMB.NH4_NM_PCTL	NH4_NM,		
	SMB.NO2_NM_PCTL	NO2_NM,		
	SMB.NO3_NM_PCTL	NO3_NM,		
	SMB.TKN_NM_PCTL	TKN_NM,		
	SMB.NOX_NM_PCTL	NOX_NM,		
	SMB.TIN_NM_PCTL	TIN_NM,		
	SMB.TN_NM_PCTL	TN_NM,		
	SMB.PO4_PM_PCTL	PO4_PM,		
	SMB.TP_PM_PCTL	TP_PM,		
	SMB.TIN_PO4_MMR_PCTL	TIN_PO4_MMR,		
	SMB.TN_TP_MMR_PCTL	TN_TP_MMR		
FROM				
(SELECT DISTINCT				
	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	D_CODE	D_CODE,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TEMPER)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TEMPER_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY PH_SC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PH_SC_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY SAL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SAL_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY COND)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	COND_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY DO) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	DO_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY DO_SAT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	DO_SAT_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY FLSCUFA) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	FLSCUFA_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TURB_SC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TURB_SC_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY PAR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PAR_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY BOD5)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	BOD5_PCTL,		
    PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	LOG_FC_PCTL,			
    PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	LOG_ECOLI_PCTL,			
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY PH_M)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PH_M_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TURB_M)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TURB_M_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY NH4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH4_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY NO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO2_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY NO3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO3_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TKN_S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_S_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TKN_P)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_P_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TKN_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_SP_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY PO4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PO4_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TP_S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_S_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TP_P)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_P_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TP_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_SP_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY SIO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SIO2_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY SS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SS_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TVS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TVS_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY CHL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	CHL_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY PHAE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PHAE_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY SOL_RAD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SOL_RAD_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY AIR_TEMP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	AIR_TEMP_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY WIND_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	WIND_SP_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY SD) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SD_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY NH3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH3_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TIN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY NH4_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH4_NM_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY NO2_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO2_NM_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY NO3_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO3_NM_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TKN_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_NM_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY NOX_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NOX_NM_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TIN_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_NM_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TN_NM)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_NM_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY PO4_PM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PO4_PM_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TP_PM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_PM_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TIN_PO4_MMR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_PO4_MMR_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TN_TP_MMR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_TP_MMR_PCTL		
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B UNION ALL SELECT * FROM WPG.MW_AA) SMB,			
    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 				
    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR				
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9	) SMB			
INNER JOIN				
(SELECT	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	D_CODE	D_CODE,		
	COUNT(*)	TOTAL,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	L_FC_CNT,		
	COUNT(L_ECOLI)	L_ECOLI_CNT,		
	COUNT(L_PH_M)	L_PH_M_CNT,		
	COUNT(L_TURB_M)	L_TURB_M_CNT,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_TKN_S)	L_TKN_S_CNT,		
	COUNT(L_TKN_P)	L_TKN_P_CNT,		
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TP_S)	L_TP_S_CNT,		
	COUNT(L_TP_P)	L_TP_P_CNT,		
	COUNT(L_TP_SP)	L_TP_SP_CNT,		
	COUNT(L_SIO2)	L_SIO2_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHAE)	L_PHAE_CNT		
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B UNION ALL SELECT * FROM WPG.MW_AA) SMB,			
    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 				
    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR				
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR, D_CODE	) L_SMB			
ON SMB.SITE_ID = L_SMB.SITE_ID AND SMB.YR = L_SMB.YR AND SMB.D_CODE = L_SMB.D_CODE;


-- WPG.MW_STATS_PCTL10A source

CREATE VIEW [WPG].[MW_STATS_PCTL10A] AS				
SELECT	SMB.SITE_ID	SITE_ID,		
	SMB.YR	YR,		
	SMB.D_CODE	D_CODE,		
	TOTAL	TOTAL,		
	SMB.TEMPER_PCTL	TEMPER,		
	SMB.PH_SC_PCTL	PH_SC,		
	SMB.SAL_PCTL	SAL,		
	SMB.COND_PCTL	COND,		
	SMB.DO_PCTL	DO,		
	SMB.DO_SAT_PCTL	DO_SAT,		
	SMB.FLSCUFA_PCTL	FLSCUFA,		
	SMB.TURB_SC_PCTL	TURB_SC,		
	SMB.PAR_PCTL	PAR,		
	CASE WHEN L_BOD5_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_BOD5_PCTL,	BOD5_PCTL	BOD5,
	CASE WHEN L_FC_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_FC_PCTL,	EXP(LOG_FC_PCTL)	FC,
	CASE WHEN L_ECOLI_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_ECOLI_PCTL,	EXP(LOG_ECOLI_PCTL)	ECOLI,
	CASE WHEN L_PH_M_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_PH_M_PCTL,	PH_M_PCTL	PH_M,
	CASE WHEN L_TURB_M_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TURB_M_PCTL,	TURB_M_PCTL	TURB_M,
	CASE WHEN L_NH4_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_NH4_PCTL,	NH4_PCTL	NH4,
	CASE WHEN L_NO2_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_NO2_PCTL,	NO2_PCTL	NO2,
	CASE WHEN L_NO3_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_NO3_PCTL,	NO3_PCTL	NO3,
	CASE WHEN L_TKN_S_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TKN_S_PCTL,	TKN_S_PCTL	TKN_S,
	CASE WHEN L_TKN_P_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TKN_P_PCTL,	TKN_P_PCTL	TKN_P,
	CASE WHEN L_TKN_SP_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TKN_SP_PCTL,	TKN_SP_PCTL	TKN_SP,
	CASE WHEN L_PO4_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_PO4_PCTL,	PO4_PCTL	PO4,
	CASE WHEN L_TP_S_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TP_S_PCTL,	TP_S_PCTL	TP_S,
	CASE WHEN L_TP_P_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TP_P_PCTL,	TP_P_PCTL	TP_P,
	CASE WHEN L_TP_SP_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TP_SP_PCTL,	TP_SP_PCTL	TP_SP,
	CASE WHEN L_SIO2_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_SIO2_PCTL,	SIO2_PCTL	SIO2,
	CASE WHEN L_SS_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_SS_PCTL,	SS_PCTL	SS,
	CASE WHEN L_TVS_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TVS_PCTL,	TVS_PCTL	TVS,
	CASE WHEN L_CHL_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_CHL_PCTL,	CHL_PCTL	CHL,
	CASE WHEN L_PHAE_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_PHAE_PCTL,	PHAE_PCTL	PHAE,
	SMB.SOL_RAD_PCTL	SOL_RAD,		
	SMB.AIR_TEMP_PCTL	AIR_TEMP,		
	SMB.WIND_SP_PCTL	WIND_SP,		
	SMB.SD_PCTL	SD,		
	SMB.NH3_PCTL	NH3,		
	SMB.TIN_PCTL	TIN,		
	SMB.TN_PCTL	TN,		
	SMB.NH4_NM_PCTL	NH4_NM,		
	SMB.NO2_NM_PCTL	NO2_NM,		
	SMB.NO3_NM_PCTL	NO3_NM,		
	SMB.TKN_NM_PCTL	TKN_NM,		
	SMB.NOX_NM_PCTL	NOX_NM,		
	SMB.TIN_NM_PCTL	TIN_NM,		
	SMB.TN_NM_PCTL	TN_NM,		
	SMB.PO4_PM_PCTL	PO4_PM,		
	SMB.TP_PM_PCTL	TP_PM,		
	SMB.TIN_PO4_MMR_PCTL	TIN_PO4_MMR,		
	SMB.TN_TP_MMR_PCTL	TN_TP_MMR		
FROM				
(SELECT DISTINCT				
	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	D_CODE	D_CODE,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TEMPER)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TEMPER_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY PH_SC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PH_SC_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY SAL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SAL_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY COND)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	COND_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY DO) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	DO_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY DO_SAT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	DO_SAT_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY FLSCUFA) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	FLSCUFA_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TURB_SC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TURB_SC_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY PAR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PAR_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY BOD5)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	BOD5_PCTL,		
    PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	LOG_FC_PCTL,			
    PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	LOG_ECOLI_PCTL,			
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY PH_M)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PH_M_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TURB_M)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TURB_M_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY NH4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH4_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY NO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO2_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY NO3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO3_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TKN_S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_S_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TKN_P)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_P_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TKN_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_SP_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY PO4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PO4_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TP_S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_S_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TP_P)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_P_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TP_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_SP_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY SIO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SIO2_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY SS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SS_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TVS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TVS_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY CHL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	CHL_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY PHAE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PHAE_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY SOL_RAD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SOL_RAD_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY AIR_TEMP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	AIR_TEMP_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY WIND_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	WIND_SP_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY SD) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SD_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY NH3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH3_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TIN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY NH4_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH4_NM_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY NO2_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO2_NM_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY NO3_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO3_NM_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TKN_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_NM_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY NOX_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NOX_NM_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TIN_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_NM_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TN_NM)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_NM_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY PO4_PM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PO4_PM_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TP_PM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_PM_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TIN_PO4_MMR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_PO4_MMR_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TN_TP_MMR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_TP_MMR_PCTL		
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B UNION ALL SELECT * FROM WPG.MW_AA) SMB,			
    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 				
    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR				
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9	) SMB			
INNER JOIN				
(SELECT	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	D_CODE	D_CODE,		
	COUNT(*)	TOTAL,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	L_FC_CNT,		
	COUNT(L_ECOLI)	L_ECOLI_CNT,		
	COUNT(L_PH_M)	L_PH_M_CNT,		
	COUNT(L_TURB_M)	L_TURB_M_CNT,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_TKN_S)	L_TKN_S_CNT,		
	COUNT(L_TKN_P)	L_TKN_P_CNT,		
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TP_S)	L_TP_S_CNT,		
	COUNT(L_TP_P)	L_TP_P_CNT,		
	COUNT(L_TP_SP)	L_TP_SP_CNT,		
	COUNT(L_SIO2)	L_SIO2_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHAE)	L_PHAE_CNT		
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B UNION ALL SELECT * FROM WPG.MW_AA) SMB,			
    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 				
    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR				
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR, D_CODE	) L_SMB			
ON SMB.SITE_ID = L_SMB.SITE_ID AND SMB.YR = L_SMB.YR AND SMB.D_CODE = L_SMB.D_CODE;


-- WPG.MW_STATS_PCTL50A source

CREATE VIEW [WPG].[MW_STATS_PCTL50A] AS				
SELECT	SMB.SITE_ID	SITE_ID,		
	SMB.YR	YR,		
	SMB.D_CODE	D_CODE,		
	TOTAL	TOTAL,		
	SMB.TEMPER_PCTL	TEMPER,		
	SMB.PH_SC_PCTL	PH_SC,		
	SMB.SAL_PCTL	SAL,		
	SMB.COND_PCTL	COND,		
	SMB.DO_PCTL	DO,		
	SMB.DO_SAT_PCTL	DO_SAT,		
	SMB.FLSCUFA_PCTL	FLSCUFA,		
	SMB.TURB_SC_PCTL	TURB_SC,		
	SMB.PAR_PCTL	PAR,		
	CASE WHEN L_BOD5_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_BOD5_PCTL,	BOD5_PCTL	BOD5,
	CASE WHEN L_FC_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_FC_PCTL,	EXP(LOG_FC_PCTL)	FC,
	CASE WHEN L_ECOLI_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_ECOLI_PCTL,	EXP(LOG_ECOLI_PCTL)	ECOLI,
	CASE WHEN L_PH_M_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_PH_M_PCTL,	PH_M_PCTL	PH_M,
	CASE WHEN L_TURB_M_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TURB_M_PCTL,	TURB_M_PCTL	TURB_M,
	CASE WHEN L_NH4_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_NH4_PCTL,	NH4_PCTL	NH4,
	CASE WHEN L_NO2_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_NO2_PCTL,	NO2_PCTL	NO2,
	CASE WHEN L_NO3_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_NO3_PCTL,	NO3_PCTL	NO3,
	CASE WHEN L_TKN_S_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TKN_S_PCTL,	TKN_S_PCTL	TKN_S,
	CASE WHEN L_TKN_P_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TKN_P_PCTL,	TKN_P_PCTL	TKN_P,
	CASE WHEN L_TKN_SP_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TKN_SP_PCTL,	TKN_SP_PCTL	TKN_SP,
	CASE WHEN L_PO4_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_PO4_PCTL,	PO4_PCTL	PO4,
	CASE WHEN L_TP_S_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TP_S_PCTL,	TP_S_PCTL	TP_S,
	CASE WHEN L_TP_P_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TP_P_PCTL,	TP_P_PCTL	TP_P,
	CASE WHEN L_TP_SP_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TP_SP_PCTL,	TP_SP_PCTL	TP_SP,
	CASE WHEN L_SIO2_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_SIO2_PCTL,	SIO2_PCTL	SIO2,
	CASE WHEN L_SS_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_SS_PCTL,	SS_PCTL	SS,
	CASE WHEN L_TVS_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TVS_PCTL,	TVS_PCTL	TVS,
	CASE WHEN L_CHL_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_CHL_PCTL,	CHL_PCTL	CHL,
	CASE WHEN L_PHAE_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_PHAE_PCTL,	PHAE_PCTL	PHAE,
	SMB.SOL_RAD_PCTL	SOL_RAD,		
	SMB.AIR_TEMP_PCTL	AIR_TEMP,		
	SMB.WIND_SP_PCTL	WIND_SP,		
	SMB.SD_PCTL	SD,		
	SMB.NH3_PCTL	NH3,		
	SMB.TIN_PCTL	TIN,		
	SMB.TN_PCTL	TN,		
	SMB.NH4_NM_PCTL	NH4_NM,		
	SMB.NO2_NM_PCTL	NO2_NM,		
	SMB.NO3_NM_PCTL	NO3_NM,		
	SMB.TKN_NM_PCTL	TKN_NM,		
	SMB.NOX_NM_PCTL	NOX_NM,		
	SMB.TIN_NM_PCTL	TIN_NM,		
	SMB.TN_NM_PCTL	TN_NM,		
	SMB.PO4_PM_PCTL	PO4_PM,		
	SMB.TP_PM_PCTL	TP_PM,		
	SMB.TIN_PO4_MMR_PCTL	TIN_PO4_MMR,		
	SMB.TN_TP_MMR_PCTL	TN_TP_MMR		
FROM				
(SELECT DISTINCT				
	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	D_CODE	D_CODE,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TEMPER)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TEMPER_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PH_SC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PH_SC_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SAL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SAL_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY COND)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	COND_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DO) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	DO_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DO_SAT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	DO_SAT_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY FLSCUFA) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	FLSCUFA_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TURB_SC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TURB_SC_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PAR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PAR_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY BOD5)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	BOD5_PCTL,		
    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	LOG_FC_PCTL,			
    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	LOG_ECOLI_PCTL,			
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PH_M)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PH_M_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TURB_M)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TURB_M_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NH4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH4_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO2_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NO3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO3_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TKN_S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_S_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TKN_P)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_P_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TKN_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_SP_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PO4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PO4_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TP_S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_S_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TP_P)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_P_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TP_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_SP_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SIO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SIO2_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SS_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TVS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TVS_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CHL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	CHL_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PHAE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PHAE_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SOL_RAD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SOL_RAD_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY AIR_TEMP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	AIR_TEMP_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY WIND_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	WIND_SP_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SD) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SD_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NH3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH3_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TIN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NH4_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH4_NM_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NO2_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO2_NM_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NO3_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO3_NM_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TKN_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_NM_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NOX_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NOX_NM_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TIN_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_NM_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TN_NM)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_NM_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PO4_PM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PO4_PM_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TP_PM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_PM_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TIN_PO4_MMR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_PO4_MMR_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TN_TP_MMR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_TP_MMR_PCTL		
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B UNION ALL SELECT * FROM WPG.MW_AA) SMB,			
    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 				
    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR				
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9	) SMB			
INNER JOIN				
(SELECT	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	D_CODE	D_CODE,		
	COUNT(*)	TOTAL,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	L_FC_CNT,		
	COUNT(L_ECOLI)	L_ECOLI_CNT,		
	COUNT(L_PH_M)	L_PH_M_CNT,		
	COUNT(L_TURB_M)	L_TURB_M_CNT,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_TKN_S)	L_TKN_S_CNT,		
	COUNT(L_TKN_P)	L_TKN_P_CNT,		
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TP_S)	L_TP_S_CNT,		
	COUNT(L_TP_P)	L_TP_P_CNT,		
	COUNT(L_TP_SP)	L_TP_SP_CNT,		
	COUNT(L_SIO2)	L_SIO2_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHAE)	L_PHAE_CNT		
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B UNION ALL SELECT * FROM WPG.MW_AA) SMB,			
    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 				
    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR				
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR, D_CODE	) L_SMB			
ON SMB.SITE_ID = L_SMB.SITE_ID AND SMB.YR = L_SMB.YR AND SMB.D_CODE = L_SMB.D_CODE;


-- WPG.MW_STATS_PCTL90A source

CREATE VIEW [WPG].[MW_STATS_PCTL90A] AS				
SELECT	SMB.SITE_ID	SITE_ID,		
	SMB.YR	YR,		
	SMB.D_CODE	D_CODE,		
	TOTAL	TOTAL,		
	SMB.TEMPER_PCTL	TEMPER,		
	SMB.PH_SC_PCTL	PH_SC,		
	SMB.SAL_PCTL	SAL,		
	SMB.COND_PCTL	COND,		
	SMB.DO_PCTL	DO,		
	SMB.DO_SAT_PCTL	DO_SAT,		
	SMB.FLSCUFA_PCTL	FLSCUFA,		
	SMB.TURB_SC_PCTL	TURB_SC,		
	SMB.PAR_PCTL	PAR,		
	CASE WHEN L_BOD5_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_BOD5_PCTL,	BOD5_PCTL	BOD5,
	CASE WHEN L_FC_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_FC_PCTL,	EXP(LOG_FC_PCTL)	FC,
	CASE WHEN L_ECOLI_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_ECOLI_PCTL,	EXP(LOG_ECOLI_PCTL)	ECOLI,
	CASE WHEN L_PH_M_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_PH_M_PCTL,	PH_M_PCTL	PH_M,
	CASE WHEN L_TURB_M_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TURB_M_PCTL,	TURB_M_PCTL	TURB_M,
	CASE WHEN L_NH4_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_NH4_PCTL,	NH4_PCTL	NH4,
	CASE WHEN L_NO2_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_NO2_PCTL,	NO2_PCTL	NO2,
	CASE WHEN L_NO3_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_NO3_PCTL,	NO3_PCTL	NO3,
	CASE WHEN L_TKN_S_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TKN_S_PCTL,	TKN_S_PCTL	TKN_S,
	CASE WHEN L_TKN_P_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TKN_P_PCTL,	TKN_P_PCTL	TKN_P,
	CASE WHEN L_TKN_SP_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TKN_SP_PCTL,	TKN_SP_PCTL	TKN_SP,
	CASE WHEN L_PO4_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_PO4_PCTL,	PO4_PCTL	PO4,
	CASE WHEN L_TP_S_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TP_S_PCTL,	TP_S_PCTL	TP_S,
	CASE WHEN L_TP_P_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TP_P_PCTL,	TP_P_PCTL	TP_P,
	CASE WHEN L_TP_SP_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TP_SP_PCTL,	TP_SP_PCTL	TP_SP,
	CASE WHEN L_SIO2_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_SIO2_PCTL,	SIO2_PCTL	SIO2,
	CASE WHEN L_SS_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_SS_PCTL,	SS_PCTL	SS,
	CASE WHEN L_TVS_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TVS_PCTL,	TVS_PCTL	TVS,
	CASE WHEN L_CHL_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_CHL_PCTL,	CHL_PCTL	CHL,
	CASE WHEN L_PHAE_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_PHAE_PCTL,	PHAE_PCTL	PHAE,
	SMB.SOL_RAD_PCTL	SOL_RAD,		
	SMB.AIR_TEMP_PCTL	AIR_TEMP,		
	SMB.WIND_SP_PCTL	WIND_SP,		
	SMB.SD_PCTL	SD,		
	SMB.NH3_PCTL	NH3,		
	SMB.TIN_PCTL	TIN,		
	SMB.TN_PCTL	TN,		
	SMB.NH4_NM_PCTL	NH4_NM,		
	SMB.NO2_NM_PCTL	NO2_NM,		
	SMB.NO3_NM_PCTL	NO3_NM,		
	SMB.TKN_NM_PCTL	TKN_NM,		
	SMB.NOX_NM_PCTL	NOX_NM,		
	SMB.TIN_NM_PCTL	TIN_NM,		
	SMB.TN_NM_PCTL	TN_NM,		
	SMB.PO4_PM_PCTL	PO4_PM,		
	SMB.TP_PM_PCTL	TP_PM,		
	SMB.TIN_PO4_MMR_PCTL	TIN_PO4_MMR,		
	SMB.TN_TP_MMR_PCTL	TN_TP_MMR		
FROM				
(SELECT DISTINCT				
	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	D_CODE	D_CODE,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TEMPER)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TEMPER_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY PH_SC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PH_SC_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY SAL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SAL_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY COND)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	COND_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY DO) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	DO_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY DO_SAT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	DO_SAT_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY FLSCUFA) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	FLSCUFA_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TURB_SC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TURB_SC_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY PAR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PAR_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY BOD5)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	BOD5_PCTL,		
    PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	LOG_FC_PCTL,			
    PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	LOG_ECOLI_PCTL,			
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY PH_M)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PH_M_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TURB_M)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TURB_M_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY NH4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH4_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY NO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO2_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY NO3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO3_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TKN_S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_S_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TKN_P)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_P_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TKN_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_SP_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY PO4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PO4_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TP_S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_S_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TP_P)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_P_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TP_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_SP_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY SIO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SIO2_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY SS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SS_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TVS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TVS_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY CHL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	CHL_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY PHAE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PHAE_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY SOL_RAD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SOL_RAD_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY AIR_TEMP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	AIR_TEMP_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY WIND_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	WIND_SP_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY SD) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SD_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY NH3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH3_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TIN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY NH4_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH4_NM_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY NO2_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO2_NM_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY NO3_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO3_NM_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TKN_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_NM_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY NOX_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NOX_NM_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TIN_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_NM_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TN_NM)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_NM_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY PO4_PM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PO4_PM_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TP_PM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_PM_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TIN_PO4_MMR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_PO4_MMR_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TN_TP_MMR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_TP_MMR_PCTL		
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B UNION ALL SELECT * FROM WPG.MW_AA) SMB,			
    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 				
    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR				
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9	) SMB			
INNER JOIN				
(SELECT	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	D_CODE	D_CODE,		
	COUNT(*)	TOTAL,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	L_FC_CNT,		
	COUNT(L_ECOLI)	L_ECOLI_CNT,		
	COUNT(L_PH_M)	L_PH_M_CNT,		
	COUNT(L_TURB_M)	L_TURB_M_CNT,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_TKN_S)	L_TKN_S_CNT,		
	COUNT(L_TKN_P)	L_TKN_P_CNT,		
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TP_S)	L_TP_S_CNT,		
	COUNT(L_TP_P)	L_TP_P_CNT,		
	COUNT(L_TP_SP)	L_TP_SP_CNT,		
	COUNT(L_SIO2)	L_SIO2_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHAE)	L_PHAE_CNT		
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B UNION ALL SELECT * FROM WPG.MW_AA) SMB,			
    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 				
    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR				
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR, D_CODE	) L_SMB			
ON SMB.SITE_ID = L_SMB.SITE_ID AND SMB.YR = L_SMB.YR AND SMB.D_CODE = L_SMB.D_CODE;


-- WPG.MW_STATS_PCTL95A source

CREATE VIEW [WPG].[MW_STATS_PCTL95A] AS				
SELECT	SMB.SITE_ID	SITE_ID,		
	SMB.YR	YR,		
	SMB.D_CODE	D_CODE,		
	TOTAL	TOTAL,		
	SMB.TEMPER_PCTL	TEMPER,		
	SMB.PH_SC_PCTL	PH_SC,		
	SMB.SAL_PCTL	SAL,		
	SMB.COND_PCTL	COND,		
	SMB.DO_PCTL	DO,		
	SMB.DO_SAT_PCTL	DO_SAT,		
	SMB.FLSCUFA_PCTL	FLSCUFA,		
	SMB.TURB_SC_PCTL	TURB_SC,		
	SMB.PAR_PCTL	PAR,		
	CASE WHEN L_BOD5_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_BOD5_PCTL,	BOD5_PCTL	BOD5,
	CASE WHEN L_FC_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_FC_PCTL,	EXP(LOG_FC_PCTL)	FC,
	CASE WHEN L_ECOLI_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_ECOLI_PCTL,	EXP(LOG_ECOLI_PCTL)	ECOLI,
	CASE WHEN L_PH_M_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_PH_M_PCTL,	PH_M_PCTL	PH_M,
	CASE WHEN L_TURB_M_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TURB_M_PCTL,	TURB_M_PCTL	TURB_M,
	CASE WHEN L_NH4_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_NH4_PCTL,	NH4_PCTL	NH4,
	CASE WHEN L_NO2_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_NO2_PCTL,	NO2_PCTL	NO2,
	CASE WHEN L_NO3_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_NO3_PCTL,	NO3_PCTL	NO3,
	CASE WHEN L_TKN_S_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TKN_S_PCTL,	TKN_S_PCTL	TKN_S,
	CASE WHEN L_TKN_P_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TKN_P_PCTL,	TKN_P_PCTL	TKN_P,
	CASE WHEN L_TKN_SP_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TKN_SP_PCTL,	TKN_SP_PCTL	TKN_SP,
	CASE WHEN L_PO4_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_PO4_PCTL,	PO4_PCTL	PO4,
	CASE WHEN L_TP_S_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TP_S_PCTL,	TP_S_PCTL	TP_S,
	CASE WHEN L_TP_P_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TP_P_PCTL,	TP_P_PCTL	TP_P,
	CASE WHEN L_TP_SP_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TP_SP_PCTL,	TP_SP_PCTL	TP_SP,
	CASE WHEN L_SIO2_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_SIO2_PCTL,	SIO2_PCTL	SIO2,
	CASE WHEN L_SS_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_SS_PCTL,	SS_PCTL	SS,
	CASE WHEN L_TVS_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TVS_PCTL,	TVS_PCTL	TVS,
	CASE WHEN L_CHL_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_CHL_PCTL,	CHL_PCTL	CHL,
	CASE WHEN L_PHAE_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_PHAE_PCTL,	PHAE_PCTL	PHAE,
	SMB.SOL_RAD_PCTL	SOL_RAD,		
	SMB.AIR_TEMP_PCTL	AIR_TEMP,		
	SMB.WIND_SP_PCTL	WIND_SP,		
	SMB.SD_PCTL	SD,		
	SMB.NH3_PCTL	NH3,		
	SMB.TIN_PCTL	TIN,		
	SMB.TN_PCTL	TN,		
	SMB.NH4_NM_PCTL	NH4_NM,		
	SMB.NO2_NM_PCTL	NO2_NM,		
	SMB.NO3_NM_PCTL	NO3_NM,		
	SMB.TKN_NM_PCTL	TKN_NM,		
	SMB.NOX_NM_PCTL	NOX_NM,		
	SMB.TIN_NM_PCTL	TIN_NM,		
	SMB.TN_NM_PCTL	TN_NM,		
	SMB.PO4_PM_PCTL	PO4_PM,		
	SMB.TP_PM_PCTL	TP_PM,		
	SMB.TIN_PO4_MMR_PCTL	TIN_PO4_MMR,		
	SMB.TN_TP_MMR_PCTL	TN_TP_MMR		
FROM				
(SELECT DISTINCT				
	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	D_CODE	D_CODE,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TEMPER)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TEMPER_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY PH_SC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PH_SC_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY SAL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SAL_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY COND)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	COND_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY DO) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	DO_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY DO_SAT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	DO_SAT_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY FLSCUFA) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	FLSCUFA_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TURB_SC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TURB_SC_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY PAR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PAR_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY BOD5)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	BOD5_PCTL,		
    PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	LOG_FC_PCTL,			
    PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END)) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	LOG_ECOLI_PCTL,			
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY PH_M)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PH_M_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TURB_M)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TURB_M_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY NH4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH4_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY NO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO2_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY NO3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO3_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TKN_S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_S_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TKN_P)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_P_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TKN_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_SP_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY PO4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PO4_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TP_S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_S_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TP_P)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_P_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TP_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_SP_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY SIO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SIO2_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY SS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SS_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TVS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TVS_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY CHL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	CHL_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY PHAE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PHAE_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY SOL_RAD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SOL_RAD_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY AIR_TEMP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	AIR_TEMP_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY WIND_SP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	WIND_SP_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY SD) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	SD_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY NH3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH3_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TIN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY NH4_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NH4_NM_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY NO2_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO2_NM_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY NO3_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NO3_NM_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TKN_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TKN_NM_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY NOX_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	NOX_NM_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TIN_NM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_NM_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TN_NM)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_NM_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY PO4_PM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	PO4_PM_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TP_PM) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TP_PM_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TIN_PO4_MMR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TIN_PO4_MMR_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TN_TP_MMR) OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR, D_CODE)	TN_TP_MMR_PCTL		
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B UNION ALL SELECT * FROM WPG.MW_AA) SMB,			
    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 				
    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR				
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9	) SMB			
INNER JOIN				
(SELECT	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	D_CODE	D_CODE,		
	COUNT(*)	TOTAL,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	L_FC_CNT,		
	COUNT(L_ECOLI)	L_ECOLI_CNT,		
	COUNT(L_PH_M)	L_PH_M_CNT,		
	COUNT(L_TURB_M)	L_TURB_M_CNT,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_TKN_S)	L_TKN_S_CNT,		
	COUNT(L_TKN_P)	L_TKN_P_CNT,		
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TP_S)	L_TP_S_CNT,		
	COUNT(L_TP_P)	L_TP_P_CNT,		
	COUNT(L_TP_SP)	L_TP_SP_CNT,		
	COUNT(L_SIO2)	L_SIO2_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHAE)	L_PHAE_CNT		
 FROM	(SELECT * FROM WPG.MW_S UNION ALL SELECT * FROM WPG.MW_M UNION ALL SELECT * FROM WPG.MW_B UNION ALL SELECT * FROM WPG.MW_AA) SMB,			
    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 				
    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR				
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR, D_CODE	) L_SMB			
ON SMB.SITE_ID = L_SMB.SITE_ID AND SMB.YR = L_SMB.YR AND SMB.D_CODE = L_SMB.D_CODE;


-- WPG.MW_TESTING source

CREATE VIEW WPG.MW_TESTING AS
SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, PARAMETER, MEASURE
FROM              (SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, CAST(TEMPER AS float) TEMPER, 
                                                        CAST(PH_SC AS float) PH_SC, CAST(SAL AS float) SAL, CAST(COND AS float) COND, CAST(DO AS float) 
                                                        DO, CAST(DO_SAT AS float) DO_SAT, CAST(FLSCUFA AS float) FLSCUFA, CAST(TURB_SC AS float) 
                                                        TURB_SC, CAST(PAR AS float) PAR, CAST(BOD5 AS float) BOD5, CAST(FC AS float) FC, 
                                                        CAST(ECOLI AS float) ECOLI, CAST(PH_M AS float) PH_M, CAST(TURB_M AS float) TURB_M, 
                                                        CAST(NH4 AS float) NH4, CAST(NO2 AS float) NO2, CAST(NO3 AS float) NO3, CAST(TKN_S AS float) 
                                                        TKN_S, CAST(TKN_P AS float) TKN_P, CAST(TKN_SP AS float) TKN_SP, CAST(PO4 AS float) PO4, 
                                                        CAST(TP_S AS float) TP_S, CAST(TP_P AS float) TP_P, CAST(TP_SP AS float) TP_SP, CAST(SIO2 AS float) 
                                                        SIO2, CAST(SS AS float) SS, CAST(TVS AS float) TVS, CAST(CHL AS float) CHL, CAST(PHAE AS float) PHAE, 
                                                        CAST(TIN AS float) TIN, CAST(TN AS float) TN, CAST(NH3 AS float) NH3, CAST(SOL_RAD AS float) 
                                                        SOL_RAD, CAST(AIR_TEMP AS float) AIR_TEMP, CAST(WIND_SP AS float) WIND_SP, 
                                                        CAST(WIND_DIR AS float) WIND_DIR, CAST(SEA_COND AS float) SEA_COND, CAST(SEA_COL AS float) 
                                                        SEA_COL, CAST(FISH_KILL AS float) FISH_KILL, CAST(SD AS float) SD, CAST(WEATHER AS float) 
                                                        WEATHER, CAST(NH4_NM AS float) NH4_NM, CAST(NO2_NM AS float) NO2_NM, CAST(NO3_NM AS float) 
                                                        NO3_NM, CAST(TKN_NM AS float) TKN_NM, CAST(NOX_NM AS float) NOX_NM, CAST(TIN_NM AS float) 
                                                        TIN_NM, CAST(TN_NM AS float) TN_NM, CAST(PO4_PM AS float) PO4_PM, CAST(TP_PM AS float) TP_PM, 
                                                        CAST(TIN_PO4_MMR AS float) TIN_PO4_MMR, CAST(TN_TP_MMR AS float) TN_TP_MMR
                            FROM               
                            (SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, 
                                                        FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, 
                                                        TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, 
                                                        TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, L_TVS, 
                                                        TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, 
                                                        FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, 
                                                        TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR
                            FROM               WPG.MW_S
                            UNION ALL
                            SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, 
                                                        FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, 
                                                 TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, 
                                                        TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, L_TVS, 
                                                        TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, 
                                                        FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, 
                                                        TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR
                            FROM              WPG.MW_M
                            UNION ALL
                            SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, 
                                                        FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, 
                                                        TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, 
                                                        TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, L_TVS, 
                                                        TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, 
                                                        FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, 
                                                        TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR
                            FROM              WPG.MW_B
                            UNION ALL
                            SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, 
                                                        FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, 
                                                        TURB_M, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, 
                                                        TKN_SP, L_PO4, PO4, L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, L_TVS, 
                                                        TVS, L_CHL, CHL, L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, 
                                                        FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, 
                                                        TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR
                            FROM              WPG.MW_N
							UNION ALL
							SELECT          MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, 'A' D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, 
														FLSCUFA, TURB_SC, PAR, NULL L_BOD5, BOD5, NULL L_FC, FC, NULL L_ECOLI, ECOLI, NULL L_PH_M, PH_M, NULL L_TURB_M, 
														TURB_M, NULL L_NH4, NH4, NULL L_NO2, NO2, NULL L_NO3, NO3, NULL L_TKN_S, TKN_S, NULL L_TKN_P, TKN_P, NULL L_TKN_SP, 
														TKN_SP, NULL L_PO4, PO4, NULL L_TP_S, TP_S, NULL L_TP_P, TP_P, NULL L_TP_SP, TP_SP, NULL L_SIO2, SIO2, NULL L_SS, SS, NULL L_TVS, 
														TVS, NULL L_CHL, CHL, NULL L_PHAE, PHAE, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, 
														FISH_KILL, SD, WEATHER, NH3, TIN, TN, NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, 
														TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR
							FROM              WPG.MW_A ) AS AA
							) AS p UNPIVOT (MEASURE FOR PARAMETER IN (TEMPER, PH_SC, SAL, COND, 
                            DO, DO_SAT, FLSCUFA, TURB_SC, PAR, BOD5, FC, ECOLI, PH_M, TURB_M, NH4, NO2, NO3, TKN_S, TKN_P, 
                            TKN_SP, PO4, TP_S, TP_P, TP_SP, SIO2, SS, TVS, CHL, PHAE, TIN, TN, NH3, SOL_RAD, AIR_TEMP, WIND_SP, SD, 
                            NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, 
                            TN_TP_MMR)) AS unpvt;


-- WPG.MW_TESTING_A source

-- ##########
CREATE  VIEW [WPG].[MW_TESTING_A] AS
SELECT
	MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, L_MEASURE, MEASURE, PARAMETER, 
	SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM	WPG.MW_TEST_SMB
UNION
SELECT
	MWVISIT_ID, SITE_ID, MDATE, STIME, SAM_NO, D_CODE, L_MEASURE, MEASURE, PARAMETER, 
	NULL SAMPLE_MARK, NULL LAB_NO, NULL DATE_RECEIVED, NULL DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM	WPG.MW_TEST_A;


-- WPG.MW_TEST_A source

CREATE  VIEW [WPG].[MW_TEST_A] AS
SELECT
	VI.MWVISIT_ID,
	VI.SITE_ID,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO	SAM_NO,
	DEPTH_CODE	 	D_CODE,
    L_MEASURE,		MEASURE, 
	PARAMETER, 
	PA.VALID_USER, PA.VALID_DATE, PA.VALID_CODE
FROM (
SELECT GL.MWVISIT_ID, N'A' DEPTH_CODE, L_MEASURE, MEASURE, PARAMETER, VALID_USER, VALID_DATE, VALID_CODE
FROM
(SELECT
	MWVISIT_ID,	
    COUNT(*)        TOTAL,
	AVG(NH4)		NH4,
	AVG(NO2)		NO2,
	AVG(NO3)		NO3,
	AVG(TKN_S)		TKN_S,
	AVG(TKN_P)		TKN_P,
	AVG(TKN_SP)		TKN_SP,
	AVG(PO4)		PO4,
	AVG(TP_S)		TP_S,
	AVG(TP_P)		TP_P,
	AVG(TP_SP)		TP_SP,
	AVG(SIO2)		SIO2,
	AVG(SS)			SS,
	AVG(TVS)		TVS,
	AVG(CHL)		CHL,
	AVG(PHAE)		PHAE,
	AVG(TIN)		TIN,
	AVG(TN)			TN,
	AVG(NH4_NM)		NH4_NM,
	AVG(NO2_NM)		NO2_NM,
	AVG(NO3_NM)		NO3_NM,
	AVG(TKN_NM)		TKN_NM,
	AVG(NOX_NM)		NOX_NM,
	AVG(TIN_NM)		TIN_NM,
	AVG(TN_NM) 		TN_NM,
	AVG(PO4_PM)		PO4_PM,
	AVG(TP_PM)		TP_PM,
	AVG(TIN_PO4_MMR)	TIN_PO4_MMR,
	AVG(TN_TP_MMR) 		TN_TP_MMR,
	COUNT(L_NH4)	L_NH4_CNT,
	COUNT(L_NO2)	L_NO2_CNT,
	COUNT(L_NO3)	L_NO3_CNT,
	COUNT(L_TKN_S)	L_TKN_S_CNT,
	COUNT(L_TKN_P)	L_TKN_P_CNT,
	COUNT(L_TKN_SP)	L_TKN_SP_CNT,
	COUNT(L_PO4)	L_PO4_CNT,
	COUNT(L_TP_S)	L_TP_S_CNT,
	COUNT(L_TP_P)	L_TP_P_CNT,
	COUNT(L_TP_SP)	L_TP_SP_CNT,
	COUNT(L_SIO2)	L_SIO2_CNT,
	COUNT(L_SS)	L_SS_CNT,
	COUNT(L_TVS)	L_TVS_CNT,
	COUNT(L_CHL)	L_CHL_CNT,
	COUNT(L_PHAE)	L_PHAE_CNT
FROM 	WPG.MW_GLABN_CAL
WHERE DEPTH_CODE IN ('S','M','B')
GROUP BY MWVISIT_ID )	GL
cross apply 
(
SELECT	CASE WHEN L_NH4_CNT = TOTAL THEN '<' ELSE NULL END,		NH4, N'NH4' union all
SELECT	CASE WHEN L_NO2_CNT = TOTAL THEN '<' ELSE NULL END,		NO2, N'NO2' union all
SELECT	CASE WHEN L_NO3_CNT = TOTAL THEN '<' ELSE NULL END,		NO3, N'NO3' union all
SELECT	CASE WHEN L_TKN_S_CNT = TOTAL THEN '<' ELSE NULL END,	TKN_S, N'TKN_S' union all
SELECT	CASE WHEN L_TKN_P_CNT = TOTAL THEN '<' ELSE NULL END,	TKN_P, N'TKN_P' union all
SELECT	CASE WHEN L_TKN_SP_CNT = TOTAL THEN '<' ELSE NULL END,	TKN_SP, N'TKN_SP' union all
SELECT	CASE WHEN L_PO4_CNT = TOTAL THEN '<' ELSE NULL END,		PO4, N'PO4' union all
SELECT	CASE WHEN L_TP_S_CNT = TOTAL THEN '<' ELSE NULL END,	TP_S, N'TP_S' union all
SELECT	CASE WHEN L_TP_P_CNT = TOTAL THEN '<' ELSE NULL END,	TP_P, N'TP_P' union all
SELECT	CASE WHEN L_TP_SP_CNT = TOTAL THEN '<' ELSE NULL END,	TP_SP, N'TP_SP' union all
SELECT	CASE WHEN L_SIO2_CNT = TOTAL THEN '<' ELSE NULL END,	SIO2, N'SIO2' union all
SELECT	CASE WHEN L_SS_CNT = TOTAL THEN '<' ELSE NULL END,		SS, N'SS' union all
SELECT	CASE WHEN L_TVS_CNT = TOTAL THEN '<' ELSE NULL END,		TVS, N'TVS' union all
SELECT	CASE WHEN L_CHL_CNT = TOTAL THEN '<' ELSE NULL END,		CHL, N'CHL' union all
SELECT	CASE WHEN L_PHAE_CNT = TOTAL THEN '<' ELSE NULL END,	PHAE, N'PHAE' union all
SELECT	NULL,	TIN,	N'TIN' union all
SELECT	NULL,	TN,		N'TN' union all
SELECT	NULL,	NH4_NM, N'NH4_NM' union all
SELECT	NULL,	NO2_NM, N'NO2_NM' union all
SELECT	NULL,	NO3_NM, N'NO3_NM' union all
SELECT	NULL,	TKN_NM, N'TKN_NM' union all
SELECT	NULL,	NOX_NM, N'NOX_NM' union all
SELECT	NULL,	TIN_NM, N'TIN_NM' union all
SELECT	NULL,	TN_NM,	N'TN_NM' union all
SELECT	NULL,	PO4_PM, N'PO4_PM' union all
SELECT	NULL,	TP_PM, N'TP_PM' union all
SELECT	NULL,	TIN_PO4_MMR, N'TIN_PO4_MMR' union all
SELECT	NULL,	TN_TP_MMR, N'TN_TP_MMR'
-- SELECT	L_TUR,	TUR
) c (L_MEASURE, MEASURE, PARAMETER)
INNER JOIN
(SELECT
	MWVISIT_ID, 
	'' VALID_USER, MAX(VALID_DATE) VALID_DATE, MAX(VALID_CODE) VALID_CODE
FROM	WPG.MW_GLABN
WHERE 	DEPTH_CODE IN ('S','M','B')
GROUP BY MWVISIT_ID ) MX
ON GL.MWVISIT_ID = MX.MWVISIT_ID
UNION
SELECT ML.MWVISIT_ID, N'A' DEPTH_CODE, L_MEASURE, MEASURE, PARAMETER, VALID_USER, VALID_DATE, VALID_CODE
FROM (SELECT
	MWVISIT_ID,
    COUNT(*)        TOTAL,
	AVG(PH)			PH,
	AVG(BOD5)   	BOD5,
	AVG(TURB)     	TURB, 
	EXP(SUM(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END))/COUNT(FC))		FC,
	EXP(SUM(LOG(CASE ECOLI WHEN 0 THEN NULL ELSE ECOLI END))/COUNT(ECOLI))	ECOLI,
	COUNT(L_PH)	    L_PH_CNT,
	COUNT(L_BOD5)	L_BOD5_CNT,
	COUNT(L_TURB)	L_TURB_CNT,
	COUNT(L_FC)	    L_FC_CNT,
	COUNT(L_ECOLI)	L_ECOLI_CNT
FROM	WPG.MW_MLAB
WHERE 	DEPTH_CODE IN ('S','M','B')
GROUP BY MWVISIT_ID ) ML	
cross apply 
(
SELECT	CASE WHEN L_PH_CNT = TOTAL THEN '<' ELSE NULL END,		PH,		N'PH_M' union all
SELECT	CASE WHEN L_BOD5_CNT = TOTAL THEN '<' ELSE NULL END,	BOD5,	N'BOD5' union all
SELECT	CASE WHEN L_TURB_CNT = TOTAL THEN '<' ELSE NULL END,	TURB,   N'TURB_M' union all
SELECT	CASE WHEN L_FC_CNT = TOTAL THEN '<' ELSE NULL END,		FC,		N'FC' union all
SELECT	CASE WHEN L_ECOLI_CNT = TOTAL THEN '<' ELSE NULL END,	ECOLI,	N'ECOLI'
) c (L_MEASURE, MEASURE, PARAMETER)
INNER JOIN
(SELECT
	MWVISIT_ID, 
	'' VALID_USER, MAX(VALID_DATE) VALID_DATE, MAX(VALID_CODE) VALID_CODE
FROM	WPG.MW_MLAB
WHERE 	DEPTH_CODE IN ('S','M','B')
GROUP BY MWVISIT_ID ) MX
ON ML.MWVISIT_ID = MX.MWVISIT_ID
UNION
SELECT SC.MWVISIT_ID, N'A' DEPTH_CODE, L_MEASURE, MEASURE, PARAMETER, VALID_USER, VALID_DATE, VALID_CODE
FROM (SELECT
	MWVISIT_ID, 
	AVG(TEMPER)	TEMPER, 
	AVG(PH)	PH, 
	AVG(SAL)	SAL, 
	AVG(COND)	COND, 
	AVG(DO)	DO, 
	AVG(DO_SAT)	DO_SAT, 
	AVG(FLSCUFA)	FLSCUFA,		AVG(TURB)	TURB,
    AVG(PAR)    PAR
FROM 	WPG.MW_SEACAT
WHERE 	DEPTH_CODE IN ('S','M','B')
GROUP BY MWVISIT_ID ) SC	
cross apply 
(
SELECT NULL,	SC.TEMPER, N'TEMPER' union all
SELECT NULL,	SC.PH, N'PH_SC' union all
SELECT NULL,	SC.SAL, N'SAL' union all
SELECT NULL,	SC.COND, N'COND' union all
SELECT NULL,	SC.DO, N'DO' union all
SELECT NULL,	SC.DO_SAT, N'DO_SAT' union all
SELECT NULL,	SC.FLSCUFA, N'FLSCUFA' union all
SELECT NULL,	SC.TURB, N'TURB_SC' union all
SELECT NULL,	Case when 	SC.PAR < 0.14 then 0 else SC.PAR end, N'PAR'
) c (L_MEASURE, MEASURE, PARAMETER)
INNER JOIN
(SELECT
	MWVISIT_ID, 
	'' VALID_USER, MAX(VALID_DATE) VALID_DATE, MAX(VALID_CODE) VALID_CODE
FROM	WPG.MW_GLABN
WHERE 	DEPTH_CODE IN ('S','M','B')
GROUP BY MWVISIT_ID ) MX
ON SC.MWVISIT_ID = MX.MWVISIT_ID
UNION
SELECT GL.MWVISIT_ID, N'A' DEPTH_CODE, L_MEASURE, MEASURE, PARAMETER, VALID_USER, VALID_DATE, VALID_CODE
FROM (SELECT
	GN.MWVISIT_ID,
    COUNT(*)        TOTAL,
	AVG(WPG.F_NH3(SC.SAL, SC.TEMPER, SC.PH, GN.NH4))	NH3,
	COUNT(L_NH4)	L_NH3
FROM	WPG.MW_GLABN		GN
        INNER JOIN (SELECT MWVISIT_ID, DEPTH_CODE, SAL, TEMPER, PH 
					FROM WPG.MW_SEACAT	WHERE SAL IS NOT NULL AND TEMPER IS NOT NULL AND PH IS NOT NULL
					AND DEPTH_CODE IN ('S','M','B') )	SC
	    ON	GN.MWVISIT_ID	= SC.MWVISIT_ID	AND GN.DEPTH_CODE 	= SC.DEPTH_CODE AND 	GN.NH4 IS NOT NULL 
GROUP BY GN.MWVISIT_ID ) GL	
cross apply 
(
SELECT	CASE WHEN L_NH3 = TOTAL THEN '<' ELSE NULL END,		NH3,		N'NH3'
) c (L_MEASURE, MEASURE, PARAMETER)
INNER JOIN
(SELECT
	MWVISIT_ID, 
	'' VALID_USER, MAX(VALID_DATE) VALID_DATE, MAX(VALID_CODE) VALID_CODE
FROM	WPG.MW_GLABN
WHERE 	DEPTH_CODE IN ('S','M','B')
GROUP BY MWVISIT_ID ) MX
ON GL.MWVISIT_ID = MX.MWVISIT_ID
-- UNION
-- SELECT MWVISIT_ID, N'A' DEPTH_CODE, L_MEASURE, MEASURE, PARAMETER, NULL SAMPLE_MARK, NULL LAB_NO, NULL DATE_RECEIVED, NULL DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
-- FROM WPG.MW_FIELD  FD
-- cross apply 
-- (
-- SELECT NULL,	FD.SOL_RAD, N'SOL_RAD' union all
-- SELECT NULL,	FD.AIR_TEMP, N'AIR_TEMP' union all
-- SELECT NULL,	FD.WIND_SP, N'WIND_SP' union all
-- -- SELECT NULL,	FD.WIND_DIR, N'WIND_DIR' union all
-- -- SELECT NULL,	FD.SEA_COND, N'SEA_COND' union all
-- -- SELECT NULL,	FD.SEA_COL, N'SEA_COL' union all
-- -- SELECT NULL,	FD.FISH_KILL, N'FISH_KILL' union all
-- SELECT NULL,	FD.SECCHIDISC,	N'SD' -- union all
-- -- SELECT NULL,	FD.WEATHER, N'WEATHER'
-- ) c (L_MEASURE, MEASURE, PARAMETER) 
) PA
INNER JOIN WPG.MW_VISIT	VI
	ON VI.MWVISIT_ID = PA.MWVISIT_ID;


-- WPG.MW_TEST_SMB source

CREATE  VIEW [WPG].[MW_TEST_SMB] AS
SELECT
	VI.MWVISIT_ID,
	VI.SITE_ID,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO	SAM_NO,
	DEPTH_CODE	 	D_CODE,
    L_MEASURE,		MEASURE, 
	PARAMETER, 
	SAMPLE_MARK, LAB_NO, 
	DATE_RECEIVED, DATE_REPORTED, 
	PA.VALID_USER, PA.VALID_DATE, PA.VALID_CODE
FROM (
SELECT MWVISIT_ID, DEPTH_CODE, L_MEASURE, MEASURE, PARAMETER, SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM 	(SELECT	*,
		0.0140067		NMMW,	/*NITROGEN MILLIMOLAR WEIGHT*/
		0.0309738		PMMW	/*PHOSPHROUS MILLIMOLAR WEIGHT*/
	FROM	WPG.MW_GLABN
	)	GL
cross apply 
(
SELECT GL.L_NH4, GL.NH4, N'NH4' union all
SELECT GL.L_NO2, GL.NO2, N'NO2' union all
SELECT GL.L_NO3, GL.NO3, N'NO3' union all
SELECT GL.L_TKN_S, GL.TKN_S, N'TKN_S' union all
SELECT GL.L_TKN_P, GL.TKN_P, N'TKN_P' union all
SELECT GL.L_TKN_SP, GL.TKN_SP, N'TKN_SP' union all
SELECT GL.L_PO4, GL.PO4, N'PO4' union all
SELECT GL.L_TP_S, GL.TP_S, N'TP_S' union all
SELECT GL.L_TP_P, GL.TP_P, N'TP_P' union all
SELECT GL.L_TP_SP, GL.TP_SP, N'TP_SP' union all
SELECT GL.L_SIO2, GL.SIO2, N'SIO2' union all
SELECT GL.L_SS, GL.SS, N'SS' union all
SELECT GL.L_TVS, GL.TVS, N'TVS' union all
SELECT GL.L_CHL, GL.CHL, N'CHL' union all
SELECT GL.L_PHAE, GL.PHAE, N'PHAE' union all
SELECT NULL,	NH4 + NO2 + NO3, N'TIN' union all
SELECT NULL,	TKN_SP + NO2 + NO3, N'TN' union all
SELECT NULL,	NH4 / NMMW, N'NH4_NM' union all
SELECT NULL,	NO2 / NMMW, N'NO2_NM' union all
SELECT NULL,	NO3 / NMMW, N'NO3_NM' union all
SELECT NULL,	TKN_SP / NMMW, N'TKN_NM' union all
SELECT NULL,	NO2 + NO3 / NMMW, N'NOX_NM' union all
SELECT NULL,	(NH4 + NO2 + NO3) / NMMW, N'TIN_NM' union all
SELECT NULL,	(TKN_SP + NO2 + NO3) / NMMW, N'TN_NM' union all
SELECT NULL,	PO4 / PMMW, N'PO4_PM' union all
SELECT NULL,	TP_SP / PMMW, N'TP_PM' union all
SELECT NULL,	CASE WHEN PO4 = 0 THEN NULL 
		ELSE((NH4 + NO2 + NO3) / NMMW) /  (PO4 / PMMW) END, N'TIN_PO4_MMR' union all
SELECT NULL,	CASE WHEN TP_SP = 0 THEN NULL 
		ELSE((TKN_SP + NO2 + NO3) / NMMW)/(TP_SP / PMMW) END, N'TN_TP_MMR'
-- SELECT	L_TUR,	TUR
) c (L_MEASURE, MEASURE, PARAMETER)
WHERE DEPTH_CODE IN ('S','M','B')
UNION
SELECT MWVISIT_ID, DEPTH_CODE, L_MEASURE, MEASURE, PARAMETER, SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM WPG.MW_MLAB ML	
cross apply 
(
SELECT  ML.L_BOD5,	ML.BOD5, N'BOD5' union all
SELECT	ML.L_FC,	ML.FC, N'FC' union all
SELECT	ML.L_ECOLI,	ML.ECOLI, N'ECOLI' union all
SELECT	ML.L_PH,	ML.PH,		N'PH_M' union all
SELECT	ML.L_TURB, 	ML.TURB, N'TURB_M' 
) c (L_MEASURE, MEASURE, PARAMETER)
WHERE DEPTH_CODE IN ('S','M','B')
UNION
SELECT MWVISIT_ID, DEPTH_CODE, L_MEASURE, MEASURE, PARAMETER, NULL SAMPLE_MARK, NULL LAB_NO, NULL DATE_RECEIVED, NULL DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM (SELECT * FROM WPG.MW_SEACAT WHERE DEPTH_CODE IN ('S','M','B') ) SC 
cross apply 
(
SELECT NULL,	SC.TEMPER, N'TEMPER' union all
SELECT NULL,	SC.PH, N'PH_SC' union all
SELECT NULL,	SC.SAL, N'SAL' union all
SELECT NULL,	SC.COND, N'COND' union all
SELECT NULL,	SC.DO, N'DO' union all
SELECT NULL,	SC.DO_SAT, N'DO_SAT' union all
SELECT NULL,	SC.FLSCUFA, N'FLSCUFA' union all
SELECT NULL,	SC.TURB, N'TURB_SC' union all
SELECT NULL,	Case when 	SC.PAR < 0.14 then 0 else SC.PAR end, N'PAR'
) c (L_MEASURE, MEASURE, PARAMETER)
UNION
SELECT GN.MWVISIT_ID, GN.DEPTH_CODE, L_MEASURE, MEASURE, PARAMETER, SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM	WPG.MW_GLABN		GN
        INNER JOIN (SELECT MWVISIT_ID, DEPTH_CODE, SAL, TEMPER, PH 
					FROM WPG.MW_SEACAT	WHERE SAL IS NOT NULL AND TEMPER IS NOT NULL AND PH IS NOT NULL
					AND DEPTH_CODE IN ('S','M','B') )	SC
	    ON	GN.MWVISIT_ID	= SC.MWVISIT_ID	AND GN.DEPTH_CODE 	= SC.DEPTH_CODE AND 	GN.NH4 IS NOT NULL
cross apply 
(
SELECT	GN.L_NH4, WPG.F_NH3(SC.SAL, SC.TEMPER, SC.PH, GN.NH4),	N'NH3'
) c (L_MEASURE, MEASURE, PARAMETER)
UNION
SELECT MWVISIT_ID, N'A' DEPTH_CODE, L_MEASURE, MEASURE, PARAMETER, NULL SAMPLE_MARK, NULL LAB_NO, NULL DATE_RECEIVED, NULL DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM WPG.MW_FIELD  FD
cross apply 
(
SELECT NULL,	FD.SOL_RAD, N'SOL_RAD' union all
SELECT NULL,	FD.AIR_TEMP, N'AIR_TEMP' union all
SELECT NULL,	FD.WIND_SP, N'WIND_SP' union all
-- SELECT NULL,	FD.WIND_DIR, N'WIND_DIR' union all
-- SELECT NULL,	FD.SEA_COND, N'SEA_COND' union all
-- SELECT NULL,	FD.SEA_COL, N'SEA_COL' union all
-- SELECT NULL,	FD.FISH_KILL, N'FISH_KILL' union all
SELECT NULL,	FD.SECCHIDISC,	N'SD' -- union all
-- SELECT NULL,	FD.WEATHER, N'WEATHER'
) c (L_MEASURE, MEASURE, PARAMETER) 
) PA
INNER JOIN WPG.MW_VISIT	VI
	ON VI.MWVISIT_ID = PA.MWVISIT_ID;


-- WPG.NEARSHORE_WATER1 source

CREATE VIEW WPG.NEARSHORE_WATER1
AS
SELECT          ZONE, WCZ, SUBZONE, STATION, MDATE, STIME, SAM_NO, D_CODE, TEMPER, PH_SC, SAL, COND, DO, DO_SAT, 
                            FLSCUFA, TURB_SC, PAR, L_BOD5, BOD5, L_FC, FC, L_ECOLI, ECOLI, L_PH_M, PH_M, L_TURB_M, TURB_M, 
                            L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKN_S, TKN_S, L_TKN_P, TKN_P, L_TKN_SP, TKN_SP, L_PO4, PO4, 
                            L_TP_S, TP_S, L_TP_P, TP_P, L_TP_SP, TP_SP, L_SIO2, SIO2, L_SS, SS, L_TVS, TVS, L_CHL, CHL, L_PHAE, PHAE, 
                            TIN, TN, NH3, SOL_RAD, AIR_TEMP, WIND_SP, WIND_DIR, SEA_COND, SEA_COL, FISH_KILL, SD, WEATHER, 
                            NH4_NM, NO2_NM, NO3_NM, TKN_NM, NOX_NM, TIN_NM, TN_NM, PO4_PM, TP_PM, TIN_PO4_MMR, TN_TP_MMR, 
                            VIEW_NO
FROM              WPG.MARINE_WATER1
WHERE          (STATION IN ('VM14A', 'VM14B', 'VM14C', 'VM15A', 'VM15B', 'VM15C', 'CS1', 'CS2', 'CS3', 'CS4', 'VT10A', 'VT10B', 
                            'VM4A', 'VM5A', 'VT2A', 'VM1A', 'VM1B', 'ET2C'));


-- WPG.P_RW_TREND_2008 source

CREATE View WPG.P_RW_TREND_2008

-- a procedure used to calculation Seasonal Kendall Test for river water,
-- user should update the start yr (y1) and end yr (y2) in the script below before running the procedure
-- it may take 1 hour to complete all calculation

as
select	Station, Y1, Y2,
	WQ, 
	EWW41.F_RW_TREND(WQ, station, Y1, Y2, 's')	s,
	EWW41.F_RW_TREND(WQ, station, Y1, Y2, 'p')	p,
	case sign(EWW41.F_RW_TREND(WQ, station, Y1, Y2, 't')) when 1 then 'U' when -1 then 'D' when 0 then 'X' else '-' end trend,
	EWW41.F_RW_TREND(WQ, station, Y1, Y2, 'm')	slope,
	EWW41.F_RW_TREND(WQ, station, Y1, Y2, 'c') y_intercept
from
-- Year table 
(select	'AN1' as station, 1988 as Y1, 2008 as Y2 union all
select	'AN2' as station, 1988 as Y1, 2008 as Y2 union all
select	'DB1' as station, 1989 as Y1, 2008 as Y2 union all
select	'DB2' as station, 1989 as Y1, 2008 as Y2 union all
select	'DB3' as station, 1989 as Y1, 2008 as Y2 union all
select	'DB5' as station, 1989 as Y1, 2008 as Y2 union all
select	'DB6' as station, 1989 as Y1, 2008 as Y2 union all
select	'DB8' as station, 1990 as Y1, 2008 as Y2 union all
select	'FVR1' as station, 1993 as Y1, 2008 as Y2 union all
select	'GR1' as station, 1987 as Y1, 2008 as Y2 union all
select	'GR2' as station, 1987 as Y1, 2008 as Y2 union all
select	'GR3' as station, 1990 as Y1, 2008 as Y2 union all
select	'IN1' as station, 1987 as Y1, 2008 as Y2 union all
select	'IN2' as station, 1987 as Y1, 2008 as Y2 union all
select	'IN3' as station, 1987 as Y1, 2008 as Y2 union all
select	'JR3' as station, 1986 as Y1, 2008 as Y2 union all
select	'JR6' as station, 1986 as Y1, 2008 as Y2 union all
select	'JR11' as station, 1986 as Y1, 2008 as Y2 union all
select	'KN1' as station, 1986 as Y1, 2008 as Y2 union all
select	'KN2' as station, 1986 as Y1, 2008 as Y2 union all
select	'KN3' as station, 1986 as Y1, 2008 as Y2 union all
select	'KN4' as station, 1986 as Y1, 2008 as Y2 union all
select	'KN5' as station, 1986 as Y1, 2008 as Y2 union all
select	'KN7' as station, 1986 as Y1, 2008 as Y2 union all
select	'KT1' as station, 1986 as Y1, 2008 as Y2 union all
select	'KT2' as station, 1986 as Y1, 2008 as Y2 union all
select	'KW3' as station, 1988 as Y1, 2008 as Y2 union all
select	'KY1' as station, 1988 as Y1, 2008 as Y2 union all
select	'MW1' as station, 1986 as Y1, 2008 as Y2 union all
select	'MW2' as station, 1986 as Y1, 2008 as Y2 union all
select	'MW3' as station, 1986 as Y1, 2008 as Y2 union all
select	'MW4' as station, 1988 as Y1, 2008 as Y2 union all
select	'MW5' as station, 1988 as Y1, 2008 as Y2 union all
select	'PR1' as station, 1986 as Y1, 2008 as Y2 union all
select	'PR2' as station, 1986 as Y1, 2008 as Y2 union all
select	'PR5' as station, 1989 as Y1, 2008 as Y2 union all
select	'PR6' as station, 1989 as Y1, 2008 as Y2 union all
select	'PR7' as station, 1989 as Y1, 2008 as Y2 union all
select	'PR8' as station, 1989 as Y1, 2008 as Y2 union all
select	'RB1' as station, 1986 as Y1, 2008 as Y2 union all
select	'RB2' as station, 1986 as Y1, 2008 as Y2 union all
select	'RB3' as station, 1986 as Y1, 2008 as Y2 union all
select	'TC1' as station, 1993 as Y1, 2008 as Y2 union all
select	'TC2' as station, 1993 as Y1, 2008 as Y2 union all
select	'TC3' as station, 1993 as Y1, 2008 as Y2 union all
select	'TN1' as station, 1986 as Y1, 2008 as Y2 union all
select	'TN2' as station, 1986 as Y1, 2008 as Y2 union all
select	'TN3' as station, 1986 as Y1, 2008 as Y2 union all
select	'TN4' as station, 1986 as Y1, 2008 as Y2 union all
select	'TN5' as station, 1986 as Y1, 2008 as Y2 union all
select	'TN6' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR12' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR12B' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR12C' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR12D' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR12E' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR12F' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR12G' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR12H' as station, 1988 as Y1, 2008 as Y2 union all
select	'TR12I' as station, 1989 as Y1, 2008 as Y2 union all
select	'TR13' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR14' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR17' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR17L' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR19' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR19A' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR19C' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR19I' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR20B' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR23A' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR23L' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR4' as station, 1986 as Y1, 2008 as Y2 union all
select	'TR6' as station, 1986 as Y1, 2008 as Y2 union all
select	'TSR1' as station, 1993 as Y1, 2008 as Y2 union all
select	'TSR2' as station, 1993 as Y1, 2008 as Y2 union all
select	'TW1' as station, 1986 as Y1, 2008 as Y2 union all
select	'TW2' as station, 1986 as Y1, 2008 as Y2 union all
select	'TW3' as station, 1986 as Y1, 2008 as Y2 union all
select	'YL1' as station, 1986 as Y1, 2008 as Y2 union all
select	'YL2' as station, 1986 as Y1, 2008 as Y2 union all
select	'YL3' as station, 1986 as Y1, 2008 as Y2 union all
select	'YL4' as station, 1986 as Y1, 2008 as Y2
) b,
-- WQ table
(
select 'DO'  as WQ
union all
select 'pH'  
union all
select 'SS'  
union all
select 'BOD5'  
union all
select 'COD'  
union all
select 'Oil'  
union all
select 'EC'  
union all
select 'FC'  
union all
select 'NH4'  
union all
select 'NO3'  
union all
select 'TKNSP'  
union all
select 'PO4'  
union all
select 'TPSP'  
union all
select 'SSP'  
union all
select 'Al'  
union all
select 'Cd'  
union all
select 'Cr'  
union all
select 'Cu'  
union all
select 'Pb'  
union all
select 'Zn'  
union all
select 'Flow'  
) a;


-- WPG.RIVER_SEDIMENT1 source

CREATE VIEW WPG.RIVER_SEDIMENT1 AS
SELECT	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	R.RIVER_NAME	RIVER,
	SZ.SZ_NAME	SUBZONE,
	ST.STATNAME	STATION,
	V.MDATE,
	V.SAMPLE_NO	SAM_NO,
	M.L_AL,
	M.AL,
	M.L_ARSENIC	L_ARS,
	M.ARSENIC	ARS,
	M.L_AG,
	M.AG,
	M.L_B,
	M.B,
	M.L_BA,
	M.BA,
	M.L_BE,
	M.BE,
	M.L_CD,
	M.CD,
	M.L_CR,
	M.CR,
	M.L_CU,
	M.CU,
	M.L_FE,
	M.FE,
	M.L_HG,
	M.HG,
	M.L_MN,
	M.MN,
	M.L_MO,
	M.MO,
	M.L_NI,
	M.NI,
	M.L_PB,
	M.PB,
	M.L_SB,
	M.SB,
	M.L_TL,
	M.TL,
	M.L_V,
	M.V,
	M.L_ZN,
	M.ZN,
	M.L_DWR,
	M.DWR,
	N.L_TS,
	N.TS,
	N.L_TVS,
	N.TVS,
	N.L_TC,
	N.TC,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.RS_VISIT	V
LEFT OUTER JOIN	WPG.RS_GLABM	M	ON V.RSVISIT_ID	= M.RSVISIT_ID
LEFT OUTER JOIN	WPG.RS_GLABN	N	ON V.RSVISIT_ID	= N.RSVISIT_ID
JOIN		WPG.RSTATION	ST	ON V.SITE_ID	= ST.SITE_ID
JOIN		WPG.RIVER	R	ON ST.R_ID	= R.R_ID
JOIN		WPG.WPCO_SZ	SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID
JOIN		WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_SEDIMENT2 source

CREATE VIEW WPG.RIVER_SEDIMENT2 AS
SELECT	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	R.RIVER_NAME	RIVER,
	SZ.SZ_NAME	SUBZONE,
	ST.STATNAME	STATION,
	V.MDATE,
	V.SAMPLE_NO	SAM_NO,
	M.L_AL,
	M.AL,
	M.L_ARSENIC	L_ARS,
	M.ARSENIC	ARS,
	M.L_AG,
	M.AG,
	M.L_B,
	M.B,
	M.L_BA,
	M.BA,
	M.L_BE,
	M.BE,
	M.L_CD,
	M.CD,
	M.L_CR,
	M.CR,
	M.L_CU,
	M.CU,
	M.L_FE,
	M.FE,
	M.L_HG,
	M.HG,
	M.L_MN,
	M.MN,
	M.L_MO,
	M.MO,
	M.L_NI,
	M.NI,
	M.L_PB,
	M.PB,
	M.L_SB,
	M.SB,
	M.L_TL,
	M.TL,
	M.L_V,
	M.V,
	M.L_ZN,
	M.ZN,
	M.L_DWR,
	M.DWR,
	N.L_TS,
	N.TS,
	N.L_TVS,
	N.TVS,
	N.L_TC,
	N.TC
FROM		WPG.RS_VISIT	V
LEFT OUTER JOIN	WPG.RS_GLABM	M	ON V.RSVISIT_ID	= M.RSVISIT_ID
LEFT OUTER JOIN	WPG.RS_GLABN	N	ON V.RSVISIT_ID	= N.RSVISIT_ID
JOIN		WPG.RSTATION	ST	ON V.SITE_ID	= ST.SITE_ID
JOIN		WPG.RIVER	R	ON ST.R_ID	= R.R_ID
JOIN		WPG.WPCO_SZ	SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID
JOIN		WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID
AND MDATE <= GETDATE();


-- WPG.RIVER_SEDIMENT_AVG1 source

CREATE VIEW WPG.RIVER_SEDIMENT_AVG1 AS
SELECT	ZONE,
	WCZ,
	RIVER,
	SUBZONE,
	STATION,
	YEAR(MDATE)	YR,
	COUNT(*)	TOTAL,
	AVG(AL)		AL,
	AVG(ARS)	ARS,
	AVG(AG)		AG,
	AVG(B)		B,
	AVG(BA)		BA,
	AVG(BE)		BE,
	AVG(CD)		CD,
	AVG(CR)		CR,
	AVG(CU)		CU,
	AVG(FE)		FE,
	AVG(HG)		HG,
	AVG(MN)		MN,
	AVG(MO)		MO,
	AVG(NI)		NI,
	AVG(PB)		PB,
	AVG(SB)		SB,
	AVG(TL)		TL,
	AVG(V)		V,
	AVG(ZN)		ZN,
	AVG(DWR)	DWR,
	AVG(TS)		TS,
	AVG(TVS)	TVS,
	AVG(TC)		TC,
	VIEW_NO
FROM	WPG.RIVER_SEDIMENT1
GROUP BY ZONE, WCZ, RIVER, SUBZONE, STATION, YEAR(MDATE), VIEW_NO;


-- WPG.RIVER_SEDIMENT_AVG2 source

CREATE VIEW WPG.RIVER_SEDIMENT_AVG2 AS
SELECT	ZONE,
	WCZ,
	RIVER,
	SUBZONE,
	STATION,
	YEAR(MDATE)	YR,
	COUNT(*)	TOTAL,
	AVG(AL)		AL,
	AVG(ARS)	ARS,
	AVG(AG)		AG,
	AVG(B)		B,
	AVG(BA)		BA,
	AVG(BE)		BE,
	AVG(CD)		CD,
	AVG(CR)		CR,
	AVG(CU)		CU,
	AVG(FE)		FE,
	AVG(HG)		HG,
	AVG(MN)		MN,
	AVG(MO)		MO,
	AVG(NI)		NI,
	AVG(PB)		PB,
	AVG(SB)		SB,
	AVG(TL)		TL,
	AVG(V)		V,
	AVG(ZN)		ZN,
	AVG(DWR)	DWR,
	AVG(TS)		TS,
	AVG(TVS)	TVS,
	AVG(TC)		TC
FROM	WPG.RIVER_SEDIMENT2
GROUP BY ZONE, WCZ, RIVER, SUBZONE, STATION, YEAR(MDATE);


-- WPG.RIVER_SEDIMENT_GLABM1 source

CREATE VIEW WPG.RIVER_SEDIMENT_GLABM1 AS
SELECT	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	R.RIVER_NAME	RIVER,
	SZ.SZ_NAME	SUBZONE,
	ST.STATNAME	STATION,
	V.MDATE,
	V.SAMPLE_NO	SAM_NO,
	M.L_AL,
	M.AL,
	M.L_ARSENIC	L_ARS,
	M.ARSENIC	ARS,
	M.L_AG,
	M.AG,
	M.L_B,
	M.B,
	M.L_BA,
	M.BA,
	M.L_BE,
	M.BE,
	M.L_CD,
	M.CD,
	M.L_CR,
	M.CR,
	M.L_CU,
	M.CU,
	M.L_FE,
	M.FE,
	M.L_HG,
	M.HG,
	M.L_MN,
	M.MN,
	M.L_MO,
	M.MO,
	M.L_NI,
	M.NI,
	M.L_PB,
	M.PB,
	M.L_SB,
	M.SB,
	M.L_TL,
	M.TL,
	M.L_V,
	M.V,
	M.L_ZN,
	M.ZN,
	M.L_DWR,
	M.DWR,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.RS_VISIT	V
LEFT OUTER JOIN	WPG.RS_GLABM	M	ON V.RSVISIT_ID	= M.RSVISIT_ID
JOIN		WPG.RSTATION	ST	ON V.SITE_ID	= ST.SITE_ID
JOIN		WPG.RIVER	R	ON ST.R_ID	= R.R_ID
JOIN		WPG.WPCO_SZ	SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID
JOIN		WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_SEDIMENT_GLABN1 source

CREATE VIEW WPG.RIVER_SEDIMENT_GLABN1 AS
SELECT	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	R.RIVER_NAME	RIVER,
	SZ.SZ_NAME	SUBZONE,
	ST.STATNAME	STATION,
	V.MDATE,
	V.SAMPLE_NO	SAM_NO,
	N.L_TS,
	N.TS,
	N.L_TVS,
	N.TVS,
	N.L_TC,
	N.TC,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.RS_VISIT	V
LEFT OUTER JOIN	WPG.RS_GLABN	N	ON V.RSVISIT_ID	= N.RSVISIT_ID
JOIN		WPG.RSTATION	ST	ON V.SITE_ID	= ST.SITE_ID
JOIN		WPG.RIVER	R	ON ST.R_ID	= R.R_ID
JOIN		WPG.WPCO_SZ	SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID
JOIN		WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_SEDIMENT_VISIT1 source

CREATE VIEW WPG.RIVER_SEDIMENT_VISIT1 AS
SELECT	
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	R.RIVER_NAME	RIVER,
	SZ.SZ_NAME	SUBZONE,
	ST.STATNAME	STATION,
	V.MDATE,
	V.SAMPLE_NO	SAM_NO,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.RS_VISIT	V
JOIN		WPG.RSTATION	ST	ON V.SITE_ID	= ST.SITE_ID
JOIN		WPG.RIVER	R	ON ST.R_ID	= R.R_ID
JOIN		WPG.WPCO_SZ	SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID
JOIN		WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER1 source

CREATE VIEW WPG.RIVER_WATER1
AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, RI.RIVER_NAME AS RIVER, 
                            ST.STATNAME AS STATION, WQ.MDATE, WQ.STIME, WQ.SAMPLE_NO, FI.L_SAL, FI.SAL, FI.L_COND, FI.COND, 
                            FI.L_DO, FI.DO, FI.L_DOS, FI.DOS, FI.L_PH, FI.PH, FI.TEMPER, GN.L_SS, GN.SS, GN.L_TS, GN.TS, GN.L_TVS, 
                            GN.TVS, FI.L_TURB, FI.TURB, ML.L_BOD5, ML.BOD5, GN.L_COD, GN.COD, GN.L_TOC, GN.TOC, GN.L_OIL, GN.OIL, 
                            ML.L_EC, ML.EC, ML.L_FC, ML.FC, GN.L_NH4, GN.NH4, GN.L_NO2, GN.NO2, GN.L_NO3, GN.NO3, GN.L_TKNS, 
                            GN.TKNS, GN.L_TKNSP, GN.TKNSP, GN.L_PO4, GN.PO4, GN.L_TPS, GN.TPS, GN.L_TPSP, GN.TPSP, GN.L_SIL, 
                            GN.SIL, GN.L_TCYN, GN.TCYN, GN.L_DETERG, GN.DETERG, GN.L_FL, GN.FL, GN.L_CL, GN.CL, GN.L_H2S, GN.H2S, 
                            GN.L_SULP, GN.SULP, GN.L_SSP, GN.SSP, GN.L_CHL, GN.CHL, GN.L_PHEO, GN.PHEO, GM.L_AL, GM.AL, GM.L_SB, 
                            GM.SB, GM.L_ARSENIC, GM.ARSENIC, GM.L_BA, GM.BA, GM.L_BE, GM.BE, GM.L_B, GM.B, GM.L_CD, GM.CD, 
                            GM.L_CR, GM.CR, GM.L_CU, GM.CU, GM.L_FE, GM.FE, GM.L_PB, GM.PB, GM.L_MN, GM.MN, GM.L_HG, GM.HG, 
                            GM.L_MO, GM.MO, GM.L_NI, GM.NI, GM.L_AG, GM.AG, GM.L_TL, GM.TL, GM.L_V, GM.V, GM.L_ZN, GM.ZN, 
                            FL.DEPTH, FL.WIDTH, FL.VEL, FL.FLOW, WQ.BOD5_PT, WQ.NH4_PT, WQ.DOS_PT, WQ.WQI_PT, WQ.WQI_GRADE, 
                            NH.L_NH3, NH.NH3, GN.TIN, GN.TN, FI.WEATHER, FI.COLOR, FI.SMELL, FI.RAINFALL, FI.TIDE, 
                            ST.CMMVIEW AS VIEW_NO, FI.REMARK
FROM              WPG.RW_WQI AS WQ LEFT OUTER JOIN
                            WPG.RW_FIELD AS FI ON WQ.RWVISIT_ID = FI.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_MLAB AS ML ON WQ.RWVISIT_ID = ML.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_GLABM AS GM ON WQ.RWVISIT_ID = GM.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_GLABN_CAL AS GN ON WQ.RWVISIT_ID = GN.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_FLOW_SUM AS FL ON WQ.RWVISIT_ID = FL.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_NH3 AS NH ON WQ.RWVISIT_ID = NH.RWVISIT_ID INNER JOIN
                            WPG.RSTATION AS ST ON WQ.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.RIVER AS RI ON ST.R_ID = RI.R_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.RIVER_WATER2 source

CREATE VIEW WPG.RIVER_WATER2
AS
SELECT          ZONE, WCZ, SUBZONE, RIVER, STATION, MDATE, STIME, SAMPLE_NO, L_SAL, SAL, L_COND, COND, L_DO, DO, 
                            L_DOS, DOS, L_PH, PH, TEMPER, L_SS, SS, L_TS, TS, L_TVS, TVS, L_TURB, TURB, L_BOD5, BOD5, L_COD, COD, 
                            L_TOC, TOC, L_OIL, OIL, L_EC, EC, L_FC, FC, L_NH4, NH4, L_NO2, NO2, L_NO3, NO3, L_TKNS, TKNS, L_TKNSP, 
                            TKNSP, L_PO4, PO4, L_TPS, TPS, L_TPSP, TPSP, L_SIL, SIL, L_TCYN, TCYN, L_DETERG, DETERG, L_FL, FL, L_CL, 
                            CL, L_H2S, H2S, L_SULP, SULP, L_SSP, SSP, L_CHL, CHL, L_PHEO, PHEO, L_AL, AL, L_SB, SB, L_ARSENIC, 
                            ARSENIC, L_BA, BA, L_BE, BE, L_B, B, L_CD, CD, L_CR, CR, L_CU, CU, L_FE, FE, L_PB, PB, L_MN, MN, L_HG, HG, 
                            L_MO, MO, L_NI, NI, L_AG, AG, L_TL, TL, L_V, V, L_ZN, ZN, DEPTH, WIDTH, VEL, FLOW, BOD5_PT, NH4_PT, 
                            DOS_PT, WQI_PT, WQI_GRADE, L_NH3, NH3, TIN, TN, WEATHER, COLOR, SMELL, RAINFALL, TIDE, REMARK
FROM              WPG.RIVER_WATER1
WHERE          (VIEW_NO >= 2) AND (MDATE <= GETDATE());


-- WPG.RIVER_WATER_3A source

CREATE        view WPG.RIVER_WATER_3A as
select 	ZONE		WCZ_NAME,
	RIVER		RIVER_NAME,
	STATION	RIVER_STATION_NAME, 
	MDATE		SAMPLE_DATE, 
	SAMPLE_NO,
	case when SAL < 0.1 then '<' else L_SAL end L_SAL_F,
	case when SAL < 0.1 then 0.1 else cast(SAL as decimal(7,1)) end SAL_F,
	case when COND <1 then '<' else L_COND end L_COND_F,
	case when COND < 1 then 1 else cast(COND as decimal(7)) end COND_F,
	case when DO < 0.1 then '<' else L_DO end L_DO,
	case when DO < 0.1 then 0.1 else cast(DO as decimal(7,1)) end DO,
	case when DOS < 1 then '<' else L_DOS end L_DO_SAT,
	case when DOS < 1 then 1 else cast(DOS as decimal(5)) end DO_SAT,
	case when PH < 0.1 then '<' else L_PH end L_PH_F,
	case when PH < 0.1 then 0.1 else cast(PH as decimal(7,1)) end PH_F,
	case when TEMPER < 0.1 then 0.1 else cast(TEMPER as decimal(7,1)) end TEMPER,
	case when SS < 0.5 then '<' else l_SS end L_SS,
	case when SS < 0.5 then 0.5 else cast(SS as decimal(7,1)) end SS,
	case when TS < 0.5 then '<' else l_TS end L_TS,
	case when TS < 0.5 then 0.5 else cast(TS as decimal(7,1)) end TS,
	case when TVS < 0.5 then '<' else l_TVS end L_TVS,
	case when TVS < 0.5 then 0.5 else cast(TVS as decimal(7,1)) end TVS,
	case when TURB < 0.1 then '<' else  L_TURB end L_TURB_F,
	case when TURB < 0.1 then 0.1 else cast(TURB as decimal(7,1)) end TURB_F,
	case when bod5 < 1 then '<' else l_bod5 end L_BOD5,
	case when bod5 < 1 then 1 else cast(bod5 as decimal(7)) end BOD5,
	case when COD < 2 then '<' else L_COD end L_COD,
	case when COD < 2 then 2 else cast(COD as decimal(7)) end COD,
	case when TOC < 1 then '<' else L_TOC end L_TOC,
	case when TOC < 1 then 1 else cast(TOC as decimal(7)) end TOC,
	case when OIL < 0.5 then '<' else L_OIL end L_OIL,
	case when OIL < 0.5 then 0.5 else cast(OIL as decimal(7,1)) end OIL,
	case when EC <1 then '<' else L_EC end L_E_COLI,
	case when EC <1 then 1 else cast(round(EC/power(10,floor(log10(EC))),1)* power(10,floor(log10(EC))) as int) end E_COLI,
	case when FC < 1 then '<' else l_FC end L_F_COLI,
	case when FC < 1 then 1 else cast(round(FC/power(10,floor(log10(FC))),1)* power(10,floor(log10(FC))) as int) end F_COLI,
	case when NH4 < 0.005 then '<' else l_NH4 end L_NH4,
	case when NH4 < 0.005 then 0.005 else cast(NH4 as decimal(12,3)) end NH4,
	case when NO2 < 0.002 then '<' else l_NO2 end L_NO2,
	case when NO2 < 0.002 then 0.002 else cast(NO2 as decimal(12,3)) end NO2,
	case when NO3 < 0.002 then '<' else l_NO3 end L_NO3,
	case when NO3 < 0.002 then 0.002 else cast(NO3 as decimal(12,3)) end NO3,
	case when TKNSP < 0.05 then '<' else l_TKNSP end L_TKNSP,
	case when TKNSP < 0.05 then 0.05 else cast(TKNSP as decimal(9,2)) end TKNSP,
	case when PO4 < 0.002 then '<' else l_PO4 end L_PO4,
	case when PO4 < 0.002 then 0.002 else cast(PO4 as decimal(12,3)) end PO4,
	case when TPSP < 0.02 then '<' else L_TPSP end L_TPSP,
	case when TPSP < 0.02 then 0.02 else cast(TPSP as decimal(9,2)) end TPSP,
	case when SIL < 0.05 then '<' else l_SIL end L_SIL,
	case when SIL < 0.05 then 0.05 else cast(SIL as decimal(9,2)) end SIL,
	case when TCYN < 0.01 then '<' else l_TCYN end L_TCYN,
	case when TCYN < 0.01 then 0.01 else cast(TCYN as decimal(12,2)) end TCYN,
	case when DETERG < 0.05 then '<' else L_DETERG end L_DET,
	case when DETERG < 0.05 then 0.05 else cast(DETERG as decimal(12,2)) end DET,
	case when FL < 0.2 then '<' else L_FL end L_FL,
	case when FL < 0.2 then 0.2 else cast(FL as decimal(10,1)) end FL,
	case when H2S < 0.01 then '<' else l_H2S end L_H2S,
	case when H2S < 0.01 then 0.01 else cast(H2S as decimal(9,2)) end H2S,
	case when SSP < 0.02 then '<' else l_SSP end L_SSP,
	case when SSP < 0.02 then 0.02 else cast(SSP as decimal(9,2)) end SSP,
	case when CHL < 0.2 then '<' else l_CHL end L_CHL,
	case when CHL < 0.2 then 0.2 else cast(CHL as decimal(7,1)) end CHL,
	case when PHEO < 0.2 then '<' else l_PHEO end L_PHEO,
	case when PHEO < 0.2 then 0.2 else cast(PHEO as decimal(7,1)) end PHEO,
	case when AL < 50 then '<' else L_AL end L_AL,
	case when AL < 50 then 50 else cast(AL as decimal(12)) end AL,
	case when SB < 1 then '<' else L_SB end L_SB,
	case when SB < 1 then 1 else cast(SB as decimal(12)) end SB,
	case when ARSENIC < 1 then '<' else L_ARSENIC end L_ARS,
	case when ARSENIC < 1 then 1 else cast(ARSENIC as decimal(12)) end ARS,
	case when BA < 1 then '<' else L_BA end L_BA,
	case when BA < 1 then 1 else cast(BA as decimal(12)) end BA,
	case when BE < 1 then '<' else L_BE end L_BE,
	case when BE < 1 then 1 else cast(BE as decimal(12)) end BE,
	case when B < 50 then '<' else L_B end L_B,
	case when B < 50 then 50 else cast(B as decimal(12)) end B,
	case when CD < 0.1 then '<' else L_CD end L_CD,
	case when CD < 0.1 then 0.1 else cast(CD as decimal(12)) end CD,
	case when CR < 1 then '<' else L_CR end L_CR,
	case when CR < 1 then 1 else cast(CR as decimal(12)) end CR,
	case when CU < 1 then '<' else L_CU end L_CU,
	case when CU < 1 then 1 else cast(CU as decimal(12)) end CU,
	case when FE < 50 then '<' else L_FE end L_FE,
	case when FE < 50 then 50 else cast(FE as decimal(12)) end FE,
	case when PB < 1 then '<' else L_PB end L_PB,
	case when PB < 1 then 1 else cast(PB as decimal(12)) end PB,
	case when MN < 10 then '<' else L_MN end L_MN,
	case when MN < 10 then 10 else cast(MN as decimal(12)) end MN,
	case when HG < 1 then '<' else L_HG end L_HG,
	case when HG < 1 then 1 else cast(HG as decimal(12)) end HG,
	case when MO < 2 then '<' else L_MO end L_MO,
	case when MO < 2 then 2 else cast(MO as decimal(12)) end MO,
	case when NI < 1 then '<' else L_NI end L_NI,
	case when NI < 1 then 1 else cast(NI as decimal(12)) end NI,
	case when AG < 1 then '<' else L_AG end L_AG,
	case when AG < 1 then 1 else cast(AG as decimal(12)) end AG,
	case when TL < 1 then '<' else L_TL end L_TL,
	case when TL <1 then 1 else cast(TL as decimal(12)) end TL,
	case when V < 2 then '<' else L_V end L_V,
	case when V < 2 then 2 else cast(V as decimal(12)) end V,
	case when ZN < 10 then '<' else L_ZN end L_ZN,
	case when ZN < 10 then 10 else cast(ZN as decimal(12)) end ZN,
	case when ltrim(rtrim(upper(station))) not in ('TR23A','TR17L','TR19I','TR6','TR12I','MW2','PR1','PR6','PR8','JR3','JR6','KN2','KN3','KN4','KN5','KN7','KN1','TW1','TW3','IN1','IN2','TSR1','FVR1','DB8','TN3','TN4','TN5','TN6','TC3','AN1') and FLOW <0.001 then '<' else null end L_FLOW,
	case when  ltrim(rtrim(upper(station))) not in ('TR23A','TR17L','TR19I','TR6','TR12I','MW2','PR1','PR6','PR8','JR3','JR6','KN2','KN3','KN4','KN5','KN7','KN1','TW1','TW3','IN1','IN2','TSR1','FVR1','DB8','TN3','TN4','TN5','TN6','TC3','AN1') and FLOW <= 0.001 then 0.001
	when  ltrim(rtrim(upper(station))) not in ('TR23A','TR17L','TR19I','TR6','TR12I','MW2','PR1','PR6','PR8','JR3','JR6','KN2','KN3','KN4','KN5','KN7','KN1','TW1','TW3','IN1','IN2','TSR1','FVR1','DB8','TN3','TN4','TN5','TN6','TC3','AN1') and FLOW > 0.001 then cast(FLOW as decimal(10,3))
	 else null end FLOW
from 	wpg.river_water1
where	view_no >=3 
AND	MDATE <= GETDATE();


-- WPG.RIVER_WATER_3B source

CREATE    view WPG.RIVER_WATER_3B as
select 	WCZ_NAME			[Water Control Zone],
	RIVER_NAME			[River],
	RIVER_STATION_NAME	[Station], 
	SAMPLE_DATE			[Sampling Date], 
	SAMPLE_NO			[Sample Number],
--	cast((isnull(L_SAL_F, '') + replace(rtrim(replace(replace(rtrim(replace(cast(SAL_F as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
--		[Salinity],
	cast((isnull(L_COND_F, '') + cast(COND_F  as nvarchar)) as nvarchar(20))	[Conductivity (μS/cm)],
	cast((isnull(L_DO, '') + replace(rtrim(replace(replace(rtrim(replace(cast(DO as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Dissolved Oxygen (mg/L)],
	cast((isnull(l_DO_SAT, '') + cast(DO_SAT  as nvarchar))  as nvarchar(20))	[Dissolved Oxygen (% saturation)],
	cast((isnull(L_PH_F, '') + replace(rtrim(replace(replace(rtrim(replace(cast(PH_F as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[pH],
	cast((replace(rtrim(replace(replace(rtrim(replace(cast(TEMPER as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Water Temperature (°C)],
	cast((isnull(l_SS, '') + replace(rtrim(replace(replace(rtrim(replace(cast(SS as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Suspended Solids (mg/L)],
	cast((isnull(l_TS, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TS as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Total Solids (mg/L)],
	cast((isnull(l_TVS, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TVS as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Total Volatile Solids (mg/L)],
	cast((isnull(L_TURB_F, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TURB_F as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Turbidity (NTU)],
	cast((isnull(l_BOD5, '') + cast(BOD5  as nvarchar))  as nvarchar(20))	[5-day Biochemical Oxygen Demand (BOD5) (mg/L)],
	cast((isnull(l_COD, '') + cast(COD  as nvarchar))  as nvarchar(20))	[Chemical Oxygen Demand (COD) (mg/L)],
	cast((isnull(l_TOC, '') + cast(TOC  as nvarchar)) as nvarchar(20))	[Total Organic Carbon (TOC) (mg/L)],
	cast((isnull(l_OIL, '') + replace(rtrim(replace(replace(rtrim(replace(cast(OIL as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Oil and grease (mg/L)],
	cast((isnull(l_E_COLI, '') + cast(E_COLI  as nvarchar)) as nvarchar(20))	[Escherichia coli (E. coli) (cfu/100ml)],
	cast((isnull(l_F_COLI, '') + cast(F_COLI  as nvarchar)) as nvarchar(20))	[Faecal Coliforms (cfu/100ml)],
	cast((isnull(l_NH4, '') + replace(rtrim(replace(replace(rtrim(replace(cast(NH4 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Ammonia-nitrogen(NH3-N) (mg/L)],
	cast((isnull(l_NO2, '') + replace(rtrim(replace(replace(rtrim(replace(cast(NO2 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Nitrite-nitrogen (NO2-N) (mg/L)],
	cast((isnull(l_NO3, '') + replace(rtrim(replace(replace(rtrim(replace(cast(NO3 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Nitrate-nitrogen (NO3-N) (mg/L)],
	cast((isnull(l_TKNSP, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TKNSP as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Total Kjeldahl Nitrogen (soluble & particulate) (mg/L)],
	cast((isnull(l_PO4, '') + replace(rtrim(replace(replace(rtrim(replace(cast(PO4 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Ortho-phosphate as phosphorus (PO4-P) (mg/L)],
	cast((isnull(l_TPSP, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TPSP as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Total Phosphorus (soluble & particulate) (mg/L)],
	cast((isnull(l_SIL, '') + replace(rtrim(replace(replace(rtrim(replace(cast(SIL as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Molybdate-reactive silica (mg/L)],
	cast((isnull(l_TCYN, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TCYN as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Cyanide (mg/L)],
	cast((isnull(l_DET, '') + replace(rtrim(replace(replace(rtrim(replace(cast(DET as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Anionic surfactants (as Manoxol OT) (mg/L)],
	cast((isnull(l_FL, '') + replace(rtrim(replace(replace(rtrim(replace(cast(FL as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Fluoride (mg/L)],
	cast((isnull(l_H2S, '') + replace(rtrim(replace(replace(rtrim(replace(cast(H2S as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Free hydrogen sulphide (mg/L)],
	cast((isnull(l_SSP, '') + replace(rtrim(replace(replace(rtrim(replace(cast(SSP as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Sulphide (soluble & particulate) (mg/L)],
	cast((isnull(l_CHL, '') + replace(rtrim(replace(replace(rtrim(replace(cast(CHL as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Chlorophyll-a  (μg/L)],
	cast((isnull(l_PHEO, '') + replace(rtrim(replace(replace(rtrim(replace(cast(PHEO as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Pheo-pigment  (μg/L)],
	cast((isnull(l_AL, '') + cast(AL  as nvarchar)) as nvarchar(20))	[Aluminium (μg/L)],
	cast((isnull(l_SB, '') + cast(SB  as nvarchar)) as nvarchar(20))	[Antimony (μg/L)],
	cast((isnull(l_ARS, '') + cast(ARS  as nvarchar)) as nvarchar(20))	[Arsenic (μg/L)],
	cast((isnull(l_BA, '') + cast(BA  as nvarchar)) as nvarchar(20))	[Barium (μg/L)],
	cast((isnull(l_BE, '') + cast(BE  as nvarchar)) as nvarchar(20))	[Beryllium (μg/L)],
	cast((isnull(l_B, '') + cast(B  as nvarchar)) as nvarchar(20))	[Boron (μg/L)],
	cast((isnull(l_CD, '') + replace(rtrim(replace(replace(rtrim(replace(cast(CD as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Cadmium (μg/L)],
	cast((isnull(l_CR, '') + cast(CR  as nvarchar)) as nvarchar(20))	[Chromium (μg/L)],
	cast((isnull(l_CU, '') + cast(CU  as nvarchar)) as nvarchar(20))	[Copper (μg/L)],
	cast((isnull(l_FE, '') + cast(FE  as nvarchar)) as nvarchar(20))	[Iron (μg/L)],
	cast((isnull(l_PB, '') + cast(PB  as nvarchar)) as nvarchar(20))	[Lead (μg/L)],
	cast((isnull(l_MN, '') + cast(MN  as nvarchar)) as nvarchar(20))	[Manganese (μg/L)],
	cast((isnull(l_HG, '') + cast(HG  as nvarchar)) as nvarchar(20))	[Mercury (μg/L)],
	cast((isnull(l_MO, '') + cast(MO  as nvarchar)) as nvarchar(20))	[Molybdenum (μg/L)],
	cast((isnull(l_NI, '') + cast(NI  as nvarchar)) as nvarchar(20))	[Nickel (μg/L)],
	cast((isnull(l_AG, '') + cast(AG  as nvarchar)) as nvarchar(20))	[Silver (μg/L)],
	cast((isnull(l_TL, '') + cast(TL  as nvarchar)) as nvarchar(20))	[Thallium (μg/L)],
	cast((isnull(l_V, '') + cast(V  as nvarchar)) as nvarchar(20)) 	[Vanadium (μg/L)],
	cast((isnull(l_ZN, '') + cast(ZN  as nvarchar)) as nvarchar(20)) 	[Zinc (μg/L)],
	cast((isnull(l_FLOW, '') + replace(rtrim(replace(replace(rtrim(replace(cast(FLOW as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[Flow (m3/s)]
from 	WPG.river_water_3a;


-- WPG.RIVER_WATER_3C source

CREATE          view WPG.RIVER_WATER_3C as
select 	Z.CHINESE_NAME		[水質管制區],
	R.CHINESE_NAME		[河溪],
	RIVER_STATION_NAME	[監測站], 
	SAMPLE_DATE			[日期], 
	SAMPLE_NO			[樣本],
--	cast((isnull(L_SAL_F, '') + replace(rtrim(replace(replace(rtrim(replace(cast(SAL_F as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
--		[鹽度],
	cast((isnull(l_COND_F, '') + cast(COND_F as nvarchar)) as nvarchar(20))	[傳電性 (μS/cm)],
	cast((isnull(L_DO, '') + replace(rtrim(replace(replace(rtrim(replace(cast(DO as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[溶解氧 (毫克/公升)],
	cast((isnull(l_DO_SAT, '') + cast(DO_SAT  as nvarchar))  as nvarchar(20))	[溶解氧飽和百分率 (百分率)],
	cast((isnull(L_PH_F, '') + replace(rtrim(replace(replace(rtrim(replace(cast(PH_F as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[酸鹼值 (pH值)],
	cast((replace(rtrim(replace(replace(rtrim(replace(cast(TEMPER as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[水溫 (攝氏)],
	cast((isnull(l_SS, '') + replace(rtrim(replace(replace(rtrim(replace(cast(SS as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[總懸浮固體 (毫克/公升)],
	cast((isnull(l_TS, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TS as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[總固體量 (毫克/公升)],
	cast((isnull(l_TVS, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TVS as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[總揮發性固體量 (毫克/公升)],
	cast((isnull(L_TURB_F, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TURB_F as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[混濁度 (NTU)],
	cast((isnull(l_BOD5, '') + cast(BOD5  as nvarchar))  as nvarchar(20))	[五天生化需氧量 (毫克/公升)],
	cast((isnull(l_COD, '') + cast(COD  as nvarchar))  as nvarchar(20))	[化學需氧量 (毫克/公升)],
	cast((isnull(l_TOC, '') + cast(TOC  as nvarchar)) as nvarchar(20))	[總有機碳量 (毫克/公升)],
	cast((isnull(l_OIL, '') + replace(rtrim(replace(replace(rtrim(replace(cast(OIL as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[油脂 (毫克/公升)],
	cast((isnull(l_E_COLI, '') + cast(E_COLI  as nvarchar)) as nvarchar(20))	[大腸桿菌 (個/100毫升)],
	cast((isnull(l_F_COLI, '') + cast(F_COLI  as nvarchar)) as nvarchar(20))	[大腸細菌群 (個/100毫升)],
	cast((isnull(l_NH4, '') + replace(rtrim(replace(replace(rtrim(replace(cast(NH4 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[氨氮 (毫克/公升)],
	cast((isnull(l_NO2, '') + replace(rtrim(replace(replace(rtrim(replace(cast(NO2 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[亞硝酸鹽氮 (毫克/公升)],
	cast((isnull(l_NO3, '') + replace(rtrim(replace(replace(rtrim(replace(cast(NO3 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[硝酸鹽氮 (毫克/公升)],
	cast((isnull(l_TKNSP, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TKNSP as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[凱氏氮 (可溶及粒子) (毫克/公升)],
	cast((isnull(l_PO4, '') + replace(rtrim(replace(replace(rtrim(replace(cast(PO4 as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[正磷酸鹽磷 (毫克/公升)],
	cast((isnull(l_TPSP, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TPSP as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[總磷量 (可溶及粒子) (毫克/公升)],
	cast((isnull(l_SIL, '') + replace(rtrim(replace(replace(rtrim(replace(cast(SIL as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[活性硅酸鹽 (毫克/公升)],
	cast((isnull(l_TCYN, '') + replace(rtrim(replace(replace(rtrim(replace(cast(TCYN as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[氰化物總量 (毫克/公升)],
	cast((isnull(l_DET, '') + replace(rtrim(replace(replace(rtrim(replace(cast(DET as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[陰離子洗滌劑總量 (毫克/公升)],
	cast((isnull(l_FL, '') + replace(rtrim(replace(replace(rtrim(replace(cast(FL as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[氟化物 (毫克/公升)],
	cast((isnull(l_H2S, '') + replace(rtrim(replace(replace(rtrim(replace(cast(H2S as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[游離硫化氫 (毫克/公升)],
	cast((isnull(l_SSP, '') + replace(rtrim(replace(replace(rtrim(replace(cast(SSP as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[硫化物 (可溶及粒子) (毫克/公升)],
	cast((isnull(l_CHL, '') + replace(rtrim(replace(replace(rtrim(replace(cast(CHL as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[葉綠素-a (微克/升)],
	cast((isnull(l_PHEO, '') + replace(rtrim(replace(replace(rtrim(replace(cast(PHEO as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[脫鎂色素 (微克/升)],
	cast((isnull(l_AL, '') + cast(AL  as nvarchar)) as nvarchar(20))	[鋁 (微克/公升)],
	cast((isnull(l_SB, '') + cast(SB  as nvarchar)) as nvarchar(20))	[銻 (微克/公升)],
	cast((isnull(l_ARS, '') + cast(ARS  as nvarchar)) as nvarchar(20))	[砷 (微克/公升)],
	cast((isnull(l_BA, '') + cast(BA  as nvarchar)) as nvarchar(20))	[鋇 (微克/公升)],
	cast((isnull(l_BE, '') + cast(BE  as nvarchar)) as nvarchar(20))	[鈹 (微克/公升)],
	cast((isnull(l_B, '') + cast(B  as nvarchar)) as nvarchar(20))	[硼 (微克/公升)],
	cast((isnull(l_CD, '') + replace(rtrim(replace(replace(rtrim(replace(cast(CD as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[鎘 (微克/公升)],
	cast((isnull(l_CR, '') + cast(CR  as nvarchar)) as nvarchar(20))	[鉻 (微克/公升)],
	cast((isnull(l_CU, '') + cast(CU  as nvarchar)) as nvarchar(20))	[銅 (微克/公升)],
	cast((isnull(l_FE, '') + cast(FE  as nvarchar)) as nvarchar(20))	[鐵 (微克/公升)],
	cast((isnull(l_PB, '') + cast(PB  as nvarchar)) as nvarchar(20))	[鉛 (微克/公升)],
	cast((isnull(l_MN, '') + cast(MN  as nvarchar)) as nvarchar(20))	[錳 (微克/公升)],
	cast((isnull(l_HG, '') + cast(HG  as nvarchar)) as nvarchar(20))	[汞 (微克/公升)],
	cast((isnull(l_MO, '') + cast(MO  as nvarchar)) as nvarchar(20))	[鉬 (微克/公升)],
	cast((isnull(l_NI, '') + cast(NI  as nvarchar)) as nvarchar(20))	[鎳 (微克/公升)],
	cast((isnull(l_AG, '') + cast(AG  as nvarchar)) as nvarchar(20))	[銀 (微克/公升)],
	cast((isnull(l_TL, '') + cast(TL  as nvarchar)) as nvarchar(20))	[鉈 (微克/公升)],
	cast((isnull(l_V, '') + cast(V  as nvarchar)) as nvarchar(20)) 	[釩 (微克/公升)],
	cast((isnull(l_ZN, '') + cast(ZN  as nvarchar)) as nvarchar(20)) 	[鋅 (微克/公升)],
	cast((isnull(l_FLOW, '') + replace(rtrim(replace(replace(rtrim(replace(cast(FLOW as nvarchar),'0',' ')),' ','0'),'.',' ')),' ','.')) as nvarchar(20))
		[流量 (立方公尺/秒)]
from 	WPG.river_water_3a	D, 
	WPG.RIVER 		R, 
	WPG.TEN_ZONE 	Z
WHERE  	D.RIVER_NAME = R.RIVER_NAME 
AND 		D.WCZ_NAME = Z.ZONE_NAME
--;


-- WPG.RIVER_WATER_ALERT source

CREATE VIEW WPG.RIVER_WATER_ALERT AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, RI.RIVER_NAME AS RIVER, 
                            ST.STATNAME AS STATION, A.MDATE, A.STIME, A.SAMPLE_NO, A.PARAMETER, A.MEASURE, 
                            LIMIT, DISP_STATS, TOTAL, YR, A.SITE_ID, DISP_SEQ, A.RWVISIT_ID
FROM              WPG.RW_ALERT1 A
INNER JOIN                  WPG.RSTATION AS ST ON A.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.RIVER AS RI ON ST.R_ID = RI.R_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.RIVER_WATER_ALERT_A source

-- ##########
CREATE VIEW [WPG].[RIVER_WATER_ALERT_A] AS
SELECT          TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, RI.RIVER_NAME AS RIVER, 
                            ST.STATNAME AS STATION, A.MDATE, A.STIME, A.SAMPLE_NO, A.PARAMETER, A.L_MEASURE, A.MEASURE, 
                            LIMIT, DISP_STATS, TOTAL, YR, A.SITE_ID, DISP_SEQ, A.RWVISIT_ID,
							A.SAMPLE_MARK, A.LAB_NO, A.DATE_RECEIVED, A.DATE_REPORTED, A.VALID_USER, A.VALID_DATE, A.VALID_CODE
FROM              WPG.RW_ALERT_A1 A
INNER JOIN                  WPG.RSTATION AS ST ON A.SITE_ID = ST.SITE_ID INNER JOIN
                            WPG.RIVER AS RI ON ST.R_ID = RI.R_ID INNER JOIN
                            WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID INNER JOIN
                            WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID INNER JOIN
                            WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.RIVER_WATER_AVG1 source

CREATE VIEW WPG.RIVER_WATER_AVG1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	RI.RIVER_NAME	RIVER,
	ST.STATNAME	STATION,
	CA.YR,
	CA.TOTAL,
	FI.TEMPER_AVG,
	FI.TURB_AVG,
	FI.SAL_AVG,
	FI.COND_AVG,
	FI.PH_AVG,
	FI.DO_AVG,
	FI.DOS_AVG,
	ML.FC_AVG,
	ML.EC_AVG,
	ML.BOD5_AVG,
	GN.COD_AVG,
	GN.TOC_AVG,
	GN.OIL_AVG,
	GN.SS_AVG,
	GN.TS_AVG,
	GN.TVS_AVG,
	GN.NH4_AVG,
	GN.NO2_AVG,
	GN.NO3_AVG,
	GN.TKNS_AVG,
	GN.TKNSP_AVG,
	GN.PO4_AVG,
	GN.TPS_AVG,
	GN.TPSP_AVG,
	GN.SIL_AVG,	
	GN.TCYN_AVG,
	GN.DETERG_AVG,
	GN.FL_AVG,
	GN.CL_AVG,
	GN.H2S_AVG,
	GN.SULP_AVG,
	GN.SSP_AVG,
	GN.CHL_AVG,
	GN.PHEO_AVG,
	GM.AL_AVG,
	GM.SB_AVG,
	GM.ARSENIC_AVG,
	GM.BA_AVG,
	GM.BE_AVG,	
	GM.B_AVG,
	GM.CD_AVG,
	GM.CR_AVG,
	GM.CU_AVG,
	GM.FE_AVG,
	GM.PB_AVG,
	GM.MN_AVG,
	GM.HG_AVG,
	GM.MO_AVG,
	GM.NI_AVG,
	GM.AG_AVG,
	GM.TL_AVG,
	GM.V_AVG,
	GM.ZN_AVG,
	FS.DEPTH_AVG,
	FS.WIDTH_AVG,
	FS.VEL_AVG,
	FS.FLOW_AVG,
	NH.NH3_AVG,
	GN.TIN_AVG,
	GN.TN_AVG,
	CA.BOD5_PT_AVG,
	CA.NH4_PT_AVG,
	CA.DOS_PT_AVG,
	CA.WQI_PT_AVG,
	CA.WQI_GRADE_AVG,
	ST.CMMVIEW	VIEW_NO
FROM	WPG.RW_WQI_AVG		CA
LEFT OUTER JOIN	WPG.RW_FIELD_AVG	FI	ON CA.SITE_ID 	= FI.SITE_ID	AND CA.YR = FI.YR
LEFT OUTER JOIN	WPG.RW_MLAB_AVG	ML	ON CA.SITE_ID 	= ML.SITE_ID	AND CA.YR = ML.YR
LEFT OUTER JOIN	WPG.RW_GLABM_AVG	GM	ON CA.SITE_ID 	= GM.SITE_ID	AND CA.YR = GM.YR
LEFT OUTER JOIN	WPG.RW_GLABN_AVG	GN	ON CA.SITE_ID 	= GN.SITE_ID	AND CA.YR = GN.YR
LEFT OUTER JOIN	WPG.RW_FLOW_AVG	FS	ON CA.SITE_ID 	= FS.SITE_ID	AND CA.YR = FS.YR
LEFT OUTER JOIN	WPG.RW_NH3_AVG	NH	ON CA.SITE_ID 	= NH.SITE_ID	AND CA.YR = NH.YR
JOIN		WPG.RSTATION		ST	ON CA.SITE_ID 	= ST.SITE_ID
JOIN		WPG.RIVER		RI	ON ST.R_ID	= RI.R_ID
JOIN		WPG.WPCO_SZ		SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ		CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID 
JOIN		WPG.TEN_ZONE		TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_AVG1A source

CREATE VIEW WPG.RIVER_WATER_AVG1A AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	RI.RIVER_NAME	RIVER,
	ST.STATNAME	STATION,
	CA.YR,	
	CA.TOTAL,	
	FI.TEMPER_AVG,
	FI.L_TURB_AVG,	FI.TURB_AVG,
	FI.L_SAL_AVG,	FI.SAL_AVG,
	FI.L_COND_AVG,	FI.COND_AVG,
	FI.L_PH_AVG,	FI.PH_AVG,
	FI.L_DO_AVG,	FI.DO_AVG,
	FI.L_DOS_AVG,	FI.DOS_AVG,
	ML.L_FC_AVG,	ML.FC_AVG,
	ML.L_EC_AVG,	ML.EC_AVG,
	ML.L_BOD5_AVG,	ML.BOD5_AVG,
	GN.L_COD_AVG,	GN.COD_AVG,
	GN.L_TOC_AVG,	GN.TOC_AVG,
	GN.L_OIL_AVG,	GN.OIL_AVG,
	GN.L_SS_AVG,	GN.SS_AVG,
	GN.L_TS_AVG,	GN.TS_AVG,
	GN.L_TVS_AVG,	GN.TVS_AVG,
	GN.L_NH4_AVG,	GN.NH4_AVG,
	GN.L_NO2_AVG,	GN.NO2_AVG,
	GN.L_NO3_AVG,	GN.NO3_AVG,
	GN.L_TKNS_AVG,	GN.TKNS_AVG,
	GN.L_TKNSP_AVG,	GN.TKNSP_AVG,
	GN.L_PO4_AVG,	GN.PO4_AVG,
	GN.L_TPS_AVG,	GN.TPS_AVG,
	GN.L_TPSP_AVG,	GN.TPSP_AVG,
	GN.L_SIL_AVG,	GN.SIL_AVG,
	GN.L_TCYN_AVG,	GN.TCYN_AVG,
	GN.L_DETERG_AVG,	GN.DETERG_AVG,
	GN.L_FL_AVG,	GN.FL_AVG,
	GN.L_CL_AVG,	GN.CL_AVG,
	GN.L_H2S_AVG,	GN.H2S_AVG,
	GN.L_SULP_AVG,	GN.SULP_AVG,
	GN.L_SSP_AVG,	GN.SSP_AVG,
	GN.L_CHL_AVG,	GN.CHL_AVG,
	GN.L_PHEO_AVG,	GN.PHEO_AVG,
	GM.L_AL_AVG,	GM.AL_AVG,
	GM.L_SB_AVG,	GM.SB_AVG,
	GM.L_ARSENIC_AVG,	GM.ARSENIC_AVG,
	GM.L_BA_AVG,	GM.BA_AVG,
	GM.L_BE_AVG,	GM.BE_AVG,
	GM.L_B_AVG,	GM.B_AVG,
	GM.L_CD_AVG,	GM.CD_AVG,
	GM.L_CR_AVG,	GM.CR_AVG,
	GM.L_CU_AVG,	GM.CU_AVG,
	GM.L_FE_AVG,	GM.FE_AVG,
	GM.L_PB_AVG,	GM.PB_AVG,
	GM.L_MN_AVG,	GM.MN_AVG,
	GM.L_HG_AVG,	GM.HG_AVG,
	GM.L_MO_AVG,	GM.MO_AVG,
	GM.L_NI_AVG,	GM.NI_AVG,
	GM.L_AG_AVG,	GM.AG_AVG,
	GM.L_TL_AVG,	GM.TL_AVG,
	GM.L_V_AVG,	GM.V_AVG,
	GM.L_ZN_AVG,	GM.ZN_AVG,
	FS.DEPTH_AVG,
	FS.WIDTH_AVG,
	FS.VEL_AVG,
	FS.FLOW_AVG,
	NH.L_NH3_AVG,	NH.NH3_AVG,
	GN.L_TIN_AVG,	GN.TIN_AVG,
	GN.L_TN_AVG,	GN.TN_AVG,
	CA.BOD5_PT_AVG,
	CA.NH4_PT_AVG,
	CA.DOS_PT_AVG,
	CA.WQI_PT_AVG,
	CA.WQI_GRADE_AVG,
	ST.CMMVIEW	VIEW_NO
FROM	WPG.RW_WQI_AVG		CA
LEFT OUTER JOIN	WPG.RW_FIELD_AVG_A	FI	ON CA.SITE_ID 	= FI.SITE_ID	AND CA.YR = FI.YR
LEFT OUTER JOIN	WPG.RW_MLAB_AVG_A	ML	ON CA.SITE_ID 	= ML.SITE_ID	AND CA.YR = ML.YR
LEFT OUTER JOIN	WPG.RW_GLABM_AVG_A	GM	ON CA.SITE_ID 	= GM.SITE_ID	AND CA.YR = GM.YR
LEFT OUTER JOIN	WPG.RW_GLABN_AVG_A	GN	ON CA.SITE_ID 	= GN.SITE_ID	AND CA.YR = GN.YR
LEFT OUTER JOIN	WPG.RW_FLOW_AVG	FS	ON CA.SITE_ID 	= FS.SITE_ID	AND CA.YR = FS.YR
LEFT OUTER JOIN	WPG.RW_NH3_AVG_A	NH	ON CA.SITE_ID 	= NH.SITE_ID	AND CA.YR = NH.YR
JOIN		WPG.RSTATION		ST	ON CA.SITE_ID 	= ST.SITE_ID
JOIN		WPG.RIVER		RI	ON ST.R_ID	= RI.R_ID
JOIN		WPG.WPCO_SZ		SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ		CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID 
JOIN		WPG.TEN_ZONE		TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_AVG2 source

CREATE VIEW WPG.RIVER_WATER_AVG2 AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	RIVER,
	STATION,
	YR,
	TOTAL,
	TEMPER_AVG,
	TURB_AVG,
	SAL_AVG,
	COND_AVG,
	PH_AVG,
	DO_AVG,
	DOS_AVG,
	FC_AVG,
	EC_AVG,
	BOD5_AVG,
	COD_AVG,
	TOC_AVG,
	OIL_AVG,
	SS_AVG,
	TS_AVG,
	TVS_AVG,
	NH4_AVG,
	NO2_AVG,
	NO3_AVG,
	TKNS_AVG,
	TKNSP_AVG,
	PO4_AVG,
	TPS_AVG,
	TPSP_AVG,
	SIL_AVG,
	TCYN_AVG,
	DETERG_AVG,
	FL_AVG,
	CL_AVG,
	H2S_AVG,
	SULP_AVG,
	SSP_AVG,
	CHL_AVG,
	PHEO_AVG,
	AL_AVG,
	SB_AVG,
	ARSENIC_AVG,
	BA_AVG,
	BE_AVG,
	B_AVG,
	CD_AVG,
	CR_AVG,
	CU_AVG,
	FE_AVG,
	PB_AVG,
	MN_AVG,
	HG_AVG,
	MO_AVG,
	NI_AVG,
	AG_AVG,
	TL_AVG,
	V_AVG,
	ZN_AVG,
	DEPTH_AVG,
	WIDTH_AVG,
	VEL_AVG,
	FLOW_AVG,
	NH3_AVG,
	TIN_AVG,
	TN_AVG,
	BOD5_PT_AVG,
	NH4_PT_AVG,
	DOS_PT_AVG,
	WQI_PT_AVG,
	WQI_GRADE_AVG
FROM	WPG.RIVER_WATER_AVG1
WHERE	VIEW_NO >=2
AND 		YR <= YEAR(GETDATE());


-- WPG.RIVER_WATER_AVG_R1 source

CREATE VIEW WPG.RIVER_WATER_AVG_R1 AS	
SELECT	
	ZONE,
	RIVER,
	YR,
	TOTAL,
	TEMPER_AVG,
	TURB_AVG,
	SAL_AVG,
	COND_AVG,
	PH_AVG,
	DO_AVG,
	DOS_AVG,
	FC_AVG,
	EC_AVG,
	BOD5_AVG,
	COD_AVG,
	TOC_AVG,
	OIL_AVG,
	SS_AVG,
	TS_AVG,
	TVS_AVG,
	NH4_AVG,
	NO2_AVG,
	NO3_AVG,
	TKNS_AVG,
	TKNSP_AVG,
	PO4_AVG,
	TPS_AVG,
	TPSP_AVG,
	SIL_AVG,
	TCYN_AVG,
	DETERG_AVG,
	FL_AVG,
	CL_AVG,
	H2S_AVG,
	SULP_AVG,
	SSP_AVG,
	CHL_AVG,
	PHEO_AVG,
	AL_AVG,
	SB_AVG,
	ARSENIC_AVG,
	BA_AVG,
	BE_AVG,
	B_AVG,
	CD_AVG,
	CR_AVG,
	CU_AVG,
	FE_AVG,
	PB_AVG,
	MN_AVG,
	HG_AVG,
	MO_AVG,
	NI_AVG,
	AG_AVG,
	TL_AVG,
	V_AVG,
	ZN_AVG,
	DEPTH_AVG,
	WIDTH_AVG,
	VEL_AVG,
	FLOW_AVG,
	NH3_AVG,
	TIN_AVG,
	TN_AVG,
	BOD5_PT_AVG,
	NH4_PT_AVG,
	DOS_PT_AVG,
	WQI_PT_AVG,
	WQI_GRADE_AVG =	(SELECT 	WQI_GRADE
			FROM	WPG.RW_WQI_GR_REF	GR
			WHERE	(	(GR.L_LOW_PT = '>='	AND	WQI_PT_AVG >= GR.LOW_PT)
				OR	(GR.L_LOW_PT = '>'	AND	WQI_PT_AVG > GR.LOW_PT)
				OR	GR.LOW_PT IS NULL)
			AND	(	(GR.L_UP_PT = '<='	AND	WQI_PT_AVG <= GR.UP_PT)
				OR	(GR.L_UP_PT = '<'	AND	WQI_PT_AVG < GR.UP_PT)
				OR	GR.UP_PT IS NULL)
			)	,
	VIEW_NO
FROM	(
    SELECT		
        ZONE,	
        RIVER,	
    	YR,
	    SUM(TOTAL)  TOTAL,
        AVG(TEMPER_AVG)	TEMPER_AVG,
        AVG(TURB_AVG)	TURB_AVG,
        AVG(SAL_AVG)	SAL_AVG,
        AVG(COND_AVG)	COND_AVG,
        AVG(PH_AVG)	PH_AVG,
        AVG(DO_AVG)	DO_AVG,
        AVG(DOS_AVG)	DOS_AVG,
        AVG(FC_AVG)	FC_AVG,
        AVG(EC_AVG)	EC_AVG,
        AVG(BOD5_AVG)	BOD5_AVG,
        AVG(COD_AVG)	COD_AVG,
        AVG(TOC_AVG)	TOC_AVG,
        AVG(OIL_AVG)	OIL_AVG,
        AVG(SS_AVG)	SS_AVG,
        AVG(TS_AVG)	TS_AVG,
        AVG(TVS_AVG)	TVS_AVG,
        AVG(NH4_AVG)	NH4_AVG,
        AVG(NO2_AVG)	NO2_AVG,
        AVG(NO3_AVG)	NO3_AVG,
        AVG(TKNS_AVG)	TKNS_AVG,
        AVG(TKNSP_AVG)	TKNSP_AVG,
        AVG(PO4_AVG)	PO4_AVG,
        AVG(TPS_AVG)	TPS_AVG,
        AVG(TPSP_AVG)	TPSP_AVG,
        AVG(SIL_AVG)	SIL_AVG,
        AVG(TCYN_AVG)	TCYN_AVG,
        AVG(DETERG_AVG)	DETERG_AVG,
        AVG(FL_AVG)	FL_AVG,
        AVG(CL_AVG)	CL_AVG,
        AVG(H2S_AVG)	H2S_AVG,
        AVG(SULP_AVG)	SULP_AVG,
        AVG(SSP_AVG)	SSP_AVG,
        AVG(CHL_AVG)	CHL_AVG,
        AVG(PHEO_AVG)	PHEO_AVG,
        AVG(AL_AVG)	AL_AVG,
        AVG(SB_AVG)	SB_AVG,
        AVG(ARSENIC_AVG)	ARSENIC_AVG,
        AVG(BA_AVG)	BA_AVG,
        AVG(BE_AVG)	BE_AVG,
        AVG(B_AVG)	B_AVG,
        AVG(CD_AVG)	CD_AVG,
        AVG(CR_AVG)	CR_AVG,
        AVG(CU_AVG)	CU_AVG,
        AVG(FE_AVG)	FE_AVG,
        AVG(PB_AVG)	PB_AVG,
        AVG(MN_AVG)	MN_AVG,
        AVG(HG_AVG)	HG_AVG,
        AVG(MO_AVG)	MO_AVG,
        AVG(NI_AVG)	NI_AVG,
        AVG(AG_AVG)	AG_AVG,
        AVG(TL_AVG)	TL_AVG,
        AVG(V_AVG)	V_AVG,
        AVG(ZN_AVG)	ZN_AVG,
        AVG(DEPTH_AVG)	DEPTH_AVG,
        AVG(WIDTH_AVG)	WIDTH_AVG,
        AVG(VEL_AVG)	VEL_AVG,
        AVG(FLOW_AVG)	FLOW_AVG,
        AVG(NH3_AVG)	NH3_AVG,
        AVG(TIN_AVG)	TIN_AVG,
        AVG(TN_AVG)	TN_AVG,
        AVG(BOD5_PT_AVG)	BOD5_PT_AVG,
        AVG(NH4_PT_AVG)	NH4_PT_AVG,
        AVG(DOS_PT_AVG)	DOS_PT_AVG,
        AVG(WQI_PT_AVG)	WQI_PT_AVG,
        VIEW_NO	
    FROM	WPG.RIVER_WATER_AVG1	
    GROUP BY 	ZONE,	
        RIVER,
        YR,
        VIEW_NO
)   RV;


-- WPG.RIVER_WATER_AVG_R2 source

CREATE VIEW WPG.RIVER_WATER_AVG_R2 AS
SELECT	ZONE,
	RIVER,
	YR,
	TOTAL,
	TEMPER_AVG,
	TURB_AVG,
	SAL_AVG,
	COND_AVG,
	PH_AVG,
	DO_AVG,
	DOS_AVG,
	FC_AVG,
	EC_AVG,
	BOD5_AVG,
	COD_AVG,
	TOC_AVG,
	OIL_AVG,
	SS_AVG,
	TS_AVG,
	TVS_AVG,
	NH4_AVG,
	NO2_AVG,
	NO3_AVG,
	TKNS_AVG,
	TKNSP_AVG,
	PO4_AVG,
	TPS_AVG,
	TPSP_AVG,
	SIL_AVG,
	TCYN_AVG,
	DETERG_AVG,
	FL_AVG,
	CL_AVG,
	H2S_AVG,
	SULP_AVG,
	SSP_AVG,
	CHL_AVG,
	PHEO_AVG,
	AL_AVG,
	SB_AVG,
	ARSENIC_AVG,
	BA_AVG,
	BE_AVG,
	B_AVG,
	CD_AVG,
	CR_AVG,
	CU_AVG,
	FE_AVG,
	PB_AVG,
	MN_AVG,
	HG_AVG,
	MO_AVG,
	NI_AVG,
	AG_AVG,
	TL_AVG,
	V_AVG,
	ZN_AVG,
	DEPTH_AVG,
	WIDTH_AVG,
	VEL_AVG,
	FLOW_AVG,
	NH3_AVG,
	TIN_AVG,
	TN_AVG,
	BOD5_PT_AVG,
	NH4_PT_AVG,
	DOS_PT_AVG,
	WQI_PT_AVG,
	WQI_GRADE_AVG
FROM	WPG.RIVER_WATER_AVG_R1
WHERE	VIEW_NO >=2
AND 		YR <= YEAR(GETDATE());


-- WPG.RIVER_WATER_CRITERIA source

create view wpg.RIVER_WATER_CRITERIA as
select m.ZONE,m.WCZ,m.SUBZONE,m.STATION,m.DISP_STATS,m.TOTAL,m.YR,m.PARAMETER,l.L_MEASURE,m.MEASURE,m.SITE_ID,m.DISP_SEQ from 
(select ZONE,WCZ,SUBZONE,STATION,DISP_STATS,TOTAL,YR,SITE_ID,DISP_SEQ,PARAMETER,MEASURE
FROM
(select * from WPG.RIVER_WATER_STATISTICS10A1 where DISP_SEQ in (4,6)) as p
UNPIVOT
(MEASURE for PARAMETER in (SAL,COND,DO,DOS,PH,TEMPER,SS,TS,TVS,TURB,BOD5,COD,TOC,OIL,EC,FC,NH4,NO2,NO3,TKNS,TKNSP,PO4,TPS,TPSP,SIL,TCYN,DETERG,FL,CL,H2S,SULP,SSP,CHL,PHEO,AL,SB,ARSENIC,BA,BE,B,CD,CR,CU,FE,PB,MN,HG,MO,NI,AG,TL,V,ZN,DEPTH,VEL,FLOW,BOD5_PT,NH4_PT,DOS_PT,WQI_PT,NH3,TIN,TN)
) as unpvt ) as m
left join
(select ZONE,WCZ,SUBZONE,STATION,DISP_STATS,TOTAL,YR,SITE_ID,DISP_SEQ,PARAMETER,L_MEASURE
FROM
(select * from WPG.RIVER_WATER_STATISTICS10A1 where DISP_SEQ in (4,6)) as p
UNPIVOT
(L_MEASURE for PARAMETER in (L_SAL,L_COND,L_DO,L_DOS,L_PH,L_SS,L_TS,L_TVS,L_TURB,L_BOD5,L_COD,L_TOC,L_OIL,L_EC,L_FC,L_NH4,L_NO2,L_NO3,L_TKNS,L_TKNSP,L_PO4,L_TPS,L_TPSP,L_SIL,L_TCYN,L_DETERG,L_FL,L_CL,L_H2S,L_SULP,L_SSP,L_CHL,L_PHEO,L_AL,L_SB,L_ARSENIC,L_BA,L_BE,L_B,L_CD,L_CR,L_CU,L_FE,L_PB,L_MN,L_HG,L_MO,L_NI,L_AG,L_TL,L_V,L_ZN,L_NH3,L_TIN,L_TN)
) as unpvt ) as l 
on m.STATION=l.STATION and m.SITE_ID=l.SITE_ID and m.YR=l.YR and m.DISP_SEQ=l.DISP_SEQ and 'L_'+m.PARAMETER = l.PARAMETER;


-- WPG.RIVER_WATER_ECD1 source

CREATE VIEW WPG.RIVER_WATER_ECD1
AS
SELECT        CAST(YEAR(SAMPLE_DATE) AS varchar(4)) + ' / ' + CASE WHEN month(sample_date) < 10 THEN '0' + CAST(month(SAMPLE_DATE) AS varchar(2)) ELSE CAST(month(SAMPLE_DATE) AS varchar(2)) END AS Month, 
                         CASE WHEN RIVER_NAME IN ('Ho Chung River', 'Tai Chung Hau Stream', 'Sha Kok Mei Stream', 'Tseng Lan Shue Stream', 'Kai Tak Nullah') THEN 'REG' WHEN RIVER_NAME IN ('Shing Mun River', 
                         'Lam Tsuen River', 'Tai Po River', 'Tai Po Kau Stream', 'Shan Liu Stream', 'Tung Tze Stream', 'River Indus', 'River Beas', 'River Ganges', 'Yuen Long Creek', 'Kam Tin River', 'Tin Shui Wai Nullah', 
                         'Fairview Park Nullah', 'Ha Pak Nai Stream', 'Pak Nai Stream', 'Sheung Pak Nai Stream', 'Ngau Hom Sha Stream') THEN 'RNG' WHEN RIVER_NAME IN ('Mui Wo River', 'Tung Chung River') 
                         THEN 'RSG' WHEN RIVER_NAME IN ('Tai Shui Hang Stream', 'Tsang Kok Stream', 'Tuen Mun River', 'Pai Min Kok Stream', 'Sam Dip Tam Stream', 'Kau Wa Keng Stream') THEN 'RWG' END AS RO, 
                         WCZ_NAME AS WCZ, RIVER_NAME AS River, RIVER_STATION_NAME AS Station, SAMPLE_DATE AS [Sampling Date], SAMPLE_NO AS [Sample Number], DO_SAT AS [Dissolved Oxygen (% saturation)], 
                         BOD5 AS [5-day Biochemical Oxygen Demand (BOD5) (mg/L)], NH4 AS [Ammonia-nitrogen(NH3-N) (mg/L)], WQI_PT AS [Total WQI Point], WQI_GRADE AS [WQI Grade], COND AS [Conductivity (μS/cm)], 
                         DO AS [Dissolved Oxygen (mg/L)], PH, TEMPER AS [Water Temperature (°C)], SS AS [Suspended Solids (mg/L)], TS AS [Total Solids (mg/L)], TVS AS [Total Volatile Solids (mg/L)], TURB AS [Turbidity (NTU)], 
                         COD AS [Chemical Oxygen Demand (COD) (mg/L)], TOC AS [Total Organic Carbon (TOC) (mg/L)], OIL AS [Oil and grease (mg/L)], EC AS [Faecal Coliforms (cfu/100ml)], NO2 AS [Nitrite-nitrogen (NO2-N) (mg/L)], 
                         NO3 AS [Nitrate-nitrogen (NO3-N) (mg/L)], TKNSP AS [Total Kjeldahl Nitrogen (soluble & particulate) (mg/L)], PO4 AS [Ortho-phosphate as phosphorus (PO4-P) (mg/L)], 
                         TPSP AS [Total Phosphorus (soluble & particulate) (mg/L)], SIL AS [Molybdate-reactive silica (mg/L)], TCYN AS [Cyanide (mg/L)], DET AS [Anionic surfactants (as Manoxol OT) (mg/L)], FL AS [Fluoride (mg/L)], 
                         H2S AS [Free hydrogen sulphide (mg/L)], SSP AS [Sulphide (soluble & particulate) (mg/L)], CHL AS [Chlorophyll-a  (μg/L)], PHEO AS [Pheo-pigment  (μg/L)], AL AS [Aluminium (μg/L)], SB AS [Antimony (μg/L)], 
                         ARS AS [Arsenic (μg/L)], BA AS [Barium (μg/L)], BE AS [Beryllium (μg/L)], B AS [Boron (μg/L)], CD AS [Cadmium (μg/L)], CR AS [Chromium (μg/L)], CU AS [Copper (μg/L)], FE AS [Iron (μg/L)], PB AS [Lead (μg/L)], 
                         MN AS [Manganese (μg/L)], HG AS [Mercury (μg/L)], MO AS [Molybdenum (μg/L)], NI AS [Nickel (μg/L)], AG AS [Silver (μg/L)], TL AS [Thallium (μg/L)], V AS [Vanadium (μg/L)], ZN AS [Zinc (μg/L)], FLOW AS [Flow (m3/s)], 
                         DOS_PT AS [WQI point awarded from DO], BOD5_PT AS [WQI point awarded from BOD5], NH4_PT AS [WQI point awarded from NH4]
FROM            (SELECT        ZONE AS WCZ_NAME, RIVER AS RIVER_NAME, STATION AS RIVER_STATION_NAME, MDATE AS SAMPLE_DATE, SAMPLE_NO, TURB, COND, DO, DOS AS DO_SAT, PH, TEMPER, SS, TS, TVS, BOD5, 
                                                    COD, TOC, EC, FC, NH4 AS NO2, NO3, TKNSP, OIL, PO4, TPSP, SIL, TCYN, DETERG AS DET, FL, H2S, SSP, CHL, PHEO, AL, SB, BA, BE, CD, CR, ARSENIC AS ARS, B, CU, PB, FE, MN, HG, MO, NI, AG, 
                                                    TL, V, ZN, NH4, CASE WHEN ltrim(rtrim(upper(station))) NOT IN ('TR23A', 'TR17L', 'TR19I', 'TR6', 'TR12I', 'MW2', 'PR1', 'PR6', 'PR8', 'JR3', 'JR6', 'KN2', 'KN3', 'KN4', 'KN5', 'KN7', 'KN1', 'TW1', 'TW3', 
                                                    'IN1', 'IN2', 'TSR1', 'FVR1', 'DB8', 'TN3', 'TN4', 'TN5', 'TN6', 'TC3', 'AN1') AND FLOW < 0.001 THEN '<' ELSE NULL END AS L_FLOW, CASE WHEN ltrim(rtrim(upper(station))) NOT IN ('TR23A', 'TR17L', 
                                                    'TR19I', 'TR6', 'TR12I', 'MW2', 'PR1', 'PR6', 'PR8', 'JR3', 'JR6', 'KN2', 'KN3', 'KN4', 'KN5', 'KN7', 'KN1', 'TW1', 'TW3', 'IN1', 'IN2', 'TSR1', 'FVR1', 'DB8', 'TN3', 'TN4', 'TN5', 'TN6', 'TC3', 'AN1') AND 
                                                    FLOW <= 0.001 THEN 0.001 WHEN ltrim(rtrim(upper(station))) NOT IN ('TR23A', 'TR17L', 'TR19I', 'TR6', 'TR12I', 'MW2', 'PR1', 'PR6', 'PR8', 'JR3', 'JR6', 'KN2', 'KN3', 'KN4', 'KN5', 'KN7', 'KN1', 'TW1', 
                                                    'TW3', 'IN1', 'IN2', 'TSR1', 'FVR1', 'DB8', 'TN3', 'TN4', 'TN5', 'TN6', 'TC3', 'AN1') AND FLOW > 0.001 THEN CAST(FLOW AS decimal(10, 3)) ELSE NULL END AS FLOW, DOS_PT, BOD5_PT, NH4_PT, 
                                                    WQI_PT, WQI_GRADE
                          FROM            WPG.RIVER_WATER1) AS a;


-- WPG.RIVER_WATER_ECD_BK source

CREATE VIEW WPG.RIVER_WATER_ECD
AS
SELECT        CAST(YEAR(SAMPLE_DATE) AS varchar(4)) + ' / ' + CASE WHEN month(sample_date) < 10 THEN '0' + CAST(month(SAMPLE_DATE) AS varchar(2)) ELSE CAST(month(SAMPLE_DATE) AS varchar(2)) END AS Month, 
                         CASE WHEN RIVER_NAME IN ('Ho Chung River', 'Tai Chung Hau Stream', 'Sha Kok Mei Stream', 'Tseng Lan Shue Stream', 'Kai Tak Nullah') THEN 'REG' WHEN RIVER_NAME IN ('Shing Mun River', 
                         'Lam Tsuen River', 'Tai Po River', 'Tai Po Kau Stream', 'Shan Liu Stream', 'Tung Tze Stream', 'River Indus', 'River Beas', 'River Ganges', 'Yuen Long Creek', 'Kam Tin River', 'Tin Shui Wai Nullah', 
                         'Fairview Park Nullah', 'Ha Pak Nai Stream', 'Pak Nai Stream', 'Sheung Pak Nai Stream', 'Ngau Hom Sha Stream') THEN 'RNG' WHEN RIVER_NAME IN ('Mui Wo River', 'Tung Chung River') 
                         THEN 'RSG' WHEN RIVER_NAME IN ('Tai Shui Hang Stream', 'Tsang Kok Stream', 'Tuen Mun River', 'Pai Min Kok Stream', 'Sam Dip Tam Stream', 'Kau Wa Keng Stream') THEN 'RWG' END AS RO, 
                         WCZ_NAME AS WCZ, RIVER_NAME AS River, RIVER_STATION_NAME AS Station, SAMPLE_DATE AS [Sampling Date], SAMPLE_NO AS [Sample Number], CAST(ISNULL(L_DO_SAT, '') + CAST(DO_SAT AS nvarchar) 
                         AS nvarchar(20)) AS [Dissolved Oxygen (% saturation)], CAST(ISNULL(L_BOD5, '') + CAST(BOD5 AS nvarchar) AS nvarchar(20)) AS [5-day Biochemical Oxygen Demand (BOD5) (mg/L)], CAST(ISNULL(L_NH4, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(NH4 AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Ammonia-nitrogen(NH3-N) (mg/L)], WQI_PT AS [Total WQI Point], 
                         WQI_GRADE AS [WQI Grade], CAST(ISNULL(L_COND_F, '') + CAST(COND_F AS nvarchar) AS nvarchar(20)) AS [Conductivity (μS/cm)], CAST(ISNULL(L_DO, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(DO AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Dissolved Oxygen (mg/L)], CAST(ISNULL(L_PH_F, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(PH_F AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS PH, 
                         CAST(REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(TEMPER AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Water Temperature (°C)], CAST(ISNULL(L_SS, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(SS AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Suspended Solids (mg/L)], CAST(ISNULL(L_TS, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(TS AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Total Solids (mg/L)], CAST(ISNULL(L_TVS, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(TVS AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Total Volatile Solids (mg/L)], CAST(ISNULL(L_TURB_F, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(TURB_F AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Turbidity (NTU)], CAST(ISNULL(L_COD, '') + CAST(COD AS nvarchar) 
                         AS nvarchar(20)) AS [Chemical Oxygen Demand (COD) (mg/L)], CAST(ISNULL(L_TOC, '') + CAST(TOC AS nvarchar) AS nvarchar(20)) AS [Total Organic Carbon (TOC) (mg/L)], CAST(ISNULL(L_OIL, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(OIL AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Oil and grease (mg/L)], CAST(ISNULL(L_E_COLI, '') + CAST(E_COLI AS nvarchar) 
                         AS nvarchar(20)) AS [Escherichia coli (E. coli) (cfu/100ml)], CAST(ISNULL(L_F_COLI, '') + CAST(F_COLI AS nvarchar) AS nvarchar(20)) AS [Faecal Coliforms (cfu/100ml)], CAST(ISNULL(L_NO2, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(NO2 AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Nitrite-nitrogen (NO2-N) (mg/L)], CAST(ISNULL(L_NO3, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(NO3 AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Nitrate-nitrogen (NO3-N) (mg/L)], CAST(ISNULL(L_TKNSP, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(TKNSP AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Total Kjeldahl Nitrogen (soluble & particulate) (mg/L)], CAST(ISNULL(L_PO4, 
                         '') + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(PO4 AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Ortho-phosphate as phosphorus (PO4-P) (mg/L)], CAST(ISNULL(L_TPSP, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(TPSP AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Total Phosphorus (soluble & particulate) (mg/L)], CAST(ISNULL(L_SIL, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(SIL AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Molybdate-reactive silica (mg/L)], CAST(ISNULL(L_TCYN, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(TCYN AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Cyanide (mg/L)], CAST(ISNULL(L_DET, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(DET AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Anionic surfactants (as Manoxol OT) (mg/L)], CAST(ISNULL(L_FL, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(FL AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Fluoride (mg/L)], CAST(ISNULL(L_H2S, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(H2S AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Free hydrogen sulphide (mg/L)], CAST(ISNULL(L_SSP, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(SSP AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Sulphide (soluble & particulate) (mg/L)], CAST(ISNULL(L_CHL, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(CHL AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Chlorophyll-a  (μg/L)], CAST(ISNULL(L_PHEO, '') 
                         + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(PHEO AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Pheo-pigment  (μg/L)], CAST(ISNULL(L_AL, '') + CAST(AL AS nvarchar) 
                         AS nvarchar(20)) AS [Aluminium (μg/L)], CAST(ISNULL(L_SB, '') + CAST(SB AS nvarchar) AS nvarchar(20)) AS [Antimony (μg/L)], CAST(ISNULL(L_ARS, '') + CAST(ARS AS nvarchar) AS nvarchar(20)) AS [Arsenic (μg/L)], 
                         CAST(ISNULL(L_BA, '') + CAST(BA AS nvarchar) AS nvarchar(20)) AS [Barium (μg/L)], CAST(ISNULL(L_BE, '') + CAST(BE AS nvarchar) AS nvarchar(20)) AS [Beryllium (μg/L)], CAST(ISNULL(L_B, '') 
                         + CAST(B AS nvarchar) AS nvarchar(20)) AS [Boron (μg/L)], CAST(ISNULL(L_CD, '') + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(CD AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) 
                         AS [Cadmium (μg/L)], CAST(ISNULL(L_CR, '') + CAST(CR AS nvarchar) AS nvarchar(20)) AS [Chromium (μg/L)], CAST(ISNULL(L_CU, '') + CAST(CU AS nvarchar) AS nvarchar(20)) AS [Copper (μg/L)], CAST(ISNULL(L_FE, 
                         '') + CAST(FE AS nvarchar) AS nvarchar(20)) AS [Iron (μg/L)], CAST(ISNULL(L_PB, '') + CAST(PB AS nvarchar) AS nvarchar(20)) AS [Lead (μg/L)], CAST(ISNULL(L_MN, '') + CAST(MN AS nvarchar) AS nvarchar(20)) 
                         AS [Manganese (μg/L)], CAST(ISNULL(L_HG, '') + CAST(HG AS nvarchar) AS nvarchar(20)) AS [Mercury (μg/L)], CAST(ISNULL(L_MO, '') + CAST(MO AS nvarchar) AS nvarchar(20)) AS [Molybdenum (μg/L)], 
                         CAST(ISNULL(L_NI, '') + CAST(NI AS nvarchar) AS nvarchar(20)) AS [Nickel (μg/L)], CAST(ISNULL(L_AG, '') + CAST(AG AS nvarchar) AS nvarchar(20)) AS [Silver (μg/L)], CAST(ISNULL(L_TL, '') + CAST(TL AS nvarchar) 
                         AS nvarchar(20)) AS [Thallium (μg/L)], CAST(ISNULL(L_V, '') + CAST(V AS nvarchar) AS nvarchar(20)) AS [Vanadium (μg/L)], CAST(ISNULL(L_ZN, '') + CAST(ZN AS nvarchar) AS nvarchar(20)) AS [Zinc (μg/L)], 
                         CAST(ISNULL(L_FLOW, '') + REPLACE(RTRIM(REPLACE(REPLACE(RTRIM(REPLACE(CAST(FLOW AS nvarchar), '0', ' ')), ' ', '0'), '.', ' ')), ' ', '.') AS nvarchar(20)) AS [Flow (m3/s)], 
                         DOS_PT AS [WQI point awarded from DO], BOD5_PT AS [WQI point awarded from BOD5], NH4_PT AS [WQI point awarded from NH4]
FROM            (SELECT        ZONE AS WCZ_NAME, RIVER AS RIVER_NAME, STATION AS RIVER_STATION_NAME, MDATE AS SAMPLE_DATE, SAMPLE_NO, CASE WHEN COND < 1 THEN '<' ELSE L_COND END AS L_COND_F, 
                                                    CASE WHEN COND < 1 THEN 1 ELSE CAST(COND AS decimal(7)) END AS COND_F, CASE WHEN DO < 0.1 THEN '<' ELSE L_DO END AS L_DO, 
                                                    CASE WHEN DO < 0.1 THEN 0.1 ELSE CAST(DO AS decimal(7, 1)) END AS DO, CASE WHEN DOS < 1 THEN '<' ELSE L_DOS END AS L_DO_SAT, 
                                                    CASE WHEN DOS < 1 THEN 1 ELSE CAST(DOS AS decimal(5)) END AS DO_SAT, CASE WHEN PH < 0.1 THEN '<' ELSE L_PH END AS L_PH_F, 
                                                    CASE WHEN PH < 0.1 THEN 0.1 ELSE CAST(PH AS decimal(7, 1)) END AS PH_F, CASE WHEN TEMPER < 0.1 THEN 0.1 ELSE CAST(TEMPER AS decimal(7, 1)) END AS TEMPER, 
                                                    CASE WHEN SS < 0.5 THEN '<' ELSE l_SS END AS L_SS, CASE WHEN SS < 0.5 THEN 0.5 ELSE CAST(SS AS decimal(7, 1)) END AS SS, CASE WHEN TS < 0.5 THEN '<' ELSE l_TS END AS L_TS, 
                                                    CASE WHEN TS < 0.5 THEN 0.5 ELSE CAST(TS AS decimal(7, 1)) END AS TS, CASE WHEN TVS < 0.5 THEN '<' ELSE l_TVS END AS L_TVS, 
                                                    CASE WHEN TVS < 0.5 THEN 0.5 ELSE CAST(TVS AS decimal(7, 1)) END AS TVS, CASE WHEN TURB < 0.1 THEN '<' ELSE L_TURB END AS L_TURB_F, 
                                                    CASE WHEN TURB < 0.1 THEN 0.1 ELSE CAST(TURB AS decimal(7, 1)) END AS TURB_F, CASE WHEN bod5 < 1 THEN '<' ELSE l_bod5 END AS L_BOD5, 
                                                    CASE WHEN bod5 < 1 THEN 1 ELSE CAST(bod5 AS decimal(7)) END AS BOD5, CASE WHEN COD < 2 THEN '<' ELSE L_COD END AS L_COD, 
                                                    CASE WHEN COD < 2 THEN 2 ELSE CAST(COD AS decimal(7)) END AS COD, CASE WHEN TOC < 1 THEN '<' ELSE L_TOC END AS L_TOC, CASE WHEN TOC < 1 THEN 1 ELSE CAST(TOC AS decimal(7)) 
                                                    END AS TOC, CASE WHEN OIL < 0.5 THEN '<' ELSE L_OIL END AS L_OIL, CASE WHEN OIL < 0.5 THEN 0.5 ELSE CAST(OIL AS decimal(7, 1)) END AS OIL, 
                                                    CASE WHEN EC < 1 THEN '<' ELSE L_EC END AS L_E_COLI, CASE WHEN EC < 1 THEN 1 ELSE CAST(round(EC / power(10, floor(log10(EC))), 1) * power(10, floor(log10(EC))) AS int) END AS E_COLI, 
                                                    CASE WHEN FC < 1 THEN '<' ELSE l_FC END AS L_F_COLI, CASE WHEN FC < 1 THEN 1 ELSE CAST(round(FC / power(10, floor(log10(FC))), 1) * power(10, floor(log10(FC))) AS int) END AS F_COLI, 
                                                    CASE WHEN NH4 < 0.005 THEN '<' ELSE l_NH4 END AS L_NH4, CASE WHEN NH4 < 0.005 THEN 0.005 ELSE CAST(NH4 AS decimal(12, 3)) END AS NH4, 
                                                    CASE WHEN NO2 < 0.002 THEN '<' ELSE l_NO2 END AS L_NO2, CASE WHEN NO2 < 0.002 THEN 0.002 ELSE CAST(NO2 AS decimal(12, 3)) END AS NO2, 
                                                    CASE WHEN NO3 < 0.002 THEN '<' ELSE l_NO3 END AS L_NO3, CASE WHEN NO3 < 0.002 THEN 0.002 ELSE CAST(NO3 AS decimal(12, 3)) END AS NO3, 
                                                    CASE WHEN TKNSP < 0.05 THEN '<' ELSE l_TKNSP END AS L_TKNSP, CASE WHEN TKNSP < 0.05 THEN 0.05 ELSE CAST(TKNSP AS decimal(9, 2)) END AS TKNSP, 
                                                    CASE WHEN PO4 < 0.002 THEN '<' ELSE l_PO4 END AS L_PO4, CASE WHEN PO4 < 0.002 THEN 0.002 ELSE CAST(PO4 AS decimal(12, 3)) END AS PO4, 
                                                    CASE WHEN TPSP < 0.02 THEN '<' ELSE L_TPSP END AS L_TPSP, CASE WHEN TPSP < 0.02 THEN 0.02 ELSE CAST(TPSP AS decimal(9, 2)) END AS TPSP, 
                                                    CASE WHEN SIL < 0.05 THEN '<' ELSE l_SIL END AS L_SIL, CASE WHEN SIL < 0.05 THEN 0.05 ELSE CAST(SIL AS decimal(9, 2)) END AS SIL, 
                                                    CASE WHEN TCYN < 0.01 THEN '<' ELSE l_TCYN END AS L_TCYN, CASE WHEN TCYN < 0.01 THEN 0.01 ELSE CAST(TCYN AS decimal(12, 2)) END AS TCYN, 
                                                    CASE WHEN DETERG < 0.05 THEN '<' ELSE L_DETERG END AS L_DET, CASE WHEN DETERG < 0.05 THEN 0.05 ELSE CAST(DETERG AS decimal(12, 2)) END AS DET, 
                                                    CASE WHEN FL < 0.2 THEN '<' ELSE L_FL END AS L_FL, CASE WHEN FL < 0.2 THEN 0.2 ELSE CAST(FL AS decimal(10, 1)) END AS FL, CASE WHEN H2S < 0.01 THEN '<' ELSE l_H2S END AS L_H2S, 
                                                    CASE WHEN H2S < 0.01 THEN 0.01 ELSE CAST(H2S AS decimal(9, 2)) END AS H2S, CASE WHEN SSP < 0.02 THEN '<' ELSE l_SSP END AS L_SSP, 
                                                    CASE WHEN SSP < 0.02 THEN 0.02 ELSE CAST(SSP AS decimal(9, 2)) END AS SSP, CASE WHEN CHL < 0.2 THEN '<' ELSE l_CHL END AS L_CHL, 
                                                    CASE WHEN CHL < 0.2 THEN 0.2 ELSE CAST(CHL AS decimal(7, 1)) END AS CHL, CASE WHEN PHEO < 0.2 THEN '<' ELSE l_PHEO END AS L_PHEO, 
                                                    CASE WHEN PHEO < 0.2 THEN 0.2 ELSE CAST(PHEO AS decimal(7, 1)) END AS PHEO, CASE WHEN AL < 50 THEN '<' ELSE L_AL END AS L_AL, 
                                                    CASE WHEN AL < 50 THEN 50 ELSE CAST(AL AS decimal(12)) END AS AL, CASE WHEN SB < 1 THEN '<' ELSE L_SB END AS L_SB, CASE WHEN SB < 1 THEN 1 ELSE CAST(SB AS decimal(12)) 
                                                    END AS SB, CASE WHEN ARSENIC < 1 THEN '<' ELSE L_ARSENIC END AS L_ARS, CASE WHEN ARSENIC < 1 THEN 1 ELSE CAST(ARSENIC AS decimal(12)) END AS ARS, 
                                                    CASE WHEN BA < 1 THEN '<' ELSE L_BA END AS L_BA, CASE WHEN BA < 1 THEN 1 ELSE CAST(BA AS decimal(12)) END AS BA, CASE WHEN BE < 1 THEN '<' ELSE L_BE END AS L_BE, 
                                                    CASE WHEN BE < 1 THEN 1 ELSE CAST(BE AS decimal(12)) END AS BE, CASE WHEN B < 50 THEN '<' ELSE L_B END AS L_B, CASE WHEN B < 50 THEN 50 ELSE CAST(B AS decimal(12)) END AS B, 
                                                    CASE WHEN CD < 0.1 THEN '<' ELSE L_CD END AS L_CD, CASE WHEN CD < 0.1 THEN 0.1 ELSE CAST(CD AS decimal(12, 1)) END AS CD, CASE WHEN CR < 1 THEN '<' ELSE L_CR END AS L_CR, 
                                                    CASE WHEN CR < 1 THEN 1 ELSE CAST(CR AS decimal(12)) END AS CR, CASE WHEN CU < 1 THEN '<' ELSE L_CU END AS L_CU, CASE WHEN CU < 1 THEN 1 ELSE CAST(CU AS decimal(12)) 
                                                    END AS CU, CASE WHEN FE < 50 THEN '<' ELSE L_FE END AS L_FE, CASE WHEN FE < 50 THEN 50 ELSE CAST(FE AS decimal(12)) END AS FE, CASE WHEN PB < 1 THEN '<' ELSE L_PB END AS L_PB,
                                                     CASE WHEN PB < 1 THEN 1 ELSE CAST(PB AS decimal(12)) END AS PB, CASE WHEN MN < 10 THEN '<' ELSE L_MN END AS L_MN, CASE WHEN MN < 10 THEN 10 ELSE CAST(MN AS decimal(12)) 
                                                    END AS MN, CASE WHEN HG < 1 THEN '<' ELSE L_HG END AS L_HG, CASE WHEN HG < 1 THEN 1 ELSE CAST(HG AS decimal(12)) END AS HG, 
                                                    CASE WHEN MO < 2 THEN '<' ELSE L_MO END AS L_MO, CASE WHEN MO < 2 THEN 2 ELSE CAST(MO AS decimal(12)) END AS MO, CASE WHEN NI < 1 THEN '<' ELSE L_NI END AS L_NI, 
                                                    CASE WHEN NI < 1 THEN 1 ELSE CAST(NI AS decimal(12)) END AS NI, CASE WHEN AG < 1 THEN '<' ELSE L_AG END AS L_AG, CASE WHEN AG < 1 THEN 1 ELSE CAST(AG AS decimal(12)) END AS AG, 
                                                    CASE WHEN TL < 1 THEN '<' ELSE L_TL END AS L_TL, CASE WHEN TL < 1 THEN 1 ELSE CAST(TL AS decimal(12)) END AS TL, CASE WHEN V < 2 THEN '<' ELSE L_V END AS L_V, 
                                                    CASE WHEN V < 2 THEN 2 ELSE CAST(V AS decimal(12)) END AS V, CASE WHEN ZN < 10 THEN '<' ELSE L_ZN END AS L_ZN, CASE WHEN ZN < 10 THEN 10 ELSE CAST(ZN AS decimal(12)) 
                                                    END AS ZN, CASE WHEN ltrim(rtrim(upper(station))) NOT IN ('TR23A', 'TR17L', 'TR19I', 'TR6', 'TR12I', 'MW2', 'PR1', 'PR6', 'PR8', 'JR3', 'JR6', 'KN2', 'KN3', 'KN4', 'KN5', 'KN7', 'KN1', 'TW1', 'TW3', 
                                                    'IN1', 'IN2', 'TSR1', 'FVR1', 'DB8', 'TN3', 'TN4', 'TN5', 'TN6', 'TC3', 'AN1') AND FLOW < 0.001 THEN '<' ELSE NULL END AS L_FLOW, CASE WHEN ltrim(rtrim(upper(station))) NOT IN ('TR23A', 'TR17L', 
                                                    'TR19I', 'TR6', 'TR12I', 'MW2', 'PR1', 'PR6', 'PR8', 'JR3', 'JR6', 'KN2', 'KN3', 'KN4', 'KN5', 'KN7', 'KN1', 'TW1', 'TW3', 'IN1', 'IN2', 'TSR1', 'FVR1', 'DB8', 'TN3', 'TN4', 'TN5', 'TN6', 'TC3', 'AN1') AND 
                                                    FLOW <= 0.001 THEN 0.001 WHEN ltrim(rtrim(upper(station))) NOT IN ('TR23A', 'TR17L', 'TR19I', 'TR6', 'TR12I', 'MW2', 'PR1', 'PR6', 'PR8', 'JR3', 'JR6', 'KN2', 'KN3', 'KN4', 'KN5', 'KN7', 'KN1', 'TW1', 
                                                    'TW3', 'IN1', 'IN2', 'TSR1', 'FVR1', 'DB8', 'TN3', 'TN4', 'TN5', 'TN6', 'TC3', 'AN1') AND FLOW > 0.001 THEN CAST(FLOW AS decimal(10, 3)) ELSE NULL END AS FLOW, DOS_PT, BOD5_PT, NH4_PT, 
                                                    WQI_PT, WQI_GRADE
                          FROM            WPG.RIVER_WATER1
                          WHERE        (YEAR(MDATE) BETWEEN YEAR(GETDATE()) - 1 AND YEAR(GETDATE())) AND (VIEW_NO >= 3)) AS a;


-- WPG.RIVER_WATER_FIELD1 source

CREATE VIEW WPG.RIVER_WATER_FIELD1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR		WCZ,
	SZ.SZ_NAME		SUBZONE,
	RI.RIVER_NAME	RIVER,
	ST.STATNAME		STATION,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO,
	FI.WEATHER,
	FI.COLOR,
	FI.SMELL,
	FI.RAINFALL,
	FI.TIDE,
	FI.TEMPER,
	FI.L_DO,
	FI.DO,
	FI.L_DOS,
	FI.DOS,
	FI.L_TURB,
	FI.TURB,
	FI.L_PH,
	FI.PH,
	FI.L_SAL,
	FI.SAL,
	FI.L_COND,
	FI.COND,
--	FI.L_NH4		L_NH4_F,
--	FI.NH4			NH4_F,
--	FI.L_NH3		L_NH3_F,
--	FI.NH3			NH3_F,
	FI.VALID_USER,
	FI.VALID_DATE,
	FI.VALID_CODE,
	ST.CMMVIEW		VIEW_NO
FROM			WPG.RW_VISIT	VI
JOIN	WPG.RW_FIELD 	FI 	ON VI.RWVISIT_ID	= FI.RWVISIT_ID
JOIN			WPG.RSTATION	ST	ON VI.SITE_ID 		= ST.SITE_ID
JOIN			WPG.RIVER		RI	ON ST.R_ID		= RI.R_ID
JOIN			WPG.WPCO_SZ	SZ	ON ST.SZ_ID		= SZ.SZ_ID
JOIN			WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID		= CZ.WCZ_ID 
JOIN			WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_FLOW1 source

CREATE VIEW WPG.RIVER_WATER_FLOW1 AS
SELECT
	TZ.ZONE_NAME		ZONE,
	CZ.WCZ_ABBR		WCZ,
	SZ.SZ_NAME		SUBZONE,
	RI.RIVER_NAME		RIVER,
	ST.STATNAME		STATION,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO,
	FL.DATA_NO,
	FL.DEPTH,
	FL.WIDTH,
	FL.VEL,
	FL.VALID_USER,
	FL.VALID_DATE,
	FL.VALID_CODE,
	ST.CMMVIEW		VIEW_NO
FROM		WPG.RW_VISIT	VI
JOIN		WPG.RW_FLOW	FL	ON VI.RWVISIT_ID	= FL.RWVISIT_ID
JOIN		WPG.RSTATION	ST	ON VI.SITE_ID 		= ST.SITE_ID
JOIN		WPG.RIVER	RI	ON ST.R_ID		= RI.R_ID
JOIN		WPG.WPCO_SZ	SZ	ON ST.SZ_ID		= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID		= CZ.WCZ_ID 
JOIN		WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID		= TZ.ZONE_ID;


-- WPG.RIVER_WATER_FLOW_SUM1 source

CREATE VIEW WPG.RIVER_WATER_FLOW_SUM1 AS
SELECT
	TZ.ZONE_NAME		ZONE,
	CZ.WCZ_ABBR		WCZ,
	SZ.SZ_NAME		SUBZONE,
	RI.RIVER_NAME		RIVER,
	ST.STATNAME		STATION,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO,
	FL.DEPTH,
	FL.WIDTH,
	FL.VEL,
	FL.FLOW,
	ST.CMMVIEW		VIEW_NO
FROM		WPG.RW_VISIT	VI
JOIN	WPG.RW_FLOW_SUM	FL	ON VI.RWVISIT_ID	= FL.RWVISIT_ID
JOIN		WPG.RSTATION	ST	ON VI.SITE_ID 		= ST.SITE_ID
JOIN		WPG.RIVER	RI	ON ST.R_ID		= RI.R_ID
JOIN		WPG.WPCO_SZ	SZ	ON ST.SZ_ID		= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID		= CZ.WCZ_ID 
JOIN		WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID		= TZ.ZONE_ID;


-- WPG.RIVER_WATER_GLABM1 source

CREATE VIEW WPG.RIVER_WATER_GLABM1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR		WCZ,
	SZ.SZ_NAME		SUBZONE,
	RI.RIVER_NAME	RIVER,
	ST.STATNAME		STATION,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO,
	GM.L_B,
	GM.B,
	GM.L_CD,
	GM.CD,
	GM.L_CU,
	GM.CU,
	GM.L_PB,
	GM.PB,
	GM.L_ZN,
	GM.ZN,
	GM.L_AG,
	GM.AG,
	GM.L_CR,
	GM.CR,
	GM.L_MN,
	GM.MN,
	GM.L_AL,
	GM.AL,
	GM.L_ARSENIC,
	GM.ARSENIC,
	GM.L_NI,
	GM.NI,
	GM.L_HG,
	GM.HG,
	GM.L_FE,
	GM.FE,
	GM.L_SB,
	GM.SB,
	GM.L_V,
	GM.V,
	GM.L_BA,
	GM.BA,
	GM.L_BE,
	GM.BE,
	GM.L_TL,
	GM.TL,
	GM.L_MO,
	GM.MO,
	GM.VALID_USER,
	GM.VALID_DATE,
	GM.VALID_CODE,
	ST.CMMVIEW		VIEW_NO
FROM			WPG.RW_VISIT	VI
JOIN	WPG.RW_GLABM 	GM	ON VI.RWVISIT_ID 	= GM.RWVISIT_ID
JOIN			WPG.RSTATION	ST	ON VI.SITE_ID 		= ST.SITE_ID
JOIN			WPG.RIVER		RI	ON ST.R_ID		= RI.R_ID
JOIN			WPG.WPCO_SZ	SZ	ON ST.SZ_ID		= SZ.SZ_ID
JOIN			WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID		= CZ.WCZ_ID 
JOIN			WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_GLABN1 source

CREATE VIEW WPG.RIVER_WATER_GLABN1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR		WCZ,
	SZ.SZ_NAME		SUBZONE,
	RI.RIVER_NAME	RIVER,
	ST.STATNAME		STATION,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO,
	GN.L_NO2,
	GN.NO2,
	GN.L_NO3,
	GN.NO3,
	GN.L_NH4,
	GN.NH4,
	GN.L_PO4,
	GN.PO4,
	GN.L_SIL,
	GN.SIL,
	GN.L_SS,
	GN.SS,
	GN.L_TKNS,
	GN.TKNS,
	GN.L_TPS,
	GN.TPS,
	GN.L_TKNSP,
	GN.TKNSP,
	GN.L_TPSP,
	GN.TPSP,
	GN.L_TS,
	GN.TS,
	GN.L_TVS,
	GN.TVS,
	GN.L_COD,
	GN.COD,
	GN.L_TCYN,
	GN.TCYN,
	GN.L_FL,
	GN.FL,
	GN.L_CL,
	GN.CL,
	GN.L_DETERG,
	GN.DETERG,
	GN.L_TOC,
	GN.TOC,
	GN.L_OIL,
	GN.OIL,
	GN.L_SULP,
	GN.SULP,
	GN.L_SSP,
	GN.SSP,
	GN.L_H2S,
	GN.H2S,
	GN.L_CHL,
	GN.CHL,
	GN.L_PHEO,
	GN.PHEO,
	GN.VALID_USER,
	GN.VALID_DATE,
	GN.VALID_CODE,
	ST.CMMVIEW		VIEW_NO
FROM			WPG.RW_VISIT	VI
JOIN	WPG.RW_GLABN	GN 	ON VI.RWVISIT_ID	= GN.RWVISIT_ID
JOIN			WPG.RSTATION	ST	ON VI.SITE_ID 		= ST.SITE_ID
JOIN			WPG.RIVER		RI	ON ST.R_ID		= RI.R_ID
JOIN			WPG.WPCO_SZ	SZ	ON ST.SZ_ID		= SZ.SZ_ID
JOIN			WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID		= CZ.WCZ_ID 
JOIN			WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_MAX1 source

CREATE VIEW WPG.RIVER_WATER_MAX1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	RI.RIVER_NAME	RIVER,
	ST.STATNAME	STATION,
	CA.YR,
	CA.TOTAL,
	FI.TEMPER_MAX,
	FI.TURB_MAX,
	FI.SAL_MAX,
	FI.COND_MAX,
	FI.PH_MAX,
	FI.DO_MAX,
	FI.DOS_MAX,
	ML.FC_MAX,
	ML.EC_MAX,
	ML.BOD5_MAX,
	GN.COD_MAX,
	GN.TOC_MAX,
	GN.OIL_MAX,
	GN.SS_MAX,
	GN.TS_MAX,
	GN.TVS_MAX,
	GN.NH4_MAX,
	GN.NO2_MAX,
	GN.NO3_MAX,
	GN.TKNS_MAX,
	GN.TKNSP_MAX,
	GN.PO4_MAX,
	GN.TPS_MAX,
	GN.TPSP_MAX,
	GN.SIL_MAX,	
	GN.TCYN_MAX,
	GN.DETERG_MAX,
	GN.FL_MAX,
	GN.CL_MAX,
	GN.H2S_MAX,
	GN.SULP_MAX,
	GN.SSP_MAX,
	GN.CHL_MAX,
	GN.PHEO_MAX,
	GM.AL_MAX,
	GM.SB_MAX,
	GM.ARSENIC_MAX,
	GM.BA_MAX,
	GM.BE_MAX,	
	GM.B_MAX,
	GM.CD_MAX,
	GM.CR_MAX,
	GM.CU_MAX,
	GM.FE_MAX,
	GM.PB_MAX,
	GM.MN_MAX,
	GM.HG_MAX,
	GM.MO_MAX,
	GM.NI_MAX,
	GM.AG_MAX,
	GM.TL_MAX,
	GM.V_MAX,
	GM.ZN_MAX,
	FS.DEPTH_MAX,
	FS.WIDTH_MAX,
	FS.VEL_MAX,
	FS.FLOW_MAX,
	NH.NH3_MAX,
	GN.TIN_MAX,
	GN.TN_MAX,
	CA.BOD5_PT_MAX,
	CA.NH4_PT_MAX,
	CA.DOS_PT_MAX,
	CA.WQI_PT_MAX,
	CA.WQI_GRADE_MAX,
	ST.CMMVIEW	VIEW_NO
FROM	WPG.RW_WQI_MAX		CA
LEFT OUTER JOIN	WPG.RW_FIELD_MAX	FI	ON CA.SITE_ID 	= FI.SITE_ID	AND CA.YR = FI.YR
LEFT OUTER JOIN	WPG.RW_MLAB_MAX	ML	ON CA.SITE_ID 	= ML.SITE_ID	AND CA.YR = ML.YR
LEFT OUTER JOIN	WPG.RW_GLABM_MAX	GM	ON CA.SITE_ID 	= GM.SITE_ID	AND CA.YR = GM.YR
LEFT OUTER JOIN	WPG.RW_GLABN_MAX	GN	ON CA.SITE_ID 	= GN.SITE_ID	AND CA.YR = GN.YR
LEFT OUTER JOIN	WPG.RW_FLOW_MAX	FS	ON CA.SITE_ID 	= FS.SITE_ID	AND CA.YR = FS.YR
LEFT OUTER JOIN	WPG.RW_NH3_MAX	NH	ON CA.SITE_ID 	= NH.SITE_ID	AND CA.YR = NH.YR
JOIN		WPG.RSTATION		ST	ON CA.SITE_ID 	= ST.SITE_ID
JOIN		WPG.RIVER		RI	ON ST.R_ID	= RI.R_ID
JOIN		WPG.WPCO_SZ		SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ		CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID 
JOIN		WPG.TEN_ZONE		TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_MAX1A source

CREATE VIEW WPG.RIVER_WATER_MAX1A AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	RI.RIVER_NAME	RIVER,
	ST.STATNAME	STATION,
	CA.YR,	
	CA.TOTAL,	
	FI.TEMPER_MAX,
	FI.L_TURB_MAX,	FI.TURB_MAX,
	FI.L_SAL_MAX,	FI.SAL_MAX,
	FI.L_COND_MAX,	FI.COND_MAX,
	FI.L_PH_MAX,	FI.PH_MAX,
	FI.L_DO_MAX,	FI.DO_MAX,
	FI.L_DOS_MAX,	FI.DOS_MAX,
	ML.L_FC_MAX,	ML.FC_MAX,
	ML.L_EC_MAX,	ML.EC_MAX,
	ML.L_BOD5_MAX,	ML.BOD5_MAX,
	GN.L_COD_MAX,	GN.COD_MAX,
	GN.L_TOC_MAX,	GN.TOC_MAX,
	GN.L_OIL_MAX,	GN.OIL_MAX,
	GN.L_SS_MAX,	GN.SS_MAX,
	GN.L_TS_MAX,	GN.TS_MAX,
	GN.L_TVS_MAX,	GN.TVS_MAX,
	GN.L_NH4_MAX,	GN.NH4_MAX,
	GN.L_NO2_MAX,	GN.NO2_MAX,
	GN.L_NO3_MAX,	GN.NO3_MAX,
	GN.L_TKNS_MAX,	GN.TKNS_MAX,
	GN.L_TKNSP_MAX,	GN.TKNSP_MAX,
	GN.L_PO4_MAX,	GN.PO4_MAX,
	GN.L_TPS_MAX,	GN.TPS_MAX,
	GN.L_TPSP_MAX,	GN.TPSP_MAX,
	GN.L_SIL_MAX,	GN.SIL_MAX,
	GN.L_TCYN_MAX,	GN.TCYN_MAX,
	GN.L_DETERG_MAX,	GN.DETERG_MAX,
	GN.L_FL_MAX,	GN.FL_MAX,
	GN.L_CL_MAX,	GN.CL_MAX,
	GN.L_H2S_MAX,	GN.H2S_MAX,
	GN.L_SULP_MAX,	GN.SULP_MAX,
	GN.L_SSP_MAX,	GN.SSP_MAX,
	GN.L_CHL_MAX,	GN.CHL_MAX,
	GN.L_PHEO_MAX,	GN.PHEO_MAX,
	GM.L_AL_MAX,	GM.AL_MAX,
	GM.L_SB_MAX,	GM.SB_MAX,
	GM.L_ARSENIC_MAX,	GM.ARSENIC_MAX,
	GM.L_BA_MAX,	GM.BA_MAX,
	GM.L_BE_MAX,	GM.BE_MAX,
	GM.L_B_MAX,	GM.B_MAX,
	GM.L_CD_MAX,	GM.CD_MAX,
	GM.L_CR_MAX,	GM.CR_MAX,
	GM.L_CU_MAX,	GM.CU_MAX,
	GM.L_FE_MAX,	GM.FE_MAX,
	GM.L_PB_MAX,	GM.PB_MAX,
	GM.L_MN_MAX,	GM.MN_MAX,
	GM.L_HG_MAX,	GM.HG_MAX,
	GM.L_MO_MAX,	GM.MO_MAX,
	GM.L_NI_MAX,	GM.NI_MAX,
	GM.L_AG_MAX,	GM.AG_MAX,
	GM.L_TL_MAX,	GM.TL_MAX,
	GM.L_V_MAX,	GM.V_MAX,
	GM.L_ZN_MAX,	GM.ZN_MAX,
	FS.DEPTH_MAX,
	FS.WIDTH_MAX,
	FS.VEL_MAX,
	FS.FLOW_MAX,
	NH.L_NH3_MAX,	NH.NH3_MAX,
	GN.L_TIN_MAX,	GN.TIN_MAX,
	GN.L_TN_MAX,	GN.TN_MAX,
	CA.BOD5_PT_MAX,
	CA.NH4_PT_MAX,
	CA.DOS_PT_MAX,
	CA.WQI_PT_MAX,
	CA.WQI_GRADE_MAX,
	ST.CMMVIEW	VIEW_NO
FROM	WPG.RW_WQI_MAX		CA
LEFT OUTER JOIN	WPG.RW_FIELD_MAX_A	FI	ON CA.SITE_ID 	= FI.SITE_ID	AND CA.YR = FI.YR
LEFT OUTER JOIN	WPG.RW_MLAB_MAX_A	ML	ON CA.SITE_ID 	= ML.SITE_ID	AND CA.YR = ML.YR
LEFT OUTER JOIN	WPG.RW_GLABM_MAX_A	GM	ON CA.SITE_ID 	= GM.SITE_ID	AND CA.YR = GM.YR
LEFT OUTER JOIN	WPG.RW_GLABN_MAX_A	GN	ON CA.SITE_ID 	= GN.SITE_ID	AND CA.YR = GN.YR
LEFT OUTER JOIN	WPG.RW_FLOW_MAX	FS	ON CA.SITE_ID 	= FS.SITE_ID	AND CA.YR = FS.YR
LEFT OUTER JOIN	WPG.RW_NH3_MAX_A	NH	ON CA.SITE_ID 	= NH.SITE_ID	AND CA.YR = NH.YR
JOIN		WPG.RSTATION		ST	ON CA.SITE_ID 	= ST.SITE_ID
JOIN		WPG.RIVER		RI	ON ST.R_ID	= RI.R_ID
JOIN		WPG.WPCO_SZ		SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ		CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID 
JOIN		WPG.TEN_ZONE		TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_MED1 source

CREATE view [WPG].[RIVER_WATER_MED1]
as 
select d.*
,NH.NH3_MED
 ,TZ.ZONE_NAME AS ZONE, CZ.WCZ_ABBR AS WCZ, SZ.SZ_NAME AS SUBZONE, RI.RIVER_NAME AS RIVER, ST.STATNAME AS STATION

		,FS.DEPTH_MED,FS.WIDTH_MED,FS.VEL_MED,FS.FLOW_MED
		,GN.TIN_MED, GN.TN_MED
		,CA.BOD5_PT_MED, CA.NH4_PT_MED, CA.DOS_PT_MED, CA.WQI_PT_MED, CA.WQI_GRADE_MED
		, ST.CMMVIEW AS VIEW_NO

 from 
(
SELECT   
     distinct 
	 p.site_id
	 ,yr=convert(int,yr)
	 ,TOTAL = COUNT( p.do) OVER (PARTITION BY p.site_id,p.yr) 
	 ,TEMPER_MED = percentile_cont(0.5)  within GROUP (ORDER BY p.TEMPER) over (partition BY p.site_id,p.yr)  
	 ,TURB_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.TURB) over (partition BY p.site_id,p.yr)   
	 ,SAL_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.SAL) over (partition BY p.site_id,p.yr) 
	 ,CONDL_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.COND) over (partition BY p.site_id,p.yr) 
	 ,PH_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.PH) over (partition BY p.site_id,p.yr) 
	 ,DO_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.DO) over (partition BY p.site_id,p.yr) 
	 ,DOS_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.DOS) over (partition BY p.site_id,p.yr) 
	 ,BOD5_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.bod5) over (partition BY p.site_id,p.yr) 
 
	 ,COD_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.COD) over (partition BY p.site_id,p.yr) 
	 ,TOC_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.TOC) over (partition BY p.site_id,p.yr) 
	 ,OIL_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.OIL) over (partition BY p.site_id,p.yr) 
	 ,SS_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.SS) over (partition BY p.site_id,p.yr) 
	 ,TS_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.TS) over (partition BY p.site_id,p.yr) 
	 ,TVS_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.TVS) over (partition BY p.site_id,p.yr) 
	 ,NH4_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.NH4) over (partition BY p.site_id,p.yr) 
	 ,NO2_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.NO2) over (partition BY p.site_id,p.yr) 

	 ,NO3_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.NO3) over (partition BY p.site_id,p.yr) 
	 ,TKNS_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.TKNS) over (partition BY p.site_id,p.yr) 
	 ,TKNSP_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.TKNSP) over (partition BY p.site_id,p.yr) 
	 ,PO4_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.PO4) over (partition BY p.site_id,p.yr) 
	 ,TPS_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.TPS) over (partition BY p.site_id,p.yr) 
	 ,TPSP_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.TPSP) over (partition BY p.site_id,p.yr) 
	 ,SIL_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.SIL) over (partition BY p.site_id,p.yr) 
	 ,TCYN_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.TCYN) over (partition BY p.site_id,p.yr) 

	 ,DETERG_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.DETERG) over (partition BY p.site_id,p.yr) 
	 ,FL_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.FL) over (partition BY p.site_id,p.yr) 
	 ,CL_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.CL) over (partition BY p.site_id,p.yr) 
	 ,H2S_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.H2S) over (partition BY p.site_id,p.yr) 
	 ,SULP_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.SULP) over (partition BY p.site_id,p.yr) 
	 ,SSP_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.SSP) over (partition BY p.site_id,p.yr) 
	 ,CHL_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.CHL) over (partition BY p.site_id,p.yr) 
	 ,PHEO_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.PHEO) over (partition BY p.site_id,p.yr) 

	 ,AL_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.AL) over (partition BY p.site_id,p.yr) 
	 ,SB_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.SB) over (partition BY p.site_id,p.yr) 
	 ,ARSENIC_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.ARSENIC) over (partition BY p.site_id,p.yr) 
	 ,BA_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.BA) over (partition BY p.site_id,p.yr) 
	 ,BE_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.BE) over (partition BY p.site_id,p.yr) 
	 ,B_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.B) over (partition BY p.site_id,p.yr) 
	 ,CD_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.CD) over (partition BY p.site_id,p.yr) 
	 ,CR_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.CR) over (partition BY p.site_id,p.yr) 
	 ,CU_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.CU) over (partition BY p.site_id,p.yr) 
	 ,FE_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.FE) over (partition BY p.site_id,p.yr) 
	 ,PB_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.PB) over (partition BY p.site_id,p.yr) 
	 ,MN_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.MN) over (partition BY p.site_id,p.yr) 
	 ,HG_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.HG) over (partition BY p.site_id,p.yr) 
	 ,MO_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.MO) over (partition BY p.site_id,p.yr) 
	 ,NI_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.NI) over (partition BY p.site_id,p.yr) 
	 ,AG_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.AG) over (partition BY p.site_id,p.yr) 
	 ,TL_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.TL) over (partition BY p.site_id,p.yr) 
	 ,V_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.V) over (partition BY p.site_id,p.yr) 
	 ,ZN_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.ZN) over (partition BY p.site_id,p.yr) 
	 --,p.DEPTH_MED,p.WIDTH_MED,p.VEL_MED,p.FLOW_MED
	 --,NH3_MED  = percentile_cont(0.5)  within GROUP (ORDER BY p.NH3) over (partition BY p.site_id,p.yr) 
	 --,p.TIN_MED, p.TN_MED
	 --,p.BOD5_PT_MED, p.NH4_PT_MED, p.DOS_PT_MED, p.WQI_PT_MED, p.WQI_GRADE_MED


  --,AVG( a.do) OVER(PARTITION BY a.site_id,a.yr) as avg_do
 from 
 (
	select 
		site_id =  substring(v.rwvisit_id,9,4) 
		,yr = substring(v.rwvisit_id,1,4) 
		,f.TEMPER,f.TURB,f.SAL,f.COND ,f.PH ,f.DO,f.DOS
		,mlab.BOD5
		,glabn.COD, glabn.TOC,  glabn.OIL,    glabn.SS,    glabn.TS,  glabn.TVS, glabn.NH4
		,glabn.NO2, glabn.NO3,  glabn.TKNS,   glabn.TKNSP, glabn.PO4, glabn.TPS, glabn.TPSP
		,glabn.SIL, glabn.TCYN, glabn.DETERG, glabn.FL,    glabn.CL,  glabn.H2S, glabn.SULP
		,glabn.SSP, glabn.CHL,  glabn.PHEO
		,glabm.AL,  glabm.SB,   glabm.ARSENIC,glabm.BA, glabm.BE,   glabm.B
		,glabm.CD,  glabm.CR,   glabm.CU,     glabm.FE, glabm.PB,   glabm.MN
		,glabm.HG,  glabm.MO,   glabm.NI,     glabm.AG, glabm.TL,   glabm.V
		,glabm.ZN
		--,nh3.NH3
		--,FS.DEPTH_MED,FS.WIDTH_MED,FS.VEL_MED,FS.FLOW_MED
		--,GN.TIN_MED, GN.TN_MED
		--,CA.BOD5_PT_MED, CA.NH4_PT_MED, CA.DOS_PT_MED, CA.WQI_PT_MED, CA.WQI_GRADE_MED
		--, ST.CMMVIEW AS VIEW_NO
  from 
		wpg.RW_VISIT v
  
  left join   
		wpg.rw_field f on v.RWVISIT_ID   = f.RWVISIT_ID
  left join 
		wpg.RW_MLAB mlab on v.RWVISIT_ID   = mlab.RWVISIT_ID
  left join
		wpg.RW_GLABN glabn on v.RWVISIT_ID  = glabn.RWVISIT_ID
  left join 
		wpg.RW_GLABM glabm on v.RWVISIT_ID  =glabm.RWVISIT_ID
  left join 
		wpg.RW_NH3 nh3 on v.RWVISIT_ID  =nh3.RWVISIT_ID
) p

) d

   left join  
		WPG.RW_FLOW_MED AS FS ON  d.site_id = FS.SITE_ID AND d.yr = FS.YYYY 
	left join 
		 WPG.RW_GLABN_MED GN ON  d.site_id = gn.SITE_ID AND d.yr = gn.YYYY 
	left join 
		 WPG.RW_WQI_MED CA on d.site_id  = CA.SITE_ID AND d.yr = CA.YYYY 

    LEFT OUTER JOIN
                         WPG.RW_NH3_MED AS NH ON  d.site_id = NH.SITE_ID AND d.yr = NH.YYYY
	inner join WPG.RSTATION AS ST ON d.site_id = ST.SITE_ID
	  INNER JOIN   
		WPG.RIVER AS RI ON ST.R_ID = RI.R_ID
  INNER JOIN    
		WPG.WPCO_SZ AS SZ ON ST.SZ_ID = SZ.SZ_ID 
  INNER JOIN  WPG.WPCO_WCZ AS CZ ON SZ.WCZ_ID = CZ.WCZ_ID 
  INNER JOIN   WPG.TEN_ZONE AS TZ ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.RIVER_WATER_MED1A source

CREATE VIEW WPG.RIVER_WATER_MED1A AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	RI.RIVER_NAME	RIVER,
	ST.STATNAME	STATION,
	CA.YR,	
	CA.TOTAL,	
	FI.TEMPER_MED,
	FI.L_TURB_MED,	FI.TURB_MED,
	FI.L_SAL_MED,	FI.SAL_MED,
	FI.L_COND_MED,	FI.COND_MED,
	FI.L_PH_MED,	FI.PH_MED,
	FI.L_DO_MED,	FI.DO_MED,
	FI.L_DOS_MED,	FI.DOS_MED,
	MLA.L_FC_AVG,	MLA.FC_AVG,
	MLA.L_EC_AVG,	MLA.EC_AVG,
	ML.L_BOD5_MED,	ML.BOD5_MED,
	GN.L_COD_MED,	GN.COD_MED,
	GN.L_TOC_MED,	GN.TOC_MED,
	GN.L_OIL_MED,	GN.OIL_MED,
	GN.L_SS_MED,	GN.SS_MED,
	GN.L_TS_MED,	GN.TS_MED,
	GN.L_TVS_MED,	GN.TVS_MED,
	GN.L_NH4_MED,	GN.NH4_MED,
	GN.L_NO2_MED,	GN.NO2_MED,
	GN.L_NO3_MED,	GN.NO3_MED,
	GN.L_TKNS_MED,	GN.TKNS_MED,
	GN.L_TKNSP_MED,	GN.TKNSP_MED,
	GN.L_PO4_MED,	GN.PO4_MED,
	GN.L_TPS_MED,	GN.TPS_MED,
	GN.L_TPSP_MED,	GN.TPSP_MED,
	GN.L_SIL_MED,	GN.SIL_MED,
	GN.L_TCYN_MED,	GN.TCYN_MED,
	GN.L_DETERG_MED,	GN.DETERG_MED,
	GN.L_FL_MED,	GN.FL_MED,
	GN.L_CL_MED,	GN.CL_MED,
	GN.L_H2S_MED,	GN.H2S_MED,
	GN.L_SULP_MED,	GN.SULP_MED,
	GN.L_SSP_MED,	GN.SSP_MED,
	GN.L_CHL_MED,	GN.CHL_MED,
	GN.L_PHEO_MED,	GN.PHEO_MED,
	GM.L_AL_MED,	GM.AL_MED,
	GM.L_SB_MED,	GM.SB_MED,
	GM.L_ARSENIC_MED,	GM.ARSENIC_MED,
	GM.L_BA_MED,	GM.BA_MED,
	GM.L_BE_MED,	GM.BE_MED,
	GM.L_B_MED,	GM.B_MED,
	GM.L_CD_MED,	GM.CD_MED,
	GM.L_CR_MED,	GM.CR_MED,
	GM.L_CU_MED,	GM.CU_MED,
	GM.L_FE_MED,	GM.FE_MED,
	GM.L_PB_MED,	GM.PB_MED,
	GM.L_MN_MED,	GM.MN_MED,
	GM.L_HG_MED,	GM.HG_MED,
	GM.L_MO_MED,	GM.MO_MED,
	GM.L_NI_MED,	GM.NI_MED,
	GM.L_AG_MED,	GM.AG_MED,
	GM.L_TL_MED,	GM.TL_MED,
	GM.L_V_MED,	GM.V_MED,
	GM.L_ZN_MED,	GM.ZN_MED,
	FS.DEPTH_MED,
	FS.WIDTH_MED,
	FS.VEL_MED,
	FS.FLOW_MED,
	NH.L_NH3_MED,	NH.NH3_MED,
	GN.L_TIN_MED,	GN.TIN_MED,
	GN.L_TN_MED,	GN.TN_MED,
	CA.BOD5_PT_MED,
	CA.NH4_PT_MED,
	CA.DOS_PT_MED,
	CA.WQI_PT_MED,
	CA.WQI_GRADE_MED,
	ST.CMMVIEW	VIEW_NO
FROM	WPG.RW_WQI_MED	CA
LEFT OUTER JOIN	WPG.RW_FIELD_MED_A	FI	ON CA.SITE_ID 	= FI.SITE_ID	AND CA.YR = FI.YR
LEFT OUTER JOIN	WPG.RW_MLAB_MED_A	ML	ON CA.SITE_ID 	= ML.SITE_ID	AND CA.YR = ML.YR
LEFT OUTER JOIN	WPG.RW_MLAB_AVG_A	MLA	ON CA.SITE_ID 	= MLA.SITE_ID	AND CA.YR = MLA.YR
LEFT OUTER JOIN	WPG.RW_GLABM_MED_A	GM	ON CA.SITE_ID 	= GM.SITE_ID	AND CA.YR = GM.YR
LEFT OUTER JOIN	WPG.RW_GLABN_MED_A	GN	ON CA.SITE_ID 	= GN.SITE_ID	AND CA.YR = GN.YR
LEFT OUTER JOIN	WPG.RW_FLOW_MED	FS	ON CA.SITE_ID 	= FS.SITE_ID	AND CA.YR = FS.YR
LEFT OUTER JOIN	WPG.RW_NH3_MED_A	NH	ON CA.SITE_ID 	= NH.SITE_ID	AND CA.YR = NH.YR
JOIN		WPG.RSTATION		ST	ON CA.SITE_ID 	= ST.SITE_ID
JOIN		WPG.RIVER		RI	ON ST.R_ID	= RI.R_ID
JOIN		WPG.WPCO_SZ		SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ		CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID 
JOIN		WPG.TEN_ZONE		TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_MIN1 source

CREATE VIEW WPG.RIVER_WATER_MIN1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	RI.RIVER_NAME	RIVER,
	ST.STATNAME	STATION,
	CA.YR,
	CA.TOTAL,
	FI.TEMPER_MIN,
	FI.TURB_MIN,
	FI.SAL_MIN,
	FI.COND_MIN,
	FI.PH_MIN,
	FI.DO_MIN,
	FI.DOS_MIN,
	ML.FC_MIN,
	ML.EC_MIN,
	ML.BOD5_MIN,
	GN.COD_MIN,
	GN.TOC_MIN,
	GN.OIL_MIN,
	GN.SS_MIN,
	GN.TS_MIN,
	GN.TVS_MIN,
	GN.NH4_MIN,
	GN.NO2_MIN,
	GN.NO3_MIN,
	GN.TKNS_MIN,
	GN.TKNSP_MIN,
	GN.PO4_MIN,
	GN.TPS_MIN,
	GN.TPSP_MIN,
	GN.SIL_MIN,	
	GN.TCYN_MIN,
	GN.DETERG_MIN,
	GN.FL_MIN,
	GN.CL_MIN,
	GN.H2S_MIN,
	GN.SULP_MIN,
	GN.SSP_MIN,
	GN.CHL_MIN,
	GN.PHEO_MIN,
	GM.AL_MIN,
	GM.SB_MIN,
	GM.ARSENIC_MIN,
	GM.BA_MIN,
	GM.BE_MIN,	
	GM.B_MIN,
	GM.CD_MIN,
	GM.CR_MIN,
	GM.CU_MIN,
	GM.FE_MIN,
	GM.PB_MIN,
	GM.MN_MIN,
	GM.HG_MIN,
	GM.MO_MIN,
	GM.NI_MIN,
	GM.AG_MIN,
	GM.TL_MIN,
	GM.V_MIN,
	GM.ZN_MIN,
	FS.DEPTH_MIN,
	FS.WIDTH_MIN,
	FS.VEL_MIN,
	FS.FLOW_MIN,
	NH.NH3_MIN,
	GN.TIN_MIN,
	GN.TN_MIN,
	CA.BOD5_PT_MIN,
	CA.NH4_PT_MIN,
	CA.DOS_PT_MIN,
	CA.WQI_PT_MIN,
	CA.WQI_GRADE_MIN,
	ST.CMMVIEW	VIEW_NO
FROM	WPG.RW_WQI_MIN		CA
LEFT OUTER JOIN	WPG.RW_FIELD_MIN	FI	ON CA.SITE_ID 	= FI.SITE_ID	AND CA.YR = FI.YR
LEFT OUTER JOIN	WPG.RW_MLAB_MIN	ML	ON CA.SITE_ID 	= ML.SITE_ID	AND CA.YR = ML.YR
LEFT OUTER JOIN	WPG.RW_GLABM_MIN	GM	ON CA.SITE_ID 	= GM.SITE_ID	AND CA.YR = GM.YR
LEFT OUTER JOIN	WPG.RW_GLABN_MIN	GN	ON CA.SITE_ID 	= GN.SITE_ID	AND CA.YR = GN.YR
LEFT OUTER JOIN	WPG.RW_FLOW_MIN	FS	ON CA.SITE_ID 	= FS.SITE_ID	AND CA.YR = FS.YR
LEFT OUTER JOIN	WPG.RW_NH3_MIN		NH	ON CA.SITE_ID 	= NH.SITE_ID	AND CA.YR = NH.YR
JOIN		WPG.RSTATION		ST	ON CA.SITE_ID 	= ST.SITE_ID
JOIN		WPG.RIVER		RI	ON ST.R_ID	= RI.R_ID
JOIN		WPG.WPCO_SZ		SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ		CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID 
JOIN		WPG.TEN_ZONE		TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_MIN1A source

CREATE VIEW WPG.RIVER_WATER_MIN1A AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	RI.RIVER_NAME	RIVER,
	ST.STATNAME	STATION,
	CA.YR,
	CA.TOTAL,
	FI.TEMPER_MIN,
	FI.L_TURB_MIN,	FI.TURB_MIN,
	FI.L_SAL_MIN,	FI.SAL_MIN,
	FI.L_COND_MIN,	FI.COND_MIN,
	FI.L_PH_MIN,	FI.PH_MIN,
	FI.L_DO_MIN,	FI.DO_MIN,
	FI.L_DOS_MIN,	FI.DOS_MIN,
	ML.L_FC_MIN,	ML.FC_MIN,
	ML.L_EC_MIN,	ML.EC_MIN,
	ML.L_BOD5_MIN,	ML.BOD5_MIN,
	GN.L_COD_MIN,	GN.COD_MIN,
	GN.L_TOC_MIN,	GN.TOC_MIN,
	GN.L_OIL_MIN,	GN.OIL_MIN,
	GN.L_SS_MIN,	GN.SS_MIN,
	GN.L_TS_MIN,	GN.TS_MIN,
	GN.L_TVS_MIN,	GN.TVS_MIN,
	GN.L_NH4_MIN,	GN.NH4_MIN,
	GN.L_NO2_MIN,	GN.NO2_MIN,
	GN.L_NO3_MIN,	GN.NO3_MIN,
	GN.L_TKNS_MIN,	GN.TKNS_MIN,
	GN.L_TKNSP_MIN,	GN.TKNSP_MIN,
	GN.L_PO4_MIN,	GN.PO4_MIN,
	GN.L_TPS_MIN,	GN.TPS_MIN,
	GN.L_TPSP_MIN,	GN.TPSP_MIN,
	GN.L_SIL_MIN,	GN.SIL_MIN,
	GN.L_TCYN_MIN,	GN.TCYN_MIN,
	GN.L_DETERG_MIN,	GN.DETERG_MIN,
	GN.L_FL_MIN,	GN.FL_MIN,
	GN.L_CL_MIN,	GN.CL_MIN,
	GN.L_H2S_MIN,	GN.H2S_MIN,
	GN.L_SULP_MIN,	GN.SULP_MIN,
	GN.L_SSP_MIN,	GN.SSP_MIN,
	GN.L_CHL_MIN,	GN.CHL_MIN,
	GN.L_PHEO_MIN,	GN.PHEO_MIN,
	GM.L_AL_MIN,	GM.AL_MIN,
	GM.L_SB_MIN,	GM.SB_MIN,
	GM.L_ARSENIC_MIN,	GM.ARSENIC_MIN,
	GM.L_BA_MIN,	GM.BA_MIN,
	GM.L_BE_MIN,	GM.BE_MIN,
	GM.L_B_MIN,	GM.B_MIN,
	GM.L_CD_MIN,	GM.CD_MIN,
	GM.L_CR_MIN,	GM.CR_MIN,
	GM.L_CU_MIN,	GM.CU_MIN,
	GM.L_FE_MIN,	GM.FE_MIN,
	GM.L_PB_MIN,	GM.PB_MIN,
	GM.L_MN_MIN,	GM.MN_MIN,
	GM.L_HG_MIN,	GM.HG_MIN,
	GM.L_MO_MIN,	GM.MO_MIN,
	GM.L_NI_MIN,	GM.NI_MIN,
	GM.L_AG_MIN,	GM.AG_MIN,
	GM.L_TL_MIN,	GM.TL_MIN,
	GM.L_V_MIN,	GM.V_MIN,
	GM.L_ZN_MIN,	GM.ZN_MIN,
	FS.DEPTH_MIN,
	FS.WIDTH_MIN,
	FS.VEL_MIN,
	FS.FLOW_MIN,
	NH.L_NH3_MIN,	NH.NH3_MIN,
	GN.L_TIN_MIN,	GN.TIN_MIN,
	GN.L_TN_MIN,	GN.TN_MIN,
	CA.BOD5_PT_MIN,
	CA.NH4_PT_MIN,
	CA.DOS_PT_MIN,
	CA.WQI_PT_MIN,
	CA.WQI_GRADE_MIN,
	ST.CMMVIEW	VIEW_NO
FROM	WPG.RW_WQI_MIN		CA
LEFT OUTER JOIN	WPG.RW_FIELD_MIN_A	FI	ON CA.SITE_ID 	= FI.SITE_ID	AND CA.YR = FI.YR
LEFT OUTER JOIN	WPG.RW_MLAB_MIN_A	ML	ON CA.SITE_ID 	= ML.SITE_ID	AND CA.YR = ML.YR
LEFT OUTER JOIN	WPG.RW_GLABM_MIN_A	GM	ON CA.SITE_ID 	= GM.SITE_ID	AND CA.YR = GM.YR
LEFT OUTER JOIN	WPG.RW_GLABN_MIN_A	GN	ON CA.SITE_ID 	= GN.SITE_ID	AND CA.YR = GN.YR
LEFT OUTER JOIN	WPG.RW_FLOW_MIN	FS	ON CA.SITE_ID 	= FS.SITE_ID	AND CA.YR = FS.YR
LEFT OUTER JOIN	WPG.RW_NH3_MIN_A		NH	ON CA.SITE_ID 	= NH.SITE_ID	AND CA.YR = NH.YR
JOIN		WPG.RSTATION		ST	ON CA.SITE_ID 	= ST.SITE_ID
JOIN		WPG.RIVER		RI	ON ST.R_ID	= RI.R_ID
JOIN		WPG.WPCO_SZ		SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ		CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID 
JOIN		WPG.TEN_ZONE		TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_MLAB1 source

CREATE VIEW WPG.RIVER_WATER_MLAB1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR		WCZ,
	SZ.SZ_NAME		SUBZONE,
	RI.RIVER_NAME	RIVER,
	ST.STATNAME		STATION,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO,
	ML.L_FC,
	ML.FC,
	ML.L_EC,
	ML.EC,
	ML.L_BOD5,
	ML.BOD5,
	ML.VALID_USER,
	ML.VALID_DATE,
	ML.VALID_CODE,
	ST.CMMVIEW		VIEW_NO
FROM			WPG.RW_VISIT	VI
JOIN	WPG.RW_MLAB	ML 	ON VI.RWVISIT_ID 	= ML.RWVISIT_ID
JOIN			WPG.RSTATION	ST	ON VI.SITE_ID 		= ST.SITE_ID
JOIN			WPG.RIVER		RI	ON ST.R_ID		= RI.R_ID
JOIN			WPG.WPCO_SZ	SZ	ON ST.SZ_ID		= SZ.SZ_ID
JOIN			WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID		= CZ.WCZ_ID 
JOIN			WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_NH3_1 source

CREATE VIEW WPG.RIVER_WATER_NH3_1 AS
SELECT
	TZ.ZONE_NAME		ZONE,
	CZ.WCZ_ABBR		WCZ,
	SZ.SZ_NAME		SUBZONE,
	RI.RIVER_NAME		RIVER,
	ST.STATNAME		STATION,
	NH.MDATE,
	NH.STIME,
	NH.SAMPLE_NO,
	NH.L_SAL,
	NH.SAL,
	NH.L_PH,
	NH.PH,
	NH.TEMPER,
	NH.L_NH4,
	NH.NH4,
	NH.L_NH3,
	ST.CMMVIEW		VIEW_NO
FROM	WPG.RW_NH3	NH
JOIN	WPG.RSTATION	ST	ON NH.SITE_ID 	= ST.SITE_ID
JOIN	WPG.RIVER	RI	ON ST.R_ID	= RI.R_ID
JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID 
JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_OTHER_FLOW1 source

CREATE VIEW WPG.RIVER_WATER_OTHER_FLOW1 AS
SELECT
	TZ.ZONE_NAME		ZONE,
	CZ.WCZ_ABBR		WCZ,
	SZ.SZ_NAME		SUBZONE,
	RI.RIVER_NAME		RIVER,
	ST.STATNAME		STATION,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO,
	FL.FLOW,
	FL.VALID_USER,
	FL.VALID_DATE,
	FL.VALID_CODE,
	ST.CMMVIEW		VIEW_NO
FROM		WPG.RW_VISIT	VI
JOIN		WPG.RW_OTHER_FLOW	FL	ON VI.RWVISIT_ID	= FL.RWVISIT_ID
JOIN		WPG.RSTATION	ST	ON VI.SITE_ID 		= ST.SITE_ID
JOIN		WPG.RIVER	RI	ON ST.R_ID		= RI.R_ID
JOIN		WPG.WPCO_SZ	SZ	ON ST.SZ_ID		= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID		= CZ.WCZ_ID 
JOIN		WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID		= TZ.ZONE_ID;


-- WPG.RIVER_WATER_STATISTICS10A1 source

CREATE  VIEW [WPG].[RIVER_WATER_STATISTICS10A1] AS				
SELECT	TZ.ZONE_NAME	ZONE,		
	CZ.WCZ_ABBR	WCZ,		
	SZ.SZ_NAME	SUBZONE,		
	RI.RIVER_NAME	RIVER,		
	ST.STATNAME	STATION,		
	CA.DISP_STATS,
	CA.YR,
	CA.TOTAL,
	CA.L_SAL,
	CA.SAL,
	CA.L_COND,
	CA.COND,
	CA.L_DO,
	CA.DO,
	CA.L_DOS,
	CA.DOS,
	CA.L_PH,
	CA.PH,
	CA.TEMPER,
	CA.L_SS,
	CA.SS,
	CA.L_TS,
	CA.TS,
	CA.L_TVS,
	CA.TVS,
	CA.L_TURB,
	CA.TURB,
	CA.L_BOD5,
	CA.BOD5,
	CA.L_COD,
	CA.COD,
	CA.L_TOC,
	CA.TOC,
	CA.L_OIL,
	CA.OIL,
	CA.L_EC,
	CA.EC,
	CA.L_FC,
	CA.FC,
	CA.L_NH4,
	CA.NH4,
	CA.L_NO2,
	CA.NO2,
	CA.L_NO3,
	CA.NO3,
	CA.L_TKNS,
	CA.TKNS,
	CA.L_TKNSP,
	CA.TKNSP,
	CA.L_PO4,
	CA.PO4,
	CA.L_TPS,
	CA.TPS,
	CA.L_TPSP,
	CA.TPSP,
	CA.L_SIL,
	CA.SIL,
	CA.L_TCYN,
	CA.TCYN,
	CA.L_DETERG,
	CA.DETERG,
	CA.L_FL,
	CA.FL,
	CA.L_CL,
	CA.CL,
	CA.L_H2S,
	CA.H2S,
	CA.L_SULP,
	CA.SULP,
	CA.L_SSP,
	CA.SSP,
	CA.L_CHL,
	CA.CHL,
	CA.L_PHEO,
	CA.PHEO,
	CA.L_AL,
	CA.AL,
	CA.L_SB,
	CA.SB,
	CA.L_ARSENIC,
	CA.ARSENIC,
	CA.L_BA,
	CA.BA,
	CA.L_BE,
	CA.BE,
	CA.L_B,
	CA.B,
	CA.L_CD,
	CA.CD,
	CA.L_CR,
	CA.CR,
	CA.L_CU,
	CA.CU,
	CA.L_FE,
	CA.FE,
	CA.L_PB,
	CA.PB,
	CA.L_MN,
	CA.MN,
	CA.L_HG,
	CA.HG,
	CA.L_MO,
	CA.MO,
	CA.L_NI,
	CA.NI,
	CA.L_AG,
	CA.AG,
	CA.L_TL,
	CA.TL,
	CA.L_V,
	CA.V,
	CA.L_ZN,
	CA.ZN,
	CA.DEPTH,
	CA.WIDTH,
	CA.VEL,
	CA.FLOW,
	CA.BOD5_PT,
	CA.NH4_PT,
	CA.DOS_PT,
	CA.WQI_PT,
	CA.WQI_GRADE,
	CA.L_NH3,
	CA.NH3,
	CA.L_TIN,
	CA.TIN,
	CA.L_TN,
	CA.TN,
	NULL AS WEATHER,
	NULL AS COLOR,
	NULL AS SMELL,
	NULL AS RAINFALL,
	NULL AS TIDE,
	CA.SITE_ID,
	CA.DISP_SEQ,
	ST.CMMVIEW	VIEW_NO		
FROM	[WPG].[RW_STATISTICS10A]	CA		
JOIN	WPG.RSTATION	ST	ON CA.SITE_ID = ST.SITE_ID	
JOIN	WPG.RIVER	RI	ON ST.R_ID = RI.R_ID	
JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID	
JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID	
JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.RIVER_WATER_STDEV1 source

CREATE VIEW WPG.RIVER_WATER_STDEV1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	RI.RIVER_NAME	RIVER,
	ST.STATNAME	STATION,
	CA.YR,
	CA.TOTAL,
	FI.TEMPER_STDEV,
	FI.TURB_STDEV,
	FI.SAL_STDEV,
	FI.COND_STDEV,
	FI.PH_STDEV,
	FI.DO_STDEV,
	FI.DOS_STDEV,
	ML.FC_STDEV,
	ML.EC_STDEV,
	ML.BOD5_STDEV,
	GN.COD_STDEV,
	GN.TOC_STDEV,
	GN.OIL_STDEV,
	GN.SS_STDEV,
	GN.TS_STDEV,
	GN.TVS_STDEV,
	GN.NH4_STDEV,
	GN.NO2_STDEV,
	GN.NO3_STDEV,
	GN.TKNS_STDEV,
	GN.TKNSP_STDEV,
	GN.PO4_STDEV,
	GN.TPS_STDEV,
	GN.TPSP_STDEV,
	GN.SIL_STDEV,	
	GN.TCYN_STDEV,
	GN.DETERG_STDEV,
	GN.FL_STDEV,
	GN.CL_STDEV,
	GN.H2S_STDEV,
	GN.SULP_STDEV,
	GN.SSP_STDEV,
	GN.CHL_STDEV,
	GN.PHEO_STDEV,
	GM.AL_STDEV,
	GM.SB_STDEV,
	GM.ARSENIC_STDEV,
	GM.BA_STDEV,
	GM.BE_STDEV,	
	GM.B_STDEV,
	GM.CD_STDEV,
	GM.CR_STDEV,
	GM.CU_STDEV,
	GM.FE_STDEV,
	GM.PB_STDEV,
	GM.MN_STDEV,
	GM.HG_STDEV,
	GM.MO_STDEV,
	GM.NI_STDEV,
	GM.AG_STDEV,
	GM.TL_STDEV,
	GM.V_STDEV,
	GM.ZN_STDEV,
	FS.DEPTH_STDEV,
	FS.WIDTH_STDEV,
	FS.VEL_STDEV,
	FS.FLOW_STDEV,
	NH.NH3_STDEV,
	GN.TIN_STDEV,
	GN.TN_STDEV,
	CA.BOD5_PT_STDEV,
	CA.NH4_PT_STDEV,
	CA.DOS_PT_STDEV,
	CA.WQI_PT_STDEV,
	CA.WQI_GRADE_STDEV,
	ST.CMMVIEW	VIEW_NO
FROM	WPG.RW_WQI_STDEV	CA
LEFT OUTER JOIN	WPG.RW_FIELD_STDEV	FI	ON CA.SITE_ID 	= FI.SITE_ID	AND CA.YR = FI.YR
LEFT OUTER JOIN	WPG.RW_MLAB_STDEV	ML	ON CA.SITE_ID 	= ML.SITE_ID	AND CA.YR = ML.YR
LEFT OUTER JOIN	WPG.RW_GLABM_STDEV	GM	ON CA.SITE_ID 	= GM.SITE_ID	AND CA.YR = GM.YR
LEFT OUTER JOIN	WPG.RW_GLABN_STDEV	GN	ON CA.SITE_ID 	= GN.SITE_ID	AND CA.YR = GN.YR
LEFT OUTER JOIN	WPG.RW_FLOW_STDEV	FS	ON CA.SITE_ID 	= FS.SITE_ID	AND CA.YR = FS.YR
LEFT OUTER JOIN	WPG.RW_NH3_STDEV	NH	ON CA.SITE_ID	= NH.SITE_ID	AND CA.YR = NH.YR
JOIN		WPG.RSTATION		ST	ON CA.SITE_ID 	= ST.SITE_ID
JOIN		WPG.RIVER		RI	ON ST.R_ID	= RI.R_ID
JOIN		WPG.WPCO_SZ		SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ		CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID 
JOIN		WPG.TEN_ZONE		TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_SUMMARY1 source

CREATE VIEW WPG.RIVER_WATER_SUMMARY1 AS
SELECT
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR	WCZ,
	SZ.SZ_NAME	SUBZONE,
	RI.RIVER_NAME	RIVER,
	ST.STATNAME	STATION,
	CA.YR,	
	CA.TOTAL,	
	FI.TEMPER_MED,	
	FI.L_TURB_MED,	FI.TURB_MED,
	FI.L_SAL_MED,	FI.SAL_MED,
	FI.L_COND_MED,	FI.COND_MED,
	FI.L_PH_MED,	FI.PH_MED,
	FI.L_DO_MED,	FI.DO_MED,
	FI.L_DOS_MED,	FI.DOS_MED,
	MLA.L_FC_AVG,	MLA.FC_AVG,
	MLA.L_EC_AVG,	MLA.EC_AVG,
	ML.L_BOD5_MED,	ML.BOD5_MED,
	GN.L_COD_MED,	GN.COD_MED,
	GN.L_TOC_MED,	GN.TOC_MED,
	GN.L_OIL_MED,	GN.OIL_MED,
	GN.L_SS_MED,	GN.SS_MED,
	GN.L_TS_MED,	GN.TS_MED,
	GN.L_TVS_MED,	GN.TVS_MED,
	GN.L_NH4_MED,	GN.NH4_MED,
	GN.L_NO2_MED,	GN.NO2_MED,
	GN.L_NO3_MED,	GN.NO3_MED,
	GN.L_TKNS_MED,	GN.TKNS_MED,
	GN.L_TKNSP_MED,	GN.TKNSP_MED,
	GN.L_PO4_MED,	GN.PO4_MED,
	GN.L_TPS_MED,	GN.TPS_MED,
	GN.L_TPSP_MED,	GN.TPSP_MED,
	GN.L_SIL_MED,	GN.SIL_MED,
	GN.L_TCYN_MED,	GN.TCYN_MED,
	GN.L_DETERG_MED,	GN.DETERG_MED,
	GN.L_FL_MED,	GN.FL_MED,
	GN.L_CL_MED,	GN.CL_MED,
	GN.L_H2S_MED,	GN.H2S_MED,
	GN.L_SULP_MED,	GN.SULP_MED,
	GN.L_SSP_MED,	GN.SSP_MED,
	GN.L_CHL_MED,	GN.CHL_MED,
	GN.L_PHEO_MED,	GN.PHEO_MED,
	GM.L_AL_MED,	GM.AL_MED,
	GM.L_SB_MED,	GM.SB_MED,
	GM.L_ARSENIC_MED,	GM.ARSENIC_MED,
	GM.L_BA_MED,	GM.BA_MED,
	GM.L_BE_MED,	GM.BE_MED,
	GM.L_B_MED,	GM.B_MED,
	GM.L_CD_MED,	GM.CD_MED,
	GM.L_CR_MED,	GM.CR_MED,
	GM.L_CU_MED,	GM.CU_MED,
	GM.L_FE_MED,	GM.FE_MED,
	GM.L_PB_MED,	GM.PB_MED,
	GM.L_MN_MED,	GM.MN_MED,
	GM.L_HG_MED,	GM.HG_MED,
	GM.L_MO_MED,	GM.MO_MED,
	GM.L_NI_MED,	GM.NI_MED,
	GM.L_AG_MED,	GM.AG_MED,
	GM.L_TL_MED,	GM.TL_MED,
	GM.L_V_MED,	GM.V_MED,
	GM.L_ZN_MED,	GM.ZN_MED,
	FS.DEPTH_MED,	
	FS.WIDTH_MED,	
	FS.VEL_MED,	
	FS.FLOW_MED,	
	NH.L_NH3_MED,	NH.NH3_MED,
	GN.L_TIN_MED,	GN.TIN_MED,
	GN.L_TN_MED,	GN.TN_MED,
	CA.BOD5_PT_MED,	
	CA.NH4_PT_MED,	
	CA.DOS_PT_MED,	
	CA.WQI_PT_MED,	
	CA.WQI_GRADE_MED,	
	FI1.TEMPER_MIN,	
	FI1.L_TURB_MIN,	FI1.TURB_MIN,
	FI1.L_SAL_MIN,	FI1.SAL_MIN,
	FI1.L_COND_MIN,	FI1.COND_MIN,
	FI1.L_PH_MIN,	FI1.PH_MIN,
	FI1.L_DO_MIN,	FI1.DO_MIN,
	FI1.L_DOS_MIN,	FI1.DOS_MIN,
	ML1.L_FC_MIN,	ML1.FC_MIN,
	ML1.L_EC_MIN,	ML1.EC_MIN,
	ML1.L_BOD5_MIN,	ML1.BOD5_MIN,
	GN1.L_COD_MIN,	GN1.COD_MIN,
	GN1.L_TOC_MIN,	GN1.TOC_MIN,
	GN1.L_OIL_MIN,	GN1.OIL_MIN,
	GN1.L_SS_MIN,	GN1.SS_MIN,
	GN1.L_TS_MIN,	GN1.TS_MIN,
	GN1.L_TVS_MIN,	GN1.TVS_MIN,
	GN1.L_NH4_MIN,	GN1.NH4_MIN,
	GN1.L_NO2_MIN,	GN1.NO2_MIN,
	GN1.L_NO3_MIN,	GN1.NO3_MIN,
	GN1.L_TKNS_MIN,	GN1.TKNS_MIN,
	GN1.L_TKNSP_MIN,	GN1.TKNSP_MIN,
	GN1.L_PO4_MIN,	GN1.PO4_MIN,
	GN1.L_TPS_MIN,	GN1.TPS_MIN,
	GN1.L_TPSP_MIN,	GN1.TPSP_MIN,
	GN1.L_SIL_MIN,	GN1.SIL_MIN,
	GN1.L_TCYN_MIN,	GN1.TCYN_MIN,
	GN1.L_DETERG_MIN,	GN1.DETERG_MIN,
	GN1.L_FL_MIN,	GN1.FL_MIN,
	GN1.L_CL_MIN,	GN1.CL_MIN,
	GN1.L_H2S_MIN,	GN1.H2S_MIN,
	GN1.L_SULP_MIN,	GN1.SULP_MIN,
	GN1.L_SSP_MIN,	GN1.SSP_MIN,
	GN1.L_CHL_MIN,	GN1.CHL_MIN,
	GN1.L_PHEO_MIN,	GN1.PHEO_MIN,
	GM1.L_AL_MIN,	GM1.AL_MIN,
	GM1.L_SB_MIN,	GM1.SB_MIN,
	GM1.L_ARSENIC_MIN,	GM1.ARSENIC_MIN,
	GM1.L_BA_MIN,	GM1.BA_MIN,
	GM1.L_BE_MIN,	GM1.BE_MIN,
	GM1.L_B_MIN,	GM1.B_MIN,
	GM1.L_CD_MIN,	GM1.CD_MIN,
	GM1.L_CR_MIN,	GM1.CR_MIN,
	GM1.L_CU_MIN,	GM1.CU_MIN,
	GM1.L_FE_MIN,	GM1.FE_MIN,
	GM1.L_PB_MIN,	GM1.PB_MIN,
	GM1.L_MN_MIN,	GM1.MN_MIN,
	GM1.L_HG_MIN,	GM1.HG_MIN,
	GM1.L_MO_MIN,	GM1.MO_MIN,
	GM1.L_NI_MIN,	GM1.NI_MIN,
	GM1.L_AG_MIN,	GM1.AG_MIN,
	GM1.L_TL_MIN,	GM1.TL_MIN,
	GM1.L_V_MIN,	GM1.V_MIN,
	GM1.L_ZN_MIN,	GM1.ZN_MIN,
	FS1.DEPTH_MIN,	
	FS1.WIDTH_MIN,	
	FS1.VEL_MIN,	
	FS1.FLOW_MIN,	
	NH1.L_NH3_MIN,	NH1.NH3_MIN,
	GN1.L_TIN_MIN,	GN1.TIN_MIN,
	GN1.L_TN_MIN,	GN1.TN_MIN,
	CA1.BOD5_PT_MIN,	
	CA1.NH4_PT_MIN,	
	CA1.DOS_PT_MIN,	
	CA1.WQI_PT_MIN,	
	CA1.WQI_GRADE_MIN,	
	FI2.TEMPER_MAX,	
	FI2.L_TURB_MAX,	FI2.TURB_MAX,
	FI2.L_SAL_MAX,	FI2.SAL_MAX,
	FI2.L_COND_MAX,	FI2.COND_MAX,
	FI2.L_PH_MAX,	FI2.PH_MAX,
	FI2.L_DO_MAX,	FI2.DO_MAX,
	FI2.L_DOS_MAX,	FI2.DOS_MAX,
	ML2.L_FC_MAX,	ML2.FC_MAX,
	ML2.L_EC_MAX,	ML2.EC_MAX,
	ML2.L_BOD5_MAX,	ML2.BOD5_MAX,
	GN2.L_COD_MAX,	GN2.COD_MAX,
	GN2.L_TOC_MAX,	GN2.TOC_MAX,
	GN2.L_OIL_MAX,	GN2.OIL_MAX,
	GN2.L_SS_MAX,	GN2.SS_MAX,
	GN2.L_TS_MAX,	GN2.TS_MAX,
	GN2.L_TVS_MAX,	GN2.TVS_MAX,
	GN2.L_NH4_MAX,	GN2.NH4_MAX,
	GN2.L_NO2_MAX,	GN2.NO2_MAX,
	GN2.L_NO3_MAX,	GN2.NO3_MAX,
	GN2.L_TKNS_MAX,	GN2.TKNS_MAX,
	GN2.L_TKNSP_MAX,	GN2.TKNSP_MAX,
	GN2.L_PO4_MAX,	GN2.PO4_MAX,
	GN2.L_TPS_MAX,	GN2.TPS_MAX,
	GN2.L_TPSP_MAX,	GN2.TPSP_MAX,
	GN2.L_SIL_MAX,	GN2.SIL_MAX,
	GN2.L_TCYN_MAX,	GN2.TCYN_MAX,
	GN2.L_DETERG_MAX,	GN2.DETERG_MAX,
	GN2.L_FL_MAX,	GN2.FL_MAX,
	GN2.L_CL_MAX,	GN2.CL_MAX,
	GN2.L_H2S_MAX,	GN2.H2S_MAX,
	GN2.L_SULP_MAX,	GN2.SULP_MAX,
	GN2.L_SSP_MAX,	GN2.SSP_MAX,
	GN2.L_CHL_MAX,	GN2.CHL_MAX,
	GN2.L_PHEO_MAX,	GN2.PHEO_MAX,
	GM2.L_AL_MAX,	GM2.AL_MAX,
	GM2.L_SB_MAX,	GM2.SB_MAX,
	GM2.L_ARSENIC_MAX,	GM2.ARSENIC_MAX,
	GM2.L_BA_MAX,	GM2.BA_MAX,
	GM2.L_BE_MAX,	GM2.BE_MAX,
	GM2.L_B_MAX,	GM2.B_MAX,
	GM2.L_CD_MAX,	GM2.CD_MAX,
	GM2.L_CR_MAX,	GM2.CR_MAX,
	GM2.L_CU_MAX,	GM2.CU_MAX,
	GM2.L_FE_MAX,	GM2.FE_MAX,
	GM2.L_PB_MAX,	GM2.PB_MAX,
	GM2.L_MN_MAX,	GM2.MN_MAX,
	GM2.L_HG_MAX,	GM2.HG_MAX,
	GM2.L_MO_MAX,	GM2.MO_MAX,
	GM2.L_NI_MAX,	GM2.NI_MAX,
	GM2.L_AG_MAX,	GM2.AG_MAX,
	GM2.L_TL_MAX,	GM2.TL_MAX,
	GM2.L_V_MAX,	GM2.V_MAX,
	GM2.L_ZN_MAX,	GM2.ZN_MAX,
	FS2.DEPTH_MAX,	
	FS2.WIDTH_MAX,	
	FS2.VEL_MAX,	
	FS2.FLOW_MAX,	
	NH2.L_NH3_MAX,	NH2.NH3_MAX,
	GN2.L_TIN_MAX,	GN2.TIN_MAX,
	GN2.L_TN_MAX,	GN2.TN_MAX,
	CA2.BOD5_PT_MAX,	
	CA2.NH4_PT_MAX,	
	CA2.DOS_PT_MAX,	
	CA2.WQI_PT_MAX,	
	CA2.WQI_GRADE_MAX,	
    ST.CMMVIEW	VIEW_NO
FROM	WPG.RW_WQI_MED	CA
LEFT OUTER JOIN	WPG.RW_FIELD_MED_A	FI	ON CA.SITE_ID 	= FI.SITE_ID	AND CA.YR = FI.YR
LEFT OUTER JOIN	WPG.RW_MLAB_MED_A	ML	ON CA.SITE_ID 	= ML.SITE_ID	AND CA.YR = ML.YR
LEFT OUTER JOIN	WPG.RW_MLAB_AVG_A	MLA	ON CA.SITE_ID 	= MLA.SITE_ID	AND CA.YR = MLA.YR
LEFT OUTER JOIN	WPG.RW_GLABM_MED_A	GM	ON CA.SITE_ID 	= GM.SITE_ID	AND CA.YR = GM.YR
LEFT OUTER JOIN	WPG.RW_GLABN_MED_A	GN	ON CA.SITE_ID 	= GN.SITE_ID	AND CA.YR = GN.YR
LEFT OUTER JOIN	WPG.RW_FLOW_MED	FS	ON CA.SITE_ID 	= FS.SITE_ID	AND CA.YR = FS.YR
LEFT OUTER JOIN	WPG.RW_NH3_MED_A	NH	ON CA.SITE_ID 	= NH.SITE_ID	AND CA.YR = NH.YR
LEFT OUTER JOIN	WPG.RW_WQI_MIN	CA1	ON CA.SITE_ID 	= CA1.SITE_ID	AND CA.YR = CA1.YR
LEFT OUTER JOIN	WPG.RW_FIELD_MIN_A	FI1	ON CA.SITE_ID 	= FI1.SITE_ID	AND CA.YR = FI1.YR
LEFT OUTER JOIN	WPG.RW_MLAB_MIN_A	ML1	ON CA.SITE_ID 	= ML1.SITE_ID	AND CA.YR = ML1.YR
LEFT OUTER JOIN	WPG.RW_GLABM_MIN_A	GM1	ON CA.SITE_ID 	= GM1.SITE_ID	AND CA.YR = GM1.YR
LEFT OUTER JOIN	WPG.RW_GLABN_MIN_A	GN1	ON CA.SITE_ID 	= GN1.SITE_ID	AND CA.YR = GN1.YR
LEFT OUTER JOIN	WPG.RW_FLOW_MIN	FS1	ON CA.SITE_ID 	= FS1.SITE_ID	AND CA.YR = FS1.YR
LEFT OUTER JOIN	WPG.RW_NH3_MIN_A	NH1	ON CA.SITE_ID 	= NH1.SITE_ID	AND CA.YR = NH1.YR
LEFT OUTER JOIN	WPG.RW_WQI_MAX	CA2	ON CA.SITE_ID 	= CA2.SITE_ID	AND CA.YR = CA2.YR
LEFT OUTER JOIN	WPG.RW_FIELD_MAX_A	FI2	ON CA.SITE_ID 	= FI2.SITE_ID	AND CA.YR = FI2.YR
LEFT OUTER JOIN	WPG.RW_MLAB_MAX_A	ML2	ON CA.SITE_ID 	= ML2.SITE_ID	AND CA.YR = ML2.YR
LEFT OUTER JOIN	WPG.RW_GLABM_MAX_A	GM2	ON CA.SITE_ID 	= GM2.SITE_ID	AND CA.YR = GM2.YR
LEFT OUTER JOIN	WPG.RW_GLABN_MAX_A	GN2	ON CA.SITE_ID 	= GN2.SITE_ID	AND CA.YR = GN2.YR
LEFT OUTER JOIN	WPG.RW_FLOW_MAX	FS2	ON CA.SITE_ID 	= FS2.SITE_ID	AND CA.YR = FS2.YR
LEFT OUTER JOIN	WPG.RW_NH3_MAX_A	NH2	ON CA.SITE_ID 	= NH2.SITE_ID	AND CA.YR = NH2.YR
JOIN		WPG.RSTATION		ST	ON CA.SITE_ID 	= ST.SITE_ID
JOIN		WPG.RIVER		RI	ON ST.R_ID	= RI.R_ID
JOIN		WPG.WPCO_SZ		SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN		WPG.WPCO_WCZ		CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID 
JOIN		WPG.TEN_ZONE		TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_VISIT1 source

CREATE VIEW WPG.RIVER_WATER_VISIT1 AS
SELECT
	TZ.ZONE_NAME		ZONE,
	CZ.WCZ_ABBR		WCZ,
	SZ.SZ_NAME		SUBZONE,
	RI.RIVER_NAME		RIVER,
	ST.STATNAME		STATION,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO,
	VI.VALID_USER,
	VI.VALID_DATE,
	VI.VALID_CODE,
	ST.CMMVIEW		VIEW_NO
FROM	WPG.RW_VISIT	VI
JOIN	WPG.RSTATION	ST	ON	VI.SITE_ID 	= ST.SITE_ID
JOIN	WPG.RIVER	RI	ON	ST.R_ID		= RI.R_ID
JOIN	WPG.WPCO_SZ	SZ	ON	ST.SZ_ID	= SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ	ON	SZ.WCZ_ID	= CZ.WCZ_ID 
JOIN	WPG.TEN_ZONE	TZ	ON	CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_WQI1 source

CREATE VIEW WPG.RIVER_WATER_WQI1 AS
SELECT
	TZ.ZONE_NAME		ZONE,
	CZ.WCZ_ABBR		WCZ,
	SZ.SZ_NAME		SUBZONE,
	RI.RIVER_NAME		RIVER,
	ST.STATNAME		STATION,
	WQ.MDATE,
	WQ.STIME,
	WQ.SAMPLE_NO,
	WQ.L_BOD5,
	WQ.BOD5,
	WQ.L_NH4,
	WQ.NH4,
	WQ.L_DOS,
	WQ.DOS,
	WQ.BOD5_PT,
	WQ.NH4_PT,
	WQ.DOS_PT,
	WQ.WQI_PT,
	WQ.WQI_GRADE,
	ST.CMMVIEW		VIEW_NO
FROM	WPG.RW_WQI	WQ
JOIN	WPG.RSTATION	ST	ON WQ.SITE_ID 	= ST.SITE_ID
JOIN	WPG.RIVER	RI	ON ST.R_ID	= RI.R_ID
JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID	= SZ.SZ_ID
JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID	= CZ.WCZ_ID 
JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_WQO_RAW0 source

CREATE VIEW WPG.RIVER_WATER_WQO_RAW0 AS
SELECT	TZ.ZONE_NAME		ZONE,
	CZ.WCZ_ABBR		WCZ,
	SZ.SZ_NAME		SUBZONE,
	RI.RIVER_NAME		RIVER,
	ST.STATNAME		STATION,
	R.MDATE,
	R.STIME,
	R.SAMPLE_NO,
	R.L_PH,
	R.PH,
	R.L_BOD5,
	R.BOD5,
	R.L_COD,
	R.COD,
	R.L_SS,
	R.SS,
	R.L_DO,
	R.DO,
	R.L_NH4,
	R.NH4,
	R.L_NH3,
	R.NH3,
	R.L_EC,
	R.EC,
	R.EC_5MD,
	R.EC_5GM,
	R.MIN_PH,
	R.MAX_PH,
	R.MAX_BOD5,
	R.MAX_COD,
	R.MAX_AMD_SS,
	R.MIN_DO,
	R.MAX_NH4,
	R.MAX_AAM_NH3,
	R.MAX_5MD_EC,
	R.MAX_5GM_EC,
	R.MAX_AGM_EC,
	R.MEET_PH,
	R.MEET_BOD5,
	R.MEET_COD,
	R.MEET_DO,
	R.MEET_NH4,
	R.MEET_EC_5MD,
	R.MEET_EC_5GM
FROM	WPG.RW_WQO_RAW0	R
JOIN	WPG.RSTATION	ST	ON	R.SITE_ID 	= ST.SITE_ID
JOIN	WPG.RIVER		RI	ON	ST.R_ID		= RI.R_ID
JOIN	WPG.WPCO_SZ		SZ	ON	ST.SZ_ID		= SZ.SZ_ID
JOIN	WPG.WPCO_WCZ		CZ	ON	SZ.WCZ_ID	= CZ.WCZ_ID 
JOIN	WPG.TEN_ZONE		TZ	ON	CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_WQO_RAW1 source

CREATE VIEW WPG.RIVER_WATER_WQO_RAW1 AS
SELECT	TZ.ZONE_NAME		ZONE,
	CZ.WCZ_ABBR		WCZ,
	SZ.SZ_NAME		SUBZONE,
	RI.RIVER_NAME		RIVER,
	ST.STATNAME		STATION,
	R.MDATE,
	R.STIME,
	R.SAMPLE_NO,
	R.L_PH,
	R.PH,
	R.L_BOD5,
	R.BOD5,
	R.L_COD,
	R.COD,
	R.L_SS,
	R.SS,
	R.L_DO,
	R.DO,
	R.L_NH4,
	R.NH4,
	R.L_NH3,
	R.NH3,
	R.MIN_PH,
	R.MAX_PH,
	R.MAX_BOD5,
	R.MAX_COD,
	R.MAX_AMD_SS,
	R.MIN_DO,
	R.MAX_NH4,
	R.MAX_AAM_NH3,
	R.MEET_PH,
	R.MEET_BOD5,
	R.MEET_COD,
	R.MEET_DO,
	R.MEET_NH4
FROM	WPG.RW_WQO_RAW	R
JOIN	WPG.RSTATION	ST	ON	R.SITE_ID 	= ST.SITE_ID
JOIN	WPG.RIVER		RI	ON	ST.R_ID		= RI.R_ID
JOIN	WPG.WPCO_SZ		SZ	ON	ST.SZ_ID		= SZ.SZ_ID
JOIN	WPG.WPCO_WCZ		CZ	ON	SZ.WCZ_ID	= CZ.WCZ_ID 
JOIN	WPG.TEN_ZONE		TZ	ON	CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_WQO_SUM0 source

CREATE  VIEW WPG.RIVER_WATER_WQO_SUM0 AS
SELECT	TZ.ZONE_NAME		ZONE,
	CZ.WCZ_ABBR		WCZ,
	SZ.SZ_NAME		SUBZONE,
	RI.RIVER_NAME		RIVER,
	ST.STATNAME		STATION,
	R.YR,
	R.TOTAL,
	R.MIN_PH,
	R.MAX_PH,
	R.N_PH,
	R.M_PH,
	R.RATE_PH,
	R.N_BOD5,
	R.MAX_BOD5,
	R.M_BOD5,
	R.RATE_BOD5,
	R.MAX_COD,
	R.N_COD,
	R.M_COD,
	R.RATE_COD,
	R.MIN_DO,
	R.N_DO,
	R.M_DO,
	R.RATE_DO,
	R.MAX_AMD_SS,
	R.N_SS,
	R.AMD_SS,
	R.RATE_SS_AMD,
	R.MAX_NH4,
	R.N_NH4,
	R.M_NH4,
	R.RATE_NH4,
	R.MAX_AAM_NH3,
	R.NH3_AAM,
	R.RATE_NH3_AAM,
	R.MAX_5MD_EC,
	R.N_EC_5MD,
	R.M_EC_5MD,
	R.RATE_EC_5MD,
	R.MAX_5GM_EC,
	R.N_EC_5GM,
	R.M_EC_5GM,
	R.RATE_EC_5GM,
	R.MAX_AGM_EC,
	R.EC_AGM,
	R.RATE_EC_AGM,
	(R.RATE_PH + R.RATE_BOD5 + R.RATE_COD + R.RATE_DO)* 0.25 RATE_4WQO,
	(R.RATE_PH + R.RATE_BOD5 + R.RATE_COD + R.RATE_DO + R.RATE_SS_AMD)* 0.2 RATE_5WQO
FROM	WPG.RW_WQO_SUM0	R
JOIN	WPG.RSTATION	ST	ON	R.SITE_ID 	= ST.SITE_ID
JOIN	WPG.RIVER		RI	ON	ST.R_ID		= RI.R_ID
JOIN	WPG.WPCO_SZ		SZ	ON	ST.SZ_ID		= SZ.SZ_ID
JOIN	WPG.WPCO_WCZ		CZ	ON	SZ.WCZ_ID	= CZ.WCZ_ID 
JOIN	WPG.TEN_ZONE		TZ	ON	CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_WQO_SUM1 source

CREATE VIEW WPG.RIVER_WATER_WQO_SUM1 AS
SELECT	TZ.ZONE_NAME		ZONE,
	CZ.WCZ_ABBR		WCZ,
	SZ.SZ_NAME		SUBZONE,
	RI.RIVER_NAME		RIVER,
	ST.STATNAME		STATION,
	R.YR,
	R.TOTAL,
	R.MIN_PH,
	R.MAX_PH,
	R.N_PH,
	R.M_PH,
	R.RATE_PH,
	R.N_BOD5,
	R.MAX_BOD5,
	R.M_BOD5,
	R.RATE_BOD5,
	R.MAX_COD,
	R.N_COD,
	R.M_COD,
	R.RATE_COD,
	R.MIN_DO,
	R.N_DO,
	R.M_DO,
	R.RATE_DO,
	R.MAX_AMD_SS,
	R.N_SS,
	R.AMD_SS,
	R.RATE_SS_AMD,
	R.MAX_NH4,
	R.N_NH4,
	R.M_NH4,
	R.RATE_NH4,
	R.MAX_AAM_NH3,
	R.NH3_AAM,
	R.RATE_NH3_AAM,
	(R.RATE_PH + R.RATE_BOD5 + R.RATE_COD + R.RATE_DO)/4 RATE_4WQO,
	(R.RATE_PH + R.RATE_BOD5 + R.RATE_COD + R.RATE_DO + R.RATE_SS_AMD)/5 RATE_5WQO,
	(R.RATE_PH + R.RATE_BOD5 + R.RATE_COD + R.RATE_DO + R.RATE_SS_AMD + CASE WHEN R.RATE_NH4 IS NULL THEN R.RATE_NH3_AAM ELSE R.RATE_NH4 END)/6 RATE_6WQO
FROM	WPG.RW_WQO_SUM	R
JOIN	WPG.RSTATION	ST	ON	R.SITE_ID 	= ST.SITE_ID
JOIN	WPG.RIVER		RI	ON	ST.R_ID		= RI.R_ID
JOIN	WPG.WPCO_SZ		SZ	ON	ST.SZ_ID		= SZ.SZ_ID
JOIN	WPG.WPCO_WCZ		CZ	ON	SZ.WCZ_ID	= CZ.WCZ_ID 
JOIN	WPG.TEN_ZONE		TZ	ON	CZ.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_WQO_SUM_R0 source

CREATE VIEW WPG.RIVER_WATER_WQO_SUM_R0 AS
SELECT	TZ.ZONE_NAME		ZONE,
	RI.RIVER_NAME		RIVER,
	R.YR,
	R.TOTAL,
	R.MIN_PH,
	R.MAX_PH,
	R.N_PH,
	R.M_PH,
	R.RATE_PH,
	R.N_BOD5,
	R.MAX_BOD5,
	R.M_BOD5,
	R.RATE_BOD5,
	R.MAX_COD,
	R.N_COD,
	R.M_COD,
	R.RATE_COD,
	R.MIN_DO,
	R.N_DO,
	R.M_DO,
	R.RATE_DO,
	R.MAX_AMD_SS,
	R.N_SS,
	R.AMD_SS,
	R.RATE_SS_AMD,
	R.MAX_NH4,
	R.N_NH4,
	R.M_NH4,
	R.RATE_NH4,
	R.MAX_AAM_NH3,
	R.NH3_AAM,
	R.RATE_NH3_AAM,
	R.MAX_5MD_EC,
	R.N_EC_5MD,
	R.M_EC_5MD,
	R.RATE_EC_5MD,
	R.MAX_5GM_EC,
	R.N_EC_5GM,
	R.M_EC_5GM,
	R.RATE_EC_5GM,
	R.MAX_AGM_EC,
	R.EC_AGM,
	R.RATE_EC_AGM,
	(R.RATE_PH + R.RATE_BOD5 + R.RATE_COD + R.RATE_DO)* 0.25 RATE_4WQO,
	(R.RATE_PH + R.RATE_BOD5 + R.RATE_COD + R.RATE_DO + R.RATE_SS_AMD)* 0.2 RATE_5WQO
FROM	WPG.RW_WQO_SUM_R0	R
JOIN	WPG.RIVER		RI	ON	R.R_ID		= RI.R_ID
JOIN	WPG.TEN_ZONE		TZ	ON	RI.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RIVER_WATER_WQO_SUM_R1 source

CREATE VIEW WPG.RIVER_WATER_WQO_SUM_R1 AS
SELECT	TZ.ZONE_NAME		ZONE,
	RI.RIVER_NAME		RIVER,
	R.YR,
	R.TOTAL,
	R.MIN_PH,
	R.MAX_PH,
	R.N_PH,
	R.M_PH,
	R.RATE_PH,
	R.N_BOD5,
	R.MAX_BOD5,
	R.M_BOD5,
	R.RATE_BOD5,
	R.MAX_COD,
	R.N_COD,
	R.M_COD,
	R.RATE_COD,
	R.MIN_DO,
	R.N_DO,
	R.M_DO,
	R.RATE_DO,
	R.MAX_AMD_SS,
	R.N_SS,
	R.AMD_SS,
	R.RATE_SS_AMD,
	R.MAX_NH4,
	R.N_NH4,
	R.M_NH4,
	R.RATE_NH4,
	R.MAX_AAM_NH3,
	R.NH3_AAM,
	R.RATE_NH3_AAM,
	(R.RATE_PH + R.RATE_BOD5 + R.RATE_COD + R.RATE_DO)/4 RATE_4WQO,
	(R.RATE_PH + R.RATE_BOD5 + R.RATE_COD + R.RATE_DO + R.RATE_SS_AMD)/5 RATE_5WQO,
	(R.RATE_PH + R.RATE_BOD5 + R.RATE_COD + R.RATE_DO + R.RATE_SS_AMD + CASE WHEN R.RATE_NH4 IS NULL THEN R.RATE_NH3_AAM ELSE R.RATE_NH4 END)/6 RATE_6WQO
FROM	WPG.RW_WQO_SUM_R1	R
JOIN	WPG.RIVER		RI	ON	R.R_ID		= RI.R_ID
JOIN	WPG.TEN_ZONE		TZ	ON	RI.ZONE_ID	= TZ.ZONE_ID;


-- WPG.RW_5EC source

CREATE VIEW WPG.RW_5EC AS 
SELECT	A.RWVISIT_ID,
	A.SITE_ID,
	A.MDATE,
	A.SAMPLE_NO,
	A.EC		EC1,
	B.EC		EC2,
	C.EC		EC3,
	D.EC		EC4,
	E.EC		EC5,
	CASE WHEN CASE WHEN A.EC <= B.EC THEN 1 ELSE 0 END + CASE WHEN A.EC <= C.EC THEN 1 ELSE 0 END + CASE WHEN A.EC <= D.EC THEN 1 ELSE 0 END + CASE WHEN A.EC <= E.EC THEN 1 ELSE 0 END   = 2 THEN A.EC
		 WHEN CASE WHEN B.EC < A.EC THEN 1 ELSE 0 END + CASE WHEN B.EC <= C.EC THEN 1 ELSE 0 END + CASE WHEN B.EC <= D.EC THEN 1 ELSE 0 END + CASE WHEN B.EC <= E.EC THEN 1 ELSE 0 END   = 2 THEN B.EC
		 WHEN CASE WHEN C.EC < A.EC THEN 1 ELSE 0 END + CASE WHEN C.EC < B.EC THEN 1 ELSE 0 END + CASE WHEN C.EC <= D.EC THEN 1 ELSE 0 END + CASE WHEN C.EC <= E.EC THEN 1 ELSE 0 END   = 2 THEN C.EC
		 WHEN CASE WHEN D.EC < A.EC THEN 1 ELSE 0 END + CASE WHEN D.EC < B.EC THEN 1 ELSE 0 END + CASE WHEN D.EC < C.EC THEN 1 ELSE 0 END + CASE WHEN D.EC <= E.EC THEN 1 ELSE 0 END   = 2 THEN D.EC
		ELSE E.EC END	EC_5MD,		
	EXP((LOG(CASE A.EC WHEN 0 THEN 1 ELSE A.EC END)
	+ LOG(CASE B.EC WHEN 0 THEN 1 ELSE B.EC END)
	+ LOG(CASE C.EC WHEN 0 THEN 1 ELSE C.EC END)
	+ LOG(CASE D.EC WHEN 0 THEN 1 ELSE D.EC END)
	+ LOG(CASE E.EC WHEN 0 THEN 1 ELSE E.EC END))/5)		EC_5GM
FROM 	WPG.RW_VISIT_EC		A
JOIN	WPG.RW_VISIT_EC		B	ON	A.SITE_ID = B.SITE_ID AND A.R_DATE = B.R_DATE + 1 AND DATEDIFF(DD, B.MDATE, A.MDATE) <=92
JOIN	WPG.RW_VISIT_EC		C	ON	A.SITE_ID = C.SITE_ID AND A.R_DATE = C.R_DATE + 2 AND DATEDIFF(DD, C.MDATE, B.MDATE) <=92
JOIN	WPG.RW_VISIT_EC		D	ON	A.SITE_ID = D.SITE_ID AND A.R_DATE = D.R_DATE + 3 AND DATEDIFF(DD, D.MDATE, C.MDATE) <=92
JOIN	WPG.RW_VISIT_EC		E	ON	A.SITE_ID = E.SITE_ID AND A.R_DATE = E.R_DATE + 4 AND DATEDIFF(DD, E.MDATE, D.MDATE) <=92;


-- WPG.RW_ALERT source

CREATE VIEW WPG.RW_ALERT
AS
SELECT          A.MDATE, A.STIME, A.SAMPLE_NO, A.PARAMETER, A.MEASURE, B.MEASURE AS LIMIT, B.DISP_STATS, B.TOTAL, 
                            B.YR, B.SITE_ID, B.DISP_SEQ, A.RWVISIT_ID
FROM              WPG.RW_TESTING AS A INNER JOIN
                            WPG.RW_CRITERIA AS B ON A.SITE_ID = B.SITE_ID AND A.PARAMETER = B.PARAMETER AND YEAR(A.MDATE) 
                            - 1 = B.YR
WHERE          (B.DISP_SEQ IN (7, 8)) AND (B.PARAMETER IN ('SAL', 'COND', 'DO', 'DOS', 'PH', 'TEMPER', 'SS', 'TS', 'TVS', 'TURB', 
                            'BOD5', 'COD', 'TOC', 'OIL', 'EC', 'FC', 'NH4', 'NO2', 'NO3', 'TKNS', 'TKNSP', 'PO4', 'TPS', 'TPSP', 'SIL', 'TCYN', 
                            'DETERG', 'FL', 'CL', 'H2S', 'SULP', 'SSP', 'CHL', 'PHEO', 'AL', 'SB', 'ARSENIC', 'BA', 'BE', 'B', 'CD', 'CR', 'CU', 'FE', 
                            'PB', 'MN', 'HG', 'MO', 'NI', 'AG', 'TL', 'V', 'ZN', 'DEPTH', 'VEL', 'FLOW', 'BOD5_PT', 'NH4_PT', 'DOS_PT', 'WQI_PT', 
                            'NH3', 'TIN', 'TN')) AND (A.MEASURE > B.MEASURE) OR
                            (B.DISP_SEQ IN (4, 5)) AND (B.PARAMETER IN ('DO', 'DOS', 'PH')) AND (A.MEASURE < B.MEASURE);


-- WPG.RW_ALERT_A source

CREATE VIEW [WPG].[RW_ALERT_A] AS
SELECT          A.MDATE, A.STIME, A.SAMPLE_NO, A.PARAMETER, A.L_MEASURE, A.MEASURE, 
				B.MEASURE AS LIMIT, B.DISP_STATS, B.TOTAL, B.YR, B.SITE_ID, B.DISP_SEQ, A.RWVISIT_ID,
				SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM              WPG.RW_TESTING_A AS A INNER JOIN
                            WPG.RW_CRITERIA AS B ON A.SITE_ID = B.SITE_ID AND A.PARAMETER = B.PARAMETER AND 
                            YEAR(A.MDATE) - 1 = B.YR
WHERE          (B.DISP_SEQ IN (7,8)) AND (B.PARAMETER IN ('SAL', 'COND', 'DO', 'DOS', 'PH', 'TEMPER', 'SS', 'TS', 'TVS', 'TURB', 
                            'BOD5', 'COD', 'TOC', 'OIL', 'EC', 'FC', 'NH4', 'NO2', 'NO3', 'TKNS', 'TKNSP', 'PO4', 'TPS', 'TPSP', 'SIL', 'TCYN', 
                            'DETERG', 'FL', 'CL', 'H2S', 'SULP', 'SSP', 'CHL', 'PHEO', 'AL', 'SB', 'ARSENIC', 'BA', 'BE','B', 'CD', 'CR', 'CU', 'FE', 
                            'PB', 'MN', 'HG', 'MO', 'NI', 'AG', 'TL', 'V', 'ZN', 'DEPTH', 'VEL', 'FLOW', 'BOD5_PT', 'NH4_PT', 'DOS_PT', 'WQI_PT', 
                            'NH3', 'TIN', 'TN')) AND (A.MEASURE > B.MEASURE) OR
                            (B.DISP_SEQ IN (4,5)) AND (B.PARAMETER IN ('DO', 'DOS', 'PH')) AND (A.MEASURE < B.MEASURE);


-- WPG.RW_CRITERIA source

CREATE VIEW WPG.RW_CRITERIA AS
SELECT          DISP_STATS, TOTAL, YR, PARAMETER, MEASURE, SITE_ID, 
                            DISP_SEQ
FROM              (SELECT          DISP_STATS, TOTAL, YR, SITE_ID, DISP_SEQ, 
                                                        CAST(SAL AS float) SAL, CAST(COND AS float) COND, CAST(DO AS float) DO, CAST(DOS AS float) DOS, 
                                                        CAST(PH AS float) PH, CAST(TEMPER AS float) TEMPER, CAST(SS AS float) SS, CAST(TS AS float) TS, 
                                                        CAST(TVS AS float) TVS, CAST(TURB AS float) TURB, CAST(BOD5 AS float) BOD5, CAST(COD AS float) 
                                                        COD, CAST(TOC AS float) TOC, CAST(OIL AS float) OIL, CAST(EC AS float) EC, CAST(FC AS float) FC, 
                                                        CAST(NH4 AS float) NH4, CAST(NO2 AS float) NO2, CAST(NO3 AS float) NO3, CAST(TKNS AS float) TKNS, 
                                                        CAST(TKNSP AS float) TKNSP, CAST(PO4 AS float) PO4, CAST(TPS AS float) TPS, CAST(TPSP AS float) 
                                                        TPSP, CAST(SIL AS float) SIL, CAST(TCYN AS float) TCYN, CAST(DETERG AS float) DETERG, 
                                                        CAST(FL AS float) FL, CAST(CL AS float) CL, CAST(H2S AS float) H2S, CAST(SULP AS float) SULP, 
                                                        CAST(SSP AS float) SSP, CAST(CHL AS float) CHL, CAST(PHEO AS float) PHEO, CAST(AL AS float) AL, 
                                                        CAST(SB AS float) SB, CAST(ARSENIC AS float) ARSENIC, CAST(BA AS float) BA, CAST(BE AS float) BE, 
                                                        CAST(B AS float) B, CAST(CD AS float) CD, CAST(CR AS float) CR, CAST(CU AS float) CU, CAST(FE AS float) 
                                                        FE, CAST(PB AS float) PB, CAST(MN AS float) MN, CAST(HG AS float) HG, CAST(MO AS float) MO, 
                                                        CAST(NI AS float) NI, CAST(AG AS float) AG, CAST(TL AS float) TL, CAST(V AS float) V, CAST(ZN AS float) 
                                                        ZN, CAST(DEPTH AS float) DEPTH, CAST(VEL AS float) VEL, CAST(FLOW AS float) FLOW, 
                                                        CAST(BOD5_PT AS float) BOD5_PT, CAST(NH4_PT AS float) NH4_PT, CAST(DOS_PT AS float) DOS_PT, 
                                                        CAST(WQI_PT AS float) WQI_PT, CAST(NH3 AS float) NH3, CAST(TIN AS float) TIN, CAST(TN AS float) 
                                                        TN
                            FROM               WPG.RW_STATISTICS10A) AS p UNPIVOT (MEASURE FOR PARAMETER IN (SAL, COND, DO, 
                            DOS, PH, TEMPER, SS, TS, TVS, TURB, BOD5, COD, TOC, OIL, EC, FC, NH4, NO2, NO3, TKNS, TKNSP, PO4, TPS, 
                            TPSP, SIL, TCYN, DETERG, FL, CL, H2S, SULP, SSP, CHL, PHEO, AL, SB, ARSENIC, BA, BE, B, CD, CR, CU, FE, PB, 
                            MN, HG, MO, NI, AG, TL, V, ZN, DEPTH, VEL, FLOW, BOD5_PT, NH4_PT, DOS_PT, WQI_PT, NH3, TIN, TN)) AS unpvt;


-- WPG.RW_CRITERIA_MM source

CREATE VIEW [WPG].[RW_CRITERIA_MM] AS	
SELECT TOTAL, YR, PARAMETER, SITE_ID, [MIN] MINIMUM, [AVG] AVERAGE, [MEDIAN] MEDIAN, [MAX] MAXIMUM
FROM (SELECT DISP_STATS, TOTAL, YR, PARAMETER, MEASURE, SITE_ID
FROM WPG.RW_CRITERIA) AS P
PIVOT( SUM(MEASURE)       
	FOR DISP_STATS IN ([MIN],[AVG],[MEDIAN],[MAX])
	) AS PVT;


-- WPG.RW_CRITERIA_PCTL source

CREATE VIEW [WPG].[RW_CRITERIA_PCTL] AS	
SELECT TOTAL, YR, PARAMETER, SITE_ID, [AVG] AVERAGE, [MIN] MINIMUM, [5 PERCENTILE] [05_PCTL], [10 PERCENTILE] [10_PCTL], [MEDIAN] MEDIAN, [90 PERCENTILE] [90_PCTL], [95 PERCENTILE] [95_PCTL], [MAX] MAXIMUM
FROM (SELECT DISP_STATS, TOTAL, YR, PARAMETER, MEASURE, SITE_ID
FROM WPG.RW_CRITERIA) AS P
PIVOT( SUM(MEASURE)       
	FOR DISP_STATS IN ([AVG],[MIN],[5 PERCENTILE],[10 PERCENTILE],[MEDIAN],[90 PERCENTILE],[95 PERCENTILE],[MAX])
	) AS PVT;


-- WPG.RW_DATA1 source

CREATE VIEW [WPG].[RW_DATA1] AS				
SELECT	
	WQ.RWVISIT_ID,			
	WQ.SITE_ID,			
	WQ.MDATE,			
	WQ.STIME,			
	WQ.SAMPLE_NO,			
	FI.L_SAL,			
	FI.SAL,			
	FI.L_COND,			
	FI.COND,			
	FI.L_DO,			
	FI.DO,			
	FI.L_DOS,			
	FI.DOS,			
	FI.L_PH,			
	FI.PH,			
	FI.TEMPER,			
	GN.L_SS,			
	GN.SS,			
	GN.L_TS,			
	GN.TS,			
	GN.L_TVS,			
	GN.TVS,			
	FI.L_TURB,			
	FI.TURB,			
	ML.L_BOD5,			
	ML.BOD5,			
	GN.L_COD,			
	GN.COD,			
	GN.L_TOC,			
	GN.TOC,			
	GN.L_OIL,			
	GN.OIL,			
	ML.L_EC,			
	ML.EC,			
	ML.L_FC,			
	ML.FC,			
	GN.L_NH4,			
	GN.NH4,			
	GN.L_NO2,			
	GN.NO2,			
	GN.L_NO3,			
	GN.NO3,			
	GN.L_TKNS,			
	GN.TKNS,			
	GN.L_TKNSP,			
	GN.TKNSP,			
	GN.L_PO4,			
	GN.PO4,			
	GN.L_TPS,			
	GN.TPS,			
	GN.L_TPSP,			
	GN.TPSP,			
	GN.L_SIL,			
	GN.SIL,			
	GN.L_TCYN,			
	GN.TCYN,			
	GN.L_DETERG,			
	GN.DETERG,			
	GN.L_FL,			
	GN.FL,			
	GN.L_CL,			
	GN.CL,			
	GN.L_H2S,			
	GN.H2S,			
	GN.L_SULP,			
	GN.SULP,			
	GN.L_SSP,			
	GN.SSP,			
	GN.L_CHL,			
	GN.CHL,			
	GN.L_PHEO,			
	GN.PHEO,			
	GM.L_AL,			
	GM.AL,			
	GM.L_SB,			
	GM.SB,			
	GM.L_ARSENIC,			
	GM.ARSENIC,			
	GM.L_BA,			
	GM.BA,			
	GM.L_BE,			
	GM.BE,			
	GM.L_B,			
	GM.B,			
	GM.L_CD,			
	GM.CD,			
	GM.L_CR,			
	GM.CR,			
	GM.L_CU,			
	GM.CU,			
	GM.L_FE,			
	GM.FE,			
	GM.L_PB,			
	GM.PB,			
	GM.L_MN,			
	GM.MN,			
	GM.L_HG,			
	GM.HG,			
	GM.L_MO,			
	GM.MO,			
	GM.L_NI,			
	GM.NI,			
	GM.L_AG,			
	GM.AG,			
	GM.L_TL,			
	GM.TL,			
	GM.L_V,			
	GM.V,			
	GM.L_ZN,			
	GM.ZN,			
	FL.DEPTH,			
	FL.WIDTH,			
	FL.VEL,			
	FL.FLOW,			
	WQ.BOD5_PT,			
	WQ.NH4_PT,			
	WQ.DOS_PT,			
	WQ.WQI_PT,			
	WQ.WQI_GRADE,			
	NH.L_NH3,			
	NH.NH3,			
	GN.TIN,			
	GN.TN,			
	FI.WEATHER,			
	FI.COLOR,			
	FI.SMELL,			
	FI.RAINFALL,			
	FI.TIDE			
--	FI.L_NH4	L_NH4_F,		
--	FI.NH4	NH4_F,		
--	FI.L_NH3	L_NH3_F,		
--	FI.NH3	NH3_F,		
FROM	WPG.RW_WQI	WQ		
LEFT OUTER JOIN	WPG.RW_FIELD 	FI 	ON WQ.RWVISIT_ID = FI.RWVISIT_ID	
LEFT OUTER JOIN	WPG.RW_MLAB	ML 	ON WQ.RWVISIT_ID = ML.RWVISIT_ID	
LEFT OUTER JOIN	WPG.RW_GLABM 	GM	ON WQ.RWVISIT_ID = GM.RWVISIT_ID	
LEFT OUTER JOIN	WPG.RW_GLABN_CAL	GN 	ON WQ.RWVISIT_ID = GN.RWVISIT_ID	
LEFT OUTER JOIN	WPG.RW_FLOW_SUM	FL	ON WQ.RWVISIT_ID = FL.RWVISIT_ID	
LEFT OUTER JOIN	WPG.RW_NH3	NH	ON WQ.RWVISIT_ID = NH.RWVISIT_ID;


-- WPG.RW_EPIC_HISTORICAL source

CREATE VIEW WPG.RW_EPIC_HISTORICAL
AS
SELECT          j.ZONE_NAME AS WCZ, K.RIVER_NAME AS RIVER, g.STATNAME, a.MDATE, a.SAMPLE_NO AS SAM_NO, b.TEMPER, 
                            b.L_DO, b.DO, b.L_DOS AS L_DO_SAT, b.DOS AS DO_SAT, b.L_TURB AS L_TURB_F, b.TURB AS TURB_F, 
                            b.L_PH AS L_PH_F, b.PH AS PH_F, b.L_SAL AS L_SAL_F, b.SAL AS SAL_F, b.L_COND AS L_COND_F, 
                            b.COND AS COND_F, f.FLOW AS FLOW_SUM, c.L_FC AS L_F_COLI, c.FC AS F_COLI, c.L_EC AS L_E_COLI, 
                            c.EC AS E_COLI, c.L_BOD5, c.BOD5, e.L_NO2, e.NO2, e.L_NO3, e.NO3, e.L_NH4, e.NH4, e.L_PO4, e.PO4, 
                            e.L_SIL AS L_SIO2, e.SIL AS SIO2, e.L_SS, e.SS, e.L_TKNSP, e.TKNSP, e.L_TPSP, e.TPSP, e.L_TS, e.TS, e.L_TVS, 
                            e.TVS, e.L_COD, e.COD, e.L_TCYN, e.TCYN, e.L_FL, e.FL, e.L_DETERG AS L_DET, e.DETERG AS DET, e.L_TOC, 
                            e.TOC, e.L_OIL, e.OIL, e.L_SSP, e.SSP, e.L_H2S, e.H2S, e.L_CHL, e.CHL, e.L_PHEO, e.PHEO, d.L_B, d.B, d.L_CD, 
                            d.CD, d.L_CU, d.CU, d.L_PB, d.PB, d.L_ZN, d.ZN, d.L_AG, d.AG, d.L_CR, d.CR, d.L_MN, d.MN, d.L_AL, d.AL, 
                            d.L_ARSENIC AS L_ARS, d.ARSENIC AS ARS, d.L_NI, d.NI, d.L_HG, d.HG, d.L_FE, d.FE, e.L_CL, e.CL, d.L_SB, d.SB, 
                            d.L_V, d.V, d.L_BA, d.BA, d.L_BE, d.BE, d.L_TL, d.TL, d.L_MO, d.MO, L.BOD5_PT, L.NH4_PT, L.DOS_PT, L.WQI_PT, 
                            L.WQI_GRADE
FROM              WPG.RW_VISIT AS a LEFT OUTER JOIN
                            WPG.RW_FIELD AS b ON a.RWVISIT_ID = b.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_MLAB AS c ON a.RWVISIT_ID = c.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_GLABM AS d ON a.RWVISIT_ID = d.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_GLABN_CAL AS e ON a.RWVISIT_ID = e.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_FLOW_SUM AS f ON a.RWVISIT_ID = f.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RSTATION AS g ON a.SITE_ID = g.SITE_ID LEFT OUTER JOIN
                            WPG.WPCO_SZ AS h ON g.SZ_ID = h.SZ_ID LEFT OUTER JOIN
                            WPG.WPCO_WCZ AS i ON h.WCZ_ID = i.WCZ_ID LEFT OUTER JOIN
                            WPG.TEN_ZONE AS j ON i.ZONE_ID = j.ZONE_ID LEFT OUTER JOIN
                            WPG.RIVER AS K ON g.R_ID = K.R_ID LEFT OUTER JOIN
                            WPG.RW_WQI AS L ON a.RWVISIT_ID = L.RWVISIT_ID
WHERE          (g.STATNAME IN ('AN1', 'AN2', 'DB1', 'DB2', 'DB3', 'DB5', 'DB6', 'DB8', 'FVR1', 'GR1', 'GR2', 'GR3', 'IN1', 'IN2', 'IN3', 
                            'JR11', 'JR3', 'JR6', 'KN1', 'KN2', 'KN3', 'KN4', 'KN5', 'KN7', 'KT1', 'KT2', 'KW3', 'KY1', 'MW1', 'MW2', 'MW3', 'MW4', 
                            'MW5', 'PR1', 'PR2', 'PR5', 'PR6', 'PR7', 'PR8', 'RB1', 'RB2', 'RB3', 'TC1', 'TC2', 'TC3', 'TN1', 'TN2', 'TN3', 'TN4', 
                            'TN5', 'TN6', 'TR12', 'TR12B', 'TR12C', 'TR12D', 'TR12E', 'TR12F', 'TR12G', 'TR12H', 'TR12I', 'TR13', 'TR14', 'TR17', 
                            'TR17L', 'TR19I', 'TR19', 'TR19A', 'TR19C', 'TR20B', 'TR23A', 'TR23L', 'TR4', 'TR6', 'TSR1', 'TSR2', 'TW1', 'TW2', 
                            'TW3', 'YL1', 'YL2', 'YL3', 'YL4'));


-- WPG.RW_EPIC_HISTORICAL2 source

CREATE VIEW WPG.RW_EPIC_HISTORICAL2
AS
SELECT          j.ZONE_NAME AS WCZ, K.RIVER_NAME AS RIVER, g.STATNAME, a.MDATE, a.SAMPLE_NO AS SAM_NO, b.TEMPER, 
                            b.L_DO, b.DO, b.L_DOS AS L_DO_SAT, b.DOS AS DO_SAT, b.L_TURB AS L_TURB_F, b.TURB AS TURB_F, 
                            b.L_PH AS L_PH_F, b.PH AS PH_F, b.L_SAL AS L_SAL_F, b.SAL AS SAL_F, b.L_COND AS L_COND_F, 
                            b.COND AS COND_F, f.FLOW AS FLOW_SUM, c.L_FC AS L_F_COLI, c.FC AS F_COLI, c.L_EC AS L_E_COLI, 
                            c.EC AS E_COLI, c.L_BOD5, c.BOD5, e.L_NO2, e.NO2, e.L_NO3, e.NO3, e.L_NH4, e.NH4, e.L_PO4, e.PO4, 
                            e.L_SIL AS L_SIO2, e.SIL AS SIO2, e.L_SS, e.SS, e.L_TKNSP, e.TKNSP, e.L_TPSP, e.TPSP, e.L_TS, e.TS, e.L_TVS, 
                            e.TVS, e.L_COD, e.COD, e.L_TCYN, e.TCYN, e.L_FL, e.FL, e.L_DETERG AS L_DET, e.DETERG AS DET, e.L_TOC, 
                            e.TOC, e.L_OIL, e.OIL, e.L_SSP, e.SSP, e.L_H2S, e.H2S, e.L_CHL, e.CHL, e.L_PHEO, e.PHEO, d.L_B, d.B, d.L_CD, 
                            d.CD, d.L_CU, d.CU, d.L_PB, d.PB, d.L_ZN, d.ZN, d.L_AG, d.AG, d.L_CR, d.CR, d.L_MN, d.MN, d.L_AL, d.AL, 
                            d.L_ARSENIC AS L_ARS, d.ARSENIC AS ARS, d.L_NI, d.NI, d.L_HG, d.HG, d.L_FE, d.FE, e.L_CL, e.CL, d.L_SB, d.SB, 
                            d.L_V, d.V, d.L_BA, d.BA, d.L_BE, d.BE, d.L_TL, d.TL, d.L_MO, d.MO, L.BOD5_PT, L.NH4_PT, L.DOS_PT, L.WQI_PT, 
                            L.WQI_GRADE
FROM              WPG.RW_VISIT AS a LEFT OUTER JOIN
                            WPG.RW_FIELD AS b ON a.RWVISIT_ID = b.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_MLAB AS c ON a.RWVISIT_ID = c.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_GLABM AS d ON a.RWVISIT_ID = d.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_GLABN_CAL AS e ON a.RWVISIT_ID = e.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_FLOW_SUM AS f ON a.RWVISIT_ID = f.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RSTATION AS g ON a.SITE_ID = g.SITE_ID LEFT OUTER JOIN
                            WPG.WPCO_SZ AS h ON g.SZ_ID = h.SZ_ID LEFT OUTER JOIN
                            WPG.WPCO_WCZ AS i ON h.WCZ_ID = i.WCZ_ID LEFT OUTER JOIN
                            WPG.TEN_ZONE AS j ON i.ZONE_ID = j.ZONE_ID LEFT OUTER JOIN
                            WPG.RIVER AS K ON g.R_ID = K.R_ID LEFT OUTER JOIN
                            WPG.RW_WQI AS L ON a.RWVISIT_ID = L.RWVISIT_ID
WHERE          (g.ACTIVE = 'Y') AND (YEAR(a.MDATE) >= g.ACTIVE_YEAR) AND (a.MDATE < ISNULL(g.END_DATE, GETDATE()));


-- WPG.RW_FIELD_AVG source

CREATE VIEW WPG.RW_FIELD_AVG AS
SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	AVG(FI.TEMPER)	TEMPER_AVG,
	AVG(FI.DO)	DO_AVG,
	AVG(FI.DOS)	DOS_AVG,
	AVG(FI.COND)	COND_AVG,
	AVG(FI.SAL)	SAL_AVG,
	AVG(FI.PH)	PH_AVG,
	AVG(FI.TURB)	TURB_AVG
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_FIELD	FI	ON VI.RWVISIT_ID	= FI.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE);


-- WPG.RW_FIELD_AVG_A source

CREATE VIEW WPG.RW_FIELD_AVG_A AS
SELECT
			SITE_ID,
			YR,
			TOTAL,
			TEMPER_AVG,
	CASE WHEN L_DO_CNT =0 THEN NULL ELSE '<' END	L_DO_AVG,	DO_AVG,
	CASE WHEN L_DOS_CNT =0 THEN NULL ELSE '<' END	L_DOS_AVG,	DOS_AVG,
	CASE WHEN L_COND_CNT =0 THEN NULL ELSE '<' END	L_COND_AVG,	COND_AVG,
	CASE WHEN L_SAL_CNT =0 THEN NULL ELSE '<' END	L_SAL_AVG,	SAL_AVG,
	CASE WHEN L_PH_CNT =0 THEN NULL ELSE '<' END	L_PH_AVG,	PH_AVG,
	CASE WHEN L_TURB_CNT =0 THEN NULL ELSE '<' END	L_TURB_AVG,	TURB_AVG
FROM
(SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	AVG(FI.TEMPER)	TEMPER_AVG,
	AVG(FI.DO)	DO_AVG,
	AVG(FI.DOS)	DOS_AVG,
	AVG(FI.COND)	COND_AVG,
	AVG(FI.SAL)	SAL_AVG,
	AVG(FI.PH)	PH_AVG,
	AVG(FI.TURB)	TURB_AVG,
	COUNT(FI.L_DO)	L_DO_CNT,
	COUNT(FI.L_DOS)	L_DOS_CNT,
	COUNT(FI.L_COND)	L_COND_CNT,
	COUNT(FI.L_SAL)	L_SAL_CNT,
	COUNT(FI.L_PH)	L_PH_CNT,
	COUNT(FI.L_TURB)	L_TURB_CNT
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_FIELD	FI	ON VI.RWVISIT_ID	= FI.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE)) D;


-- WPG.RW_FIELD_MAX source

CREATE VIEW WPG.RW_FIELD_MAX AS
SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	MAX(FI.TEMPER)	TEMPER_MAX,
	MAX(FI.DO)	DO_MAX,
	MAX(FI.DOS)	DOS_MAX,
	MAX(FI.COND)	COND_MAX,
	MAX(FI.SAL)	SAL_MAX,
	MAX(FI.PH)	PH_MAX,
	MAX(FI.TURB)	TURB_MAX
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_FIELD	FI	ON VI.RWVISIT_ID 	= FI.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE);


-- WPG.RW_FIELD_MAX_A source

CREATE VIEW WPG.RW_FIELD_MAX_A AS
SELECT
			SITE_ID,
			YR,
			TOTAL,
			TEMPER_MAX,
	CASE WHEN L_DO_CNT = TOTAL THEN '<' ELSE NULL END	L_DO_MAX,	DO_MAX,
	CASE WHEN L_DOS_CNT = TOTAL THEN '<' ELSE NULL END	L_DOS_MAX,	DOS_MAX,
	CASE WHEN L_COND_CNT = TOTAL THEN '<' ELSE NULL END	L_COND_MAX,	COND_MAX,
	CASE WHEN L_SAL_CNT = TOTAL THEN '<' ELSE NULL END	L_SAL_MAX,	SAL_MAX,
	CASE WHEN L_PH_CNT = TOTAL THEN '<' ELSE NULL END	L_PH_MAX,	PH_MAX,
	CASE WHEN L_TURB_CNT = TOTAL THEN '<' ELSE NULL END	L_TURB_MAX,	TURB_MAX
FROM
(SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	MAX(FI.TEMPER)	TEMPER_MAX,
	MAX(FI.DO)	DO_MAX,
	MAX(FI.DOS)	DOS_MAX,
	MAX(FI.COND)	COND_MAX,
	MAX(FI.SAL)	SAL_MAX,
	MAX(FI.PH)	PH_MAX,
	MAX(FI.TURB)	TURB_MAX,
	COUNT(FI.L_DO)	L_DO_CNT,
	COUNT(FI.L_DOS)	L_DOS_CNT,
	COUNT(FI.L_COND)	L_COND_CNT,
	COUNT(FI.L_SAL)	L_SAL_CNT,
	COUNT(FI.L_PH)	L_PH_CNT,
	COUNT(FI.L_TURB)	L_TURB_CNT
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_FIELD	FI	ON VI.RWVISIT_ID	= FI.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE)) D;


-- WPG.RW_FIELD_MED source

CREATE VIEW WPG.RW_FIELD_MED AS
SELECT	SITE_ID,
	YEAR(MDATE)	YYYY,
	YR,
	COUNT(*)	TOTAL,
	AVG(CASE WHEN R_TEMPER * 2 IN (N_TEMPER, N_TEMPER + 1, N_TEMPER + 2) THEN TEMPER ELSE NULL END)	TEMPER_MED,
	AVG(CASE WHEN R_DO * 2 IN (N_DO, N_DO + 1, N_DO + 2) THEN DO ELSE NULL END)			DO_MED,
	AVG(CASE WHEN R_DOS * 2 IN (N_DOS, N_DOS + 1, N_DOS + 2) THEN DOS ELSE NULL END)		DOS_MED,
	AVG(CASE WHEN R_COND * 2 IN (N_COND, N_COND + 1, N_COND + 2) THEN COND ELSE NULL END)		COND_MED,
	AVG(CASE WHEN R_SAL * 2 IN (N_SAL, N_SAL + 1, N_SAL + 2) THEN SAL ELSE NULL END)		SAL_MED,
	AVG(CASE WHEN R_PH * 2 IN (N_PH, N_PH + 1, N_PH + 2) THEN PH ELSE NULL END)			PH_MED,
	AVG(CASE WHEN R_TURB * 2 IN (N_TURB, N_TURB + 1, N_TURB + 2) THEN TURB ELSE NULL END)		TURB_MED
FROM	(
	SELECT	A.RWVISIT_ID,
		A.SITE_ID,
		A.MDATE,
		A.YR,
		A.TEMPER,
		A.DO,
		A.DOS,
		A.COND,
		A.SAL,
		A.PH,
		A.TURB,
		COUNT(CASE WHEN A.TEMPER < B.TEMPER THEN 1
			WHEN A.TEMPER = B.TEMPER AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TEMPER,
		COUNT(B.TEMPER)			N_TEMPER,
		COUNT(CASE WHEN A.DO < B.DO THEN 1
			WHEN A.DO = B.DO AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_DO,
		COUNT(B.DO)			N_DO,
		COUNT(CASE WHEN A.DOS < B.DOS THEN 1
			WHEN A.DOS = B.DOS AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_DOS,
		COUNT(B.DOS)			N_DOS,
		COUNT(CASE WHEN A.COND < B.COND THEN 1
			WHEN A.COND = B.COND AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_COND,
		COUNT(B.COND)			N_COND,
		COUNT(CASE WHEN A.SAL < B.SAL THEN 1
			WHEN A.SAL = B.SAL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_SAL,
		COUNT(B.SAL)			N_SAL,
		COUNT(CASE WHEN A.PH < B.PH THEN 1
			WHEN A.PH = B.PH AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_PH,
		COUNT(B.PH)			N_PH,
		COUNT(CASE WHEN A.TURB < B.TURB THEN 1
			WHEN A.TURB = B.TURB AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TURB,
		COUNT(B.TURB)			N_TURB
	FROM	(SELECT	VI.RWVISIT_ID, 
			VI.SITE_ID,
			VI.MDATE, 
			YEAR(VI.MDATE)	YR, 
			NH.TEMPER, 
			NH.DO,
			NH.DOS, 
			NH.COND, 
			NH.SAL, 
			NH.PH, 
			NH.TURB
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_FIELD	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	A
	JOIN	(SELECT	VI.RWVISIT_ID, 
			VI.SITE_ID, 
			YEAR(VI.MDATE)	YR, 
			NH.TEMPER, 
			NH.DO, 
			NH.DOS, 
			NH.COND, 
			NH.SAL, 
			NH.PH, 
			NH.TURB
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_FIELD	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	B
		ON A.SITE_ID = B.SITE_ID AND A.YR = B.YR
	GROUP BY 	A.RWVISIT_ID, A.SITE_ID, A.MDATE, A.YR, A.TEMPER, A.DO, A.DOS, A.COND, A.SAL, A.PH, A.TURB
	) C
GROUP BY SITE_ID, YR, YEAR(MDATE);


-- WPG.RW_FIELD_MED_A source

CREATE VIEW WPG.RW_FIELD_MED_A AS
SELECT
	D.SITE_ID,
	D.YR,
	D.TOTAL,
	TEMPER_MED,
	CASE WHEN (L_DO_CNT *2 > D.TOTAL) OR (L_DO_CNT *2 = D.TOTAL AND DO_MED = DO_MED_U) THEN '<' ELSE NULL END	L_DO_MED,	DO_MED,
	CASE WHEN (L_DOS_CNT *2 > D.TOTAL) OR (L_DOS_CNT *2 = D.TOTAL AND DOS_MED = DOS_MED_U) THEN '<' ELSE NULL END	L_DOS_MED,	DOS_MED,
	CASE WHEN (L_COND_CNT *2 > D.TOTAL) OR (L_COND_CNT *2 = D.TOTAL AND COND_MED = COND_MED_U) THEN '<' ELSE NULL END	L_COND_MED,	COND_MED,
	CASE WHEN (L_SAL_CNT *2 > D.TOTAL) OR (L_SAL_CNT *2 = D.TOTAL AND SAL_MED = SAL_MED_U) THEN '<' ELSE NULL END	L_SAL_MED,	SAL_MED,
	CASE WHEN (L_PH_CNT *2 > D.TOTAL) OR (L_PH_CNT *2 = D.TOTAL AND PH_MED = PH_MED_U) THEN '<' ELSE NULL END	L_PH_MED,	PH_MED,
	CASE WHEN (L_TURB_CNT *2 > D.TOTAL) OR (L_TURB_CNT *2 = D.TOTAL AND TURB_MED = TURB_MED_U) THEN '<' ELSE NULL END	L_TURB_MED,	TURB_MED
FROM
(SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	COUNT(FI.L_DO)	L_DO_CNT,
	COUNT(FI.L_DOS)	L_DOS_CNT,
	COUNT(FI.L_COND)	L_COND_CNT,
	COUNT(FI.L_SAL)	L_SAL_CNT,
	COUNT(FI.L_PH)	L_PH_CNT,
	COUNT(FI.L_TURB)	L_TURB_CNT
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_FIELD	FI	ON VI.RWVISIT_ID	= FI.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE)) D
JOIN
(SELECT	SITE_ID,
	YEAR(MDATE)	YYYY,
	YR,
	COUNT(*)	TOTAL,
	AVG(CASE WHEN R_TEMPER * 2 IN (N_TEMPER, N_TEMPER + 1, N_TEMPER + 2) THEN TEMPER ELSE NULL END)	TEMPER_MED,
	AVG(CASE WHEN R_DO * 2 IN (N_DO, N_DO + 1, N_DO + 2) THEN DO ELSE NULL END)			DO_MED,
	AVG(CASE WHEN R_DOS * 2 IN (N_DOS, N_DOS + 1, N_DOS + 2) THEN DOS ELSE NULL END)		DOS_MED,
	AVG(CASE WHEN R_COND * 2 IN (N_COND, N_COND + 1, N_COND + 2) THEN COND ELSE NULL END)		COND_MED,
	AVG(CASE WHEN R_SAL * 2 IN (N_SAL, N_SAL + 1, N_SAL + 2) THEN SAL ELSE NULL END)		SAL_MED,
	AVG(CASE WHEN R_PH * 2 IN (N_PH, N_PH + 1, N_PH + 2) THEN PH ELSE NULL END)			PH_MED,
	AVG(CASE WHEN R_TURB * 2 IN (N_TURB, N_TURB + 1, N_TURB + 2) THEN TURB ELSE NULL END)		TURB_MED,
   	MAX(CASE WHEN R_TEMPER * 2 IN (N_TEMPER, N_TEMPER + 1, N_TEMPER + 2) THEN TEMPER ELSE NULL END)	TEMPER_MED_U,
	MAX(CASE WHEN R_DO * 2 IN (N_DO, N_DO + 1, N_DO + 2) THEN DO ELSE NULL END)			DO_MED_U,
	MAX(CASE WHEN R_DOS * 2 IN (N_DOS, N_DOS + 1, N_DOS + 2) THEN DOS ELSE NULL END)		DOS_MED_U,
	MAX(CASE WHEN R_COND * 2 IN (N_COND, N_COND + 1, N_COND + 2) THEN COND ELSE NULL END)		COND_MED_U,
	MAX(CASE WHEN R_SAL * 2 IN (N_SAL, N_SAL + 1, N_SAL + 2) THEN SAL ELSE NULL END)		SAL_MED_U,
	MAX(CASE WHEN R_PH * 2 IN (N_PH, N_PH + 1, N_PH + 2) THEN PH ELSE NULL END)			PH_MED_U,
	MAX(CASE WHEN R_TURB * 2 IN (N_TURB, N_TURB + 1, N_TURB + 2) THEN TURB ELSE NULL END)		TURB_MED_U
    FROM	(
	SELECT	A.RWVISIT_ID,
		A.SITE_ID,
		A.MDATE,
		A.YR,
		A.TEMPER,
		A.DO,
		A.DOS,
		A.COND,
		A.SAL,
		A.PH,
		A.TURB,
		COUNT(CASE WHEN A.TEMPER < B.TEMPER THEN 1
			WHEN A.TEMPER = B.TEMPER AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TEMPER,
		COUNT(B.TEMPER)			N_TEMPER,
		COUNT(CASE WHEN A.DO < B.DO THEN 1
			WHEN A.DO = B.DO AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_DO,
		COUNT(B.DO)			N_DO,
		COUNT(CASE WHEN A.DOS < B.DOS THEN 1
			WHEN A.DOS = B.DOS AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_DOS,
		COUNT(B.DOS)			N_DOS,
		COUNT(CASE WHEN A.COND < B.COND THEN 1
			WHEN A.COND = B.COND AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_COND,
		COUNT(B.COND)			N_COND,
		COUNT(CASE WHEN A.SAL < B.SAL THEN 1
			WHEN A.SAL = B.SAL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_SAL,
		COUNT(B.SAL)			N_SAL,
		COUNT(CASE WHEN A.PH < B.PH THEN 1
			WHEN A.PH = B.PH AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_PH,
		COUNT(B.PH)			N_PH,
		COUNT(CASE WHEN A.TURB < B.TURB THEN 1
			WHEN A.TURB = B.TURB AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TURB,
		COUNT(B.TURB)			N_TURB
	FROM	(SELECT	VI.RWVISIT_ID, 
			VI.SITE_ID,
			VI.MDATE, 
			YEAR(VI.MDATE)	YR, 
			NH.TEMPER, 
			NH.DO,
			NH.DOS, 
			NH.COND, 
			NH.SAL, 
			NH.PH, 
			NH.TURB
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_FIELD	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	A
	JOIN	(SELECT	VI.RWVISIT_ID, 
			VI.SITE_ID, 
			YEAR(VI.MDATE)	YR, 
			NH.TEMPER, 
			NH.DO, 
			NH.DOS, 
			NH.COND, 
			NH.SAL, 
			NH.PH, 
			NH.TURB
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_FIELD	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	B
		ON A.SITE_ID = B.SITE_ID AND A.YR = B.YR
	GROUP BY 	A.RWVISIT_ID, A.SITE_ID, A.MDATE, A.YR, A.TEMPER, A.DO, A.DOS, A.COND, A.SAL, A.PH, A.TURB
	) C
    GROUP BY SITE_ID, YR, YEAR(MDATE)) E
ON   D.SITE_ID = E.SITE_ID AND D.YR = E.YR;


-- WPG.RW_FIELD_MIN source

CREATE VIEW WPG.RW_FIELD_MIN AS
SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	MIN(FI.TEMPER)	TEMPER_MIN,
	MIN(FI.DO)	DO_MIN,
	MIN(FI.DOS)	DOS_MIN,
	MIN(FI.COND)	COND_MIN,
	MIN(FI.SAL)	SAL_MIN,
	MIN(FI.PH)	PH_MIN,
	MIN(FI.TURB)	TURB_MIN
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_FIELD	FI	ON VI.RWVISIT_ID 	= FI.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE);


-- WPG.RW_FIELD_MIN_A source

CREATE VIEW WPG.RW_FIELD_MIN_A AS
SELECT
			SITE_ID,
			YR,
			TOTAL,
			TEMPER_MIN,
	CASE WHEN L_DO_CNT =0 THEN NULL ELSE '<' END	L_DO_MIN,	DO_MIN,
	CASE WHEN L_DOS_CNT =0 THEN NULL ELSE '<' END	L_DOS_MIN,	DOS_MIN,
	CASE WHEN L_COND_CNT =0 THEN NULL ELSE '<' END	L_COND_MIN,	COND_MIN,
	CASE WHEN L_SAL_CNT =0 THEN NULL ELSE '<' END	L_SAL_MIN,	SAL_MIN,
	CASE WHEN L_PH_CNT =0 THEN NULL ELSE '<' END	L_PH_MIN,	PH_MIN,
	CASE WHEN L_TURB_CNT =0 THEN NULL ELSE '<' END	L_TURB_MIN,	TURB_MIN
FROM
(SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	MIN(FI.TEMPER)	TEMPER_MIN,
	MIN(FI.DO)	DO_MIN,
	MIN(FI.DOS)	DOS_MIN,
	MIN(FI.COND)	COND_MIN,
	MIN(FI.SAL)	SAL_MIN,
	MIN(FI.PH)	PH_MIN,
	MIN(FI.TURB)	TURB_MIN,
	COUNT(FI.L_DO)	L_DO_CNT,
	COUNT(FI.L_DOS)	L_DOS_CNT,
	COUNT(FI.L_COND)	L_COND_CNT,
	COUNT(FI.L_SAL)	L_SAL_CNT,
	COUNT(FI.L_PH)	L_PH_CNT,
	COUNT(FI.L_TURB)	L_TURB_CNT
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_FIELD	FI	ON VI.RWVISIT_ID	= FI.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE)) D;


-- WPG.RW_FIELD_STDEV source

CREATE VIEW WPG.RW_FIELD_STDEV AS
SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)		YR,
	COUNT(*)		TOTAL,
	STDEV(FI.TEMPER)	TEMPER_STDEV,
	STDEV(FI.DO)		DO_STDEV,
	STDEV(FI.DOS)		DOS_STDEV,
	STDEV(FI.COND)		COND_STDEV,
	STDEV(FI.SAL)		SAL_STDEV,
	STDEV(FI.PH)		PH_STDEV,
	STDEV(FI.TURB)		TURB_STDEV
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_FIELD	FI	ON VI.RWVISIT_ID 	= FI.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE);


-- WPG.RW_FLOW_AVG source

CREATE VIEW WPG.RW_FLOW_AVG AS
SELECT
	VI.SITE_ID,
	YEAR(MDATE)	YR,
	AVG(FS.DEPTH)	DEPTH_AVG,
	AVG(FS.VEL)	VEL_AVG,
	SUM(FS.WIDTH)	WIDTH_AVG,
	AVG(FS.FLOW)	FLOW_AVG
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_FLOW_SUM	FS	ON VI.RWVISIT_ID 	= FS.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE);


-- WPG.RW_FLOW_MAX source

CREATE VIEW WPG.RW_FLOW_MAX AS
SELECT
	VI.SITE_ID,
	YEAR(MDATE)	YR,
	MAX(FS.DEPTH)	DEPTH_MAX,
	MAX(FS.VEL)	VEL_MAX,
	SUM(FS.WIDTH)	WIDTH_MAX,
	MAX(FS.FLOW)	FLOW_MAX
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_FLOW_SUM	FS	ON VI.RWVISIT_ID = FS.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE);


-- WPG.RW_FLOW_MED source

CREATE VIEW WPG.RW_FLOW_MED AS
SELECT	SITE_ID,
	YEAR(MDATE)	YYYY,
	YR,
	AVG(CASE WHEN R_DEPTH * 2 IN (N_DEPTH, N_DEPTH + 1, N_DEPTH + 2) THEN DEPTH ELSE NULL END)	DEPTH_MED,
	AVG(CASE WHEN R_VEL * 2 IN (N_VEL, N_VEL + 1, N_VEL + 2) THEN VEL ELSE NULL END)		VEL_MED,
	AVG(CASE WHEN R_WIDTH * 2 IN (N_WIDTH, N_WIDTH + 1, N_WIDTH + 2) THEN WIDTH ELSE NULL END)	WIDTH_MED,
	AVG(CASE WHEN R_FLOW * 2 IN (N_FLOW, N_FLOW + 1, N_FLOW + 2) THEN FLOW ELSE NULL END)		FLOW_MED
FROM	(
	SELECT	A.RWVISIT_ID,
		A.SITE_ID,
		A.MDATE,
		A.YR,
		A.DEPTH,
		A.VEL,
		A.WIDTH,
		A.FLOW,
		COUNT(CASE WHEN A.DEPTH < B.DEPTH THEN 1
			WHEN A.DEPTH = B.DEPTH AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_DEPTH,
		COUNT(B.DEPTH)		N_DEPTH,
		COUNT(CASE WHEN A.VEL < B.VEL THEN 1
			WHEN A.VEL = B.VEL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_VEL,
		COUNT(B.VEL)		N_VEL,
		COUNT(CASE WHEN A.WIDTH < B.WIDTH THEN 1
			WHEN A.WIDTH = B.WIDTH AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_WIDTH,
		COUNT(B.WIDTH)		N_WIDTH,
		COUNT(CASE WHEN A.FLOW < B.FLOW THEN 1
			WHEN A.FLOW = B.FLOW AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_FLOW,
		COUNT(B.FLOW)			N_FLOW
	FROM	(SELECT	VI.RWVISIT_ID, 
			VI.SITE_ID,
			VI.MDATE, 
			YEAR(VI.MDATE)	YR, 
			NH.DEPTH, 
			NH.VEL, 
			NH.WIDTH, 
			NH.FLOW
		FROM	WPG.RW_VISIT		VI	
		LEFT OUTER JOIN	WPG.RW_FLOW_SUM	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	A
	JOIN	(SELECT	VI.RWVISIT_ID, 
			VI.SITE_ID, 
			YEAR(VI.MDATE)	YR, 
			NH.DEPTH, 
			NH.VEL, 
			NH.WIDTH, 
			NH.FLOW
		FROM	WPG.RW_VISIT		VI	
		LEFT OUTER JOIN	WPG.RW_FLOW_SUM	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	B
	ON A.SITE_ID = B.SITE_ID AND A.YR = B.YR
	GROUP BY 	A.RWVISIT_ID, A.SITE_ID, A.MDATE, A.YR, A.DEPTH, A.VEL, A.WIDTH, A.FLOW
	) C
GROUP BY SITE_ID, YEAR(MDATE), YR;


-- WPG.RW_FLOW_MIN source

CREATE VIEW WPG.RW_FLOW_MIN AS
SELECT
	VI.SITE_ID,
	YEAR(MDATE)	YR,
	MIN(FS.DEPTH)	DEPTH_MIN,
	MIN(FS.VEL)	VEL_MIN,
	SUM(FS.WIDTH)	WIDTH_MIN,
	MIN(FS.FLOW)	FLOW_MIN
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_FLOW_SUM	FS	ON VI.RWVISIT_ID = FS.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE);


-- WPG.RW_FLOW_STDEV source

CREATE VIEW WPG.RW_FLOW_STDEV AS
SELECT
	VI.SITE_ID,
	YEAR(MDATE)	YR,
	STDEV(FS.DEPTH)	DEPTH_STDEV,
	STDEV(FS.VEL)	VEL_STDEV,
	SUM(FS.WIDTH)	WIDTH_STDEV,
	STDEV(FS.FLOW)	FLOW_STDEV
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_FLOW_SUM	FS	ON VI.RWVISIT_ID = FS.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE);


-- WPG.RW_FLOW_SUM source

CREATE VIEW WPG.RW_FLOW_SUM AS
SELECT
 	RWVISIT_ID,
	NULL	DEPTH,
	NULL	WIDTH,
	NULL	VEL,
	FLOW
FROM WPG.RW_OTHER_FLOW
UNION ALL
SELECT
	RWVISIT_ID,
	AVG(DEPTH)	DEPTH,
	SUM(WIDTH)	WIDTH,
	AVG(VEL)	VEL,
	SUM(DEPTH * VEL * WIDTH)	FLOW
FROM 	WPG.RW_FLOW
GROUP BY RWVISIT_ID;


-- WPG.RW_GLABM_AVG source

CREATE VIEW WPG.RW_GLABM_AVG AS
SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	AVG(GM.AL)	AL_AVG,
	AVG(GM.ARSENIC)	ARSENIC_AVG,
	AVG(GM.B)	B_AVG,
	AVG(GM.CD)	CD_AVG,
	AVG(GM.CR)	CR_AVG,
	AVG(GM.CU)	CU_AVG,
	AVG(GM.FE)	FE_AVG,
	AVG(GM.HG)	HG_AVG,
	AVG(GM.MN)	MN_AVG,
	AVG(GM.NI)	NI_AVG,
	AVG(GM.PB)	PB_AVG,
	AVG(GM.ZN)	ZN_AVG,
	AVG(GM.V)	V_AVG,
	AVG(GM.BA)	BA_AVG,
	AVG(GM.AG)	AG_AVG,
	AVG(GM.SB)	SB_AVG,
	AVG(GM.BE)	BE_AVG,
	AVG(GM.TL)	TL_AVG,
	AVG(GM.MO)	MO_AVG
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABM	GM ON VI.RWVISIT_ID	= GM.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE);


-- WPG.RW_GLABM_AVG_A source

CREATE VIEW WPG.RW_GLABM_AVG_A AS
SELECT
			SITE_ID,
			YR,
			TOTAL,
	CASE WHEN L_AL_CNT =0 THEN NULL ELSE '<' END	L_AL_AVG,	AL_AVG,
	CASE WHEN L_ARSENIC_CNT =0 THEN NULL ELSE '<' END	L_ARSENIC_AVG,	ARSENIC_AVG,
	CASE WHEN L_B_CNT =0 THEN NULL ELSE '<' END	L_B_AVG,	B_AVG,
	CASE WHEN L_CD_CNT =0 THEN NULL ELSE '<' END	L_CD_AVG,	CD_AVG,
	CASE WHEN L_CR_CNT =0 THEN NULL ELSE '<' END	L_CR_AVG,	CR_AVG,
	CASE WHEN L_CU_CNT =0 THEN NULL ELSE '<' END	L_CU_AVG,	CU_AVG,
	CASE WHEN L_FE_CNT =0 THEN NULL ELSE '<' END	L_FE_AVG,	FE_AVG,
	CASE WHEN L_HG_CNT =0 THEN NULL ELSE '<' END	L_HG_AVG,	HG_AVG,
	CASE WHEN L_MN_CNT =0 THEN NULL ELSE '<' END	L_MN_AVG,	MN_AVG,
	CASE WHEN L_NI_CNT =0 THEN NULL ELSE '<' END	L_NI_AVG,	NI_AVG,
	CASE WHEN L_PB_CNT =0 THEN NULL ELSE '<' END	L_PB_AVG,	PB_AVG,
	CASE WHEN L_ZN_CNT =0 THEN NULL ELSE '<' END	L_ZN_AVG,	ZN_AVG,
	CASE WHEN L_V_CNT =0 THEN NULL ELSE '<' END	L_V_AVG,	V_AVG,
	CASE WHEN L_BA_CNT =0 THEN NULL ELSE '<' END	L_BA_AVG,	BA_AVG,
	CASE WHEN L_AG_CNT =0 THEN NULL ELSE '<' END	L_AG_AVG,	AG_AVG,
	CASE WHEN L_SB_CNT =0 THEN NULL ELSE '<' END	L_SB_AVG,	SB_AVG,
	CASE WHEN L_BE_CNT =0 THEN NULL ELSE '<' END	L_BE_AVG,	BE_AVG,
	CASE WHEN L_TL_CNT =0 THEN NULL ELSE '<' END	L_TL_AVG,	TL_AVG,
	CASE WHEN L_MO_CNT =0 THEN NULL ELSE '<' END	L_MO_AVG,	MO_AVG
FROM
(SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	AVG(GM.AL)	AL_AVG,
	AVG(GM.ARSENIC)	ARSENIC_AVG,
	AVG(GM.B)	B_AVG,
	AVG(GM.CD)	CD_AVG,
	AVG(GM.CR)	CR_AVG,
	AVG(GM.CU)	CU_AVG,
	AVG(GM.FE)	FE_AVG,
	AVG(GM.HG)	HG_AVG,
	AVG(GM.MN)	MN_AVG,
	AVG(GM.NI)	NI_AVG,
	AVG(GM.PB)	PB_AVG,
	AVG(GM.ZN)	ZN_AVG,
	AVG(GM.V)	V_AVG,
	AVG(GM.BA)	BA_AVG,
	AVG(GM.AG)	AG_AVG,
	AVG(GM.SB)	SB_AVG,
	AVG(GM.BE)	BE_AVG,
	AVG(GM.TL)	TL_AVG,
	AVG(GM.MO)	MO_AVG,
    COUNT(GM.L_AL)	L_AL_CNT,
	COUNT(GM.L_ARSENIC)	L_ARSENIC_CNT,
	COUNT(GM.L_B)	L_B_CNT,
	COUNT(GM.L_CD)	L_CD_CNT,
	COUNT(GM.L_CR)	L_CR_CNT,
	COUNT(GM.L_CU)	L_CU_CNT,
	COUNT(GM.L_FE)	L_FE_CNT,
	COUNT(GM.L_HG)	L_HG_CNT,
	COUNT(GM.L_MN)	L_MN_CNT,
	COUNT(GM.L_NI)	L_NI_CNT,
	COUNT(GM.L_PB)	L_PB_CNT,
	COUNT(GM.L_ZN)	L_ZN_CNT,
	COUNT(GM.L_V)	L_V_CNT,
	COUNT(GM.L_BA)	L_BA_CNT,
	COUNT(GM.L_AG)	L_AG_CNT,
	COUNT(GM.L_SB)	L_SB_CNT,
	COUNT(GM.L_BE)	L_BE_CNT,
	COUNT(GM.L_TL)	L_TL_CNT,
	COUNT(GM.L_MO)	L_MO_CNT
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABM	GM ON VI.RWVISIT_ID	= GM.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE)) D;


-- WPG.RW_GLABM_MAX source

CREATE VIEW WPG.RW_GLABM_MAX AS
SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	MAX(GM.AL)	AL_MAX,
	MAX(GM.ARSENIC)	ARSENIC_MAX,
	MAX(GM.B)	B_MAX,
	MAX(GM.CD)	CD_MAX,
	MAX(GM.CR)	CR_MAX,
	MAX(GM.CU)	CU_MAX,
	MAX(GM.FE)	FE_MAX,
	MAX(GM.HG)	HG_MAX,
	MAX(GM.MN)	MN_MAX,
	MAX(GM.NI)	NI_MAX,
	MAX(GM.PB)	PB_MAX,
	MAX(GM.ZN)	ZN_MAX,
	MAX(GM.V)	V_MAX,
	MAX(GM.BA)	BA_MAX,
	MAX(GM.AG)	AG_MAX,
	MAX(GM.SB)	SB_MAX,
	MAX(GM.BE)	BE_MAX,
	MAX(GM.TL)	TL_MAX,
	MAX(GM.MO)	MO_MAX
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABM	GM ON VI.RWVISIT_ID	= GM.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE);


-- WPG.RW_GLABM_MAX_A source

CREATE VIEW WPG.RW_GLABM_MAX_A AS
SELECT
			SITE_ID,
			YR,
			TOTAL,
	CASE WHEN L_AL_CNT = TOTAL THEN '<' ELSE NULL END	L_AL_MAX,	AL_MAX,
	CASE WHEN L_ARSENIC_CNT = TOTAL THEN '<' ELSE NULL END	L_ARSENIC_MAX,	ARSENIC_MAX,
	CASE WHEN L_B_CNT = TOTAL THEN '<' ELSE NULL END	L_B_MAX,	B_MAX,
	CASE WHEN L_CD_CNT = TOTAL THEN '<' ELSE NULL END	L_CD_MAX,	CD_MAX,
	CASE WHEN L_CR_CNT = TOTAL THEN '<' ELSE NULL END	L_CR_MAX,	CR_MAX,
	CASE WHEN L_CU_CNT = TOTAL THEN '<' ELSE NULL END	L_CU_MAX,	CU_MAX,
	CASE WHEN L_FE_CNT = TOTAL THEN '<' ELSE NULL END	L_FE_MAX,	FE_MAX,
	CASE WHEN L_HG_CNT = TOTAL THEN '<' ELSE NULL END	L_HG_MAX,	HG_MAX,
	CASE WHEN L_MN_CNT = TOTAL THEN '<' ELSE NULL END	L_MN_MAX,	MN_MAX,
	CASE WHEN L_NI_CNT = TOTAL THEN '<' ELSE NULL END	L_NI_MAX,	NI_MAX,
	CASE WHEN L_PB_CNT = TOTAL THEN '<' ELSE NULL END	L_PB_MAX,	PB_MAX,
	CASE WHEN L_ZN_CNT = TOTAL THEN '<' ELSE NULL END	L_ZN_MAX,	ZN_MAX,
	CASE WHEN L_V_CNT = TOTAL THEN '<' ELSE NULL END	L_V_MAX,	V_MAX,
	CASE WHEN L_BA_CNT = TOTAL THEN '<' ELSE NULL END	L_BA_MAX,	BA_MAX,
	CASE WHEN L_AG_CNT = TOTAL THEN '<' ELSE NULL END	L_AG_MAX,	AG_MAX,
	CASE WHEN L_SB_CNT = TOTAL THEN '<' ELSE NULL END	L_SB_MAX,	SB_MAX,
	CASE WHEN L_BE_CNT = TOTAL THEN '<' ELSE NULL END	L_BE_MAX,	BE_MAX,
	CASE WHEN L_TL_CNT = TOTAL THEN '<' ELSE NULL END	L_TL_MAX,	TL_MAX,
	CASE WHEN L_MO_CNT = TOTAL THEN '<' ELSE NULL END	L_MO_MAX,	MO_MAX
FROM
(SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	MAX(GM.AL)	AL_MAX,
	MAX(GM.ARSENIC)	ARSENIC_MAX,
	MAX(GM.B)	B_MAX,
	MAX(GM.CD)	CD_MAX,
	MAX(GM.CR)	CR_MAX,
	MAX(GM.CU)	CU_MAX,
	MAX(GM.FE)	FE_MAX,
	MAX(GM.HG)	HG_MAX,
	MAX(GM.MN)	MN_MAX,
	MAX(GM.NI)	NI_MAX,
	MAX(GM.PB)	PB_MAX,
	MAX(GM.ZN)	ZN_MAX,
	MAX(GM.V)	V_MAX,
	MAX(GM.BA)	BA_MAX,
	MAX(GM.AG)	AG_MAX,
	MAX(GM.SB)	SB_MAX,
	MAX(GM.BE)	BE_MAX,
	MAX(GM.TL)	TL_MAX,
	MAX(GM.MO)	MO_MAX,
    COUNT(GM.L_AL)	L_AL_CNT,
	COUNT(GM.L_ARSENIC)	L_ARSENIC_CNT,
	COUNT(GM.L_B)	L_B_CNT,
	COUNT(GM.L_CD)	L_CD_CNT,
	COUNT(GM.L_CR)	L_CR_CNT,
	COUNT(GM.L_CU)	L_CU_CNT,
	COUNT(GM.L_FE)	L_FE_CNT,
	COUNT(GM.L_HG)	L_HG_CNT,
	COUNT(GM.L_MN)	L_MN_CNT,
	COUNT(GM.L_NI)	L_NI_CNT,
	COUNT(GM.L_PB)	L_PB_CNT,
	COUNT(GM.L_ZN)	L_ZN_CNT,
	COUNT(GM.L_V)	L_V_CNT,
	COUNT(GM.L_BA)	L_BA_CNT,
	COUNT(GM.L_AG)	L_AG_CNT,
	COUNT(GM.L_SB)	L_SB_CNT,
	COUNT(GM.L_BE)	L_BE_CNT,
	COUNT(GM.L_TL)	L_TL_CNT,
	COUNT(GM.L_MO)	L_MO_CNT
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABM	GM ON VI.RWVISIT_ID	= GM.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE)) D;


-- WPG.RW_GLABM_MED source

CREATE VIEW WPG.RW_GLABM_MED AS
SELECT	SITE_ID,
	YEAR(MDATE)	YYYY,
	YR,
	AVG(CASE WHEN R_AL * 2 IN (N_AL, N_AL + 1, N_AL + 2) THEN AL ELSE NULL END)	AL_MED,
	AVG(CASE WHEN R_ARSENIC * 2 IN (N_ARSENIC, N_ARSENIC + 1, N_ARSENIC + 2) THEN ARSENIC ELSE NULL END)	ARSENIC_MED,
	AVG(CASE WHEN R_B * 2 IN (N_B, N_B + 1, N_B + 2) THEN B ELSE NULL END)		B_MED,
	AVG(CASE WHEN R_CD * 2 IN (N_CD, N_CD + 1, N_CD + 2) THEN CD ELSE NULL END)	CD_MED,
	AVG(CASE WHEN R_CR * 2 IN (N_CR, N_CR + 1, N_CR + 2) THEN CR ELSE NULL END)	CR_MED,
	AVG(CASE WHEN R_CU * 2 IN (N_CU, N_CU + 1, N_CU + 2) THEN CU ELSE NULL END)	CU_MED,
	AVG(CASE WHEN R_FE * 2 IN (N_FE, N_FE + 1, N_FE + 2) THEN FE ELSE NULL END)	FE_MED,
	AVG(CASE WHEN R_HG * 2 IN (N_HG, N_HG + 1, N_HG + 2) THEN HG ELSE NULL END)	HG_MED,
	AVG(CASE WHEN R_MN * 2 IN (N_MN, N_MN + 1, N_MN + 2) THEN MN ELSE NULL END)	MN_MED,
	AVG(CASE WHEN R_NI * 2 IN (N_NI, N_NI + 1, N_NI + 2) THEN NI ELSE NULL END)	NI_MED,
	AVG(CASE WHEN R_PB * 2 IN (N_PB, N_PB + 1, N_PB + 2) THEN PB ELSE NULL END)	PB_MED,
	AVG(CASE WHEN R_ZN * 2 IN (N_ZN, N_ZN + 1, N_ZN + 2) THEN ZN ELSE NULL END)	ZN_MED,
	AVG(CASE WHEN R_V * 2 IN (N_V, N_V + 1, N_V + 2) THEN V ELSE NULL END)		V_MED,
	AVG(CASE WHEN R_BA * 2 IN (N_BA, N_BA + 1, N_BA + 2) THEN BA ELSE NULL END)	BA_MED,
	AVG(CASE WHEN R_AG * 2 IN (N_AG, N_AG + 1, N_AG + 2) THEN AG ELSE NULL END)	AG_MED,
	AVG(CASE WHEN R_SB * 2 IN (N_SB, N_SB + 1, N_SB + 2) THEN SB ELSE NULL END)	SB_MED,
	AVG(CASE WHEN R_BE * 2 IN (N_BE, N_BE + 1, N_BE + 2) THEN BE ELSE NULL END)	BE_MED,
	AVG(CASE WHEN R_TL * 2 IN (N_TL, N_TL + 1, N_TL + 2) THEN TL ELSE NULL END)	TL_MED,
	AVG(CASE WHEN R_MO * 2 IN (N_MO, N_MO + 1, N_MO + 2) THEN MO ELSE NULL END)	MO_MED
FROM	(
	SELECT	A.RWVISIT_ID,
		A.SITE_ID,
		A.MDATE,
		A.YR,
		A.AL,
		A.ARSENIC,
		A.B,
		A.CD,
		A.CR,
		A.CU,
		A.FE,
		A.HG,
		A.MN,
		A.NI,
		A.PB,
		A.ZN,
		A.V,
		A.BA,
		A.AG,
		A.SB,
		A.BE,
		A.TL,
		A.MO,
		COUNT(CASE WHEN A.AL < B.AL THEN 1
			WHEN A.AL = B.AL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_AL,
		COUNT(B.AL)		N_AL,
		COUNT(CASE WHEN A.ARSENIC < B.ARSENIC THEN 1
			WHEN A.ARSENIC = B.ARSENIC AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_ARSENIC,
		COUNT(B.ARSENIC)		N_ARSENIC,
		COUNT(CASE WHEN A.B < B.B THEN 1
			WHEN A.B = B.B AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_B,
		COUNT(B.B)		N_B,
		COUNT(CASE WHEN A.CD < B.CD THEN 1
			WHEN A.CD = B.CD AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_CD,
		COUNT(B.CD)		N_CD,
		COUNT(CASE WHEN A.CR < B.CR THEN 1
			WHEN A.CR = B.CR AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_CR,
		COUNT(B.CR)		N_CR,
		COUNT(CASE WHEN A.CU < B.CU THEN 1
			WHEN A.CU = B.CU AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_CU,
		COUNT(B.CU)		N_CU,
		COUNT(CASE WHEN A.FE < B.FE THEN 1
			WHEN A.FE = B.FE AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_FE,
		COUNT(B.FE)		N_FE,
		COUNT(CASE WHEN A.HG < B.HG THEN 1
			WHEN A.HG = B.HG AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_HG,
		COUNT(B.HG)		N_HG,
		COUNT(CASE WHEN A.MN < B.MN THEN 1
			WHEN A.MN = B.MN AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_MN,
		COUNT(B.MN)		N_MN,
		COUNT(CASE WHEN A.NI < B.NI THEN 1
			WHEN A.NI = B.NI AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_NI,
		COUNT(B.NI)		N_NI,
		COUNT(CASE WHEN A.PB < B.PB THEN 1
			WHEN A.PB = B.PB AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_PB,
		COUNT(B.PB)		N_PB,
		COUNT(CASE WHEN A.ZN < B.ZN THEN 1
			WHEN A.ZN = B.ZN AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_ZN,
		COUNT(B.ZN)		N_ZN,
		COUNT(CASE WHEN A.V < B.V THEN 1
			WHEN A.V = B.V AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_V,
		COUNT(B.V)		N_V,
		COUNT(CASE WHEN A.BA < B.BA THEN 1
			WHEN A.BA = B.BA AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_BA,

		COUNT(B.BA)		N_BA,
		COUNT(CASE WHEN A.AG < B.AG THEN 1
			WHEN A.AG = B.AG AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_AG,
		COUNT(B.AG)		N_AG,
		COUNT(CASE WHEN A.SB < B.SB THEN 1
			WHEN A.SB = B.SB AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_SB,
		COUNT(B.SB)		N_SB,
		COUNT(CASE WHEN A.BE < B.BE THEN 1
			WHEN A.BE = B.BE AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_BE,
		COUNT(B.BE)		N_BE,
		COUNT(CASE WHEN A.TL < B.TL THEN 1
			WHEN A.TL = B.TL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TL,
		COUNT(B.TL)		N_TL,
		COUNT(CASE WHEN A.MO < B.MO THEN 1
			WHEN A.MO = B.MO AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_MO,
		COUNT(B.MO)			N_MO
	FROM	(SELECT	VI.RWVISIT_ID, VI.SITE_ID, VI.MDATE, YEAR(VI.MDATE) YR, 
			NH.AL, NH.ARSENIC, NH.B, NH.CD, NH.CR, NH.CU, NH.FE, NH.HG, NH.MN, NH.NI, NH.PB, NH.ZN, 
			NH.V, NH.BA, NH.AG, NH.SB, NH.BE, NH.TL, NH.MO
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_GLABM	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	A
	JOIN	(SELECT	VI.RWVISIT_ID, VI.SITE_ID, YEAR(VI.MDATE) YR, 
			NH.AL, NH.ARSENIC, NH.B, NH.CD, NH.CR, NH.CU, NH.FE, NH.HG, NH.MN, NH.NI, NH.PB, NH.ZN, 
			NH.V, NH.BA, NH.AG, NH.SB, NH.BE, NH.TL, NH.MO
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_GLABM	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	B
	ON A.SITE_ID = B.SITE_ID AND A.YR = B.YR
	GROUP BY 	A.RWVISIT_ID, A.SITE_ID, A.MDATE, A.YR, 
			A.AL, A.ARSENIC, A.B, A.CD, 	A.CR, A.CU, A.FE, A.HG, A.MN, A.NI, A.PB, A.ZN, A.V, A.BA, 	A.AG, A.SB,
			A.BE, A.TL, A.MO
	) C
GROUP BY SITE_ID, YEAR(MDATE), YR;


-- WPG.RW_GLABM_MED_A source

CREATE VIEW WPG.RW_GLABM_MED_A AS
SELECT
	D.SITE_ID,
	D.YR,
	D.TOTAL,
	CASE WHEN (L_AL_CNT *2 > D.TOTAL) OR (L_AL_CNT *2 = D.TOTAL AND AL_MED = AL_MED_U) THEN '<' ELSE NULL END	L_AL_MED,	AL_MED,
	CASE WHEN (L_ARSENIC_CNT *2 > D.TOTAL) OR (L_ARSENIC_CNT *2 = D.TOTAL AND ARSENIC_MED = ARSENIC_MED_U) THEN '<' ELSE NULL END	L_ARSENIC_MED,	ARSENIC_MED,
	CASE WHEN (L_B_CNT *2 > D.TOTAL) OR (L_B_CNT *2 = D.TOTAL AND B_MED = B_MED_U) THEN '<' ELSE NULL END	L_B_MED,	B_MED,
	CASE WHEN (L_CD_CNT *2 > D.TOTAL) OR (L_CD_CNT *2 = D.TOTAL AND CD_MED = CD_MED_U) THEN '<' ELSE NULL END	L_CD_MED,	CD_MED,
	CASE WHEN (L_CR_CNT *2 > D.TOTAL) OR (L_CR_CNT *2 = D.TOTAL AND CR_MED = CR_MED_U) THEN '<' ELSE NULL END	L_CR_MED,	CR_MED,
	CASE WHEN (L_CU_CNT *2 > D.TOTAL) OR (L_CU_CNT *2 = D.TOTAL AND CU_MED = CU_MED_U) THEN '<' ELSE NULL END	L_CU_MED,	CU_MED,
	CASE WHEN (L_FE_CNT *2 > D.TOTAL) OR (L_FE_CNT *2 = D.TOTAL AND FE_MED = FE_MED_U) THEN '<' ELSE NULL END	L_FE_MED,	FE_MED,
	CASE WHEN (L_HG_CNT *2 > D.TOTAL) OR (L_HG_CNT *2 = D.TOTAL AND HG_MED = HG_MED_U) THEN '<' ELSE NULL END	L_HG_MED,	HG_MED,
	CASE WHEN (L_MN_CNT *2 > D.TOTAL) OR (L_MN_CNT *2 = D.TOTAL AND MN_MED = MN_MED_U) THEN '<' ELSE NULL END	L_MN_MED,	MN_MED,
	CASE WHEN (L_NI_CNT *2 > D.TOTAL) OR (L_NI_CNT *2 = D.TOTAL AND NI_MED = NI_MED_U) THEN '<' ELSE NULL END	L_NI_MED,	NI_MED,
	CASE WHEN (L_PB_CNT *2 > D.TOTAL) OR (L_PB_CNT *2 = D.TOTAL AND PB_MED = PB_MED_U) THEN '<' ELSE NULL END	L_PB_MED,	PB_MED,
	CASE WHEN (L_ZN_CNT *2 > D.TOTAL) OR (L_ZN_CNT *2 = D.TOTAL AND ZN_MED = ZN_MED_U) THEN '<' ELSE NULL END	L_ZN_MED,	ZN_MED,
	CASE WHEN (L_V_CNT *2 > D.TOTAL) OR (L_V_CNT *2 = D.TOTAL AND V_MED = V_MED_U) THEN '<' ELSE NULL END	L_V_MED,	V_MED,
	CASE WHEN (L_BA_CNT *2 > D.TOTAL) OR (L_BA_CNT *2 = D.TOTAL AND BA_MED = BA_MED_U) THEN '<' ELSE NULL END	L_BA_MED,	BA_MED,
	CASE WHEN (L_AG_CNT *2 > D.TOTAL) OR (L_AG_CNT *2 = D.TOTAL AND AG_MED = AG_MED_U) THEN '<' ELSE NULL END	L_AG_MED,	AG_MED,
	CASE WHEN (L_SB_CNT *2 > D.TOTAL) OR (L_SB_CNT *2 = D.TOTAL AND SB_MED = SB_MED_U) THEN '<' ELSE NULL END	L_SB_MED,	SB_MED,
	CASE WHEN (L_BE_CNT *2 > D.TOTAL) OR (L_BE_CNT *2 = D.TOTAL AND BE_MED = BE_MED_U) THEN '<' ELSE NULL END	L_BE_MED,	BE_MED,
	CASE WHEN (L_TL_CNT *2 > D.TOTAL) OR (L_TL_CNT *2 = D.TOTAL AND TL_MED = TL_MED_U) THEN '<' ELSE NULL END	L_TL_MED,	TL_MED,
	CASE WHEN (L_MO_CNT *2 > D.TOTAL) OR (L_MO_CNT *2 = D.TOTAL AND MO_MED = MO_MED_U) THEN '<' ELSE NULL END	L_MO_MED,	MO_MED
FROM
(SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
    COUNT(GM.L_AL)	L_AL_CNT,
	COUNT(GM.L_ARSENIC)	L_ARSENIC_CNT,
	COUNT(GM.L_B)	L_B_CNT,
	COUNT(GM.L_CD)	L_CD_CNT,
	COUNT(GM.L_CR)	L_CR_CNT,
	COUNT(GM.L_CU)	L_CU_CNT,
	COUNT(GM.L_FE)	L_FE_CNT,
	COUNT(GM.L_HG)	L_HG_CNT,
	COUNT(GM.L_MN)	L_MN_CNT,
	COUNT(GM.L_NI)	L_NI_CNT,
	COUNT(GM.L_PB)	L_PB_CNT,
	COUNT(GM.L_ZN)	L_ZN_CNT,
	COUNT(GM.L_V)	L_V_CNT,
	COUNT(GM.L_BA)	L_BA_CNT,
	COUNT(GM.L_AG)	L_AG_CNT,
	COUNT(GM.L_SB)	L_SB_CNT,
	COUNT(GM.L_BE)	L_BE_CNT,
	COUNT(GM.L_TL)	L_TL_CNT,
	COUNT(GM.L_MO)	L_MO_CNT
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABM	GM ON VI.RWVISIT_ID	= GM.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE)) D
JOIN
(SELECT	SITE_ID,
	YEAR(MDATE)	YYYY,
	YR,
	AVG(CASE WHEN R_AL * 2 IN (N_AL, N_AL + 1, N_AL + 2) THEN AL ELSE NULL END)	AL_MED,
	AVG(CASE WHEN R_ARSENIC * 2 IN (N_ARSENIC, N_ARSENIC + 1, N_ARSENIC + 2) THEN ARSENIC ELSE NULL END)	ARSENIC_MED,
	AVG(CASE WHEN R_B * 2 IN (N_B, N_B + 1, N_B + 2) THEN B ELSE NULL END)		B_MED,
	AVG(CASE WHEN R_CD * 2 IN (N_CD, N_CD + 1, N_CD + 2) THEN CD ELSE NULL END)	CD_MED,
	AVG(CASE WHEN R_CR * 2 IN (N_CR, N_CR + 1, N_CR + 2) THEN CR ELSE NULL END)	CR_MED,
	AVG(CASE WHEN R_CU * 2 IN (N_CU, N_CU + 1, N_CU + 2) THEN CU ELSE NULL END)	CU_MED,
	AVG(CASE WHEN R_FE * 2 IN (N_FE, N_FE + 1, N_FE + 2) THEN FE ELSE NULL END)	FE_MED,
	AVG(CASE WHEN R_HG * 2 IN (N_HG, N_HG + 1, N_HG + 2) THEN HG ELSE NULL END)	HG_MED,
	AVG(CASE WHEN R_MN * 2 IN (N_MN, N_MN + 1, N_MN + 2) THEN MN ELSE NULL END)	MN_MED,
	AVG(CASE WHEN R_NI * 2 IN (N_NI, N_NI + 1, N_NI + 2) THEN NI ELSE NULL END)	NI_MED,
	AVG(CASE WHEN R_PB * 2 IN (N_PB, N_PB + 1, N_PB + 2) THEN PB ELSE NULL END)	PB_MED,
	AVG(CASE WHEN R_ZN * 2 IN (N_ZN, N_ZN + 1, N_ZN + 2) THEN ZN ELSE NULL END)	ZN_MED,
	AVG(CASE WHEN R_V * 2 IN (N_V, N_V + 1, N_V + 2) THEN V ELSE NULL END)		V_MED,
	AVG(CASE WHEN R_BA * 2 IN (N_BA, N_BA + 1, N_BA + 2) THEN BA ELSE NULL END)	BA_MED,
	AVG(CASE WHEN R_AG * 2 IN (N_AG, N_AG + 1, N_AG + 2) THEN AG ELSE NULL END)	AG_MED,
	AVG(CASE WHEN R_SB * 2 IN (N_SB, N_SB + 1, N_SB + 2) THEN SB ELSE NULL END)	SB_MED,
	AVG(CASE WHEN R_BE * 2 IN (N_BE, N_BE + 1, N_BE + 2) THEN BE ELSE NULL END)	BE_MED,
	AVG(CASE WHEN R_TL * 2 IN (N_TL, N_TL + 1, N_TL + 2) THEN TL ELSE NULL END)	TL_MED,
	AVG(CASE WHEN R_MO * 2 IN (N_MO, N_MO + 1, N_MO + 2) THEN MO ELSE NULL END)	MO_MED,
	MAX(CASE WHEN R_AL * 2 IN (N_AL, N_AL + 1, N_AL + 2) THEN AL ELSE NULL END)	AL_MED_U,
	MAX(CASE WHEN R_ARSENIC * 2 IN (N_ARSENIC, N_ARSENIC + 1, N_ARSENIC + 2) THEN ARSENIC ELSE NULL END)	ARSENIC_MED_U,
	MAX(CASE WHEN R_B * 2 IN (N_B, N_B + 1, N_B + 2) THEN B ELSE NULL END)		B_MED_U,
	MAX(CASE WHEN R_CD * 2 IN (N_CD, N_CD + 1, N_CD + 2) THEN CD ELSE NULL END)	CD_MED_U,
	MAX(CASE WHEN R_CR * 2 IN (N_CR, N_CR + 1, N_CR + 2) THEN CR ELSE NULL END)	CR_MED_U,
	MAX(CASE WHEN R_CU * 2 IN (N_CU, N_CU + 1, N_CU + 2) THEN CU ELSE NULL END)	CU_MED_U,
	MAX(CASE WHEN R_FE * 2 IN (N_FE, N_FE + 1, N_FE + 2) THEN FE ELSE NULL END)	FE_MED_U,
	MAX(CASE WHEN R_HG * 2 IN (N_HG, N_HG + 1, N_HG + 2) THEN HG ELSE NULL END)	HG_MED_U,
	MAX(CASE WHEN R_MN * 2 IN (N_MN, N_MN + 1, N_MN + 2) THEN MN ELSE NULL END)	MN_MED_U,
	MAX(CASE WHEN R_NI * 2 IN (N_NI, N_NI + 1, N_NI + 2) THEN NI ELSE NULL END)	NI_MED_U,
	MAX(CASE WHEN R_PB * 2 IN (N_PB, N_PB + 1, N_PB + 2) THEN PB ELSE NULL END)	PB_MED_U,
	MAX(CASE WHEN R_ZN * 2 IN (N_ZN, N_ZN + 1, N_ZN + 2) THEN ZN ELSE NULL END)	ZN_MED_U,
	MAX(CASE WHEN R_V * 2 IN (N_V, N_V + 1, N_V + 2) THEN V ELSE NULL END)		V_MED_U,
	MAX(CASE WHEN R_BA * 2 IN (N_BA, N_BA + 1, N_BA + 2) THEN BA ELSE NULL END)	BA_MED_U,
	MAX(CASE WHEN R_AG * 2 IN (N_AG, N_AG + 1, N_AG + 2) THEN AG ELSE NULL END)	AG_MED_U,
	MAX(CASE WHEN R_SB * 2 IN (N_SB, N_SB + 1, N_SB + 2) THEN SB ELSE NULL END)	SB_MED_U,
	MAX(CASE WHEN R_BE * 2 IN (N_BE, N_BE + 1, N_BE + 2) THEN BE ELSE NULL END)	BE_MED_U,
	MAX(CASE WHEN R_TL * 2 IN (N_TL, N_TL + 1, N_TL + 2) THEN TL ELSE NULL END)	TL_MED_U,
	MAX(CASE WHEN R_MO * 2 IN (N_MO, N_MO + 1, N_MO + 2) THEN MO ELSE NULL END)	MO_MED_U
    FROM	(
	SELECT	A.RWVISIT_ID,
		A.SITE_ID,
		A.MDATE,
		A.YR,
		A.AL,
		A.ARSENIC,
		A.B,
		A.CD,
		A.CR,
		A.CU,
		A.FE,
		A.HG,
		A.MN,
		A.NI,
		A.PB,
		A.ZN,
		A.V,
		A.BA,
		A.AG,
		A.SB,
		A.BE,
		A.TL,
		A.MO,
		COUNT(CASE WHEN A.AL < B.AL THEN 1
			WHEN A.AL = B.AL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_AL,
		COUNT(B.AL)		N_AL,
		COUNT(CASE WHEN A.ARSENIC < B.ARSENIC THEN 1
			WHEN A.ARSENIC = B.ARSENIC AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_ARSENIC,
		COUNT(B.ARSENIC)		N_ARSENIC,
		COUNT(CASE WHEN A.B < B.B THEN 1
			WHEN A.B = B.B AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_B,
		COUNT(B.B)		N_B,
		COUNT(CASE WHEN A.CD < B.CD THEN 1
			WHEN A.CD = B.CD AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_CD,
		COUNT(B.CD)		N_CD,
		COUNT(CASE WHEN A.CR < B.CR THEN 1
			WHEN A.CR = B.CR AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_CR,
		COUNT(B.CR)		N_CR,
		COUNT(CASE WHEN A.CU < B.CU THEN 1
			WHEN A.CU = B.CU AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_CU,
		COUNT(B.CU)		N_CU,
		COUNT(CASE WHEN A.FE < B.FE THEN 1
			WHEN A.FE = B.FE AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_FE,
		COUNT(B.FE)		N_FE,
		COUNT(CASE WHEN A.HG < B.HG THEN 1
			WHEN A.HG = B.HG AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_HG,
		COUNT(B.HG)		N_HG,
		COUNT(CASE WHEN A.MN < B.MN THEN 1
			WHEN A.MN = B.MN AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_MN,
		COUNT(B.MN)		N_MN,
		COUNT(CASE WHEN A.NI < B.NI THEN 1
			WHEN A.NI = B.NI AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_NI,
		COUNT(B.NI)		N_NI,
		COUNT(CASE WHEN A.PB < B.PB THEN 1
			WHEN A.PB = B.PB AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_PB,
		COUNT(B.PB)		N_PB,
		COUNT(CASE WHEN A.ZN < B.ZN THEN 1
			WHEN A.ZN = B.ZN AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_ZN,
		COUNT(B.ZN)		N_ZN,
		COUNT(CASE WHEN A.V < B.V THEN 1
			WHEN A.V = B.V AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_V,
		COUNT(B.V)		N_V,
		COUNT(CASE WHEN A.BA < B.BA THEN 1
			WHEN A.BA = B.BA AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_BA,

		COUNT(B.BA)		N_BA,
		COUNT(CASE WHEN A.AG < B.AG THEN 1
			WHEN A.AG = B.AG AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_AG,
		COUNT(B.AG)		N_AG,
		COUNT(CASE WHEN A.SB < B.SB THEN 1
			WHEN A.SB = B.SB AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_SB,
		COUNT(B.SB)		N_SB,
		COUNT(CASE WHEN A.BE < B.BE THEN 1
			WHEN A.BE = B.BE AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_BE,
		COUNT(B.BE)		N_BE,
		COUNT(CASE WHEN A.TL < B.TL THEN 1
			WHEN A.TL = B.TL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TL,
		COUNT(B.TL)		N_TL,
		COUNT(CASE WHEN A.MO < B.MO THEN 1
			WHEN A.MO = B.MO AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_MO,
		COUNT(B.MO)			N_MO
	FROM	(SELECT	VI.RWVISIT_ID, VI.SITE_ID, VI.MDATE, YEAR(VI.MDATE) YR, 
			NH.AL, NH.ARSENIC, NH.B, NH.CD, NH.CR, NH.CU, NH.FE, NH.HG, NH.MN, NH.NI, NH.PB, NH.ZN, 
			NH.V, NH.BA, NH.AG, NH.SB, NH.BE, NH.TL, NH.MO
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_GLABM	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	A
	JOIN	(SELECT	VI.RWVISIT_ID, VI.SITE_ID, YEAR(VI.MDATE) YR, 
			NH.AL, NH.ARSENIC, NH.B, NH.CD, NH.CR, NH.CU, NH.FE, NH.HG, NH.MN, NH.NI, NH.PB, NH.ZN, 
			NH.V, NH.BA, NH.AG, NH.SB, NH.BE, NH.TL, NH.MO
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_GLABM	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	B
	ON A.SITE_ID = B.SITE_ID AND A.YR = B.YR
	GROUP BY 	A.RWVISIT_ID, A.SITE_ID, A.MDATE, A.YR, 
			A.AL, A.ARSENIC, A.B, A.CD, 	A.CR, A.CU, A.FE, A.HG, A.MN, A.NI, A.PB, A.ZN, A.V, A.BA, 	A.AG, A.SB,
			A.BE, A.TL, A.MO
	) C
    GROUP BY SITE_ID, YEAR(MDATE), YR) E
ON   D.SITE_ID = E.SITE_ID AND D.YR = E.YR;


-- WPG.RW_GLABM_MIN source

CREATE VIEW WPG.RW_GLABM_MIN AS
SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	MIN(GM.AL)	AL_MIN,
	MIN(GM.ARSENIC)	ARSENIC_MIN,
	MIN(GM.B)	B_MIN,
	MIN(GM.CD)	CD_MIN,
	MIN(GM.CR)	CR_MIN,
	MIN(GM.CU)	CU_MIN,
	MIN(GM.FE)	FE_MIN,
	MIN(GM.HG)	HG_MIN,
	MIN(GM.MN)	MN_MIN,
	MIN(GM.NI)	NI_MIN,
	MIN(GM.PB)	PB_MIN,
	MIN(GM.ZN)	ZN_MIN,
	MIN(GM.V)	V_MIN,
	MIN(GM.BA)	BA_MIN,
	MIN(GM.AG)	AG_MIN,
	MIN(GM.SB)	SB_MIN,
	MIN(GM.BE)	BE_MIN,
	MIN(GM.TL)	TL_MIN,
	MIN(GM.MO)	MO_MIN
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABM	GM ON VI.RWVISIT_ID 	= GM.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE);


-- WPG.RW_GLABM_MIN_A source

CREATE VIEW WPG.RW_GLABM_MIN_A AS
SELECT
			SITE_ID,
			YR,
			TOTAL,
	CASE WHEN L_AL_CNT =0 THEN NULL ELSE '<' END	L_AL_MIN,	AL_MIN,
	CASE WHEN L_ARSENIC_CNT =0 THEN NULL ELSE '<' END	L_ARSENIC_MIN,	ARSENIC_MIN,
	CASE WHEN L_B_CNT =0 THEN NULL ELSE '<' END	L_B_MIN,	B_MIN,
	CASE WHEN L_CD_CNT =0 THEN NULL ELSE '<' END	L_CD_MIN,	CD_MIN,
	CASE WHEN L_CR_CNT =0 THEN NULL ELSE '<' END	L_CR_MIN,	CR_MIN,
	CASE WHEN L_CU_CNT =0 THEN NULL ELSE '<' END	L_CU_MIN,	CU_MIN,
	CASE WHEN L_FE_CNT =0 THEN NULL ELSE '<' END	L_FE_MIN,	FE_MIN,
	CASE WHEN L_HG_CNT =0 THEN NULL ELSE '<' END	L_HG_MIN,	HG_MIN,
	CASE WHEN L_MN_CNT =0 THEN NULL ELSE '<' END	L_MN_MIN,	MN_MIN,
	CASE WHEN L_NI_CNT =0 THEN NULL ELSE '<' END	L_NI_MIN,	NI_MIN,
	CASE WHEN L_PB_CNT =0 THEN NULL ELSE '<' END	L_PB_MIN,	PB_MIN,
	CASE WHEN L_ZN_CNT =0 THEN NULL ELSE '<' END	L_ZN_MIN,	ZN_MIN,
	CASE WHEN L_V_CNT =0 THEN NULL ELSE '<' END	L_V_MIN,	V_MIN,
	CASE WHEN L_BA_CNT =0 THEN NULL ELSE '<' END	L_BA_MIN,	BA_MIN,
	CASE WHEN L_AG_CNT =0 THEN NULL ELSE '<' END	L_AG_MIN,	AG_MIN,
	CASE WHEN L_SB_CNT =0 THEN NULL ELSE '<' END	L_SB_MIN,	SB_MIN,
	CASE WHEN L_BE_CNT =0 THEN NULL ELSE '<' END	L_BE_MIN,	BE_MIN,
	CASE WHEN L_TL_CNT =0 THEN NULL ELSE '<' END	L_TL_MIN,	TL_MIN,
	CASE WHEN L_MO_CNT =0 THEN NULL ELSE '<' END	L_MO_MIN,	MO_MIN
FROM
(SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	MIN(GM.AL)	AL_MIN,
	MIN(GM.ARSENIC)	ARSENIC_MIN,
	MIN(GM.B)	B_MIN,
	MIN(GM.CD)	CD_MIN,
	MIN(GM.CR)	CR_MIN,
	MIN(GM.CU)	CU_MIN,
	MIN(GM.FE)	FE_MIN,
	MIN(GM.HG)	HG_MIN,
	MIN(GM.MN)	MN_MIN,
	MIN(GM.NI)	NI_MIN,
	MIN(GM.PB)	PB_MIN,
	MIN(GM.ZN)	ZN_MIN,
	MIN(GM.V)	V_MIN,
	MIN(GM.BA)	BA_MIN,
	MIN(GM.AG)	AG_MIN,
	MIN(GM.SB)	SB_MIN,
	MIN(GM.BE)	BE_MIN,
	MIN(GM.TL)	TL_MIN,
	MIN(GM.MO)	MO_MIN,
    COUNT(GM.L_AL)	L_AL_CNT,
	COUNT(GM.L_ARSENIC)	L_ARSENIC_CNT,
	COUNT(GM.L_B)	L_B_CNT,
	COUNT(GM.L_CD)	L_CD_CNT,
	COUNT(GM.L_CR)	L_CR_CNT,
	COUNT(GM.L_CU)	L_CU_CNT,
	COUNT(GM.L_FE)	L_FE_CNT,
	COUNT(GM.L_HG)	L_HG_CNT,
	COUNT(GM.L_MN)	L_MN_CNT,
	COUNT(GM.L_NI)	L_NI_CNT,
	COUNT(GM.L_PB)	L_PB_CNT,
	COUNT(GM.L_ZN)	L_ZN_CNT,
	COUNT(GM.L_V)	L_V_CNT,
	COUNT(GM.L_BA)	L_BA_CNT,
	COUNT(GM.L_AG)	L_AG_CNT,
	COUNT(GM.L_SB)	L_SB_CNT,
	COUNT(GM.L_BE)	L_BE_CNT,
	COUNT(GM.L_TL)	L_TL_CNT,
	COUNT(GM.L_MO)	L_MO_CNT
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABM	GM ON VI.RWVISIT_ID	= GM.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE)) D;


-- WPG.RW_GLABM_STDEV source

CREATE VIEW WPG.RW_GLABM_STDEV AS
SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	STDEV(GM.AL)	AL_STDEV,
	STDEV(GM.ARSENIC)	ARSENIC_STDEV,
	STDEV(GM.B)	B_STDEV,
	STDEV(GM.CD)	CD_STDEV,
	STDEV(GM.CR)	CR_STDEV,
	STDEV(GM.CU)	CU_STDEV,
	STDEV(GM.FE)	FE_STDEV,
	STDEV(GM.HG)	HG_STDEV,
	STDEV(GM.MN)	MN_STDEV,
	STDEV(GM.NI)	NI_STDEV,
	STDEV(GM.PB)	PB_STDEV,
	STDEV(GM.ZN)	ZN_STDEV,
	STDEV(GM.V)	V_STDEV,
	STDEV(GM.BA)	BA_STDEV,
	STDEV(GM.AG)	AG_STDEV,
	STDEV(GM.SB)	SB_STDEV,
	STDEV(GM.BE)	BE_STDEV,
	STDEV(GM.TL)	TL_STDEV,
	STDEV(GM.MO)	MO_STDEV
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABM	GM ON VI.RWVISIT_ID	= GM.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE);


-- WPG.RW_GLABN_AVG source

CREATE VIEW WPG.RW_GLABN_AVG AS
SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	AVG(GN.NH4)	NH4_AVG,
	AVG(GN.TKNS)	TKNS_AVG,
	AVG(GN.TKNSP)	TKNSP_AVG,
	AVG(GN.NO2)	NO2_AVG,
	AVG(GN.NO3)	NO3_AVG,
	AVG(GN.PO4)	PO4_AVG,
	AVG(GN.TPS)	TPS_AVG,
	AVG(GN.TPSP)	TPSP_AVG,
	AVG(GN.SIL)	SIL_AVG,
	AVG(GN.COD)	COD_AVG,
	AVG(GN.SS)	SS_AVG,
	AVG(GN.OIL)	OIL_AVG,
	AVG(GN.TVS)	TVS_AVG,
	AVG(GN.TS)	TS_AVG,
	AVG(GN.TCYN)	TCYN_AVG,
	AVG(GN.FL)	FL_AVG,
	AVG(GN.H2S)	H2S_AVG,
	AVG(GN.SULP)	SULP_AVG,
	AVG(GN.SSP)	SSP_AVG,
	AVG(GN.DETERG)	DETERG_AVG,
	AVG(GN.TOC)	TOC_AVG,
	AVG(GN.CL)	CL_AVG,
	AVG(GN.CHL)	CHL_AVG,
	AVG(GN.PHEO)	PHEO_AVG,
	AVG(GN.TIN)	TIN_AVG,
	AVG(GN.TN)	TN_AVG
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABN_CAL	GN	ON VI.RWVISIT_ID	= GN.RWVISIT_ID
GROUP BY VI.SITE_ID,YEAR(VI.MDATE);


-- WPG.RW_GLABN_AVG_A source

CREATE VIEW WPG.RW_GLABN_AVG_A AS
SELECT
			SITE_ID,
			YR,
			TOTAL,
	CASE WHEN L_NH4_CNT =0 THEN NULL ELSE '<' END	L_NH4_AVG,	NH4_AVG,
	CASE WHEN L_TKNS_CNT =0 THEN NULL ELSE '<' END	L_TKNS_AVG,	TKNS_AVG,
	CASE WHEN L_TKNSP_CNT =0 THEN NULL ELSE '<' END	L_TKNSP_AVG,	TKNSP_AVG,
	CASE WHEN L_NO2_CNT =0 THEN NULL ELSE '<' END	L_NO2_AVG,	NO2_AVG,
	CASE WHEN L_NO3_CNT =0 THEN NULL ELSE '<' END	L_NO3_AVG,	NO3_AVG,
	CASE WHEN L_PO4_CNT =0 THEN NULL ELSE '<' END	L_PO4_AVG,	PO4_AVG,
	CASE WHEN L_TPS_CNT =0 THEN NULL ELSE '<' END	L_TPS_AVG,	TPS_AVG,
	CASE WHEN L_TPSP_CNT =0 THEN NULL ELSE '<' END	L_TPSP_AVG,	TPSP_AVG,
	CASE WHEN L_SIL_CNT =0 THEN NULL ELSE '<' END	L_SIL_AVG,	SIL_AVG,
	CASE WHEN L_COD_CNT =0 THEN NULL ELSE '<' END	L_COD_AVG,	COD_AVG,
	CASE WHEN L_SS_CNT =0 THEN NULL ELSE '<' END	L_SS_AVG,	SS_AVG,
	CASE WHEN L_OIL_CNT =0 THEN NULL ELSE '<' END	L_OIL_AVG,	OIL_AVG,
	CASE WHEN L_TVS_CNT =0 THEN NULL ELSE '<' END	L_TVS_AVG,	TVS_AVG,
	CASE WHEN L_TS_CNT =0 THEN NULL ELSE '<' END	L_TS_AVG,	TS_AVG,
	CASE WHEN L_TCYN_CNT =0 THEN NULL ELSE '<' END	L_TCYN_AVG,	TCYN_AVG,
	CASE WHEN L_FL_CNT =0 THEN NULL ELSE '<' END	L_FL_AVG,	FL_AVG,
	CASE WHEN L_H2S_CNT =0 THEN NULL ELSE '<' END	L_H2S_AVG,	H2S_AVG,
	CASE WHEN L_SULP_CNT =0 THEN NULL ELSE '<' END	L_SULP_AVG,	SULP_AVG,
	CASE WHEN L_SSP_CNT =0 THEN NULL ELSE '<' END	L_SSP_AVG,	SSP_AVG,
	CASE WHEN L_DETERG_CNT =0 THEN NULL ELSE '<' END	L_DETERG_AVG,	DETERG_AVG,
	CASE WHEN L_TOC_CNT =0 THEN NULL ELSE '<' END	L_TOC_AVG,	TOC_AVG,
	CASE WHEN L_CL_CNT =0 THEN NULL ELSE '<' END	L_CL_AVG,	CL_AVG,
	CASE WHEN L_CHL_CNT =0 THEN NULL ELSE '<' END	L_CHL_AVG,	CHL_AVG,
	CASE WHEN L_PHEO_CNT =0 THEN NULL ELSE '<' END	L_PHEO_AVG,	PHEO_AVG,
	CASE WHEN L_TIN_CNT =0 THEN NULL ELSE '<' END	L_TIN_AVG,	TIN_AVG,
	CASE WHEN L_TN_CNT =0 THEN NULL ELSE '<' END	L_TN_AVG,	TN_AVG
FROM
(SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	AVG(GN.NH4)	NH4_AVG,
	AVG(GN.TKNS)	TKNS_AVG,
	AVG(GN.TKNSP)	TKNSP_AVG,
	AVG(GN.NO2)	NO2_AVG,
	AVG(GN.NO3)	NO3_AVG,
	AVG(GN.PO4)	PO4_AVG,
	AVG(GN.TPS)	TPS_AVG,
	AVG(GN.TPSP)	TPSP_AVG,
	AVG(GN.SIL)	SIL_AVG,
	AVG(GN.COD)	COD_AVG,
	AVG(GN.SS)	SS_AVG,
	AVG(GN.OIL)	OIL_AVG,
	AVG(GN.TVS)	TVS_AVG,
	AVG(GN.TS)	TS_AVG,
	AVG(GN.TCYN)	TCYN_AVG,
	AVG(GN.FL)	FL_AVG,
	AVG(GN.H2S)	H2S_AVG,
	AVG(GN.SULP)	SULP_AVG,
	AVG(GN.SSP)	SSP_AVG,
	AVG(GN.DETERG)	DETERG_AVG,
	AVG(GN.TOC)	TOC_AVG,
	AVG(GN.CL)	CL_AVG,
	AVG(GN.CHL)	CHL_AVG,
	AVG(GN.PHEO)	PHEO_AVG,
	AVG(GN.TIN)	TIN_AVG,
	AVG(GN.TN)	TN_AVG,
	COUNT(GN.L_NH4)	L_NH4_CNT,
	COUNT(GN.L_TKNS)	L_TKNS_CNT,
	COUNT(GN.L_TKNSP)	L_TKNSP_CNT,
	COUNT(GN.L_NO2)	L_NO2_CNT,
	COUNT(GN.L_NO3)	L_NO3_CNT,
	COUNT(GN.L_PO4)	L_PO4_CNT,
	COUNT(GN.L_TPS)	L_TPS_CNT,
	COUNT(GN.L_TPSP)	L_TPSP_CNT,
	COUNT(GN.L_SIL)	L_SIL_CNT,
	COUNT(GN.L_COD)	L_COD_CNT,
	COUNT(GN.L_SS)	L_SS_CNT,
	COUNT(GN.L_OIL)	L_OIL_CNT,
	COUNT(GN.L_TVS)	L_TVS_CNT,
	COUNT(GN.L_TS)	L_TS_CNT,
	COUNT(GN.L_TCYN)	L_TCYN_CNT,
	COUNT(GN.L_FL)	L_FL_CNT,
	COUNT(GN.L_H2S)	L_H2S_CNT,
	COUNT(GN.L_SULP)	L_SULP_CNT,
	COUNT(GN.L_SSP)	L_SSP_CNT,
	COUNT(GN.L_DETERG)	L_DETERG_CNT,
	COUNT(GN.L_TOC)	L_TOC_CNT,
	COUNT(GN.L_CL)	L_CL_CNT,
	COUNT(GN.L_CHL)	L_CHL_CNT,
	COUNT(GN.L_PHEO)	L_PHEO_CNT,
	COUNT(GN.L_TIN)	L_TIN_CNT,
	COUNT(GN.L_TN)	L_TN_CNT
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABN_CAL_A	GN	ON VI.RWVISIT_ID	= GN.RWVISIT_ID
GROUP BY VI.SITE_ID,YEAR(VI.MDATE)) D;


-- WPG.RW_GLABN_CAL source

CREATE VIEW WPG.RW_GLABN_CAL AS
SELECT
	GN.RWVISIT_ID,	
	GN.L_NO2,
	GN.NO2,
	GN.L_NO3,
	GN.NO3,
	GN.L_NH4,
	GN.NH4,
	GN.L_PO4,
	GN.PO4,
	GN.L_SIL,
	GN.SIL,
	GN.L_SS,
	GN.SS,
	GN.L_TKNS,
	GN.TKNS,
	GN.L_TPS,
	GN.TPS,
	GN.L_TKNSP,
	GN.TKNSP,
	GN.L_TPSP,
	GN.TPSP,
	GN.L_TS,
	GN.TS,
	GN.L_TVS,
	GN.TVS,
	GN.L_COD,
	GN.COD,
	GN.L_TCYN,
	GN.TCYN,
	GN.L_FL,
	GN.FL,
	GN.L_CL,
	GN.CL,
	GN.L_DETERG,
	GN.DETERG,
	GN.L_TOC,
	GN.TOC,
	GN.L_OIL,
	GN.OIL,
	GN.L_SULP,
	GN.SULP,
	GN.L_SSP,
	GN.SSP,
	GN.L_H2S,
	GN.H2S,
	GN.L_CHL,
	GN.CHL,
	GN.L_PHEO,
	GN.PHEO,
	GN.NH4 + GN.NO2 + GN.NO3		TIN,
	GN.TKNSP + GN.NO2 + GN.NO3	TN
FROM	WPG.RW_GLABN 	GN;


-- WPG.RW_GLABN_CAL_A source

CREATE VIEW WPG.RW_GLABN_CAL_A AS
SELECT
	GN.RWVISIT_ID,	
	GN.L_NO2,
	GN.NO2,
	GN.L_NO3,
	GN.NO3,
	GN.L_NH4,
	GN.NH4,
	GN.L_PO4,
	GN.PO4,
	GN.L_SIL,
	GN.SIL,
	GN.L_SS,
	GN.SS,
	GN.L_TKNS,
	GN.TKNS,
	GN.L_TPS,
	GN.TPS,
	GN.L_TKNSP,
	GN.TKNSP,
	GN.L_TPSP,
	GN.TPSP,
	GN.L_TS,
	GN.TS,
	GN.L_TVS,
	GN.TVS,
	GN.L_COD,
	GN.COD,
	GN.L_TCYN,
	GN.TCYN,
	GN.L_FL,
	GN.FL,
	GN.L_CL,
	GN.CL,
	GN.L_DETERG,
	GN.DETERG,
	GN.L_TOC,
	GN.TOC,
	GN.L_OIL,
	GN.OIL,
	GN.L_SULP,
	GN.SULP,
	GN.L_SSP,
	GN.SSP,
	GN.L_H2S,
	GN.H2S,
	GN.L_CHL,
	GN.CHL,
	GN.L_PHEO,
	GN.PHEO,
    ISNULL(GN.L_NH4, ISNULL(GN.L_NO2, GN.L_NO3))    L_TIN,
	GN.NH4 + GN.NO2 + GN.NO3		TIN,
	ISNULL(GN.L_TKNSP, ISNULL(GN.L_NO2, GN.L_NO3))	L_TN,
	GN.TKNSP + GN.NO2 + GN.NO3	TN
FROM	WPG.RW_GLABN 	GN;


-- WPG.RW_GLABN_MAX source

CREATE VIEW WPG.RW_GLABN_MAX AS
SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	MAX(GN.NH4)	NH4_MAX,
	MAX(GN.TKNS)	TKNS_MAX,
	MAX(GN.TKNSP)	TKNSP_MAX,
	MAX(GN.NO2)	NO2_MAX,
	MAX(GN.NO3)	NO3_MAX,
	MAX(GN.PO4)	PO4_MAX,
	MAX(GN.TPS)	TPS_MAX,
	MAX(GN.TPSP)	TPSP_MAX,
	MAX(GN.SIL)	SIL_MAX,
	MAX(GN.COD)	COD_MAX,
	MAX(GN.SS)	SS_MAX,
	MAX(GN.OIL)	OIL_MAX,
	MAX(GN.TVS)	TVS_MAX,
	MAX(GN.TS)	TS_MAX,
	MAX(GN.TCYN)	TCYN_MAX,
	MAX(GN.FL)	FL_MAX,
	MAX(GN.H2S)	H2S_MAX,
	MAX(GN.SULP)	SULP_MAX,
	MAX(GN.SSP)	SSP_MAX,
	MAX(GN.DETERG)	DETERG_MAX,
	MAX(GN.TOC)	TOC_MAX,
	MAX(GN.CL)	CL_MAX,
	MAX(GN.CHL)	CHL_MAX,
	MAX(GN.PHEO)	PHEO_MAX,
	MAX(GN.TIN)	TIN_MAX,
	MAX(GN.TN)	TN_MAX
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABN_CAL	GN	ON VI.RWVISIT_ID 	= GN.RWVISIT_ID
GROUP BY VI.SITE_ID,YEAR(VI.MDATE);


-- WPG.RW_GLABN_MAX_A source

CREATE VIEW WPG.RW_GLABN_MAX_A AS
SELECT
			SITE_ID,
			YR,
			TOTAL,
	CASE WHEN L_NH4_CNT = TOTAL THEN '<' ELSE NULL END	L_NH4_MAX,	NH4_MAX,
	CASE WHEN L_TKNS_CNT = TOTAL THEN '<' ELSE NULL END	L_TKNS_MAX,	TKNS_MAX,
	CASE WHEN L_TKNSP_CNT = TOTAL THEN '<' ELSE NULL END	L_TKNSP_MAX,	TKNSP_MAX,
	CASE WHEN L_NO2_CNT = TOTAL THEN '<' ELSE NULL END	L_NO2_MAX,	NO2_MAX,
	CASE WHEN L_NO3_CNT = TOTAL THEN '<' ELSE NULL END	L_NO3_MAX,	NO3_MAX,
	CASE WHEN L_PO4_CNT = TOTAL THEN '<' ELSE NULL END	L_PO4_MAX,	PO4_MAX,
	CASE WHEN L_TPS_CNT = TOTAL THEN '<' ELSE NULL END	L_TPS_MAX,	TPS_MAX,
	CASE WHEN L_TPSP_CNT = TOTAL THEN '<' ELSE NULL END	L_TPSP_MAX,	TPSP_MAX,
	CASE WHEN L_SIL_CNT = TOTAL THEN '<' ELSE NULL END	L_SIL_MAX,	SIL_MAX,
	CASE WHEN L_COD_CNT = TOTAL THEN '<' ELSE NULL END	L_COD_MAX,	COD_MAX,
	CASE WHEN L_SS_CNT = TOTAL THEN '<' ELSE NULL END	L_SS_MAX,	SS_MAX,
	CASE WHEN L_OIL_CNT = TOTAL THEN '<' ELSE NULL END	L_OIL_MAX,	OIL_MAX,
	CASE WHEN L_TVS_CNT = TOTAL THEN '<' ELSE NULL END	L_TVS_MAX,	TVS_MAX,
	CASE WHEN L_TS_CNT = TOTAL THEN '<' ELSE NULL END	L_TS_MAX,	TS_MAX,
	CASE WHEN L_TCYN_CNT = TOTAL THEN '<' ELSE NULL END	L_TCYN_MAX,	TCYN_MAX,
	CASE WHEN L_FL_CNT = TOTAL THEN '<' ELSE NULL END	L_FL_MAX,	FL_MAX,
	CASE WHEN L_H2S_CNT = TOTAL THEN '<' ELSE NULL END	L_H2S_MAX,	H2S_MAX,
	CASE WHEN L_SULP_CNT = TOTAL THEN '<' ELSE NULL END	L_SULP_MAX,	SULP_MAX,
	CASE WHEN L_SSP_CNT = TOTAL THEN '<' ELSE NULL END	L_SSP_MAX,	SSP_MAX,
	CASE WHEN L_DETERG_CNT = TOTAL THEN '<' ELSE NULL END	L_DETERG_MAX,	DETERG_MAX,
	CASE WHEN L_TOC_CNT = TOTAL THEN '<' ELSE NULL END	L_TOC_MAX,	TOC_MAX,
	CASE WHEN L_CL_CNT = TOTAL THEN '<' ELSE NULL END	L_CL_MAX,	CL_MAX,
	CASE WHEN L_CHL_CNT = TOTAL THEN '<' ELSE NULL END	L_CHL_MAX,	CHL_MAX,
	CASE WHEN L_PHEO_CNT = TOTAL THEN '<' ELSE NULL END	L_PHEO_MAX,	PHEO_MAX,
	CASE WHEN L_TIN_CNT = TOTAL THEN '<' ELSE NULL END	L_TIN_MAX,	TIN_MAX,
	CASE WHEN L_TN_CNT = TOTAL THEN '<' ELSE NULL END	L_TN_MAX,	TN_MAX
FROM
(SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	MAX(GN.NH4)	NH4_MAX,
	MAX(GN.TKNS)	TKNS_MAX,
	MAX(GN.TKNSP)	TKNSP_MAX,
	MAX(GN.NO2)	NO2_MAX,
	MAX(GN.NO3)	NO3_MAX,
	MAX(GN.PO4)	PO4_MAX,
	MAX(GN.TPS)	TPS_MAX,
	MAX(GN.TPSP)	TPSP_MAX,
	MAX(GN.SIL)	SIL_MAX,
	MAX(GN.COD)	COD_MAX,
	MAX(GN.SS)	SS_MAX,
	MAX(GN.OIL)	OIL_MAX,
	MAX(GN.TVS)	TVS_MAX,
	MAX(GN.TS)	TS_MAX,
	MAX(GN.TCYN)	TCYN_MAX,
	MAX(GN.FL)	FL_MAX,
	MAX(GN.H2S)	H2S_MAX,
	MAX(GN.SULP)	SULP_MAX,
	MAX(GN.SSP)	SSP_MAX,
	MAX(GN.DETERG)	DETERG_MAX,
	MAX(GN.TOC)	TOC_MAX,
	MAX(GN.CL)	CL_MAX,
	MAX(GN.CHL)	CHL_MAX,
	MAX(GN.PHEO)	PHEO_MAX,
	MAX(GN.TIN)	TIN_MAX,
	MAX(GN.TN)	TN_MAX,
	COUNT(GN.L_NH4)	L_NH4_CNT,
	COUNT(GN.L_TKNS)	L_TKNS_CNT,
	COUNT(GN.L_TKNSP)	L_TKNSP_CNT,
	COUNT(GN.L_NO2)	L_NO2_CNT,
	COUNT(GN.L_NO3)	L_NO3_CNT,
	COUNT(GN.L_PO4)	L_PO4_CNT,
	COUNT(GN.L_TPS)	L_TPS_CNT,
	COUNT(GN.L_TPSP)	L_TPSP_CNT,
	COUNT(GN.L_SIL)	L_SIL_CNT,
	COUNT(GN.L_COD)	L_COD_CNT,
	COUNT(GN.L_SS)	L_SS_CNT,
	COUNT(GN.L_OIL)	L_OIL_CNT,
	COUNT(GN.L_TVS)	L_TVS_CNT,
	COUNT(GN.L_TS)	L_TS_CNT,
	COUNT(GN.L_TCYN)	L_TCYN_CNT,
	COUNT(GN.L_FL)	L_FL_CNT,
	COUNT(GN.L_H2S)	L_H2S_CNT,
	COUNT(GN.L_SULP)	L_SULP_CNT,
	COUNT(GN.L_SSP)	L_SSP_CNT,
	COUNT(GN.L_DETERG)	L_DETERG_CNT,
	COUNT(GN.L_TOC)	L_TOC_CNT,
	COUNT(GN.L_CL)	L_CL_CNT,
	COUNT(GN.L_CHL)	L_CHL_CNT,
	COUNT(GN.L_PHEO)	L_PHEO_CNT,
	COUNT(GN.L_TIN)	L_TIN_CNT,
	COUNT(GN.L_TN)	L_TN_CNT
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABN_CAL_A	GN	ON VI.RWVISIT_ID	= GN.RWVISIT_ID
GROUP BY VI.SITE_ID,YEAR(VI.MDATE)) D;


-- WPG.RW_GLABN_MED source

CREATE VIEW WPG.RW_GLABN_MED AS
SELECT	SITE_ID,
	YEAR(MDATE)										YYYY,
	YR,
	AVG(CASE WHEN R_NH4 * 2 IN (N_NH4, N_NH4 + 1, N_NH4 + 2) THEN NH4 ELSE NULL END)		NH4_MED,
	AVG(CASE WHEN R_TKNS * 2 IN (N_TKNS, N_TKNS + 1, N_TKNS + 2) THEN TKNS ELSE NULL END)		TKNS_MED,
	AVG(CASE WHEN R_TKNSP * 2 IN (N_TKNSP, N_TKNSP + 1, N_TKNSP + 2) THEN TKNSP ELSE NULL END)	TKNSP_MED,
	AVG(CASE WHEN R_NO2 * 2 IN (N_NO2, N_NO2 + 1, N_NO2 + 2) THEN NO2 ELSE NULL END)		NO2_MED,
	AVG(CASE WHEN R_NO3 * 2 IN (N_NO3, N_NO3 + 1, N_NO3 + 2) THEN NO3 ELSE NULL END)		NO3_MED,
	AVG(CASE WHEN R_PO4 * 2 IN (N_PO4, N_PO4 + 1, N_PO4 + 2) THEN PO4 ELSE NULL END)		PO4_MED,
	AVG(CASE WHEN R_TPS * 2 IN (N_TPS, N_TPS + 1, N_TPS + 2) THEN TPS ELSE NULL END)		TPS_MED,
	AVG(CASE WHEN R_TPSP * 2 IN (N_TPSP, N_TPSP + 1, N_TPSP + 2) THEN TPSP ELSE NULL END)		TPSP_MED,
	AVG(CASE WHEN R_SIL * 2 IN (N_SIL, N_SIL + 1, N_SIL + 2) THEN SIL ELSE NULL END)		SIL_MED,
	AVG(CASE WHEN R_COD * 2 IN (N_COD, N_COD + 1, N_COD + 2) THEN COD ELSE NULL END)		COD_MED,
	AVG(CASE WHEN R_SS * 2 IN (N_SS, N_SS + 1, N_SS + 2) THEN SS ELSE NULL END)			SS_MED,
	AVG(CASE WHEN R_OIL * 2 IN (N_OIL, N_OIL + 1, N_OIL + 2) THEN OIL ELSE NULL END)		OIL_MED,
	AVG(CASE WHEN R_TVS * 2 IN (N_TVS, N_TVS + 1, N_TVS + 2) THEN TVS ELSE NULL END)		TVS_MED,
	AVG(CASE WHEN R_TS * 2 IN (N_TS, N_TS + 1, N_TS + 2) THEN TS ELSE NULL END)			TS_MED,
	AVG(CASE WHEN R_TCYN * 2 IN (N_TCYN, N_TCYN + 1, N_TCYN + 2) THEN TCYN ELSE NULL END)		TCYN_MED,
	AVG(CASE WHEN R_FL * 2 IN (N_FL, N_FL + 1, N_FL + 2) THEN FL ELSE NULL END)			FL_MED,
	AVG(CASE WHEN R_H2S * 2 IN (N_H2S, N_H2S + 1, N_H2S + 2) THEN H2S ELSE NULL END)		H2S_MED,
	AVG(CASE WHEN R_SULP * 2 IN (N_SULP, N_SULP + 1, N_SULP + 2) THEN SULP ELSE NULL END)		SULP_MED,
	AVG(CASE WHEN R_SSP * 2 IN (N_SSP, N_SSP + 1, N_SSP + 2) THEN SSP ELSE NULL END)		SSP_MED,
	AVG(CASE WHEN R_DETERG * 2 IN (N_DETERG, N_DETERG + 1, N_DETERG + 2) THEN DETERG ELSE NULL END)	DETERG_MED,
	AVG(CASE WHEN R_TOC * 2 IN (N_TOC, N_TOC + 1, N_TOC + 2) THEN TOC ELSE NULL END)		TOC_MED,
	AVG(CASE WHEN R_CL * 2 IN (N_CL, N_CL + 1, N_CL + 2) THEN CL ELSE NULL END)			CL_MED,
	AVG(CASE WHEN R_CHL * 2 IN (N_CHL, N_CHL + 1, N_CHL + 2) THEN CHL ELSE NULL END)		CHL_MED,
	AVG(CASE WHEN R_PHEO * 2 IN (N_PHEO, N_PHEO + 1, N_PHEO + 2) THEN PHEO ELSE NULL END)		PHEO_MED,
	AVG(CASE WHEN R_TIN * 2 IN (N_TIN, N_TIN + 1, N_TIN + 2) THEN TIN ELSE NULL END)		TIN_MED,
	AVG(CASE WHEN R_TN * 2 IN (N_TN, N_TN + 1, N_TN + 2) THEN TN ELSE NULL END)			TN_MED
FROM	(
	SELECT	A.RWVISIT_ID,
		A.SITE_ID,
		A.MDATE,
		A.YR,
		A.NH4,
		A.TKNS,
		A.TKNSP,
		A.NO2,
		A.NO3,
		A.PO4,
		A.TPS,
		A.TPSP,
		A.SIL,
		A.COD,
		A.SS,
		A.OIL,
		A.TVS,
		A.TS,
		A.TCYN,
		A.FL,
		A.H2S,
		A.SULP,
		A.SSP,
		A.DETERG,
		A.TOC,
		A.CL,
		A.CHL,
		A.PHEO,
		A.TIN,
		A.TN,
		COUNT(CASE WHEN A.NH4 < B.NH4 THEN 1
			WHEN A.NH4 = B.NH4 AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_NH4,
		COUNT(B.NH4)		N_NH4,
		COUNT(CASE WHEN A.TKNS < B.TKNS THEN 1
			WHEN A.TKNS = B.TKNS AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TKNS,
		COUNT(B.TKNS)		N_TKNS,
		COUNT(CASE WHEN A.TKNSP < B.TKNSP THEN 1
			WHEN A.TKNSP = B.TKNSP AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TKNSP,
		COUNT(B.TKNSP)		N_TKNSP,
		COUNT(CASE WHEN A.NO2 < B.NO2 THEN 1
			WHEN A.NO2 = B.NO2 AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_NO2,
		COUNT(B.NO2)		N_NO2,
		COUNT(CASE WHEN A.NO3 < B.NO3 THEN 1
			WHEN A.NO3 = B.NO3 AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_NO3,
		COUNT(B.NO3)		N_NO3,
		COUNT(CASE WHEN A.PO4 < B.PO4 THEN 1
			WHEN A.PO4 = B.PO4 AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_PO4,
		COUNT(B.PO4)		N_PO4,
		COUNT(CASE WHEN A.TPS < B.TPS THEN 1
			WHEN A.TPS = B.TPS AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TPS,
		COUNT(B.TPS)		N_TPS,
		COUNT(CASE WHEN A.TPSP < B.TPSP THEN 1
			WHEN A.TPSP = B.TPSP AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TPSP,
		COUNT(B.TPSP)		N_TPSP,
		COUNT(CASE WHEN A.SIL < B.SIL THEN 1
			WHEN A.SIL = B.SIL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_SIL,
		COUNT(B.SIL)		N_SIL,
		COUNT(CASE WHEN A.COD < B.COD THEN 1
			WHEN A.COD = B.COD AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_COD,
		COUNT(B.COD)		N_COD,
		COUNT(CASE WHEN A.SS < B.SS THEN 1
			WHEN A.SS = B.SS AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_SS,
		COUNT(B.SS)		N_SS,
		COUNT(CASE WHEN A.OIL < B.OIL THEN 1
			WHEN A.OIL = B.OIL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_OIL,
		COUNT(B.OIL)		N_OIL,
		COUNT(CASE WHEN A.TVS < B.TVS THEN 1
			WHEN A.TVS = B.TVS AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TVS,
		COUNT(B.TVS)		N_TVS,
		COUNT(CASE WHEN A.TS < B.TS THEN 1
			WHEN A.TS = B.TS AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TS,
		COUNT(B.TS)		N_TS,
		COUNT(CASE WHEN A.TCYN < B.TCYN THEN 1
			WHEN A.TCYN = B.TCYN AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TCYN,
		COUNT(B.TCYN)		N_TCYN,
		COUNT(CASE WHEN A.FL < B.FL THEN 1
			WHEN A.FL = B.FL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_FL,
		COUNT(B.FL)		N_FL,
		COUNT(CASE WHEN A.H2S < B.H2S THEN 1
			WHEN A.H2S = B.H2S AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_H2S,
		COUNT(B.H2S)		N_H2S,
		COUNT(CASE WHEN A.SULP < B.SULP THEN 1
			WHEN A.SULP = B.SULP AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_SULP,
		COUNT(B.SULP)		N_SULP,
		COUNT(CASE WHEN A.SSP < B.SSP THEN 1
			WHEN A.SSP = B.SSP AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_SSP,
		COUNT(B.SSP)		N_SSP,
		COUNT(CASE WHEN A.DETERG < B.DETERG THEN 1
			WHEN A.DETERG = B.DETERG AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_DETERG,
		COUNT(B.DETERG)		N_DETERG,
		COUNT(CASE WHEN A.TOC < B.TOC THEN 1
			WHEN A.TOC = B.TOC AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TOC,
		COUNT(B.TOC)		N_TOC,
		COUNT(CASE WHEN A.CL < B.CL THEN 1
			WHEN A.CL = B.CL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_CL,
		COUNT(B.CL)		N_CL,
		COUNT(CASE WHEN A.CHL < B.CHL THEN 1
			WHEN A.CHL = B.CHL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_CHL,
		COUNT(B.CHL)		N_CHL,
		COUNT(CASE WHEN A.PHEO < B.PHEO THEN 1
			WHEN A.PHEO = B.PHEO AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_PHEO,
		COUNT(B.PHEO)		N_PHEO,
		COUNT(CASE WHEN A.TIN < B.TIN THEN 1
			WHEN A.TIN = B.TIN AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TIN,
		COUNT(B.TIN)		N_TIN,
		COUNT(CASE WHEN A.TN < B.TN THEN 1
			WHEN A.TN = B.TN AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TN,
		COUNT(B.TN)			N_TN
	FROM	(SELECT	VI.RWVISIT_ID, VI.SITE_ID, VI.MDATE, YEAR(VI.MDATE) YR, 
			NH.NH4, NH.TKNS, NH.TKNSP, NH.NO2, NH.NO3, NH.PO4, NH.TPS, NH.TPSP, NH.SIL, NH.COD, NH.SS, 
			NH.OIL, NH.TVS, NH.TS, NH.TCYN, NH.FL, NH.H2S, NH.SULP, SSP, DETERG, TOC, CL, CHL, PHEO, TIN, TN
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_GLABN_CAL	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	A
	JOIN	(SELECT	VI.RWVISIT_ID, VI.SITE_ID, YEAR(VI.MDATE) YR, 
			NH.NH4, NH.TKNS, NH.TKNSP, NH.NO2, NH.NO3, NH.PO4, NH.TPS, NH.TPSP, NH.SIL, NH.COD, NH.SS, 
			NH.OIL, NH.TVS, NH.TS, NH.TCYN, NH.FL, NH.H2S, NH.SULP, SSP, DETERG, TOC, CL, CHL, PHEO, TIN, TN
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_GLABN_CAL	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	B
		ON A.SITE_ID = B.SITE_ID AND A.YR = B.YR
	GROUP BY 	A.RWVISIT_ID, A.SITE_ID, A.MDATE, A.YR, 
			A.NH4, A.TKNS, A.TKNSP, A.NO2, A.NO3, A.PO4, A.TPS, A.TPSP, A.SIL, A.COD, A.SS, A.OIL, A.TVS, 
			A.TS, A.TCYN, A.FL, A.H2S, A.SULP, A.SSP, A.DETERG, A.TOC, A.CL, A.CHL, A.PHEO, A.TN, A.TIN
	) C
GROUP BY SITE_ID, YEAR(MDATE), YR;


-- WPG.RW_GLABN_MED_A source

CREATE VIEW WPG.RW_GLABN_MED_A AS
SELECT
	D.SITE_ID,
	D.YR,
	D.TOTAL,
	CASE WHEN (L_NH4_CNT *2 > D.TOTAL) OR (L_NH4_CNT *2 = D.TOTAL AND NH4_MED = NH4_MED_U) THEN '<' ELSE NULL END	L_NH4_MED,	NH4_MED,
	CASE WHEN (L_TKNS_CNT *2 > D.TOTAL) OR (L_TKNS_CNT *2 = D.TOTAL AND TKNS_MED = TKNS_MED_U) THEN '<' ELSE NULL END	L_TKNS_MED,	TKNS_MED,
	CASE WHEN (L_TKNSP_CNT *2 > D.TOTAL) OR (L_TKNSP_CNT *2 = D.TOTAL AND TKNSP_MED = TKNSP_MED_U) THEN '<' ELSE NULL END	L_TKNSP_MED,	TKNSP_MED,
	CASE WHEN (L_NO2_CNT *2 > D.TOTAL) OR (L_NO2_CNT *2 = D.TOTAL AND NO2_MED = NO2_MED_U) THEN '<' ELSE NULL END	L_NO2_MED,	NO2_MED,
	CASE WHEN (L_NO3_CNT *2 > D.TOTAL) OR (L_NO3_CNT *2 = D.TOTAL AND NO3_MED = NO3_MED_U) THEN '<' ELSE NULL END	L_NO3_MED,	NO3_MED,
	CASE WHEN (L_PO4_CNT *2 > D.TOTAL) OR (L_PO4_CNT *2 = D.TOTAL AND PO4_MED = PO4_MED_U) THEN '<' ELSE NULL END	L_PO4_MED,	PO4_MED,
	CASE WHEN (L_TPS_CNT *2 > D.TOTAL) OR (L_TPS_CNT *2 = D.TOTAL AND TPS_MED = TPS_MED_U) THEN '<' ELSE NULL END	L_TPS_MED,	TPS_MED,
	CASE WHEN (L_TPSP_CNT *2 > D.TOTAL) OR (L_TPSP_CNT *2 = D.TOTAL AND TPSP_MED = TPSP_MED_U) THEN '<' ELSE NULL END	L_TPSP_MED,	TPSP_MED,
	CASE WHEN (L_SIL_CNT *2 > D.TOTAL) OR (L_SIL_CNT *2 = D.TOTAL AND SIL_MED = SIL_MED_U) THEN '<' ELSE NULL END	L_SIL_MED,	SIL_MED,
	CASE WHEN (L_COD_CNT *2 > D.TOTAL) OR (L_COD_CNT *2 = D.TOTAL AND COD_MED = COD_MED_U) THEN '<' ELSE NULL END	L_COD_MED,	COD_MED,
	CASE WHEN (L_SS_CNT *2 > D.TOTAL) OR (L_SS_CNT *2 = D.TOTAL AND SS_MED = SS_MED_U) THEN '<' ELSE NULL END	L_SS_MED,	SS_MED,
	CASE WHEN (L_OIL_CNT *2 > D.TOTAL) OR (L_OIL_CNT *2 = D.TOTAL AND OIL_MED = OIL_MED_U) THEN '<' ELSE NULL END	L_OIL_MED,	OIL_MED,
	CASE WHEN (L_TVS_CNT *2 > D.TOTAL) OR (L_TVS_CNT *2 = D.TOTAL AND TVS_MED = TVS_MED_U) THEN '<' ELSE NULL END	L_TVS_MED,	TVS_MED,
	CASE WHEN (L_TS_CNT *2 > D.TOTAL) OR (L_TS_CNT *2 = D.TOTAL AND TS_MED = TS_MED_U) THEN '<' ELSE NULL END	L_TS_MED,	TS_MED,
	CASE WHEN (L_TCYN_CNT *2 > D.TOTAL) OR (L_TCYN_CNT *2 = D.TOTAL AND TCYN_MED = TCYN_MED_U) THEN '<' ELSE NULL END	L_TCYN_MED,	TCYN_MED,
	CASE WHEN (L_FL_CNT *2 > D.TOTAL) OR (L_FL_CNT *2 = D.TOTAL AND FL_MED = FL_MED_U) THEN '<' ELSE NULL END	L_FL_MED,	FL_MED,
	CASE WHEN (L_H2S_CNT *2 > D.TOTAL) OR (L_H2S_CNT *2 = D.TOTAL AND H2S_MED = H2S_MED_U) THEN '<' ELSE NULL END	L_H2S_MED,	H2S_MED,
	CASE WHEN (L_SULP_CNT *2 > D.TOTAL) OR (L_SULP_CNT *2 = D.TOTAL AND SULP_MED = SULP_MED_U) THEN '<' ELSE NULL END	L_SULP_MED,	SULP_MED,
	CASE WHEN (L_SSP_CNT *2 > D.TOTAL) OR (L_SSP_CNT *2 = D.TOTAL AND SSP_MED = SSP_MED_U) THEN '<' ELSE NULL END	L_SSP_MED,	SSP_MED,
	CASE WHEN (L_DETERG_CNT *2 > D.TOTAL) OR (L_DETERG_CNT *2 = D.TOTAL AND DETERG_MED = DETERG_MED_U) THEN '<' ELSE NULL END	L_DETERG_MED,	DETERG_MED,
	CASE WHEN (L_TOC_CNT *2 > D.TOTAL) OR (L_TOC_CNT *2 = D.TOTAL AND TOC_MED = TOC_MED_U) THEN '<' ELSE NULL END	L_TOC_MED,	TOC_MED,
	CASE WHEN (L_CL_CNT *2 > D.TOTAL) OR (L_CL_CNT *2 = D.TOTAL AND CL_MED = CL_MED_U) THEN '<' ELSE NULL END	L_CL_MED,	CL_MED,
	CASE WHEN (L_CHL_CNT *2 > D.TOTAL) OR (L_CHL_CNT *2 = D.TOTAL AND CHL_MED = CHL_MED_U) THEN '<' ELSE NULL END	L_CHL_MED,	CHL_MED,
	CASE WHEN (L_PHEO_CNT *2 > D.TOTAL) OR (L_PHEO_CNT *2 = D.TOTAL AND PHEO_MED = PHEO_MED_U) THEN '<' ELSE NULL END	L_PHEO_MED,	PHEO_MED,
	CASE WHEN (L_TIN_CNT *2 > D.TOTAL) OR (L_TIN_CNT *2 = D.TOTAL AND TIN_MED = TIN_MED_U) THEN '<' ELSE NULL END	L_TIN_MED,	TIN_MED,
	CASE WHEN (L_TN_CNT *2 > D.TOTAL) OR (L_TN_CNT *2 = D.TOTAL AND TN_MED = TN_MED_U) THEN '<' ELSE NULL END	L_TN_MED,	TN_MED
FROM
(SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	COUNT(GN.L_NH4)	L_NH4_CNT,
	COUNT(GN.L_TKNS)	L_TKNS_CNT,
	COUNT(GN.L_TKNSP)	L_TKNSP_CNT,
	COUNT(GN.L_NO2)	L_NO2_CNT,
	COUNT(GN.L_NO3)	L_NO3_CNT,
	COUNT(GN.L_PO4)	L_PO4_CNT,
	COUNT(GN.L_TPS)	L_TPS_CNT,
	COUNT(GN.L_TPSP)	L_TPSP_CNT,
	COUNT(GN.L_SIL)	L_SIL_CNT,
	COUNT(GN.L_COD)	L_COD_CNT,
	COUNT(GN.L_SS)	L_SS_CNT,
	COUNT(GN.L_OIL)	L_OIL_CNT,
	COUNT(GN.L_TVS)	L_TVS_CNT,
	COUNT(GN.L_TS)	L_TS_CNT,
	COUNT(GN.L_TCYN)	L_TCYN_CNT,
	COUNT(GN.L_FL)	L_FL_CNT,
	COUNT(GN.L_H2S)	L_H2S_CNT,
	COUNT(GN.L_SULP)	L_SULP_CNT,
	COUNT(GN.L_SSP)	L_SSP_CNT,
	COUNT(GN.L_DETERG)	L_DETERG_CNT,
	COUNT(GN.L_TOC)	L_TOC_CNT,
	COUNT(GN.L_CL)	L_CL_CNT,
	COUNT(GN.L_CHL)	L_CHL_CNT,
	COUNT(GN.L_PHEO)	L_PHEO_CNT,
	COUNT(GN.L_TIN)	L_TIN_CNT,
	COUNT(GN.L_TN)	L_TN_CNT
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABN_CAL_A	GN	ON VI.RWVISIT_ID	= GN.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE)) D
JOIN
(SELECT	SITE_ID,
	YEAR(MDATE)										YYYY,
	YR,
	AVG(CASE WHEN R_NH4 * 2 IN (N_NH4, N_NH4 + 1, N_NH4 + 2) THEN NH4 ELSE NULL END)		NH4_MED,
	AVG(CASE WHEN R_TKNS * 2 IN (N_TKNS, N_TKNS + 1, N_TKNS + 2) THEN TKNS ELSE NULL END)		TKNS_MED,
	AVG(CASE WHEN R_TKNSP * 2 IN (N_TKNSP, N_TKNSP + 1, N_TKNSP + 2) THEN TKNSP ELSE NULL END)	TKNSP_MED,
	AVG(CASE WHEN R_NO2 * 2 IN (N_NO2, N_NO2 + 1, N_NO2 + 2) THEN NO2 ELSE NULL END)		NO2_MED,
	AVG(CASE WHEN R_NO3 * 2 IN (N_NO3, N_NO3 + 1, N_NO3 + 2) THEN NO3 ELSE NULL END)		NO3_MED,
	AVG(CASE WHEN R_PO4 * 2 IN (N_PO4, N_PO4 + 1, N_PO4 + 2) THEN PO4 ELSE NULL END)		PO4_MED,
	AVG(CASE WHEN R_TPS * 2 IN (N_TPS, N_TPS + 1, N_TPS + 2) THEN TPS ELSE NULL END)		TPS_MED,
	AVG(CASE WHEN R_TPSP * 2 IN (N_TPSP, N_TPSP + 1, N_TPSP + 2) THEN TPSP ELSE NULL END)		TPSP_MED,
	AVG(CASE WHEN R_SIL * 2 IN (N_SIL, N_SIL + 1, N_SIL + 2) THEN SIL ELSE NULL END)		SIL_MED,
	AVG(CASE WHEN R_COD * 2 IN (N_COD, N_COD + 1, N_COD + 2) THEN COD ELSE NULL END)		COD_MED,
	AVG(CASE WHEN R_SS * 2 IN (N_SS, N_SS + 1, N_SS + 2) THEN SS ELSE NULL END)			SS_MED,
	AVG(CASE WHEN R_OIL * 2 IN (N_OIL, N_OIL + 1, N_OIL + 2) THEN OIL ELSE NULL END)		OIL_MED,
	AVG(CASE WHEN R_TVS * 2 IN (N_TVS, N_TVS + 1, N_TVS + 2) THEN TVS ELSE NULL END)		TVS_MED,
	AVG(CASE WHEN R_TS * 2 IN (N_TS, N_TS + 1, N_TS + 2) THEN TS ELSE NULL END)			TS_MED,
	AVG(CASE WHEN R_TCYN * 2 IN (N_TCYN, N_TCYN + 1, N_TCYN + 2) THEN TCYN ELSE NULL END)		TCYN_MED,
	AVG(CASE WHEN R_FL * 2 IN (N_FL, N_FL + 1, N_FL + 2) THEN FL ELSE NULL END)			FL_MED,
	AVG(CASE WHEN R_H2S * 2 IN (N_H2S, N_H2S + 1, N_H2S + 2) THEN H2S ELSE NULL END)		H2S_MED,
	AVG(CASE WHEN R_SULP * 2 IN (N_SULP, N_SULP + 1, N_SULP + 2) THEN SULP ELSE NULL END)		SULP_MED,
	AVG(CASE WHEN R_SSP * 2 IN (N_SSP, N_SSP + 1, N_SSP + 2) THEN SSP ELSE NULL END)		SSP_MED,
	AVG(CASE WHEN R_DETERG * 2 IN (N_DETERG, N_DETERG + 1, N_DETERG + 2) THEN DETERG ELSE NULL END)	DETERG_MED,
	AVG(CASE WHEN R_TOC * 2 IN (N_TOC, N_TOC + 1, N_TOC + 2) THEN TOC ELSE NULL END)		TOC_MED,
	AVG(CASE WHEN R_CL * 2 IN (N_CL, N_CL + 1, N_CL + 2) THEN CL ELSE NULL END)			CL_MED,
	AVG(CASE WHEN R_CHL * 2 IN (N_CHL, N_CHL + 1, N_CHL + 2) THEN CHL ELSE NULL END)		CHL_MED,
	AVG(CASE WHEN R_PHEO * 2 IN (N_PHEO, N_PHEO + 1, N_PHEO + 2) THEN PHEO ELSE NULL END)		PHEO_MED,
	AVG(CASE WHEN R_TIN * 2 IN (N_TIN, N_TIN + 1, N_TIN + 2) THEN TIN ELSE NULL END)		TIN_MED,
	AVG(CASE WHEN R_TN * 2 IN (N_TN, N_TN + 1, N_TN + 2) THEN TN ELSE NULL END)			TN_MED,
	MAX(CASE WHEN R_NH4 * 2 IN (N_NH4, N_NH4 + 1, N_NH4 + 2) THEN NH4 ELSE NULL END)		NH4_MED_U,
	MAX(CASE WHEN R_TKNS * 2 IN (N_TKNS, N_TKNS + 1, N_TKNS + 2) THEN TKNS ELSE NULL END)		TKNS_MED_U,
	MAX(CASE WHEN R_TKNSP * 2 IN (N_TKNSP, N_TKNSP + 1, N_TKNSP + 2) THEN TKNSP ELSE NULL END)	TKNSP_MED_U,
	MAX(CASE WHEN R_NO2 * 2 IN (N_NO2, N_NO2 + 1, N_NO2 + 2) THEN NO2 ELSE NULL END)		NO2_MED_U,
	MAX(CASE WHEN R_NO3 * 2 IN (N_NO3, N_NO3 + 1, N_NO3 + 2) THEN NO3 ELSE NULL END)		NO3_MED_U,
	MAX(CASE WHEN R_PO4 * 2 IN (N_PO4, N_PO4 + 1, N_PO4 + 2) THEN PO4 ELSE NULL END)		PO4_MED_U,
	MAX(CASE WHEN R_TPS * 2 IN (N_TPS, N_TPS + 1, N_TPS + 2) THEN TPS ELSE NULL END)		TPS_MED_U,
	MAX(CASE WHEN R_TPSP * 2 IN (N_TPSP, N_TPSP + 1, N_TPSP + 2) THEN TPSP ELSE NULL END)		TPSP_MED_U,
	MAX(CASE WHEN R_SIL * 2 IN (N_SIL, N_SIL + 1, N_SIL + 2) THEN SIL ELSE NULL END)		SIL_MED_U,
	MAX(CASE WHEN R_COD * 2 IN (N_COD, N_COD + 1, N_COD + 2) THEN COD ELSE NULL END)		COD_MED_U,
	MAX(CASE WHEN R_SS * 2 IN (N_SS, N_SS + 1, N_SS + 2) THEN SS ELSE NULL END)			SS_MED_U,
	MAX(CASE WHEN R_OIL * 2 IN (N_OIL, N_OIL + 1, N_OIL + 2) THEN OIL ELSE NULL END)		OIL_MED_U,
	MAX(CASE WHEN R_TVS * 2 IN (N_TVS, N_TVS + 1, N_TVS + 2) THEN TVS ELSE NULL END)		TVS_MED_U,
	MAX(CASE WHEN R_TS * 2 IN (N_TS, N_TS + 1, N_TS + 2) THEN TS ELSE NULL END)			TS_MED_U,
	MAX(CASE WHEN R_TCYN * 2 IN (N_TCYN, N_TCYN + 1, N_TCYN + 2) THEN TCYN ELSE NULL END)		TCYN_MED_U,
	MAX(CASE WHEN R_FL * 2 IN (N_FL, N_FL + 1, N_FL + 2) THEN FL ELSE NULL END)			FL_MED_U,
	MAX(CASE WHEN R_H2S * 2 IN (N_H2S, N_H2S + 1, N_H2S + 2) THEN H2S ELSE NULL END)		H2S_MED_U,
	MAX(CASE WHEN R_SULP * 2 IN (N_SULP, N_SULP + 1, N_SULP + 2) THEN SULP ELSE NULL END)		SULP_MED_U,
	MAX(CASE WHEN R_SSP * 2 IN (N_SSP, N_SSP + 1, N_SSP + 2) THEN SSP ELSE NULL END)		SSP_MED_U,
	MAX(CASE WHEN R_DETERG * 2 IN (N_DETERG, N_DETERG + 1, N_DETERG + 2) THEN DETERG ELSE NULL END)	DETERG_MED_U,
	MAX(CASE WHEN R_TOC * 2 IN (N_TOC, N_TOC + 1, N_TOC + 2) THEN TOC ELSE NULL END)		TOC_MED_U,
	MAX(CASE WHEN R_CL * 2 IN (N_CL, N_CL + 1, N_CL + 2) THEN CL ELSE NULL END)			CL_MED_U,
	MAX(CASE WHEN R_CHL * 2 IN (N_CHL, N_CHL + 1, N_CHL + 2) THEN CHL ELSE NULL END)		CHL_MED_U,
	MAX(CASE WHEN R_PHEO * 2 IN (N_PHEO, N_PHEO + 1, N_PHEO + 2) THEN PHEO ELSE NULL END)		PHEO_MED_U,
	MAX(CASE WHEN R_TIN * 2 IN (N_TIN, N_TIN + 1, N_TIN + 2) THEN TIN ELSE NULL END)		TIN_MED_U,
	MAX(CASE WHEN R_TN * 2 IN (N_TN, N_TN + 1, N_TN + 2) THEN TN ELSE NULL END)			TN_MED_U
FROM	(
	SELECT	A.RWVISIT_ID,
		A.SITE_ID,
		A.MDATE,
		A.YR,
		A.NH4,
		A.TKNS,
		A.TKNSP,
		A.NO2,
		A.NO3,
		A.PO4,
		A.TPS,
		A.TPSP,
		A.SIL,
		A.COD,
		A.SS,
		A.OIL,
		A.TVS,
		A.TS,
		A.TCYN,
		A.FL,
		A.H2S,
		A.SULP,
		A.SSP,
		A.DETERG,
		A.TOC,
		A.CL,
		A.CHL,
		A.PHEO,
		A.TIN,
		A.TN,
		COUNT(CASE WHEN A.NH4 < B.NH4 THEN 1
			WHEN A.NH4 = B.NH4 AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_NH4,
		COUNT(B.NH4)		N_NH4,
		COUNT(CASE WHEN A.TKNS < B.TKNS THEN 1
			WHEN A.TKNS = B.TKNS AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TKNS,
		COUNT(B.TKNS)		N_TKNS,
		COUNT(CASE WHEN A.TKNSP < B.TKNSP THEN 1
			WHEN A.TKNSP = B.TKNSP AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TKNSP,
		COUNT(B.TKNSP)		N_TKNSP,
		COUNT(CASE WHEN A.NO2 < B.NO2 THEN 1
			WHEN A.NO2 = B.NO2 AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_NO2,
		COUNT(B.NO2)		N_NO2,
		COUNT(CASE WHEN A.NO3 < B.NO3 THEN 1
			WHEN A.NO3 = B.NO3 AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_NO3,
		COUNT(B.NO3)		N_NO3,
		COUNT(CASE WHEN A.PO4 < B.PO4 THEN 1
			WHEN A.PO4 = B.PO4 AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_PO4,
		COUNT(B.PO4)		N_PO4,
		COUNT(CASE WHEN A.TPS < B.TPS THEN 1
			WHEN A.TPS = B.TPS AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TPS,
		COUNT(B.TPS)		N_TPS,
		COUNT(CASE WHEN A.TPSP < B.TPSP THEN 1
			WHEN A.TPSP = B.TPSP AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TPSP,
		COUNT(B.TPSP)		N_TPSP,
		COUNT(CASE WHEN A.SIL < B.SIL THEN 1
			WHEN A.SIL = B.SIL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_SIL,
		COUNT(B.SIL)		N_SIL,
		COUNT(CASE WHEN A.COD < B.COD THEN 1
			WHEN A.COD = B.COD AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_COD,
		COUNT(B.COD)		N_COD,
		COUNT(CASE WHEN A.SS < B.SS THEN 1
			WHEN A.SS = B.SS AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_SS,
		COUNT(B.SS)		N_SS,
		COUNT(CASE WHEN A.OIL < B.OIL THEN 1
			WHEN A.OIL = B.OIL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_OIL,
		COUNT(B.OIL)		N_OIL,
		COUNT(CASE WHEN A.TVS < B.TVS THEN 1
			WHEN A.TVS = B.TVS AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TVS,
		COUNT(B.TVS)		N_TVS,
		COUNT(CASE WHEN A.TS < B.TS THEN 1
			WHEN A.TS = B.TS AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TS,
		COUNT(B.TS)		N_TS,
		COUNT(CASE WHEN A.TCYN < B.TCYN THEN 1
			WHEN A.TCYN = B.TCYN AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TCYN,
		COUNT(B.TCYN)		N_TCYN,
		COUNT(CASE WHEN A.FL < B.FL THEN 1
			WHEN A.FL = B.FL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_FL,
		COUNT(B.FL)		N_FL,
		COUNT(CASE WHEN A.H2S < B.H2S THEN 1
			WHEN A.H2S = B.H2S AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_H2S,
		COUNT(B.H2S)		N_H2S,
		COUNT(CASE WHEN A.SULP < B.SULP THEN 1
			WHEN A.SULP = B.SULP AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_SULP,
		COUNT(B.SULP)		N_SULP,
		COUNT(CASE WHEN A.SSP < B.SSP THEN 1
			WHEN A.SSP = B.SSP AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_SSP,
		COUNT(B.SSP)		N_SSP,
		COUNT(CASE WHEN A.DETERG < B.DETERG THEN 1
			WHEN A.DETERG = B.DETERG AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_DETERG,
		COUNT(B.DETERG)		N_DETERG,
		COUNT(CASE WHEN A.TOC < B.TOC THEN 1
			WHEN A.TOC = B.TOC AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TOC,
		COUNT(B.TOC)		N_TOC,
		COUNT(CASE WHEN A.CL < B.CL THEN 1
			WHEN A.CL = B.CL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_CL,
		COUNT(B.CL)		N_CL,
		COUNT(CASE WHEN A.CHL < B.CHL THEN 1
			WHEN A.CHL = B.CHL AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_CHL,
		COUNT(B.CHL)		N_CHL,
		COUNT(CASE WHEN A.PHEO < B.PHEO THEN 1
			WHEN A.PHEO = B.PHEO AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_PHEO,
		COUNT(B.PHEO)		N_PHEO,
		COUNT(CASE WHEN A.TIN < B.TIN THEN 1
			WHEN A.TIN = B.TIN AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TIN,
		COUNT(B.TIN)		N_TIN,
		COUNT(CASE WHEN A.TN < B.TN THEN 1
			WHEN A.TN = B.TN AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_TN,
		COUNT(B.TN)			N_TN
	FROM	(SELECT	VI.RWVISIT_ID, VI.SITE_ID, VI.MDATE, YEAR(VI.MDATE) YR, 
			NH.NH4, NH.TKNS, NH.TKNSP, NH.NO2, NH.NO3, NH.PO4, NH.TPS, NH.TPSP, NH.SIL, NH.COD, NH.SS, 
			NH.OIL, NH.TVS, NH.TS, NH.TCYN, NH.FL, NH.H2S, NH.SULP, SSP, DETERG, TOC, CL, CHL, PHEO, TIN, TN
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_GLABN_CAL	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	A
	JOIN	(SELECT	VI.RWVISIT_ID, VI.SITE_ID, YEAR(VI.MDATE) YR, 
			NH.NH4, NH.TKNS, NH.TKNSP, NH.NO2, NH.NO3, NH.PO4, NH.TPS, NH.TPSP, NH.SIL, NH.COD, NH.SS, 
			NH.OIL, NH.TVS, NH.TS, NH.TCYN, NH.FL, NH.H2S, NH.SULP, SSP, DETERG, TOC, CL, CHL, PHEO, TIN, TN
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_GLABN_CAL	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	B
		ON A.SITE_ID = B.SITE_ID AND A.YR = B.YR
	GROUP BY 	A.RWVISIT_ID, A.SITE_ID, A.MDATE, A.YR, 
			A.NH4, A.TKNS, A.TKNSP, A.NO2, A.NO3, A.PO4, A.TPS, A.TPSP, A.SIL, A.COD, A.SS, A.OIL, A.TVS, 
			A.TS, A.TCYN, A.FL, A.H2S, A.SULP, A.SSP, A.DETERG, A.TOC, A.CL, A.CHL, A.PHEO, A.TN, A.TIN
	) C
GROUP BY SITE_ID, YEAR(MDATE), YR) E
ON   D.SITE_ID = E.SITE_ID AND D.YR = E.YR;


-- WPG.RW_GLABN_MIN source

CREATE VIEW WPG.RW_GLABN_MIN AS
SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	MIN(GN.NH4)	NH4_MIN,
	MIN(GN.TKNS)	TKNS_MIN,
	MIN(GN.TKNSP)	TKNSP_MIN,
	MIN(GN.NO2)	NO2_MIN,
	MIN(GN.NO3)	NO3_MIN,
	MIN(GN.PO4)	PO4_MIN,
	MIN(GN.TPS)	TPS_MIN,
	MIN(GN.TPSP)	TPSP_MIN,
	MIN(GN.SIL)	SIL_MIN,
	MIN(GN.COD)	COD_MIN,
	MIN(GN.SS)	SS_MIN,
	MIN(GN.OIL)	OIL_MIN,
	MIN(GN.TVS)	TVS_MIN,
	MIN(GN.TS)	TS_MIN,
	MIN(GN.TCYN)	TCYN_MIN,
	MIN(GN.FL)	FL_MIN,
	MIN(GN.H2S)	H2S_MIN,
	MIN(GN.SULP)	SULP_MIN,
	MIN(GN.SSP)	SSP_MIN,
	MIN(GN.DETERG)	DETERG_MIN,
	MIN(GN.TOC)	TOC_MIN,
	MIN(GN.CL)	CL_MIN,
	MIN(GN.CHL)	CHL_MIN,
	MIN(GN.PHEO)	PHEO_MIN,
	MIN(GN.TIN)	TIN_MIN,
	MIN(GN.TN)	TN_MIN
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABN_CAL	GN	ON VI.RWVISIT_ID	= GN.RWVISIT_ID
GROUP BY VI.SITE_ID,YEAR(VI.MDATE);


-- WPG.RW_GLABN_MIN_A source

CREATE VIEW WPG.RW_GLABN_MIN_A AS
SELECT
			SITE_ID,
			YR,
			TOTAL,
	CASE WHEN L_NH4_CNT =0 THEN NULL ELSE '<' END	L_NH4_MIN,	NH4_MIN,
	CASE WHEN L_TKNS_CNT =0 THEN NULL ELSE '<' END	L_TKNS_MIN,	TKNS_MIN,
	CASE WHEN L_TKNSP_CNT =0 THEN NULL ELSE '<' END	L_TKNSP_MIN,	TKNSP_MIN,
	CASE WHEN L_NO2_CNT =0 THEN NULL ELSE '<' END	L_NO2_MIN,	NO2_MIN,
	CASE WHEN L_NO3_CNT =0 THEN NULL ELSE '<' END	L_NO3_MIN,	NO3_MIN,
	CASE WHEN L_PO4_CNT =0 THEN NULL ELSE '<' END	L_PO4_MIN,	PO4_MIN,
	CASE WHEN L_TPS_CNT =0 THEN NULL ELSE '<' END	L_TPS_MIN,	TPS_MIN,
	CASE WHEN L_TPSP_CNT =0 THEN NULL ELSE '<' END	L_TPSP_MIN,	TPSP_MIN,
	CASE WHEN L_SIL_CNT =0 THEN NULL ELSE '<' END	L_SIL_MIN,	SIL_MIN,
	CASE WHEN L_COD_CNT =0 THEN NULL ELSE '<' END	L_COD_MIN,	COD_MIN,
	CASE WHEN L_SS_CNT =0 THEN NULL ELSE '<' END	L_SS_MIN,	SS_MIN,
	CASE WHEN L_OIL_CNT =0 THEN NULL ELSE '<' END	L_OIL_MIN,	OIL_MIN,
	CASE WHEN L_TVS_CNT =0 THEN NULL ELSE '<' END	L_TVS_MIN,	TVS_MIN,
	CASE WHEN L_TS_CNT =0 THEN NULL ELSE '<' END	L_TS_MIN,	TS_MIN,
	CASE WHEN L_TCYN_CNT =0 THEN NULL ELSE '<' END	L_TCYN_MIN,	TCYN_MIN,
	CASE WHEN L_FL_CNT =0 THEN NULL ELSE '<' END	L_FL_MIN,	FL_MIN,
	CASE WHEN L_H2S_CNT =0 THEN NULL ELSE '<' END	L_H2S_MIN,	H2S_MIN,
	CASE WHEN L_SULP_CNT =0 THEN NULL ELSE '<' END	L_SULP_MIN,	SULP_MIN,
	CASE WHEN L_SSP_CNT =0 THEN NULL ELSE '<' END	L_SSP_MIN,	SSP_MIN,
	CASE WHEN L_DETERG_CNT =0 THEN NULL ELSE '<' END	L_DETERG_MIN,	DETERG_MIN,
	CASE WHEN L_TOC_CNT =0 THEN NULL ELSE '<' END	L_TOC_MIN,	TOC_MIN,
	CASE WHEN L_CL_CNT =0 THEN NULL ELSE '<' END	L_CL_MIN,	CL_MIN,
	CASE WHEN L_CHL_CNT =0 THEN NULL ELSE '<' END	L_CHL_MIN,	CHL_MIN,
	CASE WHEN L_PHEO_CNT =0 THEN NULL ELSE '<' END	L_PHEO_MIN,	PHEO_MIN,
	CASE WHEN L_TIN_CNT =0 THEN NULL ELSE '<' END	L_TIN_MIN,	TIN_MIN,
	CASE WHEN L_TN_CNT =0 THEN NULL ELSE '<' END	L_TN_MIN,	TN_MIN
FROM
(SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	MIN(GN.NH4)	NH4_MIN,
	MIN(GN.TKNS)	TKNS_MIN,
	MIN(GN.TKNSP)	TKNSP_MIN,
	MIN(GN.NO2)	NO2_MIN,
	MIN(GN.NO3)	NO3_MIN,
	MIN(GN.PO4)	PO4_MIN,
	MIN(GN.TPS)	TPS_MIN,
	MIN(GN.TPSP)	TPSP_MIN,
	MIN(GN.SIL)	SIL_MIN,
	MIN(GN.COD)	COD_MIN,
	MIN(GN.SS)	SS_MIN,
	MIN(GN.OIL)	OIL_MIN,
	MIN(GN.TVS)	TVS_MIN,
	MIN(GN.TS)	TS_MIN,
	MIN(GN.TCYN)	TCYN_MIN,
	MIN(GN.FL)	FL_MIN,
	MIN(GN.H2S)	H2S_MIN,
	MIN(GN.SULP)	SULP_MIN,
	MIN(GN.SSP)	SSP_MIN,
	MIN(GN.DETERG)	DETERG_MIN,
	MIN(GN.TOC)	TOC_MIN,
	MIN(GN.CL)	CL_MIN,
	MIN(GN.CHL)	CHL_MIN,
	MIN(GN.PHEO)	PHEO_MIN,
	MIN(GN.TIN)	TIN_MIN,
	MIN(GN.TN)	TN_MIN,
	COUNT(GN.L_NH4)	L_NH4_CNT,
	COUNT(GN.L_TKNS)	L_TKNS_CNT,
	COUNT(GN.L_TKNSP)	L_TKNSP_CNT,
	COUNT(GN.L_NO2)	L_NO2_CNT,
	COUNT(GN.L_NO3)	L_NO3_CNT,
	COUNT(GN.L_PO4)	L_PO4_CNT,
	COUNT(GN.L_TPS)	L_TPS_CNT,
	COUNT(GN.L_TPSP)	L_TPSP_CNT,
	COUNT(GN.L_SIL)	L_SIL_CNT,
	COUNT(GN.L_COD)	L_COD_CNT,
	COUNT(GN.L_SS)	L_SS_CNT,
	COUNT(GN.L_OIL)	L_OIL_CNT,
	COUNT(GN.L_TVS)	L_TVS_CNT,
	COUNT(GN.L_TS)	L_TS_CNT,
	COUNT(GN.L_TCYN)	L_TCYN_CNT,
	COUNT(GN.L_FL)	L_FL_CNT,
	COUNT(GN.L_H2S)	L_H2S_CNT,
	COUNT(GN.L_SULP)	L_SULP_CNT,
	COUNT(GN.L_SSP)	L_SSP_CNT,
	COUNT(GN.L_DETERG)	L_DETERG_CNT,
	COUNT(GN.L_TOC)	L_TOC_CNT,
	COUNT(GN.L_CL)	L_CL_CNT,
	COUNT(GN.L_CHL)	L_CHL_CNT,
	COUNT(GN.L_PHEO)	L_PHEO_CNT,
	COUNT(GN.L_TIN)	L_TIN_CNT,
	COUNT(GN.L_TN)	L_TN_CNT
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABN_CAL_A	GN	ON VI.RWVISIT_ID	= GN.RWVISIT_ID
GROUP BY VI.SITE_ID,YEAR(VI.MDATE)) D;


-- WPG.RW_GLABN_STDEV source

CREATE VIEW WPG.RW_GLABN_STDEV AS
SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	STDEV(GN.NH4)	NH4_STDEV,
	STDEV(GN.TKNS)	TKNS_STDEV,
	STDEV(GN.TKNSP)	TKNSP_STDEV,
	STDEV(GN.NO2)	NO2_STDEV,
	STDEV(GN.NO3)	NO3_STDEV,
	STDEV(GN.PO4)	PO4_STDEV,
	STDEV(GN.TPS)	TPS_STDEV,
	STDEV(GN.TPSP)	TPSP_STDEV,
	STDEV(GN.SIL)	SIL_STDEV,
	STDEV(GN.COD)	COD_STDEV,
	STDEV(GN.SS)	SS_STDEV,
	STDEV(GN.OIL)	OIL_STDEV,
	STDEV(GN.TVS)	TVS_STDEV,
	STDEV(GN.TS)	TS_STDEV,
	STDEV(GN.TCYN)	TCYN_STDEV,
	STDEV(GN.FL)	FL_STDEV,
	STDEV(GN.H2S)	H2S_STDEV,
	STDEV(GN.SULP)	SULP_STDEV,
	STDEV(GN.SSP)	SSP_STDEV,
	STDEV(GN.DETERG)	DETERG_STDEV,
	STDEV(GN.TOC)	TOC_STDEV,
	STDEV(GN.CL)	CL_STDEV,
	STDEV(GN.CHL)	CHL_STDEV,
	STDEV(GN.PHEO)	PHEO_STDEV,
	STDEV(GN.TIN)	TIN_STDEV,
	STDEV(GN.TN)	TN_STDEV
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABN_CAL	GN	ON VI.RWVISIT_ID	= GN.RWVISIT_ID
GROUP BY VI.SITE_ID,YEAR(VI.MDATE);


-- WPG.RW_MLAB_AVG source

CREATE VIEW WPG.RW_MLAB_AVG AS
SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	AVG(ML.BOD5)	 BOD5_AVG,
	EXP(AVG(LOG(CASE ML.FC WHEN 0 THEN NULL ELSE ML.FC END)))	FC_AVG,
	EXP(AVG(LOG(CASE ML.EC WHEN 0 THEN NULL ELSE ML.EC END)))	EC_AVG
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_MLAB	ML ON VI.RWVISIT_ID 	= ML.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE);


-- WPG.RW_MLAB_AVG_A source

CREATE VIEW WPG.RW_MLAB_AVG_A AS
SELECT
			SITE_ID,
			YR,
			TOTAL,
	CASE WHEN L_BOD5_CNT =0 THEN NULL ELSE '<' END	L_BOD5_AVG,	BOD5_AVG,
	CASE WHEN L_FC_CNT =0 THEN NULL ELSE '<' END	L_FC_AVG,	FC_AVG,
	CASE WHEN L_EC_CNT =0 THEN NULL ELSE '<' END	L_EC_AVG,	EC_AVG
FROM
(SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	AVG(ML.BOD5)	 BOD5_AVG,
	EXP(AVG(LOG(CASE ML.FC WHEN 0 THEN NULL ELSE ML.FC END)))	FC_AVG,
	EXP(AVG(LOG(CASE ML.EC WHEN 0 THEN NULL ELSE ML.EC END)))	EC_AVG,
	COUNT(ML.L_BOD5)	L_BOD5_CNT,
	COUNT(ML.L_FC)	    L_FC_CNT,
	COUNT(ML.L_EC)	    L_EC_CNT
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_MLAB	ML ON VI.RWVISIT_ID 	= ML.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE)) D;


-- WPG.RW_MLAB_MAX source

CREATE VIEW WPG.RW_MLAB_MAX AS
SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	MAX(ML.BOD5)	BOD5_MAX,
	MAX(ML.FC)	FC_MAX,
	MAX(ML.EC)	EC_MAX
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_MLAB	ML ON VI.RWVISIT_ID 	= ML.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE);


-- WPG.RW_MLAB_MAX_A source

CREATE VIEW WPG.RW_MLAB_MAX_A AS
SELECT
			SITE_ID,
			YR,
			TOTAL,
	CASE WHEN L_BOD5_CNT = TOTAL THEN '<' ELSE NULL END	L_BOD5_MAX,	BOD5_MAX,
	CASE WHEN L_FC_CNT = TOTAL THEN '<' ELSE NULL END	L_FC_MAX,	FC_MAX,
	CASE WHEN L_EC_CNT = TOTAL THEN '<' ELSE NULL END	L_EC_MAX,	EC_MAX
FROM
(SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	MAX(ML.BOD5)	 BOD5_MAX,
	MAX(ML.FC)	FC_MAX,
	MAX(ML.EC)	EC_MAX,
	COUNT(ML.L_BOD5)	L_BOD5_CNT,
	COUNT(ML.L_FC)	    L_FC_CNT,
	COUNT(ML.L_EC)	    L_EC_CNT
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_MLAB	ML ON VI.RWVISIT_ID 	= ML.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE)) D;


-- WPG.RW_MLAB_MED source

CREATE VIEW WPG.RW_MLAB_MED AS
SELECT	SITE_ID,
	YEAR(MDATE)	YYYY,
	YR,
	AVG(CASE WHEN R_BOD5 * 2 IN(N_BOD5, N_BOD5 + 1, N_BOD5 + 2) THEN BOD5 ELSE NULL END)	BOD5_MED,
	AVG(CASE WHEN R_EC * 2 IN(N_EC, N_EC + 1,  N_EC + 2) THEN EC ELSE NULL END)		EC_MED,
	AVG(CASE WHEN R_FC * 2 IN(N_FC, N_FC + 1,  N_FC + 2) THEN FC ELSE NULL END)		FC_MED
FROM	(
	SELECT	A.RWVISIT_ID,
		A.SITE_ID,
		A.MDATE, 
		A.YR,
		A.BOD5,
		A.EC,
		A.FC,
		COUNT(CASE WHEN A.BOD5 < B.BOD5 THEN 1 
				WHEN A.BOD5 = B.BOD5 AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
		ELSE NULL END)		R_BOD5,
		COUNT(B.BOD5)		N_BOD5,
		COUNT(CASE WHEN A.EC < B.EC THEN 1 
				WHEN A.EC = B.EC AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
		ELSE NULL END)		R_EC,
		COUNT(B.EC)		N_EC,
		COUNT(CASE WHEN A.FC < B.FC THEN 1 
				WHEN A.FC = B.FC AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
		ELSE NULL END)		R_FC,
		COUNT(B.FC)		N_FC
	FROM	(SELECT	VI.RWVISIT_ID, 
			VI.SITE_ID, 
			VI.MDATE,
			YEAR(VI.MDATE)	YR, 
			NH.BOD5, 
			NH.EC, 
			NH.FC
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_MLAB	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	A
	JOIN	(SELECT	VI.RWVISIT_ID, 
			VI.SITE_ID, 
			YEAR(VI.MDATE)	YR, 
			NH.BOD5, 
			NH.EC, 
			NH.FC
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_MLAB	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	B
	ON A.SITE_ID = B.SITE_ID AND A.YR = B.YR
	GROUP BY A.RWVISIT_ID, A.SITE_ID, A.MDATE, A.YR, A.BOD5, A.EC, A.FC
	) C
GROUP BY SITE_ID, YEAR(MDATE), YR;


-- WPG.RW_MLAB_MED_A source

CREATE VIEW WPG.RW_MLAB_MED_A AS
SELECT
	D.SITE_ID,
	D.YR,
	D.TOTAL,
	CASE WHEN (L_BOD5_CNT *2 > D.TOTAL) OR (L_BOD5_CNT *2 = D.TOTAL AND BOD5_MED = BOD5_MED_U) THEN '<' ELSE NULL END	L_BOD5_MED,	BOD5_MED,
	CASE WHEN (L_FC_CNT *2 > D.TOTAL) OR (L_FC_CNT *2 = D.TOTAL AND FC_MED = FC_MED_U) THEN '<' ELSE NULL END	L_FC_MED,	FC_MED,
	CASE WHEN (L_EC_CNT *2 > D.TOTAL) OR (L_EC_CNT *2 = D.TOTAL AND EC_MED = EC_MED_U) THEN '<' ELSE NULL END	L_EC_MED,	EC_MED
FROM
(SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	COUNT(ML.L_BOD5)	L_BOD5_CNT,
	COUNT(ML.L_FC)	    L_FC_CNT,
	COUNT(ML.L_EC)	    L_EC_CNT
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_MLAB	ML ON VI.RWVISIT_ID 	= ML.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE)) D
JOIN
(SELECT	SITE_ID,
	YEAR(MDATE)	YYYY,
	YR,
	AVG(CASE WHEN R_BOD5 * 2 IN(N_BOD5, N_BOD5 + 1, N_BOD5 + 2) THEN BOD5 ELSE NULL END)	BOD5_MED,
	AVG(CASE WHEN R_EC * 2 IN(N_EC, N_EC + 1,  N_EC + 2) THEN EC ELSE NULL END)		EC_MED,
	AVG(CASE WHEN R_FC * 2 IN(N_FC, N_FC + 1,  N_FC + 2) THEN FC ELSE NULL END)		FC_MED,
   	MAX(CASE WHEN R_BOD5 * 2 IN(N_BOD5, N_BOD5 + 1, N_BOD5 + 2) THEN BOD5 ELSE NULL END)	BOD5_MED_U,
	MAX(CASE WHEN R_EC * 2 IN(N_EC, N_EC + 1,  N_EC + 2) THEN EC ELSE NULL END)		EC_MED_U,
	MAX(CASE WHEN R_FC * 2 IN(N_FC, N_FC + 1,  N_FC + 2) THEN FC ELSE NULL END)		FC_MED_U
    FROM	(
	SELECT	A.RWVISIT_ID,
		A.SITE_ID,
		A.MDATE, 
		A.YR,
		A.BOD5,
		A.EC,
		A.FC,
		COUNT(CASE WHEN A.BOD5 < B.BOD5 THEN 1 
				WHEN A.BOD5 = B.BOD5 AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
		ELSE NULL END)		R_BOD5,
		COUNT(B.BOD5)		N_BOD5,
		COUNT(CASE WHEN A.EC < B.EC THEN 1 
				WHEN A.EC = B.EC AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
		ELSE NULL END)		R_EC,
		COUNT(B.EC)		N_EC,
		COUNT(CASE WHEN A.FC < B.FC THEN 1 
				WHEN A.FC = B.FC AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
		ELSE NULL END)		R_FC,
		COUNT(B.FC)		N_FC
	FROM	(SELECT	VI.RWVISIT_ID, 
			VI.SITE_ID, 
			VI.MDATE,
			YEAR(VI.MDATE)	YR, 
			NH.BOD5, 
			NH.EC, 
			NH.FC
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_MLAB	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	A
	JOIN	(SELECT	VI.RWVISIT_ID, 
			VI.SITE_ID, 
			YEAR(VI.MDATE)	YR, 
			NH.BOD5, 
			NH.EC, 
			NH.FC
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_MLAB	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	B
	ON A.SITE_ID = B.SITE_ID AND A.YR = B.YR
	GROUP BY A.RWVISIT_ID, A.SITE_ID, A.MDATE, A.YR, A.BOD5, A.EC, A.FC
	) C
    GROUP BY SITE_ID, YEAR(MDATE), YR) E
ON   D.SITE_ID = E.SITE_ID AND D.YR = E.YR;


-- WPG.RW_MLAB_MIN source

CREATE VIEW WPG.RW_MLAB_MIN AS
SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	MIN(ML.BOD5)	 BOD5_MIN,
	MIN(ML.FC)	FC_MIN,
	MIN(ML.EC)	EC_MIN
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_MLAB	ML ON VI.RWVISIT_ID 	= ML.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE);


-- WPG.RW_MLAB_MIN_A source

CREATE VIEW WPG.RW_MLAB_MIN_A AS
SELECT
			SITE_ID,
			YR,
			TOTAL,
	CASE WHEN L_BOD5_CNT =0 THEN NULL ELSE '<' END	L_BOD5_MIN,	BOD5_MIN,
	CASE WHEN L_FC_CNT =0 THEN NULL ELSE '<' END	L_FC_MIN,	FC_MIN,
	CASE WHEN L_EC_CNT =0 THEN NULL ELSE '<' END	L_EC_MIN,	EC_MIN
FROM
(SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	MIN(ML.BOD5)	 BOD5_MIN,
	MIN(ML.FC)	FC_MIN,
	MIN(ML.EC)	EC_MIN,
	COUNT(ML.L_BOD5)	L_BOD5_CNT,
	COUNT(ML.L_FC)	    L_FC_CNT,
	COUNT(ML.L_EC)	    L_EC_CNT
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_MLAB	ML ON VI.RWVISIT_ID 	= ML.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE)) D;


-- WPG.RW_MLAB_STDEV source

CREATE VIEW WPG.RW_MLAB_STDEV AS
SELECT
	VI.SITE_ID,
	YEAR(VI.MDATE)	YR,
	COUNT(*)	TOTAL,
	STDEV(ML.BOD5)	BOD5_STDEV,
	STDEV(ML.FC)	FC_STDEV,
	STDEV(ML.EC)	EC_STDEV
FROM	WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_MLAB	ML ON VI.RWVISIT_ID 	= ML.RWVISIT_ID
GROUP BY VI.SITE_ID, YEAR(VI.MDATE);


-- WPG.RW_MONTHLY_2014 source

CREATE VIEW [WPG].[RW_MONTHLY_2014] AS
SELECT RV.RIVER_NAME RIVER, ST.STATNAME STATION, ST.SITE_ID, RWVISIT_ID, CAST(LEFT(RWVISIT_ID,4) AS INT) YR, CAST(SUBSTRING(RWVISIT_ID, 5,2) AS INT) MTH, PARA, MEASURE
FROM 
(SELECT FI.RWVISIT_ID, 'DO' PARA, FI.DO MEASURE   
	  FROM WPG.RW_FIELD 	FI where FI.RWVISIT_ID >= '2014'
UNION SELECT FI.RWVISIT_ID, 'DOS' PARA, FI.DOS MEASURE   
	  FROM WPG.RW_FIELD 	FI where FI.RWVISIT_ID >= '2014'
UNION SELECT FI.RWVISIT_ID, 'PH' PARA, FI.PH MEASURE   
	  FROM WPG.RW_FIELD 	FI where FI.RWVISIT_ID >= '2014'
UNION SELECT FI.RWVISIT_ID, 'TURB' PARA, FI.TURB MEASURE   
	  FROM WPG.RW_FIELD 	FI where FI.RWVISIT_ID >= '2014'
UNION SELECT GN.RWVISIT_ID, 'SS' PARA, GN.SS MEASURE   
	  FROM WPG.RW_GLABN_CAL	GN where GN.RWVISIT_ID >= '2014'
UNION SELECT ML.RWVISIT_ID, 'BOD5' PARA, ML.BOD5 MEASURE   
	  FROM WPG.RW_MLAB		ML where ML.RWVISIT_ID >= '2014'
UNION SELECT GN.RWVISIT_ID, 'COD' PARA, GN.COD MEASURE   
	  FROM WPG.RW_GLABN_CAL	GN where GN.RWVISIT_ID >= '2014'
UNION SELECT ML.RWVISIT_ID, 'EC' PARA, ML.EC MEASURE   
	  FROM WPG.RW_MLAB		ML where ML.RWVISIT_ID >= '2014'
UNION SELECT GN.RWVISIT_ID, 'NH4' PARA, GN.NH4 MEASURE   
	  FROM WPG.RW_GLABN_CAL	GN where GN.RWVISIT_ID >= '2014'
UNION SELECT GN.RWVISIT_ID, 'PO4' PARA, GN.PO4 MEASURE   
	  FROM WPG.RW_GLABN_CAL	GN where GN.RWVISIT_ID >= '2014'
UNION SELECT GN.RWVISIT_ID, 'TPS' PARA, GN.TPS MEASURE   
	  FROM WPG.RW_GLABN_CAL	GN where GN.RWVISIT_ID >= '2014'
UNION SELECT GN.RWVISIT_ID, 'TIN' PARA, GN.TIN MEASURE   
	  FROM WPG.RW_GLABN_CAL	GN where GN.RWVISIT_ID >= '2014'
UNION SELECT GN.RWVISIT_ID, 'TN' PARA, GN.TN MEASURE   
	  FROM WPG.RW_GLABN_CAL	GN where GN.RWVISIT_ID >= '2014'
UNION SELECT FI.RWVISIT_ID, 'SAL' PARA, FI.SAL MEASURE   
	  FROM WPG.RW_FIELD 	FI where FI.RWVISIT_ID >= '2014'
) MSR 
INNER JOIN WPG.RSTATION  ST ON ST.SITE_ID = CAST(SUBSTRING(MSR.RWVISIT_ID,9,4) AS int)
INNER JOIN WPG.RIVER     RV ON RV.R_ID = ST.R_ID;


-- WPG.RW_MONTHLY_WEB source

CREATE  VIEW WPG.RW_MONTHLY_WEB AS
SELECT	
		RIVER,
		STATION,
		MDATE,
		DO,
		EC,
		SAL,
		PH
		
FROM	WPG.RIVER_WATER2;


-- WPG.RW_NH3 source

CREATE VIEW WPG.RW_NH3 AS
SELECT 
	VI.RWVISIT_ID,
	VI.SITE_ID,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO,
	FI.L_SAL,
	FI.SAL,
	FI.TEMPER,
	FI.L_PH,
	FI.PH,
	GN.L_NH4,
	GN.NH4,
	CASE WHEN FI.SAL IS NOT NULL AND FI.TEMPER IS NOT NULL AND FI.PH IS NOT NULL 
		THEN GN.L_NH4 ELSE NULL END		L_NH3,
	WPG.F_NH3(FI.SAL, FI.TEMPER, FI.PH, GN.NH4)	NH3
FROM		WPG.RW_VISIT	VI
LEFT OUTER JOIN	WPG.RW_GLABN	GN	ON VI.RWVISIT_ID = GN.RWVISIT_ID
LEFT OUTER JOIN WPG.RW_FIELD	FI	ON VI.RWVISIT_ID = FI.RWVISIT_ID;


-- WPG.RW_NH3_AVG source

CREATE VIEW WPG.RW_NH3_AVG AS
SELECT
	SITE_ID,
	COUNT(*)	TOTAL,
	YEAR(MDATE)	YR,
	AVG(NH3)	NH3_AVG
FROM	WPG.RW_NH3 	NH
GROUP BY SITE_ID, YEAR(MDATE);


-- WPG.RW_NH3_AVG_A source

CREATE VIEW WPG.RW_NH3_AVG_A AS
SELECT
			SITE_ID,
			YR,
			TOTAL,
	CASE WHEN L_NH3_CNT =0 THEN NULL ELSE '<' END	L_NH3_AVG,	NH3_AVG
FROM
(SELECT
	SITE_ID,
	YEAR(MDATE)	YR,
	COUNT(*)	TOTAL,
	AVG(NH3)	NH3_AVG,
	COUNT(NH3)	L_NH3_CNT
FROM	WPG.RW_NH3 	NH
GROUP BY SITE_ID, YEAR(MDATE)) D;


-- WPG.RW_NH3_MAX source

CREATE VIEW WPG.RW_NH3_MAX AS
SELECT
	SITE_ID,
	COUNT(*)	TOTAL,
	YEAR(MDATE)	YR,
	MAX(NH3)	NH3_MAX
FROM	WPG.RW_NH3 	NH
GROUP BY SITE_ID, YEAR(MDATE);


-- WPG.RW_NH3_MAX_A source

CREATE VIEW WPG.RW_NH3_MAX_A AS
SELECT
			SITE_ID,
			YR,
			TOTAL,
	CASE WHEN L_NH3_CNT = TOTAL THEN '<' ELSE NULL END	L_NH3_MAX,	NH3_MAX
FROM
(SELECT
	SITE_ID,
	YEAR(MDATE)	YR,
	COUNT(*)	TOTAL,
	MAX(NH3)	NH3_MAX,
	COUNT(NH3)	L_NH3_CNT
FROM	WPG.RW_NH3 	NH
GROUP BY SITE_ID, YEAR(MDATE)) D;


-- WPG.RW_NH3_MED source

CREATE VIEW WPG.RW_NH3_MED AS
SELECT	SITE_ID,
	YEAR(MDATE)	YYYY,
	YR,
	AVG(CASE WHEN R_NH3 * 2 IN (N_NH3, N_NH3 + 1, N_NH3 + 2) THEN NH3 ELSE NULL END)	NH3_MED 	
FROM	(
	SELECT	A.RWVISIT_ID,
		A.SITE_ID,
		A.MDATE,
		A.YR,
		A.NH3,
		COUNT(CASE WHEN A.NH3 < B.NH3 THEN 1
			WHEN A.NH3 = B.NH3 AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_NH3,
		COUNT(B.NH3)			N_NH3
	FROM	(SELECT	VI.RWVISIT_ID, 
			VI.SITE_ID, 
			VI.MDATE,
			YEAR(VI.MDATE)	YR, 
			NH.NH3
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_NH3	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	A
	JOIN	(SELECT	VI.RWVISIT_ID, 
			VI.SITE_ID, 
			YEAR(VI.MDATE)	YR,  
			NH.NH3
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_NH3	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	B
	ON A.SITE_ID = B.SITE_ID AND A.YR = B.YR
	GROUP BY A.RWVISIT_ID, A.SITE_ID, A.MDATE, A.YR, A.NH3
	) C
GROUP BY SITE_ID, YEAR(MDATE), YR;


-- WPG.RW_NH3_MED_A source

CREATE VIEW WPG.RW_NH3_MED_A AS
SELECT
	D.SITE_ID,
	D.YR,
	D.TOTAL,
	CASE WHEN (L_NH3_CNT *2 > D.TOTAL) OR (L_NH3_CNT *2 = D.TOTAL AND NH3_MED = NH3_MED_U) THEN '<' ELSE NULL END	L_NH3_MED,	NH3_MED
FROM
(SELECT
	SITE_ID,
	YEAR(MDATE)	YR,
	COUNT(*)	TOTAL,
	COUNT(NH3)	L_NH3_CNT
FROM	WPG.RW_NH3 	NH
GROUP BY SITE_ID, YEAR(MDATE)) D
JOIN
(SELECT	SITE_ID,
	YEAR(MDATE)	YYYY,
	YR,
	AVG(CASE WHEN R_NH3 * 2 IN (N_NH3, N_NH3 + 1, N_NH3 + 2) THEN NH3 ELSE NULL END)	NH3_MED,
	MAX(CASE WHEN R_NH3 * 2 IN (N_NH3, N_NH3 + 1, N_NH3 + 2) THEN NH3 ELSE NULL END)	NH3_MED_U
FROM	(
	SELECT	A.RWVISIT_ID,
		A.SITE_ID,
		A.MDATE,
		A.YR,
		A.NH3,
		COUNT(CASE WHEN A.NH3 < B.NH3 THEN 1
			WHEN A.NH3 = B.NH3 AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_NH3,
		COUNT(B.NH3)			N_NH3
	FROM	(SELECT	VI.RWVISIT_ID, 
			VI.SITE_ID, 
			VI.MDATE,
			YEAR(VI.MDATE)	YR, 
			NH.NH3
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_NH3	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	A
	JOIN	(SELECT	VI.RWVISIT_ID, 
			VI.SITE_ID, 
			YEAR(VI.MDATE)	YR,  
			NH.NH3
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_NH3	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	B
	ON A.SITE_ID = B.SITE_ID AND A.YR = B.YR
	GROUP BY A.RWVISIT_ID, A.SITE_ID, A.MDATE, A.YR, A.NH3
	) C
GROUP BY SITE_ID, YEAR(MDATE), YR) E
ON   D.SITE_ID = E.SITE_ID AND D.YR = E.YR;


-- WPG.RW_NH3_MIN source

CREATE VIEW WPG.RW_NH3_MIN AS
SELECT
	SITE_ID,
	COUNT(*)	TOTAL,
	YEAR(MDATE)	YR,
	MIN(NH3)	NH3_MIN
FROM	WPG.RW_NH3 	NH
GROUP BY SITE_ID, YEAR(MDATE);


-- WPG.RW_NH3_MIN_A source

CREATE VIEW WPG.RW_NH3_MIN_A AS
SELECT
			SITE_ID,
			YR,
			TOTAL,
	CASE WHEN L_NH3_CNT =0 THEN NULL ELSE '<' END	L_NH3_MIN,	NH3_MIN
FROM
(SELECT
	SITE_ID,
	YEAR(MDATE)	YR,
	COUNT(*)	TOTAL,
	MIN(NH3)	NH3_MIN,
	COUNT(NH3)	L_NH3_CNT
FROM	WPG.RW_NH3 	NH
GROUP BY SITE_ID, YEAR(MDATE)) D;


-- WPG.RW_NH3_STDEV source

CREATE VIEW WPG.RW_NH3_STDEV AS
SELECT
	SITE_ID,
	COUNT(*)	TOTAL,
	YEAR(MDATE)	YR,
	STDEV(NH3)	NH3_STDEV
FROM	WPG.RW_NH3 	NH
GROUP BY SITE_ID, YEAR(MDATE);


-- WPG.RW_PCTLVALUE10A source

CREATE  VIEW [WPG].[RW_PCTLVALUE10A] AS		
SELECT LMT.SITE_ID, LMT.YR, LMT.TOTAL, LMT.PARMETER, L_LMT.LIMIT AS L_LIMIT, LMT.LIMIT, LMT.DISP_STATS, LMT.DISP_SEQ
FROM 
(SELECT SITE_ID,YR,TOTAL,PARMETER,LIMIT,DISP_STATS,DISP_SEQ
FROM 
   (SELECT * FROM [WPG].[RW_STATISTICS10A] WHERE DISP_SEQ IN (4,6)) p
UNPIVOT
   (LIMIT FOR PARMETER IN 
      (TEMPER,TURB,SAL,COND,PH,DO,DOS,FC,EC,BOD5,COD,TOC,OIL,SS,TS,TVS,NH4,NO2,NO3,TKNS,TKNSP,PO4,TPS,TPSP,SIL,TCYN,DETERG,FL,CL,H2S,SULP,SSP,CHL,PHEO,AL,SB,ARSENIC,BA,BE,B,CD,CR,CU,FE,PB,MN,HG,MO,NI,AG,TL,V,ZN,DEPTH,VEL,FLOW,NH3,TIN,TN,BOD5_PT,NH4_PT,DOS_PT,WQI_PT)
)AS unpvt ) LMT
LEFT JOIN
(SELECT SITE_ID,YR,TOTAL,PARMETER,LIMIT,DISP_STATS,DISP_SEQ
FROM 
   (SELECT * FROM [WPG].[RW_STATISTICS10A] WHERE DISP_SEQ IN (4,6)) p
UNPIVOT
   (LIMIT FOR PARMETER IN 
      (L_TURB,L_SAL,L_COND,L_PH,L_DO,L_DOS,L_FC,L_EC,L_BOD5,L_COD,L_TOC,L_OIL,L_SS,L_TS,L_TVS,L_NH4,L_NO2,L_NO3,L_TKNS,L_TKNSP,L_PO4,L_TPS,L_TPSP,L_SIL,L_TCYN,L_DETERG,L_FL,L_CL,L_H2S,L_SULP,L_SSP,L_CHL,L_PHEO,L_AL,L_SB,L_ARSENIC,L_BA,L_BE,L_B,L_CD,L_CR,L_CU,L_FE,L_PB,L_MN,L_HG,L_MO,L_NI,L_AG,L_TL,L_V,L_ZN,L_NH3,L_TIN,L_TN)
)AS unpvt ) L_LMT
ON LMT.SITE_ID = L_LMT.SITE_ID AND LMT.YR = L_LMT.YR AND 'L_'+LMT.PARMETER = L_LMT.PARMETER
UNION
SELECT SITE_ID,YR,TOTAL,'WIDTH' PARMETER, NULL AS L_LIMIT, CAST(WIDTH AS float) LIMIT,DISP_STATS,DISP_SEQ 
FROM [WPG].[RW_STATISTICS10A] WHERE DISP_SEQ IN (4,6);


-- WPG.RW_SS_MED source

CREATE VIEW WPG.RW_SS_MED AS
SELECT	SITE_ID,
	YEAR(MDATE)										YR,
	AVG(CASE WHEN R_SS * 2 IN (N_SS, N_SS + 1, N_SS + 2) THEN SS ELSE NULL END)			SS
FROM	(
	SELECT	A.RWVISIT_ID,
		A.SITE_ID,
		A.MDATE,
		A.SS,
		COUNT(CASE WHEN A.SS < B.SS THEN 1
			WHEN A.SS = B.SS AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_SS,
		COUNT(B.SS)		N_SS
	FROM	(SELECT	VI.RWVISIT_ID, VI.SITE_ID, VI.MDATE, NH.SS
		FROM	WPG.RW_VISIT	VI	
		JOIN	WPG.RW_GLABN	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	A
	JOIN	(SELECT	VI.RWVISIT_ID, VI.SITE_ID, VI.MDATE, NH.SS
		FROM	WPG.RW_VISIT	VI	
		JOIN	WPG.RW_GLABN	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	B
		ON A.SITE_ID = B.SITE_ID AND YEAR(A.MDATE) = YEAR(B.MDATE)
	GROUP BY 	A.RWVISIT_ID, A.SITE_ID, A.MDATE, A.SS
	) C
GROUP BY SITE_ID, YEAR(MDATE);


-- WPG.RW_STATS10A source

CREATE  VIEW [WPG].[RW_STATS10A] AS				
SELECT	*			
	,CAST('MIN' AS nvarchar(15))	DISP_STATS		
	,CAST(1 AS int)	DISP_SEQ		
	FROM	WQPLIS.WPG.RW_STATS_MIN10A		
UNION ALL				
SELECT	*			
	,'AVG'	DISP_STATS		
	,2	DISP_SEQ		
	FROM	WQPLIS.WPG.RW_STATS_AVG10A		
UNION ALL				
SELECT	*			
	,'MAX'	DISP_STATS		
	,3	DISP_SEQ		
	FROM	WQPLIS.WPG.RW_STATS_MAX10A		
UNION ALL				
SELECT	*			
	,'5 PERCENTILE'	DISP_STATS		
	,4	DISP_SEQ		
	FROM	WQPLIS.WPG.RW_STATS_PCTL05A		
UNION ALL				
SELECT	*			
	,'10 PERCENTILE'	DISP_STATS		
	,5	DISP_SEQ		
	FROM	WQPLIS.WPG.RW_STATS_PCTL10A		
UNION ALL				
SELECT	*			
	,'MEDIAN'	DISP_STATS		
	,6	DISP_SEQ		
	FROM	WQPLIS.WPG.RW_STATS_PCTL50A		
UNION ALL				
SELECT	*			
	,'90 PERCENTILE'	DISP_STATS		
	,7	DISP_SEQ		
	FROM	WQPLIS.WPG.RW_STATS_PCTL90A		
UNION ALL				
SELECT	*			
	,'95 PERCENTILE'	DISP_STATS		
	,8	DISP_SEQ		
	FROM	WQPLIS.WPG.RW_STATS_PCTL95A;


-- WPG.RW_STATS_AVG10A source

CREATE VIEW [WPG].[RW_STATS_AVG10A] AS				
SELECT	CA.SITE_ID	SITE_ID,		
	CA.YR	YR,		
	CA.TOTAL	TOTAL,		
	TEMPER_AVG	TEMPER,		
	CASE WHEN L_TURB_CNT =0 THEN NULL ELSE '<' END	L_TURB,	TURB_AVG	TURB,
	CASE WHEN L_SAL_CNT =0 THEN NULL ELSE '<' END	L_SAL,	SAL_AVG	SAL,
	CASE WHEN L_COND_CNT =0 THEN NULL ELSE '<' END	L_COND,	COND_AVG	COND,
	CASE WHEN L_PH_CNT =0 THEN NULL ELSE '<' END	L_PH,	PH_AVG	PH,
	CASE WHEN L_DO_CNT =0 THEN NULL ELSE '<' END	L_DO,	DO_AVG	DO,
	CASE WHEN L_DOS_CNT =0 THEN NULL ELSE '<' END	L_DOS,	DOS_AVG	DOS,
	CASE WHEN L_FC_CNT =0 THEN NULL ELSE '<' END	L_FC,	FC_AVG	FC,
	CASE WHEN L_EC_CNT =0 THEN NULL ELSE '<' END	L_EC,	EC_AVG	EC,
	CASE WHEN L_BOD5_CNT =0 THEN NULL ELSE '<' END	L_BOD5,	BOD5_AVG	BOD5,
	CASE WHEN L_COD_CNT =0 THEN NULL ELSE '<' END	L_COD,	COD_AVG	COD,
	CASE WHEN L_TOC_CNT =0 THEN NULL ELSE '<' END	L_TOC,	TOC_AVG	TOC,
	CASE WHEN L_OIL_CNT =0 THEN NULL ELSE '<' END	L_OIL,	OIL_AVG	OIL,
	CASE WHEN L_SS_CNT =0 THEN NULL ELSE '<' END	L_SS,	SS_AVG	SS,
	CASE WHEN L_TS_CNT =0 THEN NULL ELSE '<' END	L_TS,	TS_AVG	TS,
	CASE WHEN L_TVS_CNT =0 THEN NULL ELSE '<' END	L_TVS,	TVS_AVG	TVS,
	CASE WHEN L_NH4_CNT =0 THEN NULL ELSE '<' END	L_NH4,	NH4_AVG	NH4,
	CASE WHEN L_NO2_CNT =0 THEN NULL ELSE '<' END	L_NO2,	NO2_AVG	NO2,
	CASE WHEN L_NO3_CNT =0 THEN NULL ELSE '<' END	L_NO3,	NO3_AVG	NO3,
	CASE WHEN L_TKNS_CNT =0 THEN NULL ELSE '<' END	L_TKNS,	TKNS_AVG	TKNS,
	CASE WHEN L_TKNSP_CNT =0 THEN NULL ELSE '<' END	L_TKNSP,	TKNSP_AVG	TKNSP,
	CASE WHEN L_PO4_CNT =0 THEN NULL ELSE '<' END	L_PO4,	PO4_AVG	PO4,
	CASE WHEN L_TPS_CNT =0 THEN NULL ELSE '<' END	L_TPS,	TPS_AVG	TPS,
	CASE WHEN L_TPSP_CNT =0 THEN NULL ELSE '<' END	L_TPSP,	TPSP_AVG	TPSP,
	CASE WHEN L_SIL_CNT =0 THEN NULL ELSE '<' END	L_SIL,	SIL_AVG	SIL,
	CASE WHEN L_TCYN_CNT =0 THEN NULL ELSE '<' END	L_TCYN,	TCYN_AVG	TCYN,
	CASE WHEN L_DETERG_CNT =0 THEN NULL ELSE '<' END	L_DETERG,	DETERG_AVG	DETERG,
	CASE WHEN L_FL_CNT =0 THEN NULL ELSE '<' END	L_FL,	FL_AVG	FL,
	CASE WHEN L_CL_CNT =0 THEN NULL ELSE '<' END	L_CL,	CL_AVG	CL,
	CASE WHEN L_H2S_CNT =0 THEN NULL ELSE '<' END	L_H2S,	H2S_AVG	H2S,
	CASE WHEN L_SULP_CNT =0 THEN NULL ELSE '<' END	L_SULP,	SULP_AVG	SULP,
	CASE WHEN L_SSP_CNT =0 THEN NULL ELSE '<' END	L_SSP,	SSP_AVG	SSP,
	CASE WHEN L_CHL_CNT =0 THEN NULL ELSE '<' END	L_CHL,	CHL_AVG	CHL,
	CASE WHEN L_PHEO_CNT =0 THEN NULL ELSE '<' END	L_PHEO,	PHEO_AVG	PHEO,
	CASE WHEN L_AL_CNT =0 THEN NULL ELSE '<' END	L_AL,	AL_AVG	AL,
	CASE WHEN L_SB_CNT =0 THEN NULL ELSE '<' END	L_SB,	SB_AVG	SB,
	CASE WHEN L_ARSENIC_CNT =0 THEN NULL ELSE '<' END	L_ARSENIC,	ARSENIC_AVG	ARSENIC,
	CASE WHEN L_BA_CNT =0 THEN NULL ELSE '<' END	L_BA,	BA_AVG	BA,
	CASE WHEN L_BE_CNT =0 THEN NULL ELSE '<' END	L_BE,	BE_AVG	BE,
	CASE WHEN L_B_CNT =0 THEN NULL ELSE '<' END	L_B,	B_AVG	B,
	CASE WHEN L_CD_CNT =0 THEN NULL ELSE '<' END	L_CD,	CD_AVG	CD,
	CASE WHEN L_CR_CNT =0 THEN NULL ELSE '<' END	L_CR,	CR_AVG	CR,
	CASE WHEN L_CU_CNT =0 THEN NULL ELSE '<' END	L_CU,	CU_AVG	CU,
	CASE WHEN L_FE_CNT =0 THEN NULL ELSE '<' END	L_FE,	FE_AVG	FE,
	CASE WHEN L_PB_CNT =0 THEN NULL ELSE '<' END	L_PB,	PB_AVG	PB,
	CASE WHEN L_MN_CNT =0 THEN NULL ELSE '<' END	L_MN,	MN_AVG	MN,
	CASE WHEN L_HG_CNT =0 THEN NULL ELSE '<' END	L_HG,	HG_AVG	HG,
	CASE WHEN L_MO_CNT =0 THEN NULL ELSE '<' END	L_MO,	MO_AVG	MO,
	CASE WHEN L_NI_CNT =0 THEN NULL ELSE '<' END	L_NI,	NI_AVG	NI,
	CASE WHEN L_AG_CNT =0 THEN NULL ELSE '<' END	L_AG,	AG_AVG	AG,
	CASE WHEN L_TL_CNT =0 THEN NULL ELSE '<' END	L_TL,	TL_AVG	TL,
	CASE WHEN L_V_CNT =0 THEN NULL ELSE '<' END	L_V,	V_AVG	V,
	CASE WHEN L_ZN_CNT =0 THEN NULL ELSE '<' END	L_ZN,	ZN_AVG	ZN,
	DEPTH_AVG	DEPTH,		
	WIDTH_AVG	WIDTH,		
	VEL_AVG	VEL,		
	FLOW_AVG	FLOW,		
	CASE WHEN L_NH3_CNT =0 THEN NULL ELSE '<' END	L_NH3,	NH3_AVG	NH3,
	CASE WHEN L_TIN_CNT =0 THEN NULL ELSE '<' END	L_TIN,	TIN_AVG	TIN,
	CASE WHEN L_TN_CNT =0 THEN NULL ELSE '<' END	L_TN,	TN_AVG	TN,
	BOD5_PT	BOD5_PT,		
	NH4_PT	NH4_PT,		
	DOS_PT	DOS_PT,		
	WQI_PT	WQI_PT,		
	WQI_GRADE =	(SELECT  WQI_GRADE		
		   FROM WPG.RW_WQI_GR_REF GR		
		   WHERE ( (GR.L_LOW_PT = '>=' AND WQI_PT >= GR.LOW_PT)		
		    OR (GR.L_LOW_PT = '>' AND WQI_PT > GR.LOW_PT)		
		    OR GR.LOW_PT IS NULL)		
		   AND ( (GR.L_UP_PT = '<=' AND WQI_PT <= GR.UP_PT)		
		    OR (GR.L_UP_PT = '<' AND WQI_PT < GR.UP_PT)		
		    OR GR.UP_PT IS NULL)		
		   )		
FROM	(SELECT			
	SITE_ID,			
	COUNT(*)	TOTAL,		
	REPORT_YR.ACC_YR	YR,		
	AVG(TEMPER)	TEMPER_AVG,		
	AVG(DO)	DO_AVG,		
	AVG(DOS)	DOS_AVG,		
	AVG(COND)	COND_AVG,		
	AVG(SAL)	SAL_AVG,		
	AVG(PH)	PH_AVG,		
	AVG(TURB)	TURB_AVG,		
	COUNT(L_DO)	L_DO_CNT,		
	COUNT(L_DOS)	L_DOS_CNT,		
	COUNT(L_COND)	L_COND_CNT,		
	COUNT(L_SAL)	L_SAL_CNT,		
	COUNT(L_PH)	L_PH_CNT,		
	COUNT(L_TURB)	L_TURB_CNT,		
	AVG(BOD5)	BOD5_AVG,		
	EXP(AVG(LOG(CASE FC WHEN 0 THEN NULL ELSE FC END)))	FC_AVG,		
	EXP(AVG(LOG(CASE EC WHEN 0 THEN NULL ELSE EC END)))	EC_AVG,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	L_FC_CNT,		
	COUNT(L_EC)	L_EC_CNT,		
	AVG(NH4)	NH4_AVG,		
	AVG(TKNS)	TKNS_AVG,		
	AVG(TKNSP)	TKNSP_AVG,		
	AVG(NO2)	NO2_AVG,		
	AVG(NO3)	NO3_AVG,		
	AVG(PO4)	PO4_AVG,		
	AVG(TPS)	TPS_AVG,		
	AVG(TPSP)	TPSP_AVG,		
	AVG(SIL)	SIL_AVG,		
	AVG(COD)	COD_AVG,		
	AVG(SS)	SS_AVG,		
	AVG(OIL)	OIL_AVG,		
	AVG(TVS)	TVS_AVG,		
	AVG(TS)	TS_AVG,		
	AVG(TCYN)	TCYN_AVG,		
	AVG(FL)	FL_AVG,		
	AVG(H2S)	H2S_AVG,		
	AVG(SULP)	SULP_AVG,		
	AVG(SSP)	SSP_AVG,		
	AVG(DETERG)	DETERG_AVG,		
	AVG(TOC)	TOC_AVG,		
	AVG(CL)	CL_AVG,		
	AVG(CHL)	CHL_AVG,		
	AVG(PHEO)	PHEO_AVG,		
	AVG(TIN)	TIN_AVG,		
	AVG(TN)	TN_AVG,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_TKNS)	L_TKNS_CNT,		
	COUNT(L_TKNSP)	L_TKNSP_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TPS)	L_TPS_CNT,		
	COUNT(L_TPSP)	L_TPSP_CNT,		
	COUNT(L_SIL)	L_SIL_CNT,		
	COUNT(L_COD)	L_COD_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_OIL)	L_OIL_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_TS)	L_TS_CNT,		
	COUNT(L_TCYN)	L_TCYN_CNT,		
	COUNT(L_FL)	L_FL_CNT,		
	COUNT(L_H2S)	L_H2S_CNT,		
	COUNT(L_SULP)	L_SULP_CNT,		
	COUNT(L_SSP)	L_SSP_CNT,		
	COUNT(L_DETERG)	L_DETERG_CNT,		
	COUNT(L_TOC)	L_TOC_CNT,		
	COUNT(L_CL)	L_CL_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHEO)	L_PHEO_CNT,		
	COUNT(ISNULL(L_NH4,ISNULL(L_NO2,L_NO3)))	L_TIN_CNT,		
	COUNT(ISNULL(L_TKNSP,ISNULL(L_NO2,L_NO3)))	L_TN_CNT,		
	AVG(AL)	AL_AVG,		
	AVG(ARSENIC)	ARSENIC_AVG,		
	AVG(B)	B_AVG,		
	AVG(CD)	CD_AVG,		
	AVG(CR)	CR_AVG,		
	AVG(CU)	CU_AVG,		
	AVG(FE)	FE_AVG,		
	AVG(HG)	HG_AVG,		
	AVG(MN)	MN_AVG,		
	AVG(NI)	NI_AVG,		
	AVG(PB)	PB_AVG,		
	AVG(ZN)	ZN_AVG,		
	AVG(V)	V_AVG,		
	AVG(BA)	BA_AVG,		
	AVG(AG)	AG_AVG,		
	AVG(SB)	SB_AVG,		
	AVG(BE)	BE_AVG,		
	AVG(TL)	TL_AVG,		
	AVG(MO)	MO_AVG,		
	COUNT(L_AL)	L_AL_CNT,		
	COUNT(L_ARSENIC)	L_ARSENIC_CNT,		
	COUNT(L_B)	L_B_CNT,		
	COUNT(L_CD)	L_CD_CNT,		
	COUNT(L_CR)	L_CR_CNT,		
	COUNT(L_CU)	L_CU_CNT,		
	COUNT(L_FE)	L_FE_CNT,		
	COUNT(L_HG)	L_HG_CNT,		
	COUNT(L_MN)	L_MN_CNT,		
	COUNT(L_NI)	L_NI_CNT,		
	COUNT(L_PB)	L_PB_CNT,		
	COUNT(L_ZN)	L_ZN_CNT,		
	COUNT(L_V)	L_V_CNT,		
	COUNT(L_BA)	L_BA_CNT,		
	COUNT(L_AG)	L_AG_CNT,		
	COUNT(L_SB)	L_SB_CNT,		
	COUNT(L_BE)	L_BE_CNT,		
	COUNT(L_TL)	L_TL_CNT,		
	COUNT(L_MO)	L_MO_CNT,		
	AVG(DEPTH)	DEPTH_AVG,		
	AVG(VEL)	VEL_AVG,		
	SUM(WIDTH)	WIDTH_AVG,		
	AVG(FLOW)	FLOW_AVG,		
	AVG(NH3)	NH3_AVG,		
	COUNT(NH3)	L_NH3_CNT,		
	AVG(BOD5_PT)	BOD5_PT,		
	AVG(NH4_PT)	NH4_PT,		
	AVG(DOS_PT)	DOS_PT,		
	AVG(WQI_PT)	WQI_PT		
FROM	WPG.RW_DATA1	WQ,		
	    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 			
	    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR			
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR	) CA;


-- WPG.RW_STATS_MAX10A source

CREATE VIEW [WPG].[RW_STATS_MAX10A] AS				
SELECT	CA.SITE_ID	SITE_ID,		
	CA.YR	YR,		
	CA.TOTAL	TOTAL,		
	TEMPER_MAX	TEMPER,		
	CASE WHEN L_TURB_CNT = TOTAL THEN '<' ELSE NULL END	L_TURB,	TURB_MAX	TURB,
	CASE WHEN L_SAL_CNT = TOTAL THEN '<' ELSE NULL END	L_SAL,	SAL_MAX	SAL,
	CASE WHEN L_COND_CNT = TOTAL THEN '<' ELSE NULL END	L_COND,	COND_MAX	COND,
	CASE WHEN L_PH_CNT = TOTAL THEN '<' ELSE NULL END	L_PH,	PH_MAX	PH,
	CASE WHEN L_DO_CNT = TOTAL THEN '<' ELSE NULL END	L_DO,	DO_MAX	DO,
	CASE WHEN L_DOS_CNT = TOTAL THEN '<' ELSE NULL END	L_DOS,	DOS_MAX	DOS,
	CASE WHEN L_FC_CNT = TOTAL THEN '<' ELSE NULL END	L_FC,	FC_MAX	FC,
	CASE WHEN L_EC_CNT = TOTAL THEN '<' ELSE NULL END	L_EC,	EC_MAX	EC,
	CASE WHEN L_BOD5_CNT = TOTAL THEN '<' ELSE NULL END	L_BOD5,	BOD5_MAX	BOD5,
	CASE WHEN L_COD_CNT = TOTAL THEN '<' ELSE NULL END	L_COD,	COD_MAX	COD,
	CASE WHEN L_TOC_CNT = TOTAL THEN '<' ELSE NULL END	L_TOC,	TOC_MAX	TOC,
	CASE WHEN L_OIL_CNT = TOTAL THEN '<' ELSE NULL END	L_OIL,	OIL_MAX	OIL,
	CASE WHEN L_SS_CNT = TOTAL THEN '<' ELSE NULL END	L_SS,	SS_MAX	SS,
	CASE WHEN L_TS_CNT = TOTAL THEN '<' ELSE NULL END	L_TS,	TS_MAX	TS,
	CASE WHEN L_TVS_CNT = TOTAL THEN '<' ELSE NULL END	L_TVS,	TVS_MAX	TVS,
	CASE WHEN L_NH4_CNT = TOTAL THEN '<' ELSE NULL END	L_NH4,	NH4_MAX	NH4,
	CASE WHEN L_NO2_CNT = TOTAL THEN '<' ELSE NULL END	L_NO2,	NO2_MAX	NO2,
	CASE WHEN L_NO3_CNT = TOTAL THEN '<' ELSE NULL END	L_NO3,	NO3_MAX	NO3,
	CASE WHEN L_TKNS_CNT = TOTAL THEN '<' ELSE NULL END	L_TKNS,	TKNS_MAX	TKNS,
	CASE WHEN L_TKNSP_CNT = TOTAL THEN '<' ELSE NULL END	L_TKNSP,	TKNSP_MAX	TKNSP,
	CASE WHEN L_PO4_CNT = TOTAL THEN '<' ELSE NULL END	L_PO4,	PO4_MAX	PO4,
	CASE WHEN L_TPS_CNT = TOTAL THEN '<' ELSE NULL END	L_TPS,	TPS_MAX	TPS,
	CASE WHEN L_TPSP_CNT = TOTAL THEN '<' ELSE NULL END	L_TPSP,	TPSP_MAX	TPSP,
	CASE WHEN L_SIL_CNT = TOTAL THEN '<' ELSE NULL END	L_SIL,	SIL_MAX	SIL,
	CASE WHEN L_TCYN_CNT = TOTAL THEN '<' ELSE NULL END	L_TCYN,	TCYN_MAX	TCYN,
	CASE WHEN L_DETERG_CNT = TOTAL THEN '<' ELSE NULL END	L_DETERG,	DETERG_MAX	DETERG,
	CASE WHEN L_FL_CNT = TOTAL THEN '<' ELSE NULL END	L_FL,	FL_MAX	FL,
	CASE WHEN L_CL_CNT = TOTAL THEN '<' ELSE NULL END	L_CL,	CL_MAX	CL,
	CASE WHEN L_H2S_CNT = TOTAL THEN '<' ELSE NULL END	L_H2S,	H2S_MAX	H2S,
	CASE WHEN L_SULP_CNT = TOTAL THEN '<' ELSE NULL END	L_SULP,	SULP_MAX	SULP,
	CASE WHEN L_SSP_CNT = TOTAL THEN '<' ELSE NULL END	L_SSP,	SSP_MAX	SSP,
	CASE WHEN L_CHL_CNT = TOTAL THEN '<' ELSE NULL END	L_CHL,	CHL_MAX	CHL,
	CASE WHEN L_PHEO_CNT = TOTAL THEN '<' ELSE NULL END	L_PHEO,	PHEO_MAX	PHEO,
	CASE WHEN L_AL_CNT = TOTAL THEN '<' ELSE NULL END	L_AL,	AL_MAX	AL,
	CASE WHEN L_SB_CNT = TOTAL THEN '<' ELSE NULL END	L_SB,	SB_MAX	SB,
	CASE WHEN L_ARSENIC_CNT = TOTAL THEN '<' ELSE NULL END	L_ARSENIC,	ARSENIC_MAX	ARSENIC,
	CASE WHEN L_BA_CNT = TOTAL THEN '<' ELSE NULL END	L_BA,	BA_MAX	BA,
	CASE WHEN L_BE_CNT = TOTAL THEN '<' ELSE NULL END	L_BE,	BE_MAX	BE,
	CASE WHEN L_B_CNT = TOTAL THEN '<' ELSE NULL END	L_B,	B_MAX	B,
	CASE WHEN L_CD_CNT = TOTAL THEN '<' ELSE NULL END	L_CD,	CD_MAX	CD,
	CASE WHEN L_CR_CNT = TOTAL THEN '<' ELSE NULL END	L_CR,	CR_MAX	CR,
	CASE WHEN L_CU_CNT = TOTAL THEN '<' ELSE NULL END	L_CU,	CU_MAX	CU,
	CASE WHEN L_FE_CNT = TOTAL THEN '<' ELSE NULL END	L_FE,	FE_MAX	FE,
	CASE WHEN L_PB_CNT = TOTAL THEN '<' ELSE NULL END	L_PB,	PB_MAX	PB,
	CASE WHEN L_MN_CNT = TOTAL THEN '<' ELSE NULL END	L_MN,	MN_MAX	MN,
	CASE WHEN L_HG_CNT = TOTAL THEN '<' ELSE NULL END	L_HG,	HG_MAX	HG,
	CASE WHEN L_MO_CNT = TOTAL THEN '<' ELSE NULL END	L_MO,	MO_MAX	MO,
	CASE WHEN L_NI_CNT = TOTAL THEN '<' ELSE NULL END	L_NI,	NI_MAX	NI,
	CASE WHEN L_AG_CNT = TOTAL THEN '<' ELSE NULL END	L_AG,	AG_MAX	AG,
	CASE WHEN L_TL_CNT = TOTAL THEN '<' ELSE NULL END	L_TL,	TL_MAX	TL,
	CASE WHEN L_V_CNT = TOTAL THEN '<' ELSE NULL END	L_V,	V_MAX	V,
	CASE WHEN L_ZN_CNT = TOTAL THEN '<' ELSE NULL END	L_ZN,	ZN_MAX	ZN,
	DEPTH_MAX	DEPTH,		
	WIDTH_MAX	WIDTH,		
	VEL_MAX	VEL,		
	FLOW_MAX	FLOW,		
	CASE WHEN L_NH3_CNT = TOTAL THEN '<' ELSE NULL END	L_NH3,	NH3_MAX	NH3,
	CASE WHEN L_TIN_CNT = TOTAL THEN '<' ELSE NULL END	L_TIN,	TIN_MAX	TIN,
	CASE WHEN L_TN_CNT = TOTAL THEN '<' ELSE NULL END	L_TN,	TN_MAX	TN,
	BOD5_PT	BOD5_PT,		
	NH4_PT	NH4_PT,		
	DOS_PT	DOS_PT,		
	WQI_PT	WQI_PT,		
	WQI_GRADE =	(SELECT  WQI_GRADE		
		   FROM WPG.RW_WQI_GR_REF GR		
		   WHERE ( (GR.L_LOW_PT = '>=' AND WQI_PT >= GR.LOW_PT)		
		    OR (GR.L_LOW_PT = '>' AND WQI_PT > GR.LOW_PT)		
		    OR GR.LOW_PT IS NULL)		
		   AND ( (GR.L_UP_PT = '<=' AND WQI_PT <= GR.UP_PT)		
		    OR (GR.L_UP_PT = '<' AND WQI_PT < GR.UP_PT)		
		    OR GR.UP_PT IS NULL)		
		   )		
FROM	(SELECT			
	SITE_ID,			
	COUNT(*)	TOTAL,		
	REPORT_YR.ACC_YR	YR,		
	MAX(TEMPER)	TEMPER_MAX,		
	MAX(DO)	DO_MAX,		
	MAX(DOS)	DOS_MAX,		
	MAX(COND)	COND_MAX,		
	MAX(SAL)	SAL_MAX,		
	MAX(PH)	PH_MAX,		
	MAX(TURB)	TURB_MAX,		
	COUNT(L_DO)	L_DO_CNT,		
	COUNT(L_DOS)	L_DOS_CNT,		
	COUNT(L_COND)	L_COND_CNT,		
	COUNT(L_SAL)	L_SAL_CNT,		
	COUNT(L_PH)	L_PH_CNT,		
	COUNT(L_TURB)	L_TURB_CNT,		
	MAX(BOD5)	 BOD5_MAX,		
	MAX(FC)	FC_MAX,		
	MAX(EC)	EC_MAX,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	    L_FC_CNT,		
	COUNT(L_EC)	    L_EC_CNT,		
	MAX(NH4)	NH4_MAX,		
	MAX(TKNS)	TKNS_MAX,		
	MAX(TKNSP)	TKNSP_MAX,		
	MAX(NO2)	NO2_MAX,		
	MAX(NO3)	NO3_MAX,		
	MAX(PO4)	PO4_MAX,		
	MAX(TPS)	TPS_MAX,		
	MAX(TPSP)	TPSP_MAX,		
	MAX(SIL)	SIL_MAX,		
	MAX(COD)	COD_MAX,		
	MAX(SS)	SS_MAX,		
	MAX(OIL)	OIL_MAX,		
	MAX(TVS)	TVS_MAX,		
	MAX(TS)	TS_MAX,		
	MAX(TCYN)	TCYN_MAX,		
	MAX(FL)	FL_MAX,		
	MAX(H2S)	H2S_MAX,		
	MAX(SULP)	SULP_MAX,		
	MAX(SSP)	SSP_MAX,		
	MAX(DETERG)	DETERG_MAX,		
	MAX(TOC)	TOC_MAX,		
	MAX(CL)	CL_MAX,		
	MAX(CHL)	CHL_MAX,		
	MAX(PHEO)	PHEO_MAX,		
	MAX(TIN)	TIN_MAX,		
	MAX(TN)	TN_MAX,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_TKNS)	L_TKNS_CNT,		
	COUNT(L_TKNSP)	L_TKNSP_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TPS)	L_TPS_CNT,		
	COUNT(L_TPSP)	L_TPSP_CNT,		
	COUNT(L_SIL)	L_SIL_CNT,		
	COUNT(L_COD)	L_COD_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_OIL)	L_OIL_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_TS)	L_TS_CNT,		
	COUNT(L_TCYN)	L_TCYN_CNT,		
	COUNT(L_FL)	L_FL_CNT,		
	COUNT(L_H2S)	L_H2S_CNT,		
	COUNT(L_SULP)	L_SULP_CNT,		
	COUNT(L_SSP)	L_SSP_CNT,		
	COUNT(L_DETERG)	L_DETERG_CNT,		
	COUNT(L_TOC)	L_TOC_CNT,		
	COUNT(L_CL)	L_CL_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHEO)	L_PHEO_CNT,		
	COUNT(ISNULL(L_NH4,ISNULL(L_NO2,L_NO3)))	L_TIN_CNT,		
	COUNT(ISNULL(L_TKNSP,ISNULL(L_NO2,L_NO3)))	L_TN_CNT,		
	MAX(AL)	AL_MAX,		
	MAX(ARSENIC)	ARSENIC_MAX,		
	MAX(B)	B_MAX,		
	MAX(CD)	CD_MAX,		
	MAX(CR)	CR_MAX,		
	MAX(CU)	CU_MAX,		
	MAX(FE)	FE_MAX,		
	MAX(HG)	HG_MAX,		
	MAX(MN)	MN_MAX,		
	MAX(NI)	NI_MAX,		
	MAX(PB)	PB_MAX,		
	MAX(ZN)	ZN_MAX,		
	MAX(V)	V_MAX,		
	MAX(BA)	BA_MAX,		
	MAX(AG)	AG_MAX,		
	MAX(SB)	SB_MAX,		
	MAX(BE)	BE_MAX,		
	MAX(TL)	TL_MAX,		
	MAX(MO)	MO_MAX,		
	COUNT(L_AL)	L_AL_CNT,		
	COUNT(L_ARSENIC)	L_ARSENIC_CNT,		
	COUNT(L_B)	L_B_CNT,		
	COUNT(L_CD)	L_CD_CNT,		
	COUNT(L_CR)	L_CR_CNT,		
	COUNT(L_CU)	L_CU_CNT,		
	COUNT(L_FE)	L_FE_CNT,		
	COUNT(L_HG)	L_HG_CNT,		
	COUNT(L_MN)	L_MN_CNT,		
	COUNT(L_NI)	L_NI_CNT,		
	COUNT(L_PB)	L_PB_CNT,		
	COUNT(L_ZN)	L_ZN_CNT,		
	COUNT(L_V)	L_V_CNT,		
	COUNT(L_BA)	L_BA_CNT,		
	COUNT(L_AG)	L_AG_CNT,		
	COUNT(L_SB)	L_SB_CNT,		
	COUNT(L_BE)	L_BE_CNT,		
	COUNT(L_TL)	L_TL_CNT,		
	COUNT(L_MO)	L_MO_CNT,		
	MAX(DEPTH)	DEPTH_MAX,		
	MAX(VEL)	VEL_MAX,		
	SUM(WIDTH)	WIDTH_MAX,		
	MAX(FLOW)	FLOW_MAX,		
	MAX(NH3)	NH3_MAX,		
	COUNT(NH3)	L_NH3_CNT,		
	MAX(BOD5_PT)	 BOD5_PT,		
	MAX(NH4_PT)	 NH4_PT,		
	MAX(DOS_PT)	DOS_PT,		
	MAX(WQI_PT)	WQI_PT		
FROM	WPG.RW_DATA1	WQ,		
	    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 			
	    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR			
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR	) CA;


-- WPG.RW_STATS_MED10A source

CREATE VIEW [WPG].[RW_STATS_MED10A] AS				
SELECT	CA.SITE_ID	SITE_ID,		
	CA.YR	YR,		
	TOTAL	TOTAL,		
	TEMPER_MED	TEMPER,		
	CASE WHEN L_TURB_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TURB,	TURB_MED	TURB,
	CASE WHEN L_SAL_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_SAL,	SAL_MED	SAL,
	CASE WHEN L_COND_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_COND,	COND_MED	COND,
	CASE WHEN L_PH_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_PH,	PH_MED	PH,
	CASE WHEN L_DO_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_DO,	DO_MED	DO,
	CASE WHEN L_DOS_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_DOS,	DOS_MED	DOS,
	CASE WHEN L_FC_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_FC,	EXP(LOG_FC_MED)	FC,
	CASE WHEN L_EC_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_EC,	EXP(LOG_EC_MED)	EC,
	CASE WHEN L_BOD5_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_BOD5,	BOD5_MED	BOD5,
	CASE WHEN L_COD_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_COD,	COD_MED	COD,
	CASE WHEN L_TOC_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TOC,	TOC_MED	TOC,
	CASE WHEN L_OIL_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_OIL,	OIL_MED	OIL,
	CASE WHEN L_SS_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_SS,	SS_MED	SS,
	CASE WHEN L_TS_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TS,	TS_MED	TS,
	CASE WHEN L_TVS_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TVS,	TVS_MED	TVS,
	CASE WHEN L_NH4_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_NH4,	NH4_MED	NH4,
	CASE WHEN L_NO2_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_NO2,	NO2_MED	NO2,
	CASE WHEN L_NO3_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_NO3,	NO3_MED	NO3,
	CASE WHEN L_TKNS_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TKNS,	TKNS_MED	TKNS,
	CASE WHEN L_TKNSP_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TKNSP,	TKNSP_MED	TKNSP,
	CASE WHEN L_PO4_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_PO4,	PO4_MED	PO4,
	CASE WHEN L_TPS_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TPS,	TPS_MED	TPS,
	CASE WHEN L_TPSP_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TPSP,	TPSP_MED	TPSP,
	CASE WHEN L_SIL_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_SIL,	SIL_MED	SIL,
	CASE WHEN L_TCYN_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TCYN,	TCYN_MED	TCYN,
	CASE WHEN L_DETERG_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_DETERG,	DETERG_MED	DETERG,
	CASE WHEN L_FL_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_FL,	FL_MED	FL,
	CASE WHEN L_CL_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_CL,	CL_MED	CL,
	CASE WHEN L_H2S_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_H2S,	H2S_MED	H2S,
	CASE WHEN L_SULP_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_SULP,	SULP_MED	SULP,
	CASE WHEN L_SSP_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_SSP,	SSP_MED	SSP,
	CASE WHEN L_CHL_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_CHL,	CHL_MED	CHL,
	CASE WHEN L_PHEO_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_PHEO,	PHEO_MED	PHEO,
	CASE WHEN L_AL_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_AL,	AL_MED	AL,
	CASE WHEN L_SB_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_SB,	SB_MED	SB,
	CASE WHEN L_ARSENIC_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_ARSENIC,	ARSENIC_MED	ARSENIC,
	CASE WHEN L_BA_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_BA,	BA_MED	BA,
	CASE WHEN L_BE_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_BE,	BE_MED	BE,
	CASE WHEN L_B_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_B,	B_MED	B,
	CASE WHEN L_CD_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_CD,	CD_MED	CD,
	CASE WHEN L_CR_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_CR,	CR_MED	CR,
	CASE WHEN L_CU_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_CU,	CU_MED	CU,
	CASE WHEN L_FE_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_FE,	FE_MED	FE,
	CASE WHEN L_PB_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_PB,	PB_MED	PB,
	CASE WHEN L_MN_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_MN,	MN_MED	MN,
	CASE WHEN L_HG_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_HG,	HG_MED	HG,
	CASE WHEN L_MO_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_MO,	MO_MED	MO,
	CASE WHEN L_NI_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_NI,	NI_MED	NI,
	CASE WHEN L_AG_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_AG,	AG_MED	AG,
	CASE WHEN L_TL_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TL,	TL_MED	TL,
	CASE WHEN L_V_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_V,	V_MED	V,
	CASE WHEN L_ZN_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_ZN,	ZN_MED	ZN,
	DEPTH_MED	DEPTH,		
	WIDTH_MED	WIDTH,		
	VEL_MED	VEL,		
	FLOW_MED	FLOW,		
	CASE WHEN L_NH3_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_NH3,	NH3_MED	NH3,
	CASE WHEN L_TIN_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TIN,	TIN_MED	TIN,
	CASE WHEN L_TN_CNT > TOTAL/2 THEN '<' ELSE NULL END	L_TN,	TN_MED	TN,
	BOD5_PT	BOD5_PT,		
	NH4_PT	NH4_PT,		
	DOS_PT	DOS_PT,		
	WQI_PT	WQI_PT,		
	WQI_GRADE =	(SELECT  WQI_GRADE		
		   FROM WPG.RW_WQI_GR_REF GR		
		   WHERE ( (GR.L_LOW_PT = '>=' AND WQI_PT >= GR.LOW_PT)		
		    OR (GR.L_LOW_PT = '>' AND WQI_PT > GR.LOW_PT)		
		    OR GR.LOW_PT IS NULL)		
		   AND ( (GR.L_UP_PT = '<=' AND WQI_PT <= GR.UP_PT)		
		    OR (GR.L_UP_PT = '<' AND WQI_PT < GR.UP_PT)		
		    OR GR.UP_PT IS NULL)		
		   )		
FROM				
(SELECT	DISTINCT			
	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TEMPER)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TEMPER_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DO_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DOS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DOS_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY COND)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	COND_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SAL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SAL_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PH_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TURB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TURB_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY BOD5)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BOD5_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY LOG(CASE FC WHEN 0 THEN NULL ELSE FC END))  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	LOG_FC_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY LOG(CASE EC WHEN 0 THEN NULL ELSE EC END))  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	LOG_EC_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NH4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH4_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TKNS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TKNS_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TKNSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TKNSP_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NO2_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NO3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NO3_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PO4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PO4_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TPS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TPS_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TPSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TPSP_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SIL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SIL_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY COD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	COD_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SS_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY OIL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	OIL_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TVS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TVS_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TS_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TCYN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TCYN_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY FL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FL_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY H2S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	H2S_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SULP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SULP_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SSP_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DETERG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DETERG_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TOC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TOC_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CL_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CHL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CHL_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PHEO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PHEO_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TIN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TIN_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TN_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY AL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	AL_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY ARSENIC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	ARSENIC_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY B)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	B_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CD_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CR)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CR_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CU)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CU_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY FE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FE_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY HG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	HG_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY MN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	MN_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NI)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NI_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PB_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY ZN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	ZN_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY V)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	V_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY BA)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BA_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY AG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	AG_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SB_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY BE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BE_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TL_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY MO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	MO_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DEPTH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DEPTH_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY VEL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	VEL_MED,		
	SUM(WIDTH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	WIDTH_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY FLOW)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FLOW_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NH3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH3_MED,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY BOD5_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BOD5_PT,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NH4_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH4_PT,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DOS_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DOS_PT,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY WQI_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	WQI_PT		
FROM	WPG.RW_DATA1	WQ,		
	    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 			
	    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR			
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9	) CA			
INNER JOIN				
(SELECT				
	SITE_ID,			
	COUNT(*)	TOTAL,		
	REPORT_YR.ACC_YR	YR,		
	COUNT(L_DO)	L_DO_CNT,		
	COUNT(L_DOS)	L_DOS_CNT,		
	COUNT(L_COND)	L_COND_CNT,		
	COUNT(L_SAL)	L_SAL_CNT,		
	COUNT(L_PH)	L_PH_CNT,		
	COUNT(L_TURB)	L_TURB_CNT,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	    L_FC_CNT,		
	COUNT(L_EC)	    L_EC_CNT,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_TKNS)	L_TKNS_CNT,		
	COUNT(L_TKNSP)	L_TKNSP_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TPS)	L_TPS_CNT,		
	COUNT(L_TPSP)	L_TPSP_CNT,		
	COUNT(L_SIL)	L_SIL_CNT,		
	COUNT(L_COD)	L_COD_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_OIL)	L_OIL_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_TS)	L_TS_CNT,		
	COUNT(L_TCYN)	L_TCYN_CNT,		
	COUNT(L_FL)	L_FL_CNT,		
	COUNT(L_H2S)	L_H2S_CNT,		
	COUNT(L_SULP)	L_SULP_CNT,		
	COUNT(L_SSP)	L_SSP_CNT,		
	COUNT(L_DETERG)	L_DETERG_CNT,		
	COUNT(L_TOC)	L_TOC_CNT,		
	COUNT(L_CL)	L_CL_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHEO)	L_PHEO_CNT,		
	COUNT(ISNULL(L_NH4,ISNULL(L_NO2,L_NO3)))	L_TIN_CNT,		
	COUNT(ISNULL(L_TKNSP,ISNULL(L_NO2,L_NO3)))	L_TN_CNT,		
	COUNT(L_AL)	L_AL_CNT,		
	COUNT(L_ARSENIC)	L_ARSENIC_CNT,		
	COUNT(L_B)	L_B_CNT,		
	COUNT(L_CD)	L_CD_CNT,		
	COUNT(L_CR)	L_CR_CNT,		
	COUNT(L_CU)	L_CU_CNT,		
	COUNT(L_FE)	L_FE_CNT,		
	COUNT(L_HG)	L_HG_CNT,		
	COUNT(L_MN)	L_MN_CNT,		
	COUNT(L_NI)	L_NI_CNT,		
	COUNT(L_PB)	L_PB_CNT,		
	COUNT(L_ZN)	L_ZN_CNT,		
	COUNT(L_V)	L_V_CNT,		
	COUNT(L_BA)	L_BA_CNT,		
	COUNT(L_AG)	L_AG_CNT,		
	COUNT(L_SB)	L_SB_CNT,		
	COUNT(L_BE)	L_BE_CNT,		
	COUNT(L_TL)	L_TL_CNT,		
	COUNT(L_MO)	L_MO_CNT,		
	COUNT(NH3)	L_NH3_CNT		
FROM	WPG.RW_DATA1	WQ,		
	    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 			
	    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR			
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR	) L_CA			
ON  CA.SITE_ID = L_CA.SITE_ID AND CA.YR = L_CA.YR;


-- WPG.RW_STATS_MIN10A source

CREATE VIEW [WPG].[RW_STATS_MIN10A] AS				
SELECT	CA.SITE_ID	SITE_ID,		
	CA.YR	YR,		
	CA.TOTAL	TOTAL,		
	TEMPER_MIN	TEMPER,		
	CASE WHEN L_TURB_CNT =0 THEN NULL ELSE '<' END	L_TURB,	TURB_MIN	TURB,
	CASE WHEN L_SAL_CNT =0 THEN NULL ELSE '<' END	L_SAL,	SAL_MIN	SAL,
	CASE WHEN L_COND_CNT =0 THEN NULL ELSE '<' END	L_COND,	COND_MIN	COND,
	CASE WHEN L_PH_CNT =0 THEN NULL ELSE '<' END	L_PH,	PH_MIN	PH,
	CASE WHEN L_DO_CNT =0 THEN NULL ELSE '<' END	L_DO,	DO_MIN	DO,
	CASE WHEN L_DOS_CNT =0 THEN NULL ELSE '<' END	L_DOS,	DOS_MIN	DOS,
	CASE WHEN L_FC_CNT =0 THEN NULL ELSE '<' END	L_FC,	FC_MIN	FC,
	CASE WHEN L_EC_CNT =0 THEN NULL ELSE '<' END	L_EC,	EC_MIN	EC,
	CASE WHEN L_BOD5_CNT =0 THEN NULL ELSE '<' END	L_BOD5,	BOD5_MIN	BOD5,
	CASE WHEN L_COD_CNT =0 THEN NULL ELSE '<' END	L_COD,	COD_MIN	COD,
	CASE WHEN L_TOC_CNT =0 THEN NULL ELSE '<' END	L_TOC,	TOC_MIN	TOC,
	CASE WHEN L_OIL_CNT =0 THEN NULL ELSE '<' END	L_OIL,	OIL_MIN	OIL,
	CASE WHEN L_SS_CNT =0 THEN NULL ELSE '<' END	L_SS,	SS_MIN	SS,
	CASE WHEN L_TS_CNT =0 THEN NULL ELSE '<' END	L_TS,	TS_MIN	TS,
	CASE WHEN L_TVS_CNT =0 THEN NULL ELSE '<' END	L_TVS,	TVS_MIN	TVS,
	CASE WHEN L_NH4_CNT =0 THEN NULL ELSE '<' END	L_NH4,	NH4_MIN	NH4,
	CASE WHEN L_NO2_CNT =0 THEN NULL ELSE '<' END	L_NO2,	NO2_MIN	NO2,
	CASE WHEN L_NO3_CNT =0 THEN NULL ELSE '<' END	L_NO3,	NO3_MIN	NO3,
	CASE WHEN L_TKNS_CNT =0 THEN NULL ELSE '<' END	L_TKNS,	TKNS_MIN	TKNS,
	CASE WHEN L_TKNSP_CNT =0 THEN NULL ELSE '<' END	L_TKNSP,	TKNSP_MIN	TKNSP,
	CASE WHEN L_PO4_CNT =0 THEN NULL ELSE '<' END	L_PO4,	PO4_MIN	PO4,
	CASE WHEN L_TPS_CNT =0 THEN NULL ELSE '<' END	L_TPS,	TPS_MIN	TPS,
	CASE WHEN L_TPSP_CNT =0 THEN NULL ELSE '<' END	L_TPSP,	TPSP_MIN	TPSP,
	CASE WHEN L_SIL_CNT =0 THEN NULL ELSE '<' END	L_SIL,	SIL_MIN	SIL,
	CASE WHEN L_TCYN_CNT =0 THEN NULL ELSE '<' END	L_TCYN,	TCYN_MIN	TCYN,
	CASE WHEN L_DETERG_CNT =0 THEN NULL ELSE '<' END	L_DETERG,	DETERG_MIN	DETERG,
	CASE WHEN L_FL_CNT =0 THEN NULL ELSE '<' END	L_FL,	FL_MIN	FL,
	CASE WHEN L_CL_CNT =0 THEN NULL ELSE '<' END	L_CL,	CL_MIN	CL,
	CASE WHEN L_H2S_CNT =0 THEN NULL ELSE '<' END	L_H2S,	H2S_MIN	H2S,
	CASE WHEN L_SULP_CNT =0 THEN NULL ELSE '<' END	L_SULP,	SULP_MIN	SULP,
	CASE WHEN L_SSP_CNT =0 THEN NULL ELSE '<' END	L_SSP,	SSP_MIN	SSP,
	CASE WHEN L_CHL_CNT =0 THEN NULL ELSE '<' END	L_CHL,	CHL_MIN	CHL,
	CASE WHEN L_PHEO_CNT =0 THEN NULL ELSE '<' END	L_PHEO,	PHEO_MIN	PHEO,
	CASE WHEN L_AL_CNT =0 THEN NULL ELSE '<' END	L_AL,	AL_MIN	AL,
	CASE WHEN L_SB_CNT =0 THEN NULL ELSE '<' END	L_SB,	SB_MIN	SB,
	CASE WHEN L_ARSENIC_CNT =0 THEN NULL ELSE '<' END	L_ARSENIC,	ARSENIC_MIN	ARSENIC,
	CASE WHEN L_BA_CNT =0 THEN NULL ELSE '<' END	L_BA,	BA_MIN	BA,
	CASE WHEN L_BE_CNT =0 THEN NULL ELSE '<' END	L_BE,	BE_MIN	BE,
	CASE WHEN L_B_CNT =0 THEN NULL ELSE '<' END	L_B,	B_MIN	B,
	CASE WHEN L_CD_CNT =0 THEN NULL ELSE '<' END	L_CD,	CD_MIN	CD,
	CASE WHEN L_CR_CNT =0 THEN NULL ELSE '<' END	L_CR,	CR_MIN	CR,
	CASE WHEN L_CU_CNT =0 THEN NULL ELSE '<' END	L_CU,	CU_MIN	CU,
	CASE WHEN L_FE_CNT =0 THEN NULL ELSE '<' END	L_FE,	FE_MIN	FE,
	CASE WHEN L_PB_CNT =0 THEN NULL ELSE '<' END	L_PB,	PB_MIN	PB,
	CASE WHEN L_MN_CNT =0 THEN NULL ELSE '<' END	L_MN,	MN_MIN	MN,
	CASE WHEN L_HG_CNT =0 THEN NULL ELSE '<' END	L_HG,	HG_MIN	HG,
	CASE WHEN L_MO_CNT =0 THEN NULL ELSE '<' END	L_MO,	MO_MIN	MO,
	CASE WHEN L_NI_CNT =0 THEN NULL ELSE '<' END	L_NI,	NI_MIN	NI,
	CASE WHEN L_AG_CNT =0 THEN NULL ELSE '<' END	L_AG,	AG_MIN	AG,
	CASE WHEN L_TL_CNT =0 THEN NULL ELSE '<' END	L_TL,	TL_MIN	TL,
	CASE WHEN L_V_CNT =0 THEN NULL ELSE '<' END	L_V,	V_MIN	V,
	CASE WHEN L_ZN_CNT =0 THEN NULL ELSE '<' END	L_ZN,	ZN_MIN	ZN,
	DEPTH_MIN	DEPTH,		
	WIDTH_MIN	WIDTH,		
	VEL_MIN	VEL,		
	FLOW_MIN	FLOW,		
	CASE WHEN L_NH3_CNT =0 THEN NULL ELSE '<' END	L_NH3,	NH3_MIN	NH3,
	CASE WHEN L_TIN_CNT =0 THEN NULL ELSE '<' END	L_TIN,	TIN_MIN	TIN,
	CASE WHEN L_TN_CNT =0 THEN NULL ELSE '<' END	L_TN,	TN_MIN	TN,
	BOD5_PT	BOD5_PT,		
	NH4_PT	NH4_PT,		
	DOS_PT	DOS_PT,		
	WQI_PT	WQI_PT,		
	WQI_GRADE =	(SELECT  WQI_GRADE		
		   FROM WPG.RW_WQI_GR_REF GR		
		   WHERE ( (GR.L_LOW_PT = '>=' AND WQI_PT >= GR.LOW_PT)		
		    OR (GR.L_LOW_PT = '>' AND WQI_PT > GR.LOW_PT)		
		    OR GR.LOW_PT IS NULL)		
		   AND ( (GR.L_UP_PT = '<=' AND WQI_PT <= GR.UP_PT)		
		    OR (GR.L_UP_PT = '<' AND WQI_PT < GR.UP_PT)		
		    OR GR.UP_PT IS NULL)		
		   )		
FROM	(SELECT			
	SITE_ID,			
	COUNT(*)	TOTAL,		
	REPORT_YR.ACC_YR	YR,		
	MIN(TEMPER)	TEMPER_MIN,		
	MIN(DO)	DO_MIN,		
	MIN(DOS)	DOS_MIN,		
	MIN(COND)	COND_MIN,		
	MIN(SAL)	SAL_MIN,		
	MIN(PH)	PH_MIN,		
	MIN(TURB)	TURB_MIN,		
	COUNT(L_DO)	L_DO_CNT,		
	COUNT(L_DOS)	L_DOS_CNT,		
	COUNT(L_COND)	L_COND_CNT,		
	COUNT(L_SAL)	L_SAL_CNT,		
	COUNT(L_PH)	L_PH_CNT,		
	COUNT(L_TURB)	L_TURB_CNT,		
	MIN(BOD5)	BOD5_MIN,		
	MIN(FC)	FC_MIN,		
	MIN(EC)	EC_MIN,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	L_FC_CNT,		
	COUNT(L_EC)	L_EC_CNT,		
	MIN(NH4)	NH4_MIN,		
	MIN(TKNS)	TKNS_MIN,		
	MIN(TKNSP)	TKNSP_MIN,		
	MIN(NO2)	NO2_MIN,		
	MIN(NO3)	NO3_MIN,		
	MIN(PO4)	PO4_MIN,		
	MIN(TPS)	TPS_MIN,		
	MIN(TPSP)	TPSP_MIN,		
	MIN(SIL)	SIL_MIN,		
	MIN(COD)	COD_MIN,		
	MIN(SS)	SS_MIN,		
	MIN(OIL)	OIL_MIN,		
	MIN(TVS)	TVS_MIN,		
	MIN(TS)	TS_MIN,		
	MIN(TCYN)	TCYN_MIN,		
	MIN(FL)	FL_MIN,		
	MIN(H2S)	H2S_MIN,		
	MIN(SULP)	SULP_MIN,		
	MIN(SSP)	SSP_MIN,		
	MIN(DETERG)	DETERG_MIN,		
	MIN(TOC)	TOC_MIN,		
	MIN(CL)	CL_MIN,		
	MIN(CHL)	CHL_MIN,		
	MIN(PHEO)	PHEO_MIN,		
	MIN(TIN)	TIN_MIN,		
	MIN(TN)	TN_MIN,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_TKNS)	L_TKNS_CNT,		
	COUNT(L_TKNSP)	L_TKNSP_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TPS)	L_TPS_CNT,		
	COUNT(L_TPSP)	L_TPSP_CNT,		
	COUNT(L_SIL)	L_SIL_CNT,		
	COUNT(L_COD)	L_COD_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_OIL)	L_OIL_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_TS)	L_TS_CNT,		
	COUNT(L_TCYN)	L_TCYN_CNT,		
	COUNT(L_FL)	L_FL_CNT,		
	COUNT(L_H2S)	L_H2S_CNT,		
	COUNT(L_SULP)	L_SULP_CNT,		
	COUNT(L_SSP)	L_SSP_CNT,		
	COUNT(L_DETERG)	L_DETERG_CNT,		
	COUNT(L_TOC)	L_TOC_CNT,		
	COUNT(L_CL)	L_CL_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHEO)	L_PHEO_CNT,		
	COUNT(ISNULL(L_NH4,ISNULL(L_NO2,L_NO3)))	L_TIN_CNT,		
	COUNT(ISNULL(L_TKNSP,ISNULL(L_NO2,L_NO3)))	L_TN_CNT,		
	MIN(AL)	AL_MIN,		
	MIN(ARSENIC)	ARSENIC_MIN,		
	MIN(B)	B_MIN,		
	MIN(CD)	CD_MIN,		
	MIN(CR)	CR_MIN,		
	MIN(CU)	CU_MIN,		
	MIN(FE)	FE_MIN,		
	MIN(HG)	HG_MIN,		
	MIN(MN)	MN_MIN,		
	MIN(NI)	NI_MIN,		
	MIN(PB)	PB_MIN,		
	MIN(ZN)	ZN_MIN,		
	MIN(V)	V_MIN,		
	MIN(BA)	BA_MIN,		
	MIN(AG)	AG_MIN,		
	MIN(SB)	SB_MIN,		
	MIN(BE)	BE_MIN,		
	MIN(TL)	TL_MIN,		
	MIN(MO)	MO_MIN,		
	COUNT(L_AL)	L_AL_CNT,		
	COUNT(L_ARSENIC)	L_ARSENIC_CNT,		
	COUNT(L_B)	L_B_CNT,		
	COUNT(L_CD)	L_CD_CNT,		
	COUNT(L_CR)	L_CR_CNT,		
	COUNT(L_CU)	L_CU_CNT,		
	COUNT(L_FE)	L_FE_CNT,		
	COUNT(L_HG)	L_HG_CNT,		
	COUNT(L_MN)	L_MN_CNT,		
	COUNT(L_NI)	L_NI_CNT,		
	COUNT(L_PB)	L_PB_CNT,		
	COUNT(L_ZN)	L_ZN_CNT,		
	COUNT(L_V)	L_V_CNT,		
	COUNT(L_BA)	L_BA_CNT,		
	COUNT(L_AG)	L_AG_CNT,		
	COUNT(L_SB)	L_SB_CNT,		
	COUNT(L_BE)	L_BE_CNT,		
	COUNT(L_TL)	L_TL_CNT,		
	COUNT(L_MO)	L_MO_CNT,		
	MIN(DEPTH)	DEPTH_MIN,		
	MIN(VEL)	VEL_MIN,		
	SUM(WIDTH)	WIDTH_MIN,		
	MIN(FLOW)	FLOW_MIN,		
	MIN(NH3)	NH3_MIN,		
	COUNT(NH3)	L_NH3_CNT,		
	MIN(BOD5_PT)	BOD5_PT,		
	MIN(NH4_PT)	NH4_PT,		
	MIN(DOS_PT)	DOS_PT,		
	MIN(WQI_PT)	WQI_PT		
FROM	WPG.RW_DATA1	WQ,		
	    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 			
	    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR			
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR	) CA;


-- WPG.RW_STATS_PCTL05A source

CREATE VIEW [WPG].[RW_STATS_PCTL05A] AS				
SELECT	CA.SITE_ID	SITE_ID,		
	CA.YR	YR,		
	TOTAL	TOTAL,		
	TEMPER_PCTL	TEMPER,		
	CASE WHEN L_TURB_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TURB,	TURB_PCTL	TURB,
	CASE WHEN L_SAL_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_SAL,	SAL_PCTL	SAL,
	CASE WHEN L_COND_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_COND,	COND_PCTL	COND,
	CASE WHEN L_PH_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_PH,	PH_PCTL	PH,
	CASE WHEN L_DO_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_DO,	DO_PCTL	DO,
	CASE WHEN L_DOS_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_DOS,	DOS_PCTL	DOS,
	CASE WHEN L_FC_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_FC,	EXP(LOG_FC_PCTL)	FC,
	CASE WHEN L_EC_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_EC,	EXP(LOG_EC_PCTL)	EC,
	CASE WHEN L_BOD5_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_BOD5,	BOD5_PCTL	BOD5,
	CASE WHEN L_COD_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_COD,	COD_PCTL	COD,
	CASE WHEN L_TOC_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TOC,	TOC_PCTL	TOC,
	CASE WHEN L_OIL_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_OIL,	OIL_PCTL	OIL,
	CASE WHEN L_SS_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_SS,	SS_PCTL	SS,
	CASE WHEN L_TS_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TS,	TS_PCTL	TS,
	CASE WHEN L_TVS_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TVS,	TVS_PCTL	TVS,
	CASE WHEN L_NH4_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_NH4,	NH4_PCTL	NH4,
	CASE WHEN L_NO2_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_NO2,	NO2_PCTL	NO2,
	CASE WHEN L_NO3_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_NO3,	NO3_PCTL	NO3,
	CASE WHEN L_TKNS_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TKNS,	TKNS_PCTL	TKNS,
	CASE WHEN L_TKNSP_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TKNSP,	TKNSP_PCTL	TKNSP,
	CASE WHEN L_PO4_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_PO4,	PO4_PCTL	PO4,
	CASE WHEN L_TPS_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TPS,	TPS_PCTL	TPS,
	CASE WHEN L_TPSP_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TPSP,	TPSP_PCTL	TPSP,
	CASE WHEN L_SIL_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_SIL,	SIL_PCTL	SIL,
	CASE WHEN L_TCYN_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TCYN,	TCYN_PCTL	TCYN,
	CASE WHEN L_DETERG_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_DETERG,	DETERG_PCTL	DETERG,
	CASE WHEN L_FL_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_FL,	FL_PCTL	FL,
	CASE WHEN L_CL_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_CL,	CL_PCTL	CL,
	CASE WHEN L_H2S_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_H2S,	H2S_PCTL	H2S,
	CASE WHEN L_SULP_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_SULP,	SULP_PCTL	SULP,
	CASE WHEN L_SSP_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_SSP,	SSP_PCTL	SSP,
	CASE WHEN L_CHL_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_CHL,	CHL_PCTL	CHL,
	CASE WHEN L_PHEO_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_PHEO,	PHEO_PCTL	PHEO,
	CASE WHEN L_AL_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_AL,	AL_PCTL	AL,
	CASE WHEN L_SB_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_SB,	SB_PCTL	SB,
	CASE WHEN L_ARSENIC_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_ARSENIC,	ARSENIC_PCTL	ARSENIC,
	CASE WHEN L_BA_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_BA,	BA_PCTL	BA,
	CASE WHEN L_BE_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_BE,	BE_PCTL	BE,
	CASE WHEN L_B_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_B,	B_PCTL	B,
	CASE WHEN L_CD_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_CD,	CD_PCTL	CD,
	CASE WHEN L_CR_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_CR,	CR_PCTL	CR,
	CASE WHEN L_CU_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_CU,	CU_PCTL	CU,
	CASE WHEN L_FE_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_FE,	FE_PCTL	FE,
	CASE WHEN L_PB_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_PB,	PB_PCTL	PB,
	CASE WHEN L_MN_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_MN,	MN_PCTL	MN,
	CASE WHEN L_HG_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_HG,	HG_PCTL	HG,
	CASE WHEN L_MO_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_MO,	MO_PCTL	MO,
	CASE WHEN L_NI_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_NI,	NI_PCTL	NI,
	CASE WHEN L_AG_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_AG,	AG_PCTL	AG,
	CASE WHEN L_TL_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TL,	TL_PCTL	TL,
	CASE WHEN L_V_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_V,	V_PCTL	V,
	CASE WHEN L_ZN_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_ZN,	ZN_PCTL	ZN,
	DEPTH_PCTL	DEPTH,		
	WIDTH_PCTL	WIDTH,		
	VEL_PCTL	VEL,		
	FLOW_PCTL	FLOW,		
	CASE WHEN L_NH3_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_NH3,	NH3_PCTL	NH3,
	CASE WHEN L_TIN_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TIN,	TIN_PCTL	TIN,
	CASE WHEN L_TN_CNT > TOTAL*0.05 THEN '<' ELSE NULL END	L_TN,	TN_PCTL	TN,
	BOD5_PT	BOD5_PT,		
	NH4_PT	NH4_PT,		
	DOS_PT	DOS_PT,		
	WQI_PT	WQI_PT,		
	WQI_GRADE =	(SELECT  WQI_GRADE		
		   FROM WPG.RW_WQI_GR_REF GR		
		   WHERE ( (GR.L_LOW_PT = '>=' AND WQI_PT >= GR.LOW_PT)		
		    OR (GR.L_LOW_PT = '>' AND WQI_PT > GR.LOW_PT)		
		    OR GR.LOW_PT IS NULL)		
		   AND ( (GR.L_UP_PT = '<=' AND WQI_PT <= GR.UP_PT)		
		    OR (GR.L_UP_PT = '<' AND WQI_PT < GR.UP_PT)		
		    OR GR.UP_PT IS NULL)		
		   )		
FROM				
(SELECT	DISTINCT			
	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TEMPER)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TEMPER_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY DO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DO_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY DOS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DOS_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY COND)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	COND_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY SAL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SAL_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY PH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PH_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TURB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TURB_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY BOD5)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BOD5_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY LOG(CASE FC WHEN 0 THEN NULL ELSE FC END))  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	LOG_FC_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY LOG(CASE EC WHEN 0 THEN NULL ELSE EC END))  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	LOG_EC_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY NH4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH4_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TKNS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TKNS_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TKNSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TKNSP_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY NO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NO2_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY NO3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NO3_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY PO4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PO4_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TPS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TPS_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TPSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TPSP_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY SIL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SIL_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY COD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	COD_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY SS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SS_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY OIL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	OIL_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TVS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TVS_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TS_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TCYN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TCYN_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY FL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FL_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY H2S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	H2S_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY SULP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SULP_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY SSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SSP_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY DETERG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DETERG_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TOC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TOC_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY CL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CL_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY CHL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CHL_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY PHEO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PHEO_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TIN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TIN_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TN_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY AL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	AL_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY ARSENIC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	ARSENIC_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY B)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	B_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY CD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CD_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY CR)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CR_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY CU)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CU_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY FE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FE_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY HG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	HG_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY MN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	MN_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY NI)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NI_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY PB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PB_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY ZN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	ZN_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY V)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	V_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY BA)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BA_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY AG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	AG_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY SB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SB_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY BE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BE_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY TL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TL_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY MO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	MO_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY DEPTH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DEPTH_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY VEL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	VEL_PCTL,		
	SUM(WIDTH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	WIDTH_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY FLOW)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FLOW_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY NH3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH3_PCTL,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY BOD5_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BOD5_PT,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY NH4_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH4_PT,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY DOS_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DOS_PT,		
	PERCENTILE_CONT(0.05) WITHIN GROUP (ORDER BY WQI_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	WQI_PT		
FROM	WPG.RW_DATA1	WQ,		
	    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 			
	    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR			
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9	) CA			
INNER JOIN				
(SELECT				
	SITE_ID,			
	COUNT(*)	TOTAL,		
	REPORT_YR.ACC_YR	YR,		
	COUNT(L_DO)	L_DO_CNT,		
	COUNT(L_DOS)	L_DOS_CNT,		
	COUNT(L_COND)	L_COND_CNT,		
	COUNT(L_SAL)	L_SAL_CNT,		
	COUNT(L_PH)	L_PH_CNT,		
	COUNT(L_TURB)	L_TURB_CNT,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	    L_FC_CNT,		
	COUNT(L_EC)	    L_EC_CNT,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_TKNS)	L_TKNS_CNT,		
	COUNT(L_TKNSP)	L_TKNSP_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TPS)	L_TPS_CNT,		
	COUNT(L_TPSP)	L_TPSP_CNT,		
	COUNT(L_SIL)	L_SIL_CNT,		
	COUNT(L_COD)	L_COD_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_OIL)	L_OIL_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_TS)	L_TS_CNT,		
	COUNT(L_TCYN)	L_TCYN_CNT,		
	COUNT(L_FL)	L_FL_CNT,		
	COUNT(L_H2S)	L_H2S_CNT,		
	COUNT(L_SULP)	L_SULP_CNT,		
	COUNT(L_SSP)	L_SSP_CNT,		
	COUNT(L_DETERG)	L_DETERG_CNT,		
	COUNT(L_TOC)	L_TOC_CNT,		
	COUNT(L_CL)	L_CL_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHEO)	L_PHEO_CNT,		
	COUNT(ISNULL(L_NH4,ISNULL(L_NO2,L_NO3)))	L_TIN_CNT,		
	COUNT(ISNULL(L_TKNSP,ISNULL(L_NO2,L_NO3)))	L_TN_CNT,		
	COUNT(L_AL)	L_AL_CNT,		
	COUNT(L_ARSENIC)	L_ARSENIC_CNT,		
	COUNT(L_B)	L_B_CNT,		
	COUNT(L_CD)	L_CD_CNT,		
	COUNT(L_CR)	L_CR_CNT,		
	COUNT(L_CU)	L_CU_CNT,		
	COUNT(L_FE)	L_FE_CNT,		
	COUNT(L_HG)	L_HG_CNT,		
	COUNT(L_MN)	L_MN_CNT,		
	COUNT(L_NI)	L_NI_CNT,		
	COUNT(L_PB)	L_PB_CNT,		
	COUNT(L_ZN)	L_ZN_CNT,		
	COUNT(L_V)	L_V_CNT,		
	COUNT(L_BA)	L_BA_CNT,		
	COUNT(L_AG)	L_AG_CNT,		
	COUNT(L_SB)	L_SB_CNT,		
	COUNT(L_BE)	L_BE_CNT,		
	COUNT(L_TL)	L_TL_CNT,		
	COUNT(L_MO)	L_MO_CNT,		
	COUNT(NH3)	L_NH3_CNT		
FROM	WPG.RW_DATA1	WQ,		
	    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 			
	    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR			
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR	) L_CA			
ON  CA.SITE_ID = L_CA.SITE_ID AND CA.YR = L_CA.YR;


-- WPG.RW_STATS_PCTL10A source

CREATE VIEW [WPG].[RW_STATS_PCTL10A] AS				
SELECT	CA.SITE_ID	SITE_ID,		
	CA.YR	YR,		
	TOTAL	TOTAL,		
	TEMPER_PCTL	TEMPER,		
	CASE WHEN L_TURB_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TURB,	TURB_PCTL	TURB,
	CASE WHEN L_SAL_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_SAL,	SAL_PCTL	SAL,
	CASE WHEN L_COND_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_COND,	COND_PCTL	COND,
	CASE WHEN L_PH_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_PH,	PH_PCTL	PH,
	CASE WHEN L_DO_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_DO,	DO_PCTL	DO,
	CASE WHEN L_DOS_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_DOS,	DOS_PCTL	DOS,
	CASE WHEN L_FC_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_FC,	EXP(LOG_FC_PCTL)	FC,
	CASE WHEN L_EC_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_EC,	EXP(LOG_EC_PCTL)	EC,
	CASE WHEN L_BOD5_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_BOD5,	BOD5_PCTL	BOD5,
	CASE WHEN L_COD_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_COD,	COD_PCTL	COD,
	CASE WHEN L_TOC_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TOC,	TOC_PCTL	TOC,
	CASE WHEN L_OIL_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_OIL,	OIL_PCTL	OIL,
	CASE WHEN L_SS_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_SS,	SS_PCTL	SS,
	CASE WHEN L_TS_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TS,	TS_PCTL	TS,
	CASE WHEN L_TVS_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TVS,	TVS_PCTL	TVS,
	CASE WHEN L_NH4_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_NH4,	NH4_PCTL	NH4,
	CASE WHEN L_NO2_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_NO2,	NO2_PCTL	NO2,
	CASE WHEN L_NO3_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_NO3,	NO3_PCTL	NO3,
	CASE WHEN L_TKNS_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TKNS,	TKNS_PCTL	TKNS,
	CASE WHEN L_TKNSP_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TKNSP,	TKNSP_PCTL	TKNSP,
	CASE WHEN L_PO4_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_PO4,	PO4_PCTL	PO4,
	CASE WHEN L_TPS_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TPS,	TPS_PCTL	TPS,
	CASE WHEN L_TPSP_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TPSP,	TPSP_PCTL	TPSP,
	CASE WHEN L_SIL_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_SIL,	SIL_PCTL	SIL,
	CASE WHEN L_TCYN_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TCYN,	TCYN_PCTL	TCYN,
	CASE WHEN L_DETERG_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_DETERG,	DETERG_PCTL	DETERG,
	CASE WHEN L_FL_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_FL,	FL_PCTL	FL,
	CASE WHEN L_CL_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_CL,	CL_PCTL	CL,
	CASE WHEN L_H2S_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_H2S,	H2S_PCTL	H2S,
	CASE WHEN L_SULP_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_SULP,	SULP_PCTL	SULP,
	CASE WHEN L_SSP_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_SSP,	SSP_PCTL	SSP,
	CASE WHEN L_CHL_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_CHL,	CHL_PCTL	CHL,
	CASE WHEN L_PHEO_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_PHEO,	PHEO_PCTL	PHEO,
	CASE WHEN L_AL_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_AL,	AL_PCTL	AL,
	CASE WHEN L_SB_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_SB,	SB_PCTL	SB,
	CASE WHEN L_ARSENIC_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_ARSENIC,	ARSENIC_PCTL	ARSENIC,
	CASE WHEN L_BA_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_BA,	BA_PCTL	BA,
	CASE WHEN L_BE_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_BE,	BE_PCTL	BE,
	CASE WHEN L_B_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_B,	B_PCTL	B,
	CASE WHEN L_CD_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_CD,	CD_PCTL	CD,
	CASE WHEN L_CR_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_CR,	CR_PCTL	CR,
	CASE WHEN L_CU_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_CU,	CU_PCTL	CU,
	CASE WHEN L_FE_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_FE,	FE_PCTL	FE,
	CASE WHEN L_PB_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_PB,	PB_PCTL	PB,
	CASE WHEN L_MN_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_MN,	MN_PCTL	MN,
	CASE WHEN L_HG_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_HG,	HG_PCTL	HG,
	CASE WHEN L_MO_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_MO,	MO_PCTL	MO,
	CASE WHEN L_NI_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_NI,	NI_PCTL	NI,
	CASE WHEN L_AG_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_AG,	AG_PCTL	AG,
	CASE WHEN L_TL_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TL,	TL_PCTL	TL,
	CASE WHEN L_V_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_V,	V_PCTL	V,
	CASE WHEN L_ZN_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_ZN,	ZN_PCTL	ZN,
	DEPTH_PCTL	DEPTH,		
	WIDTH_PCTL	WIDTH,		
	VEL_PCTL	VEL,		
	FLOW_PCTL	FLOW,		
	CASE WHEN L_NH3_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_NH3,	NH3_PCTL	NH3,
	CASE WHEN L_TIN_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TIN,	TIN_PCTL	TIN,
	CASE WHEN L_TN_CNT > TOTAL*0.1 THEN '<' ELSE NULL END	L_TN,	TN_PCTL	TN,
	BOD5_PT	BOD5_PT,		
	NH4_PT	NH4_PT,		
	DOS_PT	DOS_PT,		
	WQI_PT	WQI_PT,		
	WQI_GRADE =	(SELECT  WQI_GRADE		
		   FROM WPG.RW_WQI_GR_REF GR		
		   WHERE ( (GR.L_LOW_PT = '>=' AND WQI_PT >= GR.LOW_PT)		
		    OR (GR.L_LOW_PT = '>' AND WQI_PT > GR.LOW_PT)		
		    OR GR.LOW_PT IS NULL)		
		   AND ( (GR.L_UP_PT = '<=' AND WQI_PT <= GR.UP_PT)		
		    OR (GR.L_UP_PT = '<' AND WQI_PT < GR.UP_PT)		
		    OR GR.UP_PT IS NULL)		
		   )		
FROM				
(SELECT	DISTINCT			
	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TEMPER)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TEMPER_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY DO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DO_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY DOS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DOS_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY COND)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	COND_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY SAL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SAL_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY PH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PH_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TURB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TURB_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY BOD5)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BOD5_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY LOG(CASE FC WHEN 0 THEN NULL ELSE FC END))  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	LOG_FC_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY LOG(CASE EC WHEN 0 THEN NULL ELSE EC END))  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	LOG_EC_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY NH4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH4_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TKNS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TKNS_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TKNSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TKNSP_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY NO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NO2_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY NO3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NO3_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY PO4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PO4_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TPS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TPS_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TPSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TPSP_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY SIL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SIL_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY COD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	COD_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY SS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SS_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY OIL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	OIL_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TVS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TVS_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TS_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TCYN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TCYN_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY FL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FL_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY H2S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	H2S_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY SULP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SULP_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY SSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SSP_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY DETERG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DETERG_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TOC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TOC_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY CL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CL_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY CHL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CHL_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY PHEO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PHEO_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TIN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TIN_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TN_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY AL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	AL_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY ARSENIC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	ARSENIC_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY B)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	B_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY CD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CD_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY CR)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CR_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY CU)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CU_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY FE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FE_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY HG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	HG_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY MN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	MN_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY NI)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NI_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY PB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PB_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY ZN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	ZN_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY V)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	V_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY BA)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BA_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY AG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	AG_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY SB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SB_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY BE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BE_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY TL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TL_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY MO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	MO_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY DEPTH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DEPTH_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY VEL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	VEL_PCTL,		
	SUM(WIDTH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	WIDTH_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY FLOW)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FLOW_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY NH3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH3_PCTL,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY BOD5_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BOD5_PT,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY NH4_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH4_PT,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY DOS_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DOS_PT,		
	PERCENTILE_CONT(0.1) WITHIN GROUP (ORDER BY WQI_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	WQI_PT		
FROM	WPG.RW_DATA1	WQ,		
	    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 			
	    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR			
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9	) CA			
INNER JOIN				
(SELECT				
	SITE_ID,			
	COUNT(*)	TOTAL,		
	REPORT_YR.ACC_YR	YR,		
	COUNT(L_DO)	L_DO_CNT,		
	COUNT(L_DOS)	L_DOS_CNT,		
	COUNT(L_COND)	L_COND_CNT,		
	COUNT(L_SAL)	L_SAL_CNT,		
	COUNT(L_PH)	L_PH_CNT,		
	COUNT(L_TURB)	L_TURB_CNT,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	    L_FC_CNT,		
	COUNT(L_EC)	    L_EC_CNT,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_TKNS)	L_TKNS_CNT,		
	COUNT(L_TKNSP)	L_TKNSP_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TPS)	L_TPS_CNT,		
	COUNT(L_TPSP)	L_TPSP_CNT,		
	COUNT(L_SIL)	L_SIL_CNT,		
	COUNT(L_COD)	L_COD_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_OIL)	L_OIL_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_TS)	L_TS_CNT,		
	COUNT(L_TCYN)	L_TCYN_CNT,		
	COUNT(L_FL)	L_FL_CNT,		
	COUNT(L_H2S)	L_H2S_CNT,		
	COUNT(L_SULP)	L_SULP_CNT,		
	COUNT(L_SSP)	L_SSP_CNT,		
	COUNT(L_DETERG)	L_DETERG_CNT,		
	COUNT(L_TOC)	L_TOC_CNT,		
	COUNT(L_CL)	L_CL_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHEO)	L_PHEO_CNT,		
	COUNT(ISNULL(L_NH4,ISNULL(L_NO2,L_NO3)))	L_TIN_CNT,		
	COUNT(ISNULL(L_TKNSP,ISNULL(L_NO2,L_NO3)))	L_TN_CNT,		
	COUNT(L_AL)	L_AL_CNT,		
	COUNT(L_ARSENIC)	L_ARSENIC_CNT,		
	COUNT(L_B)	L_B_CNT,		
	COUNT(L_CD)	L_CD_CNT,		
	COUNT(L_CR)	L_CR_CNT,		
	COUNT(L_CU)	L_CU_CNT,		
	COUNT(L_FE)	L_FE_CNT,		
	COUNT(L_HG)	L_HG_CNT,		
	COUNT(L_MN)	L_MN_CNT,		
	COUNT(L_NI)	L_NI_CNT,		
	COUNT(L_PB)	L_PB_CNT,		
	COUNT(L_ZN)	L_ZN_CNT,		
	COUNT(L_V)	L_V_CNT,		
	COUNT(L_BA)	L_BA_CNT,		
	COUNT(L_AG)	L_AG_CNT,		
	COUNT(L_SB)	L_SB_CNT,		
	COUNT(L_BE)	L_BE_CNT,		
	COUNT(L_TL)	L_TL_CNT,		
	COUNT(L_MO)	L_MO_CNT,		
	COUNT(NH3)	L_NH3_CNT		
FROM	WPG.RW_DATA1	WQ,		
	    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 			
	    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR			
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR	) L_CA			
ON  CA.SITE_ID = L_CA.SITE_ID AND CA.YR = L_CA.YR;


-- WPG.RW_STATS_PCTL50A source

CREATE VIEW [WPG].[RW_STATS_PCTL50A] AS				
SELECT	CA.SITE_ID	SITE_ID,		
	CA.YR	YR,		
	TOTAL	TOTAL,		
	TEMPER_PCTL	TEMPER,		
	CASE WHEN L_TURB_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TURB,	TURB_PCTL	TURB,
	CASE WHEN L_SAL_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_SAL,	SAL_PCTL	SAL,
	CASE WHEN L_COND_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_COND,	COND_PCTL	COND,
	CASE WHEN L_PH_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_PH,	PH_PCTL	PH,
	CASE WHEN L_DO_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_DO,	DO_PCTL	DO,
	CASE WHEN L_DOS_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_DOS,	DOS_PCTL	DOS,
	CASE WHEN L_FC_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_FC,	EXP(LOG_FC_PCTL)	FC,
	CASE WHEN L_EC_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_EC,	EXP(LOG_EC_PCTL)	EC,
	CASE WHEN L_BOD5_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_BOD5,	BOD5_PCTL	BOD5,
	CASE WHEN L_COD_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_COD,	COD_PCTL	COD,
	CASE WHEN L_TOC_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TOC,	TOC_PCTL	TOC,
	CASE WHEN L_OIL_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_OIL,	OIL_PCTL	OIL,
	CASE WHEN L_SS_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_SS,	SS_PCTL	SS,
	CASE WHEN L_TS_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TS,	TS_PCTL	TS,
	CASE WHEN L_TVS_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TVS,	TVS_PCTL	TVS,
	CASE WHEN L_NH4_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_NH4,	NH4_PCTL	NH4,
	CASE WHEN L_NO2_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_NO2,	NO2_PCTL	NO2,
	CASE WHEN L_NO3_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_NO3,	NO3_PCTL	NO3,
	CASE WHEN L_TKNS_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TKNS,	TKNS_PCTL	TKNS,
	CASE WHEN L_TKNSP_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TKNSP,	TKNSP_PCTL	TKNSP,
	CASE WHEN L_PO4_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_PO4,	PO4_PCTL	PO4,
	CASE WHEN L_TPS_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TPS,	TPS_PCTL	TPS,
	CASE WHEN L_TPSP_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TPSP,	TPSP_PCTL	TPSP,
	CASE WHEN L_SIL_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_SIL,	SIL_PCTL	SIL,
	CASE WHEN L_TCYN_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TCYN,	TCYN_PCTL	TCYN,
	CASE WHEN L_DETERG_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_DETERG,	DETERG_PCTL	DETERG,
	CASE WHEN L_FL_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_FL,	FL_PCTL	FL,
	CASE WHEN L_CL_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_CL,	CL_PCTL	CL,
	CASE WHEN L_H2S_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_H2S,	H2S_PCTL	H2S,
	CASE WHEN L_SULP_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_SULP,	SULP_PCTL	SULP,
	CASE WHEN L_SSP_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_SSP,	SSP_PCTL	SSP,
	CASE WHEN L_CHL_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_CHL,	CHL_PCTL	CHL,
	CASE WHEN L_PHEO_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_PHEO,	PHEO_PCTL	PHEO,
	CASE WHEN L_AL_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_AL,	AL_PCTL	AL,
	CASE WHEN L_SB_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_SB,	SB_PCTL	SB,
	CASE WHEN L_ARSENIC_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_ARSENIC,	ARSENIC_PCTL	ARSENIC,
	CASE WHEN L_BA_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_BA,	BA_PCTL	BA,
	CASE WHEN L_BE_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_BE,	BE_PCTL	BE,
	CASE WHEN L_B_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_B,	B_PCTL	B,
	CASE WHEN L_CD_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_CD,	CD_PCTL	CD,
	CASE WHEN L_CR_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_CR,	CR_PCTL	CR,
	CASE WHEN L_CU_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_CU,	CU_PCTL	CU,
	CASE WHEN L_FE_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_FE,	FE_PCTL	FE,
	CASE WHEN L_PB_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_PB,	PB_PCTL	PB,
	CASE WHEN L_MN_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_MN,	MN_PCTL	MN,
	CASE WHEN L_HG_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_HG,	HG_PCTL	HG,
	CASE WHEN L_MO_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_MO,	MO_PCTL	MO,
	CASE WHEN L_NI_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_NI,	NI_PCTL	NI,
	CASE WHEN L_AG_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_AG,	AG_PCTL	AG,
	CASE WHEN L_TL_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TL,	TL_PCTL	TL,
	CASE WHEN L_V_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_V,	V_PCTL	V,
	CASE WHEN L_ZN_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_ZN,	ZN_PCTL	ZN,
	DEPTH_PCTL	DEPTH,		
	WIDTH_PCTL	WIDTH,		
	VEL_PCTL	VEL,		
	FLOW_PCTL	FLOW,		
	CASE WHEN L_NH3_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_NH3,	NH3_PCTL	NH3,
	CASE WHEN L_TIN_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TIN,	TIN_PCTL	TIN,
	CASE WHEN L_TN_CNT > TOTAL*0.5 THEN '<' ELSE NULL END	L_TN,	TN_PCTL	TN,
	BOD5_PT	BOD5_PT,		
	NH4_PT	NH4_PT,		
	DOS_PT	DOS_PT,		
	WQI_PT	WQI_PT,		
	WQI_GRADE =	(SELECT  WQI_GRADE		
		   FROM WPG.RW_WQI_GR_REF GR		
		   WHERE ( (GR.L_LOW_PT = '>=' AND WQI_PT >= GR.LOW_PT)		
		    OR (GR.L_LOW_PT = '>' AND WQI_PT > GR.LOW_PT)		
		    OR GR.LOW_PT IS NULL)		
		   AND ( (GR.L_UP_PT = '<=' AND WQI_PT <= GR.UP_PT)		
		    OR (GR.L_UP_PT = '<' AND WQI_PT < GR.UP_PT)		
		    OR GR.UP_PT IS NULL)		
		   )		
FROM				
(SELECT	DISTINCT			
	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TEMPER)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TEMPER_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DO_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DOS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DOS_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY COND)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	COND_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SAL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SAL_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PH_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TURB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TURB_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY BOD5)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BOD5_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY LOG(CASE FC WHEN 0 THEN NULL ELSE FC END))  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	LOG_FC_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY LOG(CASE EC WHEN 0 THEN NULL ELSE EC END))  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	LOG_EC_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NH4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH4_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TKNS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TKNS_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TKNSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TKNSP_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NO2_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NO3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NO3_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PO4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PO4_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TPS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TPS_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TPSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TPSP_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SIL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SIL_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY COD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	COD_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SS_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY OIL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	OIL_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TVS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TVS_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TS_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TCYN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TCYN_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY FL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FL_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY H2S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	H2S_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SULP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SULP_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SSP_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DETERG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DETERG_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TOC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TOC_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CL_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CHL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CHL_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PHEO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PHEO_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TIN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TIN_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TN_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY AL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	AL_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY ARSENIC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	ARSENIC_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY B)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	B_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CD_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CR)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CR_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY CU)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CU_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY FE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FE_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY HG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	HG_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY MN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	MN_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NI)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NI_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PB_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY ZN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	ZN_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY V)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	V_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY BA)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BA_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY AG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	AG_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY SB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SB_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY BE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BE_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY TL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TL_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY MO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	MO_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DEPTH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DEPTH_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY VEL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	VEL_PCTL,		
	SUM(WIDTH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	WIDTH_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY FLOW)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FLOW_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NH3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH3_PCTL,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY BOD5_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BOD5_PT,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY NH4_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH4_PT,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DOS_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DOS_PT,		
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY WQI_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	WQI_PT		
FROM	WPG.RW_DATA1	WQ,		
	    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 			
	    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR			
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9	) CA			
INNER JOIN				
(SELECT				
	SITE_ID,			
	COUNT(*)	TOTAL,		
	REPORT_YR.ACC_YR	YR,		
	COUNT(L_DO)	L_DO_CNT,		
	COUNT(L_DOS)	L_DOS_CNT,		
	COUNT(L_COND)	L_COND_CNT,		
	COUNT(L_SAL)	L_SAL_CNT,		
	COUNT(L_PH)	L_PH_CNT,		
	COUNT(L_TURB)	L_TURB_CNT,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	    L_FC_CNT,		
	COUNT(L_EC)	    L_EC_CNT,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_TKNS)	L_TKNS_CNT,		
	COUNT(L_TKNSP)	L_TKNSP_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TPS)	L_TPS_CNT,		
	COUNT(L_TPSP)	L_TPSP_CNT,		
	COUNT(L_SIL)	L_SIL_CNT,		
	COUNT(L_COD)	L_COD_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_OIL)	L_OIL_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_TS)	L_TS_CNT,		
	COUNT(L_TCYN)	L_TCYN_CNT,		
	COUNT(L_FL)	L_FL_CNT,		
	COUNT(L_H2S)	L_H2S_CNT,		
	COUNT(L_SULP)	L_SULP_CNT,		
	COUNT(L_SSP)	L_SSP_CNT,		
	COUNT(L_DETERG)	L_DETERG_CNT,		
	COUNT(L_TOC)	L_TOC_CNT,		
	COUNT(L_CL)	L_CL_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHEO)	L_PHEO_CNT,		
	COUNT(ISNULL(L_NH4,ISNULL(L_NO2,L_NO3)))	L_TIN_CNT,		
	COUNT(ISNULL(L_TKNSP,ISNULL(L_NO2,L_NO3)))	L_TN_CNT,		
	COUNT(L_AL)	L_AL_CNT,		
	COUNT(L_ARSENIC)	L_ARSENIC_CNT,		
	COUNT(L_B)	L_B_CNT,		
	COUNT(L_CD)	L_CD_CNT,		
	COUNT(L_CR)	L_CR_CNT,		
	COUNT(L_CU)	L_CU_CNT,		
	COUNT(L_FE)	L_FE_CNT,		
	COUNT(L_HG)	L_HG_CNT,		
	COUNT(L_MN)	L_MN_CNT,		
	COUNT(L_NI)	L_NI_CNT,		
	COUNT(L_PB)	L_PB_CNT,		
	COUNT(L_ZN)	L_ZN_CNT,		
	COUNT(L_V)	L_V_CNT,		
	COUNT(L_BA)	L_BA_CNT,		
	COUNT(L_AG)	L_AG_CNT,		
	COUNT(L_SB)	L_SB_CNT,		
	COUNT(L_BE)	L_BE_CNT,		
	COUNT(L_TL)	L_TL_CNT,		
	COUNT(L_MO)	L_MO_CNT,		
	COUNT(NH3)	L_NH3_CNT		
FROM	WPG.RW_DATA1	WQ,		
	    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 			
	    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR			
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR	) L_CA			
ON  CA.SITE_ID = L_CA.SITE_ID AND CA.YR = L_CA.YR;


-- WPG.RW_STATS_PCTL90A source

CREATE VIEW [WPG].[RW_STATS_PCTL90A] AS				
SELECT	CA.SITE_ID	SITE_ID,		
	CA.YR	YR,		
	TOTAL	TOTAL,		
	TEMPER_PCTL	TEMPER,		
	CASE WHEN L_TURB_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TURB,	TURB_PCTL	TURB,
	CASE WHEN L_SAL_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_SAL,	SAL_PCTL	SAL,
	CASE WHEN L_COND_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_COND,	COND_PCTL	COND,
	CASE WHEN L_PH_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_PH,	PH_PCTL	PH,
	CASE WHEN L_DO_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_DO,	DO_PCTL	DO,
	CASE WHEN L_DOS_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_DOS,	DOS_PCTL	DOS,
	CASE WHEN L_FC_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_FC,	EXP(LOG_FC_PCTL)	FC,
	CASE WHEN L_EC_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_EC,	EXP(LOG_EC_PCTL)	EC,
	CASE WHEN L_BOD5_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_BOD5,	BOD5_PCTL	BOD5,
	CASE WHEN L_COD_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_COD,	COD_PCTL	COD,
	CASE WHEN L_TOC_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TOC,	TOC_PCTL	TOC,
	CASE WHEN L_OIL_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_OIL,	OIL_PCTL	OIL,
	CASE WHEN L_SS_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_SS,	SS_PCTL	SS,
	CASE WHEN L_TS_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TS,	TS_PCTL	TS,
	CASE WHEN L_TVS_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TVS,	TVS_PCTL	TVS,
	CASE WHEN L_NH4_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_NH4,	NH4_PCTL	NH4,
	CASE WHEN L_NO2_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_NO2,	NO2_PCTL	NO2,
	CASE WHEN L_NO3_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_NO3,	NO3_PCTL	NO3,
	CASE WHEN L_TKNS_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TKNS,	TKNS_PCTL	TKNS,
	CASE WHEN L_TKNSP_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TKNSP,	TKNSP_PCTL	TKNSP,
	CASE WHEN L_PO4_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_PO4,	PO4_PCTL	PO4,
	CASE WHEN L_TPS_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TPS,	TPS_PCTL	TPS,
	CASE WHEN L_TPSP_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TPSP,	TPSP_PCTL	TPSP,
	CASE WHEN L_SIL_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_SIL,	SIL_PCTL	SIL,
	CASE WHEN L_TCYN_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TCYN,	TCYN_PCTL	TCYN,
	CASE WHEN L_DETERG_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_DETERG,	DETERG_PCTL	DETERG,
	CASE WHEN L_FL_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_FL,	FL_PCTL	FL,
	CASE WHEN L_CL_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_CL,	CL_PCTL	CL,
	CASE WHEN L_H2S_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_H2S,	H2S_PCTL	H2S,
	CASE WHEN L_SULP_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_SULP,	SULP_PCTL	SULP,
	CASE WHEN L_SSP_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_SSP,	SSP_PCTL	SSP,
	CASE WHEN L_CHL_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_CHL,	CHL_PCTL	CHL,
	CASE WHEN L_PHEO_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_PHEO,	PHEO_PCTL	PHEO,
	CASE WHEN L_AL_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_AL,	AL_PCTL	AL,
	CASE WHEN L_SB_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_SB,	SB_PCTL	SB,
	CASE WHEN L_ARSENIC_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_ARSENIC,	ARSENIC_PCTL	ARSENIC,
	CASE WHEN L_BA_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_BA,	BA_PCTL	BA,
	CASE WHEN L_BE_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_BE,	BE_PCTL	BE,
	CASE WHEN L_B_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_B,	B_PCTL	B,
	CASE WHEN L_CD_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_CD,	CD_PCTL	CD,
	CASE WHEN L_CR_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_CR,	CR_PCTL	CR,
	CASE WHEN L_CU_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_CU,	CU_PCTL	CU,
	CASE WHEN L_FE_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_FE,	FE_PCTL	FE,
	CASE WHEN L_PB_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_PB,	PB_PCTL	PB,
	CASE WHEN L_MN_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_MN,	MN_PCTL	MN,
	CASE WHEN L_HG_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_HG,	HG_PCTL	HG,
	CASE WHEN L_MO_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_MO,	MO_PCTL	MO,
	CASE WHEN L_NI_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_NI,	NI_PCTL	NI,
	CASE WHEN L_AG_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_AG,	AG_PCTL	AG,
	CASE WHEN L_TL_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TL,	TL_PCTL	TL,
	CASE WHEN L_V_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_V,	V_PCTL	V,
	CASE WHEN L_ZN_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_ZN,	ZN_PCTL	ZN,
	DEPTH_PCTL	DEPTH,		
	WIDTH_PCTL	WIDTH,		
	VEL_PCTL	VEL,		
	FLOW_PCTL	FLOW,		
	CASE WHEN L_NH3_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_NH3,	NH3_PCTL	NH3,
	CASE WHEN L_TIN_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TIN,	TIN_PCTL	TIN,
	CASE WHEN L_TN_CNT > TOTAL*0.9 THEN '<' ELSE NULL END	L_TN,	TN_PCTL	TN,
	BOD5_PT	BOD5_PT,		
	NH4_PT	NH4_PT,		
	DOS_PT	DOS_PT,		
	WQI_PT	WQI_PT,		
	WQI_GRADE =	(SELECT  WQI_GRADE		
		   FROM WPG.RW_WQI_GR_REF GR		
		   WHERE ( (GR.L_LOW_PT = '>=' AND WQI_PT >= GR.LOW_PT)		
		    OR (GR.L_LOW_PT = '>' AND WQI_PT > GR.LOW_PT)		
		    OR GR.LOW_PT IS NULL)		
		   AND ( (GR.L_UP_PT = '<=' AND WQI_PT <= GR.UP_PT)		
		    OR (GR.L_UP_PT = '<' AND WQI_PT < GR.UP_PT)		
		    OR GR.UP_PT IS NULL)		
		   )		
FROM				
(SELECT	DISTINCT			
	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TEMPER)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TEMPER_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY DO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DO_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY DOS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DOS_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY COND)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	COND_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY SAL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SAL_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY PH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PH_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TURB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TURB_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY BOD5)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BOD5_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY LOG(CASE FC WHEN 0 THEN NULL ELSE FC END))  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	LOG_FC_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY LOG(CASE EC WHEN 0 THEN NULL ELSE EC END))  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	LOG_EC_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY NH4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH4_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TKNS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TKNS_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TKNSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TKNSP_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY NO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NO2_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY NO3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NO3_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY PO4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PO4_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TPS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TPS_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TPSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TPSP_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY SIL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SIL_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY COD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	COD_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY SS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SS_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY OIL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	OIL_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TVS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TVS_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TS_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TCYN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TCYN_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY FL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FL_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY H2S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	H2S_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY SULP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SULP_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY SSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SSP_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY DETERG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DETERG_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TOC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TOC_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY CL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CL_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY CHL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CHL_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY PHEO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PHEO_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TIN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TIN_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TN_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY AL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	AL_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY ARSENIC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	ARSENIC_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY B)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	B_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY CD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CD_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY CR)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CR_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY CU)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CU_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY FE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FE_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY HG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	HG_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY MN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	MN_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY NI)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NI_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY PB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PB_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY ZN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	ZN_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY V)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	V_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY BA)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BA_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY AG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	AG_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY SB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SB_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY BE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BE_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY TL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TL_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY MO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	MO_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY DEPTH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DEPTH_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY VEL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	VEL_PCTL,		
	SUM(WIDTH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	WIDTH_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY FLOW)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FLOW_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY NH3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH3_PCTL,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY BOD5_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BOD5_PT,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY NH4_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH4_PT,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY DOS_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DOS_PT,		
	PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY WQI_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	WQI_PT		
FROM	WPG.RW_DATA1	WQ,		
	    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 			
	    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR			
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9	) CA			
INNER JOIN				
(SELECT				
	SITE_ID,			
	COUNT(*)	TOTAL,		
	REPORT_YR.ACC_YR	YR,		
	COUNT(L_DO)	L_DO_CNT,		
	COUNT(L_DOS)	L_DOS_CNT,		
	COUNT(L_COND)	L_COND_CNT,		
	COUNT(L_SAL)	L_SAL_CNT,		
	COUNT(L_PH)	L_PH_CNT,		
	COUNT(L_TURB)	L_TURB_CNT,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	    L_FC_CNT,		
	COUNT(L_EC)	    L_EC_CNT,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_TKNS)	L_TKNS_CNT,		
	COUNT(L_TKNSP)	L_TKNSP_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TPS)	L_TPS_CNT,		
	COUNT(L_TPSP)	L_TPSP_CNT,		
	COUNT(L_SIL)	L_SIL_CNT,		
	COUNT(L_COD)	L_COD_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_OIL)	L_OIL_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_TS)	L_TS_CNT,		
	COUNT(L_TCYN)	L_TCYN_CNT,		
	COUNT(L_FL)	L_FL_CNT,		
	COUNT(L_H2S)	L_H2S_CNT,		
	COUNT(L_SULP)	L_SULP_CNT,		
	COUNT(L_SSP)	L_SSP_CNT,		
	COUNT(L_DETERG)	L_DETERG_CNT,		
	COUNT(L_TOC)	L_TOC_CNT,		
	COUNT(L_CL)	L_CL_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHEO)	L_PHEO_CNT,		
	COUNT(ISNULL(L_NH4,ISNULL(L_NO2,L_NO3)))	L_TIN_CNT,		
	COUNT(ISNULL(L_TKNSP,ISNULL(L_NO2,L_NO3)))	L_TN_CNT,		
	COUNT(L_AL)	L_AL_CNT,		
	COUNT(L_ARSENIC)	L_ARSENIC_CNT,		
	COUNT(L_B)	L_B_CNT,		
	COUNT(L_CD)	L_CD_CNT,		
	COUNT(L_CR)	L_CR_CNT,		
	COUNT(L_CU)	L_CU_CNT,		
	COUNT(L_FE)	L_FE_CNT,		
	COUNT(L_HG)	L_HG_CNT,		
	COUNT(L_MN)	L_MN_CNT,		
	COUNT(L_NI)	L_NI_CNT,		
	COUNT(L_PB)	L_PB_CNT,		
	COUNT(L_ZN)	L_ZN_CNT,		
	COUNT(L_V)	L_V_CNT,		
	COUNT(L_BA)	L_BA_CNT,		
	COUNT(L_AG)	L_AG_CNT,		
	COUNT(L_SB)	L_SB_CNT,		
	COUNT(L_BE)	L_BE_CNT,		
	COUNT(L_TL)	L_TL_CNT,		
	COUNT(L_MO)	L_MO_CNT,		
	COUNT(NH3)	L_NH3_CNT		
FROM	WPG.RW_DATA1	WQ,		
	    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 			
	    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR			
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR	) L_CA			
ON  CA.SITE_ID = L_CA.SITE_ID AND CA.YR = L_CA.YR;


-- WPG.RW_STATS_PCTL95A source

CREATE VIEW [WPG].[RW_STATS_PCTL95A] AS				
SELECT	CA.SITE_ID	SITE_ID,		
	CA.YR	YR,		
	TOTAL	TOTAL,		
	TEMPER_PCTL	TEMPER,		
	CASE WHEN L_TURB_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TURB,	TURB_PCTL	TURB,
	CASE WHEN L_SAL_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_SAL,	SAL_PCTL	SAL,
	CASE WHEN L_COND_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_COND,	COND_PCTL	COND,
	CASE WHEN L_PH_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_PH,	PH_PCTL	PH,
	CASE WHEN L_DO_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_DO,	DO_PCTL	DO,
	CASE WHEN L_DOS_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_DOS,	DOS_PCTL	DOS,
	CASE WHEN L_FC_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_FC,	EXP(LOG_FC_PCTL)	FC,
	CASE WHEN L_EC_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_EC,	EXP(LOG_EC_PCTL)	EC,
	CASE WHEN L_BOD5_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_BOD5,	BOD5_PCTL	BOD5,
	CASE WHEN L_COD_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_COD,	COD_PCTL	COD,
	CASE WHEN L_TOC_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TOC,	TOC_PCTL	TOC,
	CASE WHEN L_OIL_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_OIL,	OIL_PCTL	OIL,
	CASE WHEN L_SS_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_SS,	SS_PCTL	SS,
	CASE WHEN L_TS_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TS,	TS_PCTL	TS,
	CASE WHEN L_TVS_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TVS,	TVS_PCTL	TVS,
	CASE WHEN L_NH4_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_NH4,	NH4_PCTL	NH4,
	CASE WHEN L_NO2_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_NO2,	NO2_PCTL	NO2,
	CASE WHEN L_NO3_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_NO3,	NO3_PCTL	NO3,
	CASE WHEN L_TKNS_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TKNS,	TKNS_PCTL	TKNS,
	CASE WHEN L_TKNSP_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TKNSP,	TKNSP_PCTL	TKNSP,
	CASE WHEN L_PO4_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_PO4,	PO4_PCTL	PO4,
	CASE WHEN L_TPS_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TPS,	TPS_PCTL	TPS,
	CASE WHEN L_TPSP_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TPSP,	TPSP_PCTL	TPSP,
	CASE WHEN L_SIL_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_SIL,	SIL_PCTL	SIL,
	CASE WHEN L_TCYN_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TCYN,	TCYN_PCTL	TCYN,
	CASE WHEN L_DETERG_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_DETERG,	DETERG_PCTL	DETERG,
	CASE WHEN L_FL_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_FL,	FL_PCTL	FL,
	CASE WHEN L_CL_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_CL,	CL_PCTL	CL,
	CASE WHEN L_H2S_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_H2S,	H2S_PCTL	H2S,
	CASE WHEN L_SULP_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_SULP,	SULP_PCTL	SULP,
	CASE WHEN L_SSP_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_SSP,	SSP_PCTL	SSP,
	CASE WHEN L_CHL_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_CHL,	CHL_PCTL	CHL,
	CASE WHEN L_PHEO_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_PHEO,	PHEO_PCTL	PHEO,
	CASE WHEN L_AL_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_AL,	AL_PCTL	AL,
	CASE WHEN L_SB_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_SB,	SB_PCTL	SB,
	CASE WHEN L_ARSENIC_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_ARSENIC,	ARSENIC_PCTL	ARSENIC,
	CASE WHEN L_BA_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_BA,	BA_PCTL	BA,
	CASE WHEN L_BE_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_BE,	BE_PCTL	BE,
	CASE WHEN L_B_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_B,	B_PCTL	B,
	CASE WHEN L_CD_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_CD,	CD_PCTL	CD,
	CASE WHEN L_CR_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_CR,	CR_PCTL	CR,
	CASE WHEN L_CU_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_CU,	CU_PCTL	CU,
	CASE WHEN L_FE_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_FE,	FE_PCTL	FE,
	CASE WHEN L_PB_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_PB,	PB_PCTL	PB,
	CASE WHEN L_MN_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_MN,	MN_PCTL	MN,
	CASE WHEN L_HG_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_HG,	HG_PCTL	HG,
	CASE WHEN L_MO_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_MO,	MO_PCTL	MO,
	CASE WHEN L_NI_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_NI,	NI_PCTL	NI,
	CASE WHEN L_AG_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_AG,	AG_PCTL	AG,
	CASE WHEN L_TL_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TL,	TL_PCTL	TL,
	CASE WHEN L_V_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_V,	V_PCTL	V,
	CASE WHEN L_ZN_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_ZN,	ZN_PCTL	ZN,
	DEPTH_PCTL	DEPTH,		
	WIDTH_PCTL	WIDTH,		
	VEL_PCTL	VEL,		
	FLOW_PCTL	FLOW,		
	CASE WHEN L_NH3_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_NH3,	NH3_PCTL	NH3,
	CASE WHEN L_TIN_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TIN,	TIN_PCTL	TIN,
	CASE WHEN L_TN_CNT > TOTAL*0.95 THEN '<' ELSE NULL END	L_TN,	TN_PCTL	TN,
	BOD5_PT	BOD5_PT,		
	NH4_PT	NH4_PT,		
	DOS_PT	DOS_PT,		
	WQI_PT	WQI_PT,		
	WQI_GRADE =	(SELECT  WQI_GRADE		
		   FROM WPG.RW_WQI_GR_REF GR		
		   WHERE ( (GR.L_LOW_PT = '>=' AND WQI_PT >= GR.LOW_PT)		
		    OR (GR.L_LOW_PT = '>' AND WQI_PT > GR.LOW_PT)		
		    OR GR.LOW_PT IS NULL)		
		   AND ( (GR.L_UP_PT = '<=' AND WQI_PT <= GR.UP_PT)		
		    OR (GR.L_UP_PT = '<' AND WQI_PT < GR.UP_PT)		
		    OR GR.UP_PT IS NULL)		
		   )		
FROM				
(SELECT	DISTINCT			
	SITE_ID,			
	REPORT_YR.ACC_YR	YR,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TEMPER)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TEMPER_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY DO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DO_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY DOS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DOS_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY COND)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	COND_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY SAL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SAL_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY PH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PH_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TURB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TURB_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY BOD5)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BOD5_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY LOG(CASE FC WHEN 0 THEN NULL ELSE FC END))  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	LOG_FC_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY LOG(CASE EC WHEN 0 THEN NULL ELSE EC END))  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	LOG_EC_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY NH4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH4_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TKNS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TKNS_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TKNSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TKNSP_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY NO2)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NO2_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY NO3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NO3_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY PO4)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PO4_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TPS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TPS_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TPSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TPSP_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY SIL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SIL_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY COD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	COD_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY SS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SS_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY OIL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	OIL_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TVS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TVS_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TS)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TS_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TCYN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TCYN_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY FL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FL_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY H2S)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	H2S_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY SULP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SULP_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY SSP)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SSP_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY DETERG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DETERG_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TOC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TOC_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY CL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CL_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY CHL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CHL_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY PHEO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PHEO_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TIN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TIN_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TN_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY AL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	AL_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY ARSENIC)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	ARSENIC_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY B)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	B_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY CD)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CD_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY CR)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CR_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY CU)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	CU_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY FE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FE_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY HG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	HG_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY MN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	MN_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY NI)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NI_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY PB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	PB_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY ZN)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	ZN_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY V)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	V_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY BA)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BA_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY AG)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	AG_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY SB)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	SB_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY BE)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BE_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY TL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	TL_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY MO)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	MO_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY DEPTH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DEPTH_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY VEL)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	VEL_PCTL,		
	SUM(WIDTH)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	WIDTH_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY FLOW)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	FLOW_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY NH3)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH3_PCTL,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY BOD5_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	BOD5_PT,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY NH4_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	NH4_PT,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY DOS_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	DOS_PT,		
	PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY WQI_PT)  OVER (PARTITION BY SITE_ID, REPORT_YR.ACC_YR)	WQI_PT		
FROM	WPG.RW_DATA1	WQ,		
	    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 			
	    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR			
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9	) CA			
INNER JOIN				
(SELECT				
	SITE_ID,			
	COUNT(*)	TOTAL,		
	REPORT_YR.ACC_YR	YR,		
	COUNT(L_DO)	L_DO_CNT,		
	COUNT(L_DOS)	L_DOS_CNT,		
	COUNT(L_COND)	L_COND_CNT,		
	COUNT(L_SAL)	L_SAL_CNT,		
	COUNT(L_PH)	L_PH_CNT,		
	COUNT(L_TURB)	L_TURB_CNT,		
	COUNT(L_BOD5)	L_BOD5_CNT,		
	COUNT(L_FC)	    L_FC_CNT,		
	COUNT(L_EC)	    L_EC_CNT,		
	COUNT(L_NH4)	L_NH4_CNT,		
	COUNT(L_TKNS)	L_TKNS_CNT,		
	COUNT(L_TKNSP)	L_TKNSP_CNT,		
	COUNT(L_NO2)	L_NO2_CNT,		
	COUNT(L_NO3)	L_NO3_CNT,		
	COUNT(L_PO4)	L_PO4_CNT,		
	COUNT(L_TPS)	L_TPS_CNT,		
	COUNT(L_TPSP)	L_TPSP_CNT,		
	COUNT(L_SIL)	L_SIL_CNT,		
	COUNT(L_COD)	L_COD_CNT,		
	COUNT(L_SS)	L_SS_CNT,		
	COUNT(L_OIL)	L_OIL_CNT,		
	COUNT(L_TVS)	L_TVS_CNT,		
	COUNT(L_TS)	L_TS_CNT,		
	COUNT(L_TCYN)	L_TCYN_CNT,		
	COUNT(L_FL)	L_FL_CNT,		
	COUNT(L_H2S)	L_H2S_CNT,		
	COUNT(L_SULP)	L_SULP_CNT,		
	COUNT(L_SSP)	L_SSP_CNT,		
	COUNT(L_DETERG)	L_DETERG_CNT,		
	COUNT(L_TOC)	L_TOC_CNT,		
	COUNT(L_CL)	L_CL_CNT,		
	COUNT(L_CHL)	L_CHL_CNT,		
	COUNT(L_PHEO)	L_PHEO_CNT,		
	COUNT(ISNULL(L_NH4,ISNULL(L_NO2,L_NO3)))	L_TIN_CNT,		
	COUNT(ISNULL(L_TKNSP,ISNULL(L_NO2,L_NO3)))	L_TN_CNT,		
	COUNT(L_AL)	L_AL_CNT,		
	COUNT(L_ARSENIC)	L_ARSENIC_CNT,		
	COUNT(L_B)	L_B_CNT,		
	COUNT(L_CD)	L_CD_CNT,		
	COUNT(L_CR)	L_CR_CNT,		
	COUNT(L_CU)	L_CU_CNT,		
	COUNT(L_FE)	L_FE_CNT,		
	COUNT(L_HG)	L_HG_CNT,		
	COUNT(L_MN)	L_MN_CNT,		
	COUNT(L_NI)	L_NI_CNT,		
	COUNT(L_PB)	L_PB_CNT,		
	COUNT(L_ZN)	L_ZN_CNT,		
	COUNT(L_V)	L_V_CNT,		
	COUNT(L_BA)	L_BA_CNT,		
	COUNT(L_AG)	L_AG_CNT,		
	COUNT(L_SB)	L_SB_CNT,		
	COUNT(L_BE)	L_BE_CNT,		
	COUNT(L_TL)	L_TL_CNT,		
	COUNT(L_MO)	L_MO_CNT,		
	COUNT(NH3)	L_NH3_CNT		
FROM	WPG.RW_DATA1	WQ,		
	    (SELECT  YEAR(GETDATE()) - 1 AS ACC_YR 			
	    UNION SELECT YEAR(GETDATE()) - 2 )  REPORT_YR			
    WHERE   ACC_YR - YEAR(MDATE) BETWEEN 0 AND 9				
GROUP BY SITE_ID, REPORT_YR.ACC_YR	) L_CA			
ON  CA.SITE_ID = L_CA.SITE_ID AND CA.YR = L_CA.YR;


-- WPG.RW_TESTING source

CREATE VIEW WPG.RW_TESTING AS
SELECT          RWVISIT_ID, SITE_ID, MDATE, STIME, SAMPLE_NO, PARAMETER, MEASURE
FROM              (SELECT          WQ.RWVISIT_ID, WQ.SITE_ID, WQ.MDATE, WQ.STIME, WQ.SAMPLE_NO, CAST(FI.SAL AS float) SAL, 
                                                        CAST(COND AS float) COND, CAST(DO AS float) DO, CAST(FI.DOS AS float) DOS, CAST(FI.PH AS float) PH, 
                                                        CAST(FI.TEMPER AS float) TEMPER, CAST(SS AS float) SS, CAST(TS AS float) TS, CAST(TVS AS float) TVS, 
                                                        CAST(TURB AS float) TURB, CAST(ML.BOD5 AS float) BOD5, CAST(COD AS float) COD, CAST(TOC AS float) 
                                                        TOC, CAST(OIL AS float) OIL, CAST(EC AS float) EC, CAST(FC AS float) FC, CAST(GN.NH4 AS float) NH4, 
                                                        CAST(NO2 AS float) NO2, CAST(NO3 AS float) NO3, CAST(TKNS AS float) TKNS, CAST(TKNSP AS float) 
                                                        TKNSP, CAST(PO4 AS float) PO4, CAST(TPS AS float) TPS, CAST(TPSP AS float) TPSP, CAST(SIL AS float) 
                                                        SIL, CAST(TCYN AS float) TCYN, CAST(DETERG AS float) DETERG, CAST(FL AS float) FL, CAST(CL AS float)
                                                         CL, CAST(H2S AS float) H2S, CAST(SULP AS float) SULP, CAST(SSP AS float) SSP, CAST(CHL AS float) 
                                                        CHL, CAST(PHEO AS float) PHEO, CAST(AL AS float) AL, CAST(SB AS float) SB, CAST(ARSENIC AS float) 
                                                        ARSENIC, CAST(BA AS float) BA, CAST(BE AS float) BE, CAST(B AS float) B, CAST(CD AS float) CD, 
                                                        CAST(CR AS float) CR, CAST(CU AS float) CU, CAST(FE AS float) FE, CAST(PB AS float) PB, 
                                                        CAST(MN AS float) MN, CAST(HG AS float) HG, CAST(MO AS float) MO, CAST(NI AS float) NI, 
                                                        CAST(AG AS float) AG, CAST(TL AS float) TL, CAST(V AS float) V, CAST(ZN AS float) ZN, 
                                                        CAST(DEPTH AS float) DEPTH, CAST(VEL AS float) VEL, CAST(FLOW AS float) FLOW, 
                                                        CAST(BOD5_PT AS float) BOD5_PT, CAST(NH4_PT AS float) NH4_PT, CAST(DOS_PT AS float) DOS_PT, 
                                                        CAST(WQI_PT AS float) WQI_PT, CAST(NH3 AS float) NH3, CAST(TIN AS float) TIN, CAST(TN AS float) 
                                                        TN
                            FROM               WPG.RW_WQI AS WQ LEFT OUTER JOIN
                            WPG.RW_FIELD AS FI ON WQ.RWVISIT_ID = FI.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_MLAB AS ML ON WQ.RWVISIT_ID = ML.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_GLABM AS GM ON WQ.RWVISIT_ID = GM.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_GLABN_CAL AS GN ON WQ.RWVISIT_ID = GN.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_FLOW_SUM AS FL ON WQ.RWVISIT_ID = FL.RWVISIT_ID LEFT OUTER JOIN
                            WPG.RW_NH3 AS NH ON WQ.RWVISIT_ID = NH.RWVISIT_ID) AS p UNPIVOT (MEASURE FOR PARAMETER IN (SAL, COND, DO, DOS, PH, 
                            TEMPER, SS, TS, TVS, TURB, BOD5, COD, TOC, OIL, EC, FC, NH4, NO2, NO3, TKNS, TKNSP, PO4, TPS, TPSP, SIL, 
                            TCYN, DETERG, FL, CL, H2S, SULP, SSP, CHL, PHEO, AL, SB, ARSENIC, BA, BE, B, CD, CR, CU, FE, PB, MN, HG, MO, 
                            NI, AG, TL, V, ZN, DEPTH, VEL, FLOW, BOD5_PT, NH4_PT, DOS_PT, WQI_PT, NH3, TIN, TN)) AS unpvt;


-- WPG.RW_TESTING_A source

CREATE  VIEW [WPG].[RW_TESTING_A] AS
SELECT
	VI.RWVISIT_ID,
	VI.SITE_ID,
	VI.MDATE,
	VI.STIME,
	VI.SAMPLE_NO,
    L_MEASURE,		MEASURE, 
	PARAMETER, 
	SAMPLE_MARK, LAB_NO, 
	DATE_RECEIVED, DATE_REPORTED, 
	PA.VALID_USER, PA.VALID_DATE, PA.VALID_CODE
FROM (
SELECT RWVISIT_ID, L_MEASURE, MEASURE, PARAMETER, NULL SAMPLE_MARK, NULL LAB_NO, NULL DATE_RECEIVED, NULL DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM WPG.RW_FIELD FI	
cross apply 
(
SELECT	FI.L_SAL,	FI.SAL,		N'SAL' union all
SELECT	FI.L_COND,	FI.COND,	N'COND' union all
SELECT	FI.L_DO,	FI.DO,		N'DO' union all
SELECT	FI.L_DOS,	FI.DOS,		N'DOS' union all
SELECT	FI.L_PH,	FI.PH,		N'PH' union all
SELECT	NULL,		FI.TEMPER,	N'TEMPER' union all
SELECT	FI.L_TURB,	FI.TURB,	N'TURB' 
) c (L_MEASURE, MEASURE, PARAMETER)
UNION
SELECT RWVISIT_ID, L_MEASURE, MEASURE, PARAMETER, SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM WPG.RW_MLAB ML	
cross apply 
(
SELECT  ML.L_BOD5,	ML.BOD5,	N'BOD5' union all
SELECT	ML.L_FC,	ML.FC,		N'FC' union all
SELECT	ML.L_EC,	ML.EC,		N'EC' 
) c (L_MEASURE, MEASURE, PARAMETER)
UNION
SELECT RWVISIT_ID, L_MEASURE, MEASURE, PARAMETER, SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM WPG.RW_GLABM GM	
cross apply 
(
SELECT	GM.L_AL,	GM.AL,	N'AL' union all
SELECT	GM.L_SB,	GM.SB,	N'SB' union all
SELECT	GM.L_ARSENIC,	GM.ARSENIC,	N'ARSENIC' union all
SELECT	GM.L_BA,	GM.BA,	N'BA' union all
SELECT	GM.L_BE,	GM.BE,	N'BE' union all
SELECT	GM.L_B,		GM.B,	N'B' union all
SELECT	GM.L_CD,	GM.CD,	N'CD' union all
SELECT	GM.L_CR,	GM.CR,	N'CR' union all
SELECT	GM.L_CU,	GM.CU,	N'CU' union all
SELECT	GM.L_FE,	GM.FE,	N'FE' union all
SELECT	GM.L_PB,	GM.PB,	N'PB' union all
SELECT	GM.L_MN,	GM.MN,	N'MN' union all
SELECT	GM.L_HG,	GM.HG,	N'HG' union all
SELECT	GM.L_MO,	GM.MO,	N'MO' union all
SELECT	GM.L_NI,	GM.NI,	N'NI' union all
SELECT	GM.L_AG,	GM.AG,	N'AG' union all
SELECT	GM.L_TL,	GM.TL,	N'TL' union all
SELECT	GM.L_V,		GM.V,	N'V' union all
SELECT	GM.L_ZN,	GM.ZN,	N'ZN' 
) c (L_MEASURE, MEASURE, PARAMETER)
UNION
SELECT RWVISIT_ID, L_MEASURE, MEASURE, PARAMETER, SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM WPG.RW_GLABN GN	
cross apply 
(
SELECT	GN.L_NO2,	GN.NO2,	N'NO2' union all
SELECT	GN.L_NO3,	GN.NO3,	N'NO3' union all
SELECT	GN.L_NH4,	GN.NH4,	N'NH4' union all
SELECT	GN.L_PO4,	GN.PO4,	N'PO4' union all
SELECT	GN.L_SIL,	GN.SIL,	N'SIL' union all
SELECT	GN.L_SS,	GN.SS,	N'SS' union all
SELECT	GN.L_TKNS,	GN.TKNS,	N'TKNS' union all
SELECT	GN.L_TPS,	GN.TPS,	N'TPS' union all
SELECT	GN.L_TKNSP,	GN.TKNSP,	N'TKNSP' union all
SELECT	GN.L_TPSP,	GN.TPSP,	N'TPSP' union all
SELECT	GN.L_TS,	GN.TS,	N'TS' union all
SELECT	GN.L_TVS,	GN.TVS,	N'TVS' union all
SELECT	GN.L_COD,	GN.COD,	N'COD' union all
SELECT	GN.L_TCYN,	GN.TCYN,	N'TCYN' union all
SELECT	GN.L_FL,	GN.FL,	N'FL' union all
SELECT	GN.L_CL,	GN.CL,	N'CL' union all
SELECT	GN.L_DETERG,	GN.DETERG,	N'DETERG' union all
SELECT	GN.L_TOC,	GN.TOC,	N'TOC' union all
SELECT	GN.L_OIL,	GN.OIL,	N'OIL' union all
SELECT	GN.L_SULP,	GN.SULP,	N'SULP' union all
SELECT	GN.L_SSP,	GN.SSP,	N'SSP' union all
SELECT	GN.L_H2S,	GN.H2S,	N'H2S' union all
SELECT	GN.L_CHL,	GN.CHL,	N'CHL' union all
SELECT	GN.L_PHEO,	GN.PHEO,	N'PHEO' union all
SELECT	NULL, GN.NH4 + GN.NO2 + GN.NO3, N'TIN' union all
SELECT	NULL, GN.TKNSP + GN.NO2 + GN.NO3, N'TN'
) c (L_MEASURE, MEASURE, PARAMETER)
UNION
SELECT RWVISIT_ID, L_MEASURE, MEASURE, PARAMETER, NULL SAMPLE_MARK, NULL LAB_NO, NULL DATE_RECEIVED, NULL DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM (SELECT 
	RWVISIT_ID,
	AVG(DEPTH) DEPTH, SUM(WIDTH) WIDTH, AVG(VEL) VEL, SUM(DEPTH * VEL * WIDTH) FLOW,
	'' VALID_USER,	MAX(VALID_DATE)	VALID_DATE,	MAX(VALID_CODE) VALID_CODE
FROM 	WPG.RW_FLOW
GROUP BY RWVISIT_ID
UNION ALL 
SELECT
 	RWVISIT_ID, NULL DEPTH, NULL WIDTH, NULL VEL, FLOW, VALID_USER,	VALID_DATE,	VALID_CODE
FROM WPG.RW_OTHER_FLOW) FL	
cross apply 
(
SELECT	NULL,	FL.DEPTH,	N'DEPTH' union all
SELECT	NULL,	FL.WIDTH,	N'WIDTH' union all
SELECT	NULL,	FL.VEL,		N'VEL' union all
SELECT	NULL,	FL.FLOW,	N'FLOW' 
) c (L_MEASURE, MEASURE, PARAMETER)
UNION
SELECT GN.RWVISIT_ID, L_MEASURE, MEASURE, PARAMETER, SAMPLE_MARK, LAB_NO, DATE_RECEIVED, DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM	WPG.RW_GLABN		GN
        INNER JOIN (SELECT RWVISIT_ID, SAL, TEMPER, PH 
					FROM WPG.RW_FIELD	
					WHERE SAL IS NOT NULL AND TEMPER IS NOT NULL AND PH IS NOT NULL )	FI
	    ON	GN.RWVISIT_ID	= FI.RWVISIT_ID	 AND 	GN.NH4 IS NOT NULL
cross apply 
(
SELECT	GN.L_NH4, WPG.F_NH3(FI.SAL, FI.TEMPER, FI.PH, GN.NH4),	N'NH3'
) c (L_MEASURE, MEASURE, PARAMETER)
UNION
SELECT RWVISIT_ID, L_MEASURE, MEASURE, PARAMETER, NULL SAMPLE_MARK, NULL LAB_NO, NULL DATE_RECEIVED, NULL DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM WPG.RW_FIELD  FI
cross apply 
(
SELECT NULL, DOS_PT = 	(SELECT 	POINTS
						FROM	WPG.RW_WQI_PT_REF	RE
						WHERE	PARAMETER = 'DOS'
						AND	(	(RE.L_LOW_VALUE = '>='	AND	FI.DOS >= RE.LOW_VALUE)
							OR	(RE.L_LOW_VALUE = '>'	AND	FI.DOS > RE.LOW_VALUE)
							OR	RE.LOW_VALUE IS NULL)
						AND	(	(RE.L_UP_VALUE = '<='	AND	FI.DOS <= RE.UP_VALUE)
							OR	(RE.L_UP_VALUE = '<'	AND	FI.DOS < RE.UP_VALUE)
							OR	RE.UP_VALUE IS NULL)
						),		N'DOS_PT'
) c (L_MEASURE, MEASURE, PARAMETER) 
UNION
SELECT RWVISIT_ID, L_MEASURE, MEASURE, PARAMETER, NULL SAMPLE_MARK, NULL LAB_NO, NULL DATE_RECEIVED, NULL DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM WPG.RW_MLAB	ML
cross apply 
(
SELECT NULL, BOD5_PT = 	(SELECT 	POINTS
						FROM	WPG.RW_WQI_PT_REF	RE
						WHERE	PARAMETER = 'BOD5'
						AND	(	(RE.L_LOW_VALUE = '>='	AND	ML.BOD5 >= RE.LOW_VALUE)
							OR	(RE.L_LOW_VALUE = '>'	AND	ML.BOD5 > RE.LOW_VALUE)
							OR	RE.LOW_VALUE IS NULL)
						AND	(	(RE.L_UP_VALUE = '<='	AND	ML.BOD5 <= RE.UP_VALUE)
							OR	(RE.L_UP_VALUE = '<'	AND	ML.BOD5 < RE.UP_VALUE)
							OR	RE.UP_VALUE IS NULL)
						),		N'BOD5_PT'
) c (L_MEASURE, MEASURE, PARAMETER) 
UNION
SELECT RWVISIT_ID, L_MEASURE, MEASURE, PARAMETER, NULL SAMPLE_MARK, NULL LAB_NO, NULL DATE_RECEIVED, NULL DATE_REPORTED, VALID_USER, VALID_DATE, VALID_CODE
FROM WPG.RW_GLABN	GN
cross apply 
(
SELECT NULL, NH4_PT = 	(SELECT 	POINTS
						FROM	WPG.RW_WQI_PT_REF	RE
						WHERE	PARAMETER = 'NH4'
						AND	(	(RE.L_LOW_VALUE = '>='	AND	GN.NH4 >= RE.LOW_VALUE)
							OR	(RE.L_LOW_VALUE = '>'	AND	GN.NH4 > RE.LOW_VALUE)
							OR	RE.LOW_VALUE IS NULL)
						AND	(	(RE.L_UP_VALUE = '<='	AND	GN.NH4 <= RE.UP_VALUE)
							OR	(RE.L_UP_VALUE = '<'	AND	GN.NH4 < RE.UP_VALUE)
							OR	RE.UP_VALUE IS NULL)
						),		N'NH4_PT'
) c (L_MEASURE, MEASURE, PARAMETER) 
) PA
INNER JOIN WPG.RW_VISIT	VI
	ON VI.RWVISIT_ID = PA.RWVISIT_ID;


-- WPG.RW_VISIT_EC source

CREATE VIEW WPG.RW_VISIT_EC AS
SELECT	A.RWVISIT_ID,
	A.SITE_ID,
	A.MDATE,
	A.STIME,
	A.SAMPLE_NO,
	A.EC,
	COUNT(*)		R_DATE
FROM
	(
	SELECT	VI.RWVISIT_ID,
		VI.SITE_ID,
		VI.MDATE,
		VI.STIME,
		VI.SAMPLE_NO,
		ML.EC
	FROM	WPG.RW_VISIT	VI
	JOIN	WPG.RW_MLAB	ML	ON VI.RWVISIT_ID = ML.RWVISIT_ID
	WHERE EC IS NOT NULL
	AND VI.SITE_ID IN (SELECT SITE_ID FROM WPG.RSTATION WHERE SZ_ID IN (SELECT SZ_ID FROM WPG.RW_SZ_WQO WHERE MAX_5GM_EC IS NOT NULL OR MAX_5MD_EC IS NOT NULL))
	)	A
JOIN	(
	SELECT	VI.RWVISIT_ID,
		VI.SITE_ID,
		VI.MDATE,
		VI.STIME,
		VI.SAMPLE_NO
	FROM	WPG.RW_VISIT	VI
	WHERE RWVISIT_ID IN (SELECT RWVISIT_ID FROM WPG.RW_MLAB WHERE EC IS NOT NULL) 
	AND VI.SITE_ID IN (SELECT SITE_ID FROM WPG.RSTATION WHERE SZ_ID IN (SELECT SZ_ID FROM WPG.RW_SZ_WQO WHERE MAX_5GM_EC IS NOT NULL OR MAX_5MD_EC IS NOT NULL))
	)	B
ON	A.SITE_ID = B.SITE_ID
AND	(A.MDATE > B.MDATE	OR  (A.MDATE = B.MDATE AND  A.RWVISIT_ID >= B.RWVISIT_ID))
GROUP BY A.RWVISIT_ID, A.SITE_ID, A.MDATE, A.STIME, A.SAMPLE_NO, A.EC;


-- WPG.RW_WQI source

CREATE VIEW WPG.RW_WQI AS
SELECT	
	RWVISIT_ID,
	SITE_ID,
	MDATE,
	STIME,
	SAMPLE_NO,
	L_DOS,
	DOS,
	L_BOD5,
	BOD5,
	L_NH4,
	NH4,
	DOS_PT,
	BOD5_PT,
	NH4_PT,
	DOS_PT + BOD5_PT + NH4_PT	WQI_PT,
	WQI_GRADE = 	(SELECT 	WQI_GRADE
			FROM	WPG.RW_WQI_GR_REF	GR
			WHERE	(	(GR.L_LOW_PT = '>='	AND	DOS_PT + BOD5_PT + NH4_PT >= GR.LOW_PT)
				OR	(GR.L_LOW_PT = '>'		AND	DOS_PT + BOD5_PT + NH4_PT > GR.LOW_PT)
				OR	GR.LOW_PT IS NULL)
			AND	(	(GR.L_UP_PT = '<='	AND	DOS_PT + BOD5_PT + NH4_PT <= GR.UP_PT)
				OR	(GR.L_UP_PT = '<'	AND	DOS_PT + BOD5_PT + NH4_PT < GR.UP_PT)
				OR	GR.UP_PT IS NULL)
		)
FROM	(
	SELECT
		VI.RWVISIT_ID,
		VI.SITE_ID,
		VI.MDATE,
		VI.STIME,
		VI.SAMPLE_NO,
		FI.L_DOS,
		FI.DOS,
		ML.L_BOD5,
		ML.BOD5,
		GN.L_NH4,
		GN.NH4,
		DOS_PT = 	(SELECT 	POINTS
				FROM	WPG.RW_WQI_PT_REF	RE
				WHERE	PARAMETER = 'DOS'
				AND	(	(RE.L_LOW_VALUE = '>='	AND	FI.DOS >= RE.LOW_VALUE)
					OR	(RE.L_LOW_VALUE = '>'	AND	FI.DOS > RE.LOW_VALUE)
					OR	RE.LOW_VALUE IS NULL)
				AND	(	(RE.L_UP_VALUE = '<='	AND	FI.DOS <= RE.UP_VALUE)
					OR	(RE.L_UP_VALUE = '<'	AND	FI.DOS < RE.UP_VALUE)
					OR	RE.UP_VALUE IS NULL)
			),
		BOD5_PT = 	(SELECT 	POINTS
				FROM	WPG.RW_WQI_PT_REF	RE
				WHERE	PARAMETER = 'BOD5'
				AND	(	(RE.L_LOW_VALUE = '>='	AND	ML.BOD5 >= RE.LOW_VALUE)
					OR	(RE.L_LOW_VALUE = '>'	AND	ML.BOD5 > RE.LOW_VALUE)
					OR	RE.LOW_VALUE IS NULL)
				AND	(	(RE.L_UP_VALUE = '<='	AND	ML.BOD5 <= RE.UP_VALUE)
					OR	(RE.L_UP_VALUE = '<'	AND	ML.BOD5 < RE.UP_VALUE)
					OR	RE.UP_VALUE IS NULL)
			),
		NH4_PT = 	(SELECT 	POINTS
				FROM	WPG.RW_WQI_PT_REF	RE
				WHERE	PARAMETER = 'NH4'
				AND	(	(RE.L_LOW_VALUE = '>='	AND	GN.NH4 >= RE.LOW_VALUE)
					OR	(RE.L_LOW_VALUE = '>'	AND	GN.NH4 > RE.LOW_VALUE)
					OR	RE.LOW_VALUE IS NULL)
				AND	(	(RE.L_UP_VALUE = '<='	AND	GN.NH4 <= RE.UP_VALUE)
					OR	(RE.L_UP_VALUE = '<'	AND	GN.NH4 < RE.UP_VALUE)
					OR	RE.UP_VALUE IS NULL)
			)
	FROM		WPG.RW_VISIT	VI
	LEFT OUTER JOIN	WPG.RW_FIELD	FI
		ON	VI.RWVISIT_ID = FI.RWVISIT_ID 
	LEFT OUTER JOIN	WPG.RW_MLAB	ML	
		ON	VI.RWVISIT_ID = ML.RWVISIT_ID 
	LEFT OUTER JOIN	WPG.RW_GLABN	GN	
		ON	VI.RWVISIT_ID = GN.RWVISIT_ID
	) A;


-- WPG.RW_WQI_AVG source

CREATE VIEW WPG.RW_WQI_AVG AS
SELECT
	SITE_ID,
	YR,
	TOTAL,
	BOD5_PT	BOD5_PT_AVG,
	NH4_PT	NH4_PT_AVG,
	DOS_PT	DOS_PT_AVG,
	WQI_PT	WQI_PT_AVG,
	WQI_GRADE_AVG =	(SELECT 	WQI_GRADE
			FROM	WPG.RW_WQI_GR_REF	GR
			WHERE	(	(GR.L_LOW_PT = '>='	AND	WQI_PT >= GR.LOW_PT)
				OR	(GR.L_LOW_PT = '>'	AND	WQI_PT > GR.LOW_PT)
				OR	GR.LOW_PT IS NULL)
			AND	(	(GR.L_UP_PT = '<='	AND	WQI_PT <= GR.UP_PT)
				OR	(GR.L_UP_PT = '<'	AND	WQI_PT < GR.UP_PT)
				OR	GR.UP_PT IS NULL)
			)
FROM	(
	SELECT
		SITE_ID,
		COUNT(*)	TOTAL,
		YEAR(MDATE)	YR,
		AVG(BOD5_PT)	 BOD5_PT,
		AVG(NH4_PT)	 NH4_PT,
		AVG(DOS_PT)	DOS_PT,
		AVG(WQI_PT)	WQI_PT
	FROM	WPG.RW_WQI
	GROUP BY SITE_ID, YEAR(MDATE)
	)	PT;


-- WPG.RW_WQI_MAX source

CREATE VIEW WPG.RW_WQI_MAX AS
SELECT
	SITE_ID,
	YR,
	TOTAL,
	BOD5_PT	BOD5_PT_MAX,
	NH4_PT	NH4_PT_MAX,
	DOS_PT	DOS_PT_MAX,
	WQI_PT	WQI_PT_MAX,
	WQI_GRADE_MAX =	(SELECT 	WQI_GRADE
			FROM	WPG.RW_WQI_GR_REF	GR
			WHERE	(	(GR.L_LOW_PT = '>='	AND	DOS_PT + BOD5_PT + NH4_PT >= GR.LOW_PT)
				OR	(GR.L_LOW_PT = '>'		AND	DOS_PT + BOD5_PT + NH4_PT > GR.LOW_PT)
				OR	GR.LOW_PT IS NULL)
			AND	(	(GR.L_UP_PT = '<='	AND	DOS_PT + BOD5_PT + NH4_PT <= GR.UP_PT)
				OR	(GR.L_UP_PT = '<'	AND	DOS_PT + BOD5_PT + NH4_PT < GR.UP_PT)
				OR	GR.UP_PT IS NULL)
			)
FROM	(
	SELECT
		SITE_ID,
		COUNT(*)	TOTAL,
		YEAR(MDATE)	YR,
		MAX(BOD5_PT)	 BOD5_PT,
		MAX(NH4_PT)	 NH4_PT,
		MAX(DOS_PT)	DOS_PT,
		MAX(WQI_PT)	WQI_PT
	FROM	WPG.RW_WQI
	GROUP BY SITE_ID, YEAR(MDATE)
	)	PT;


-- WPG.RW_WQI_MED source

CREATE VIEW WPG.RW_WQI_MED
AS
SELECT          PT.SITE_ID, PT.YYYY, PT.YR, PT.TOTAL, PT.BOD5_PT AS BOD5_PT_MED, PT.NH4_PT AS NH4_PT_MED, 
                            PT.DOS_PT AS DOS_PT_MED, PT.WQI_PT AS WQI_PT_MED, GF.WQI_GRADE AS WQI_GRADE_MED
FROM              (SELECT          SITE_ID, YEAR(MDATE) AS YYYY, YR, COUNT(DOS_PT) AS TOTAL, 
                                                        AVG(CASE WHEN R_BOD5_PT * 2 IN (N_BOD5_PT, N_BOD5_PT + 1, N_BOD5_PT + 2) 
                                                        THEN BOD5_PT ELSE NULL END) AS BOD5_PT, AVG(CASE WHEN R_NH4_PT * 2 IN (N_NH4_PT, 
                                                        N_NH4_PT + 1, N_NH4_PT + 2) THEN NH4_PT ELSE NULL END) AS NH4_PT, 
                                                        AVG(CASE WHEN R_DOS_PT * 2 IN (N_DOS_PT, N_DOS_PT + 1, N_DOS_PT + 2) 
                                                        THEN DOS_PT ELSE NULL END) AS DOS_PT, AVG(CASE WHEN R_WQI_PT * 2 IN (N_WQI_PT, 
                                                        N_WQI_PT + 1, N_WQI_PT + 2) THEN WQI_PT ELSE NULL END) AS WQI_PT
                            FROM               (SELECT          A.RWVISIT_ID, A.SITE_ID, A.MDATE, YEAR(A.MDATE) AS YR, A.BOD5_PT, A.NH4_PT, 
                                                                                     A.DOS_PT, A.WQI_PT, 
                                                                                     COUNT(CASE WHEN A.BOD5_PT < B.BOD5_PT THEN 1 WHEN A.BOD5_PT = B.BOD5_PT AND
                                                                                      A.RWVISIT_ID <= B.RWVISIT_ID THEN 1 ELSE NULL END) AS R_BOD5_PT, 
                                                                                     COUNT(B.BOD5_PT) AS N_BOD5_PT, 
                                                                                     COUNT(CASE WHEN A.NH4_PT < B.NH4_PT THEN 1 WHEN A.NH4_PT = B.NH4_PT AND 
                                                                                     A.RWVISIT_ID <= B.RWVISIT_ID THEN 1 ELSE NULL END) AS R_NH4_PT, 
                                                                                     COUNT(B.NH4_PT) AS N_NH4_PT, 
                                                                                     COUNT(CASE WHEN A.DOS_PT < B.DOS_PT THEN 1 WHEN A.DOS_PT = B.DOS_PT AND 
                                                                                     A.RWVISIT_ID <= B.RWVISIT_ID THEN 1 ELSE NULL END) AS R_DOS_PT, 
                                                                                     COUNT(B.DOS_PT) AS N_DOS_PT, 
                                                                                     COUNT(CASE WHEN A.WQI_PT < B.WQI_PT THEN 1 WHEN A.WQI_PT = B.WQI_PT AND 
                                                                                     A.RWVISIT_ID <= B.RWVISIT_ID THEN 1 ELSE NULL END) AS R_WQI_PT, 
                                                                                     COUNT(B.WQI_PT) AS N_WQI_PT
                                                         FROM               WPG.RW_WQI AS A INNER JOIN
                                                                                     WPG.RW_WQI AS B ON A.SITE_ID = B.SITE_ID AND YEAR(A.MDATE) = YEAR(B.MDATE)
                                                         GROUP BY    A.RWVISIT_ID, A.SITE_ID, A.MDATE, YEAR(A.MDATE), A.BOD5_PT, A.NH4_PT, A.DOS_PT, 
                                                                                     A.WQI_PT) AS C
                            GROUP BY    SITE_ID, YEAR(MDATE), YR) AS PT LEFT OUTER JOIN
                            WPG.RW_WQI_GR_REF AS GF ON PT.WQI_PT BETWEEN GF.LOW_PT AND GF.UP_PT AND 
                            PT.WQI_PT <> CASE WHEN GF.L_LOW_PT = '>' THEN GF.LOW_PT ELSE - 1 END AND 
                            PT.WQI_PT <> CASE WHEN GF.L_UP_PT = '<' THEN GF.UP_PT ELSE - 1 END;


-- WPG.RW_WQI_MIN source

CREATE VIEW WPG.RW_WQI_MIN AS
SELECT
	SITE_ID,
	YR,
	TOTAL,
	BOD5_PT	BOD5_PT_MIN,
	NH4_PT	NH4_PT_MIN,
	DOS_PT	DOS_PT_MIN,
	WQI_PT	WQI_PT_MIN,
	WQI_GRADE_MIN =	(SELECT 	WQI_GRADE
			FROM	WPG.RW_WQI_GR_REF	GR
			WHERE	(	(GR.L_LOW_PT = '>='	AND	DOS_PT + BOD5_PT + NH4_PT >= GR.LOW_PT)
				OR	(GR.L_LOW_PT = '>'		AND	DOS_PT + BOD5_PT + NH4_PT > GR.LOW_PT)
				OR	GR.LOW_PT IS NULL)
			AND	(	(GR.L_UP_PT = '<='	AND	DOS_PT + BOD5_PT + NH4_PT <= GR.UP_PT)
				OR	(GR.L_UP_PT = '<'	AND	DOS_PT + BOD5_PT + NH4_PT < GR.UP_PT)
				OR	GR.UP_PT IS NULL)
			)
FROM	(
	SELECT
		SITE_ID,
		COUNT(*)	TOTAL,
		YEAR(MDATE)	YR,
		MIN(BOD5_PT)	 BOD5_PT,
		MIN(NH4_PT)	 NH4_PT,
		MIN(DOS_PT)	DOS_PT,
		MIN(WQI_PT)	WQI_PT
	FROM	WPG.RW_WQI
	GROUP BY SITE_ID, YEAR(MDATE)
	)	PT;


-- WPG.RW_WQI_STDEV source

CREATE VIEW WPG.RW_WQI_STDEV AS
SELECT
	SITE_ID,
	YR,
	TOTAL,
	BOD5_PT	BOD5_PT_STDEV,
	NH4_PT	NH4_PT_STDEV,
	DOS_PT	DOS_PT_STDEV,
	WQI_PT	WQI_PT_STDEV,
	WQI_GRADE_STDEV =	(SELECT 	WQI_GRADE
			FROM	WPG.RW_WQI_GR_REF	GR
			WHERE	(	(GR.L_LOW_PT = '>='	AND	DOS_PT + BOD5_PT + NH4_PT >= GR.LOW_PT)
				OR	(GR.L_LOW_PT = '>'		AND	DOS_PT + BOD5_PT + NH4_PT > GR.LOW_PT)
				OR	GR.LOW_PT IS NULL)
			AND	(	(GR.L_UP_PT = '<='	AND	DOS_PT + BOD5_PT + NH4_PT <= GR.UP_PT)
				OR	(GR.L_UP_PT = '<'	AND	DOS_PT + BOD5_PT + NH4_PT < GR.UP_PT)
				OR	GR.UP_PT IS NULL)
			)
FROM	(
	SELECT
		SITE_ID,
		COUNT(*)	TOTAL,
		YEAR(MDATE)	YR,
		STDEV(BOD5_PT)	 BOD5_PT,
		STDEV(NH4_PT)	 NH4_PT,
		STDEV(DOS_PT)	DOS_PT,
		STDEV(WQI_PT)	WQI_PT
	FROM	WPG.RW_WQI
	GROUP BY SITE_ID, YEAR(MDATE)
	)	PT;


-- WPG.RW_WQO_RAW source

CREATE VIEW WPG.RW_WQO_RAW AS
SELECT
	WQ.RWVISIT_ID,	
	WQ.SITE_ID,
	WQ.MDATE,
	WQ.STIME,
	WQ.SAMPLE_NO,
	FI.L_PH,
	FI.PH,
	ML.L_BOD5,
	ML.BOD5,
	GN.L_COD,
	GN.COD,
	GN.L_SS,
	GN.SS,
	FI.L_DO,
	FI.DO,
	GN.L_NH4,
	GN.NH4,
	NH.L_NH3,
	NH.NH3,
	OB.MIN_PH,
	OB.MAX_PH,
	OB.MAX_BOD5,
	OB.MAX_COD,
	OB.MAX_AMD_SS,
	OB.MIN_DO,
	OB.MAX_NH4,
	OB.MAX_AAM_NH3,
	CASE SIGN((FI.PH - OB.MIN_PH) * (OB.MAX_PH - FI.PH)) WHEN 1 THEN 1 WHEN 0 THEN 1 WHEN -1 THEN 0 ELSE NULL END	MEET_PH,
	CASE SIGN(OB.MAX_BOD5 - ML.BOD5) WHEN 1 THEN 1 WHEN 0 THEN 1 WHEN -1 THEN 0 ELSE NULL END			MEET_BOD5,
	CASE SIGN(OB.MAX_COD - GN.COD) WHEN 1 THEN 1 WHEN 0 THEN 1 WHEN -1 THEN 0 ELSE NULL END				MEET_COD,
	CASE SIGN(FI.DO - OB.MIN_DO) WHEN 1 THEN 1 WHEN 0 THEN 1 WHEN -1 THEN 0 ELSE NULL END				MEET_DO,
	CASE SIGN(OB.MAX_NH4 - GN.NH4) WHEN 1 THEN 1 WHEN 0 THEN 1 WHEN -1 THEN 0 ELSE NULL END				MEET_NH4
FROM		WPG.RW_VISIT	WQ
LEFT OUTER JOIN	WPG.RW_FIELD 	FI 	ON WQ.RWVISIT_ID = FI.RWVISIT_ID
LEFT OUTER JOIN	WPG.RW_MLAB	ML 	ON WQ.RWVISIT_ID = ML.RWVISIT_ID
LEFT OUTER JOIN	WPG.RW_GLABN	GN 	ON WQ.RWVISIT_ID = GN.RWVISIT_ID
LEFT OUTER JOIN	WPG.RW_NH3	NH	ON WQ.RWVISIT_ID = NH.RWVISIT_ID
LEFT OUTER JOIN	WPG.RSTATION	ST	ON WQ.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.RW_SZ_WQO	OB	ON ST.SZ_ID = OB.SZ_ID;


-- WPG.RW_WQO_RAW0 source

CREATE VIEW WPG.RW_WQO_RAW0 AS
SELECT
	WQ.RWVISIT_ID,	
	WQ.SITE_ID,
	WQ.MDATE,
	WQ.STIME,
	WQ.SAMPLE_NO,
	FI.L_PH,
	FI.PH,
	ML.L_BOD5,
	ML.BOD5,
	GN.L_COD,
	GN.COD,
	GN.L_SS,
	GN.SS,
	FI.L_DO,
	FI.DO,
	GN.L_NH4,
	GN.NH4,
	NH.L_NH3,
	NH.NH3,
	ML.L_EC,
	ML.EC,
	EC.EC_5MD,
	EC.EC_5GM,
	OB.MIN_PH,
	OB.MAX_PH,
	OB.MAX_BOD5,
	OB.MAX_COD,
	OB.MAX_AMD_SS,
	OB.MIN_DO,
	OB.MAX_NH4,
	OB.MAX_AAM_NH3,
	MAX_5MD_EC,
	MAX_5GM_EC,
	MAX_AGM_EC,
	CASE SIGN((FI.PH - OB.MIN_PH) * (OB.MAX_PH - FI.PH)) WHEN 1 THEN 1 WHEN 0 THEN 1 WHEN -1 THEN 0 ELSE NULL END	MEET_PH,
	CASE SIGN(OB.MAX_BOD5 - ML.BOD5) WHEN 1 THEN 1 WHEN 0 THEN 1 WHEN -1 THEN 0 ELSE NULL END			MEET_BOD5,
	CASE SIGN(OB.MAX_COD - GN.COD) WHEN 1 THEN 1 WHEN 0 THEN 1 WHEN -1 THEN 0 ELSE NULL END			MEET_COD,
	CASE SIGN(FI.DO - OB.MIN_DO) WHEN 1 THEN 1 WHEN 0 THEN 1 WHEN -1 THEN 0 ELSE NULL END				MEET_DO,
	CASE SIGN(OB.MAX_NH4 - GN.NH4) WHEN 1 THEN 1 WHEN 0 THEN 1 WHEN -1 THEN 0 ELSE NULL END			MEET_NH4,
	CASE SIGN(OB.MAX_5MD_EC - EC.EC_5MD) WHEN 1 THEN 1 WHEN 0 THEN 1 WHEN -1 THEN 0 ELSE NULL END		MEET_EC_5MD,
	CASE SIGN(OB.MAX_5GM_EC - EC.EC_5GM) WHEN 1 THEN 1 WHEN 0 THEN 1 WHEN -1 THEN 0 ELSE NULL END		MEET_EC_5GM
FROM		WPG.RW_VISIT	WQ
LEFT OUTER JOIN	WPG.RW_FIELD 	FI 	ON WQ.RWVISIT_ID = FI.RWVISIT_ID
LEFT OUTER JOIN	WPG.RW_MLAB	ML 	ON WQ.RWVISIT_ID = ML.RWVISIT_ID
LEFT OUTER JOIN	WPG.RW_GLABN	GN 	ON WQ.RWVISIT_ID = GN.RWVISIT_ID
LEFT OUTER JOIN	WPG.RW_NH3	NH	ON WQ.RWVISIT_ID = NH.RWVISIT_ID
LEFT OUTER JOIN	WPG.RW_5EC	EC	ON WQ.RWVISIT_ID = EC.RWVISIT_ID
LEFT OUTER JOIN	WPG.RSTATION	ST	ON WQ.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.RW_SZ_WQO	OB	ON ST.SZ_ID = OB.SZ_ID;


-- WPG.RW_WQO_SUM source

CREATE VIEW WPG.RW_WQO_SUM AS
SELECT
	RA.SITE_ID,
	YEAR(RA.MDATE)		YR,
	COUNT(*)		TOTAL,
	RA.MIN_PH,
	RA.MAX_PH,
	COUNT(RA.PH)		N_PH,
	SUM(RA.MEET_PH)		M_PH,
	CASE WHEN COUNT(RA.PH) = 0 THEN NULL ELSE SUM(RA.MEET_PH)*100.00/COUNT(RA.PH) END	RATE_PH,
	COUNT(RA.BOD5)		N_BOD5,
	RA.MAX_BOD5,
	SUM(RA.MEET_BOD5)	M_BOD5,
	CASE WHEN COUNT(RA.BOD5) = 0 THEN NULL ELSE SUM(RA.MEET_BOD5)*100.00/COUNT(RA.BOD5) END	RATE_BOD5,
	RA.MAX_COD,
	COUNT(RA.COD)		N_COD,
	SUM(RA.MEET_COD)	M_COD,
	CASE WHEN COUNT(RA.COD) = 0 THEN NULL ELSE SUM(RA.MEET_COD)*100.00/COUNT(RA.COD) END	RATE_COD,
	RA.MIN_DO,
	COUNT(RA.DO)		N_DO,
	SUM(RA.MEET_DO)		M_DO,
	CASE WHEN COUNT(RA.DO) = 0 THEN NULL ELSE SUM(RA.MEET_DO)*100.00/COUNT(RA.DO) END	RATE_DO,
	RA.MAX_AMD_SS,
	COUNT(RA.SS)		N_SS,
	GN.SS			AMD_SS,
	CASE SIGN( RA.MAX_AMD_SS - GN.SS) WHEN 1 THEN 100 WHEN 0 THEN 100 WHEN -1 THEN 0 ELSE NULL END	RATE_SS_AMD, 
	RA.MAX_NH4,
	COUNT(RA.NH4)		N_NH4,
	SUM(RA.MEET_NH4)	M_NH4,
	CASE WHEN COUNT(RA.NH4) = 0 THEN NULL ELSE SUM(RA.MEET_NH4)*100.00/COUNT(RA.NH4) END	RATE_NH4,
	RA.MAX_AAM_NH3,
	AVG(RA.NH3)		NH3_AAM,
	CASE SIGN(RA.MAX_AAM_NH3 - AVG(RA.NH3)) WHEN 1 THEN 100 WHEN 0 THEN 100 WHEN -1 THEN 0 ELSE NULL END	RATE_NH3_AAM
FROM		WPG.RW_WQO_RAW	RA
LEFT OUTER JOIN	WPG.RW_SS_MED	GN	ON RA.SITE_ID = GN.SITE_ID AND YEAR(RA.MDATE) = GN.YR
GROUP BY RA.SITE_ID, YEAR(RA.MDATE), GN.SS,
 	RA.MIN_PH,
	RA.MAX_PH,
	RA.MAX_BOD5,
	RA.MAX_COD,
	RA.MAX_AMD_SS,
	RA.MIN_DO,
	RA.MAX_NH4,
	RA.MAX_AAM_NH3;


-- WPG.RW_WQO_SUM0 source

CREATE VIEW WPG.RW_WQO_SUM0 AS
SELECT
	RA.SITE_ID,
	YEAR(RA.MDATE)		YR,
	COUNT(*)		TOTAL,
	RA.MIN_PH,
	RA.MAX_PH,
	COUNT(RA.PH)		N_PH,
	SUM(RA.MEET_PH)		M_PH,
	CASE WHEN COUNT(RA.PH) = 0 THEN NULL ELSE SUM(RA.MEET_PH)*100.00/COUNT(RA.PH) END	RATE_PH,
	COUNT(RA.BOD5)		N_BOD5,
	RA.MAX_BOD5,
	SUM(RA.MEET_BOD5)	M_BOD5,
	CASE WHEN COUNT(RA.BOD5) = 0 THEN NULL ELSE SUM(RA.MEET_BOD5)*100.00/COUNT(RA.BOD5) END	RATE_BOD5,
	RA.MAX_COD,
	COUNT(RA.COD)		N_COD,
	SUM(RA.MEET_COD)	M_COD,
	CASE WHEN COUNT(RA.COD) = 0 THEN NULL ELSE SUM(RA.MEET_COD)*100.00/COUNT(RA.COD) END	RATE_COD,
	RA.MIN_DO,
	COUNT(RA.DO)		N_DO,
	SUM(RA.MEET_DO)		M_DO,
	CASE WHEN COUNT(RA.DO) = 0 THEN NULL ELSE SUM(RA.MEET_DO)*100.00/COUNT(RA.DO) END	RATE_DO,
	RA.MAX_AMD_SS,
	COUNT(RA.SS)		N_SS,
	GN.SS			AMD_SS,
	CASE SIGN( RA.MAX_AMD_SS - GN.SS) WHEN 1 THEN 100 WHEN 0 THEN 100 WHEN -1 THEN 0 ELSE NULL END	RATE_SS_AMD, 
	RA.MAX_NH4,
	COUNT(RA.NH4)		N_NH4,
	SUM(RA.MEET_NH4)	M_NH4,
	CASE WHEN COUNT(RA.NH4) = 0 THEN NULL ELSE SUM(RA.MEET_NH4)*100.00/COUNT(RA.NH4) END	RATE_NH4,
	RA.MAX_AAM_NH3,
	AVG(RA.NH3)		NH3_AAM,
	CASE SIGN(RA.MAX_AAM_NH3 - AVG(RA.NH3)) WHEN 1 THEN 100 WHEN 0 THEN 100 WHEN -1 THEN 0 ELSE NULL END	RATE_NH3_AAM,
	RA.MAX_5MD_EC,
	COUNT(RA.EC_5MD)	N_EC_5MD,
	SUM(RA.MEET_EC_5MD)	M_EC_5MD,
	CASE WHEN COUNT(RA.EC_5MD) = 0 THEN NULL ELSE SUM(RA.MEET_EC_5MD)*100.00/COUNT(RA.EC_5MD) END	RATE_EC_5MD,
	RA.MAX_AGM_EC,
	COUNT(RA.EC_5GM)	N_EC_5GM,
	SUM(RA.MEET_EC_5GM)	M_EC_5GM,
	CASE WHEN COUNT(RA.EC_5GM) = 0 THEN NULL ELSE SUM(RA.MEET_EC_5GM)*100.00/COUNT(RA.EC_5GM) END	RATE_EC_5GM,
	RA.MAX_5GM_EC,
	EXP(AVG(LOG(CASE RA.EC WHEN 0 THEN 1 ELSE RA.EC END)))	EC_AGM,
	CASE SIGN(RA.MAX_AGM_EC - EXP(AVG(LOG(CASE RA.EC WHEN 0 THEN 1 ELSE RA.EC END)))) WHEN 1 THEN 100 WHEN 0 THEN 100 WHEN -1 THEN 0 ELSE NULL END	RATE_EC_AGM
FROM		WPG.RW_WQO_RAW0	RA
LEFT OUTER JOIN	WPG.RW_SS_MED	GN	ON RA.SITE_ID = GN.SITE_ID AND YEAR(RA.MDATE) = GN.YR
GROUP BY RA.SITE_ID, YEAR(RA.MDATE), GN.SS,
 	RA.MIN_PH,
	RA.MAX_PH,
	RA.MAX_BOD5,
	RA.MAX_COD,
	RA.MAX_AMD_SS,
	RA.MIN_DO,
	RA.MAX_NH4,
	RA.MAX_AAM_NH3,
	RA.MAX_5MD_EC,
	RA.MAX_5GM_EC,
	RA.MAX_AGM_EC;


-- WPG.RW_WQO_SUM_R0 source

CREATE VIEW WPG.RW_WQO_SUM_R0 AS
SELECT
    RI.R_ID,
	YEAR(RA.MDATE)		YR,
	COUNT(*)		TOTAL,
	RA.MIN_PH,
	RA.MAX_PH,
	COUNT(RA.PH)		N_PH,
	SUM(RA.MEET_PH)		M_PH,
	CASE WHEN COUNT(RA.PH) = 0 THEN NULL ELSE SUM(RA.MEET_PH)*100.00/COUNT(RA.PH) END	RATE_PH,
	COUNT(RA.BOD5)		N_BOD5,
	RA.MAX_BOD5,
	SUM(RA.MEET_BOD5)	M_BOD5,
	CASE WHEN COUNT(RA.BOD5) = 0 THEN NULL ELSE SUM(RA.MEET_BOD5)*100.00/COUNT(RA.BOD5) END	RATE_BOD5,
	RA.MAX_COD,
	COUNT(RA.COD)		N_COD,
	SUM(RA.MEET_COD)	M_COD,
	CASE WHEN COUNT(RA.COD) = 0 THEN NULL ELSE SUM(RA.MEET_COD)*100.00/COUNT(RA.COD) END	RATE_COD,
	RA.MIN_DO,
	COUNT(RA.DO)		N_DO,
	SUM(RA.MEET_DO)		M_DO,
	CASE WHEN COUNT(RA.DO) = 0 THEN NULL ELSE SUM(RA.MEET_DO)*100.00/COUNT(RA.DO) END	RATE_DO,
	RA.MAX_AMD_SS,
	COUNT(RA.SS)		N_SS,
	AVG(GN.SS)			AMD_SS,
	AVG(CASE SIGN( RA.MAX_AMD_SS - GN.SS) WHEN 1 THEN 100 WHEN 0 THEN 100 WHEN -1 THEN 0 ELSE NULL END)	RATE_SS_AMD, 
	RA.MAX_NH4,
	COUNT(RA.NH4)		N_NH4,
	SUM(RA.MEET_NH4)	M_NH4,
	CASE WHEN COUNT(RA.NH4) = 0 THEN NULL ELSE SUM(RA.MEET_NH4)*100.00/COUNT(RA.NH4) END	RATE_NH4,
	RA.MAX_AAM_NH3,
	AVG(RA.NH3)		NH3_AAM,
	CASE SIGN(RA.MAX_AAM_NH3 - AVG(RA.NH3)) WHEN 1 THEN 100 WHEN 0 THEN 100 WHEN -1 THEN 0 ELSE NULL END	RATE_NH3_AAM,
	RA.MAX_5MD_EC,
	COUNT(RA.EC_5MD)	N_EC_5MD,
	SUM(RA.MEET_EC_5MD)	M_EC_5MD,
	CASE WHEN COUNT(RA.EC_5MD) = 0 THEN NULL ELSE SUM(RA.MEET_EC_5MD)*100.00/COUNT(RA.EC_5MD) END	RATE_EC_5MD,
	RA.MAX_5GM_EC,
	COUNT(RA.EC_5GM)	N_EC_5GM,
	SUM(RA.MEET_EC_5GM)	M_EC_5GM,
	CASE WHEN COUNT(RA.EC_5GM) = 0 THEN NULL ELSE SUM(RA.MEET_EC_5GM)*100.00/COUNT(RA.EC_5GM) END	RATE_EC_5GM,
	RA.MAX_AGM_EC,
    EXP(AVG(LOG(CASE RA.EC WHEN 0 THEN 1 ELSE RA.EC END)))	EC_AGM,
	CASE SIGN(RA.MAX_AGM_EC - EXP(AVG(LOG(CASE RA.EC WHEN 0 THEN 1 ELSE RA.EC END)))) WHEN 1 THEN 100 WHEN 0 THEN 100 WHEN -1 THEN 0 ELSE NULL END	RATE_EC_AGM
FROM		WPG.RW_WQO_RAW0	RA
LEFT OUTER JOIN	WPG.RW_SS_MED	GN	ON RA.SITE_ID = GN.SITE_ID AND YEAR(RA.MDATE) = GN.YR
JOIN	WPG.RSTATION	ST	ON	RA.SITE_ID 	= ST.SITE_ID
JOIN	WPG.RIVER		RI	ON	ST.R_ID		= RI.R_ID
GROUP BY RI.R_ID, YEAR(RA.MDATE),
 	RA.MIN_PH,
	RA.MAX_PH,
	RA.MAX_BOD5,
	RA.MAX_COD,
	RA.MAX_AMD_SS,
	RA.MIN_DO,
	RA.MAX_NH4,
	RA.MAX_AAM_NH3,
	RA.MAX_5MD_EC,
	RA.MAX_5GM_EC,
	RA.MAX_AGM_EC;


-- WPG.RW_WQO_SUM_R1 source

CREATE VIEW WPG.RW_WQO_SUM_R1 AS
SELECT
	RI.R_ID,
	YEAR(RA.MDATE)		YR,
	COUNT(*)		TOTAL,
	RA.MIN_PH,
	RA.MAX_PH,
	COUNT(RA.PH)		N_PH,
	SUM(RA.MEET_PH)		M_PH,
	CASE WHEN COUNT(RA.PH) = 0 THEN NULL ELSE SUM(RA.MEET_PH)*100.00/COUNT(RA.PH) END	RATE_PH,
	COUNT(RA.BOD5)		N_BOD5,
	RA.MAX_BOD5,
	SUM(RA.MEET_BOD5)	M_BOD5,
	CASE WHEN COUNT(RA.BOD5) = 0 THEN NULL ELSE SUM(RA.MEET_BOD5)*100.00/COUNT(RA.BOD5) END	RATE_BOD5,
	RA.MAX_COD,
	COUNT(RA.COD)		N_COD,
	SUM(RA.MEET_COD)	M_COD,
	CASE WHEN COUNT(RA.COD) = 0 THEN NULL ELSE SUM(RA.MEET_COD)*100.00/COUNT(RA.COD) END	RATE_COD,
	RA.MIN_DO,
	COUNT(RA.DO)		N_DO,
	SUM(RA.MEET_DO)		M_DO,
	CASE WHEN COUNT(RA.DO) = 0 THEN NULL ELSE SUM(RA.MEET_DO)*100.00/COUNT(RA.DO) END	RATE_DO,
	RA.MAX_AMD_SS,
	COUNT(RA.SS)		N_SS,
	AVG(GN.SS)			AMD_SS,
	AVG(CASE SIGN( RA.MAX_AMD_SS - GN.SS) WHEN 1 THEN 100 WHEN 0 THEN 100 WHEN -1 THEN 0 ELSE NULL END)	RATE_SS_AMD, 
	RA.MAX_NH4,
	COUNT(RA.NH4)		N_NH4,
	SUM(RA.MEET_NH4)	M_NH4,
	CASE WHEN COUNT(RA.NH4) = 0 THEN NULL ELSE SUM(RA.MEET_NH4)*100.00/COUNT(RA.NH4) END	RATE_NH4,
	RA.MAX_AAM_NH3,
	AVG(RA.NH3)		NH3_AAM,
	CASE SIGN(RA.MAX_AAM_NH3 - AVG(RA.NH3)) WHEN 1 THEN 100 WHEN 0 THEN 100 WHEN -1 THEN 0 ELSE NULL END	RATE_NH3_AAM
FROM		WPG.RW_WQO_RAW	RA
LEFT OUTER JOIN	WPG.RW_SS_MED	GN	ON RA.SITE_ID = GN.SITE_ID AND YEAR(RA.MDATE) = GN.YR
JOIN	WPG.RSTATION	ST	ON	RA.SITE_ID 	= ST.SITE_ID
JOIN	WPG.RIVER		RI	ON	ST.R_ID		= RI.R_ID
GROUP BY RI.R_ID, YEAR(RA.MDATE), 
 	RA.MIN_PH,
	RA.MAX_PH,
	RA.MAX_BOD5,
	RA.MAX_COD,
	RA.MAX_AMD_SS,
	RA.MIN_DO,
	RA.MAX_NH4,
	RA.MAX_AAM_NH3;


-- WPG.TABLE_INFORMATION source

CREATE VIEW WPG.TABLE_INFORMATION
AS
SELECT         *
FROM             WPG.TABLE_INFO
WHERE         (NAME IN
                              (SELECT DISTINCT name
                                FROM              information_schema.columns LEFT OUTER JOIN
                                                           WPG.TABLE_INFO ON 
                                                           table_name = WPG.TABLE_INFO.NAME
                                WHERE          (table_catalog = 'WQPLIS') AND (table_schema <> 'dbo')));


-- WPG.TB_CLAB_BU_CAL source

CREATE VIEW [WPG].[TB_CLAB_BU_CAL] AS
SELECT 
	TBVISIT_ID,
	TYPE,
	L_KEPONE, KEPONE,
	L_PFOSF, PFOSF
FROM		WPG.TB_CLAB_BU;


-- WPG.TB_CLAB_CAL source

--#########################################################


CREATE VIEW [WPG].[TB_CLAB_CAL] AS
SELECT 
	TBVISIT_ID,
	TYPE,
	L_AS_INORG, AS_INORG,
	L_AS, [AS],
	L_SE, SE,
	L_MEHG, MEHG,
	L_PBB, PBB,
	L_MBT, MBT,
	L_DBT, DBT,
	L_TBT, TBT,
	CASE L_MBT  WHEN '<' THEN MBT/2 ELSE MBT END
	+ CASE L_DBT  WHEN '<' THEN DBT/2 ELSE DBT END
	+ CASE L_TBT  WHEN '<' THEN TBT/2 ELSE TBT END
	OSN
FROM		WPG.TB_CLAB;


-- WPG.TB_CLAB_CDD_CAL source

CREATE VIEW [WPG].[TB_CLAB_CDD_CAL] AS
SELECT 
	TBVISIT_ID,
	TYPE,
	TEQ_TYPE,
    TSD_DWR,
	L_TCDF1, TCDF1,
	L_TCDD1, TCDD1,
	L_PECDF1, PECDF1,
	L_PECDF2, PECDF2,
	L_PECDD1, PECDD1,
	L_HXCDF1, HXCDF1,
	L_HXCDF2, HXCDF2,
	L_HXCDF3, HXCDF3,
	L_HXCDF4, HXCDF4,
	L_HXCDD1, HXCDD1,
	L_HXCDD2, HXCDD2,
	L_HXCDD3, HXCDD3,
	L_HPCDF1, HPCDF1,
	L_HPCDF2, HPCDF2,
	L_HPCDD1, HPCDD1,
	L_OCDF, OCDF,
	L_OCDD, OCDD,
	CASE L_TCDF1  WHEN '<' THEN TCDF1/2 ELSE TCDF1 END
	+ CASE L_TCDD1  WHEN '<' THEN TCDD1/2 ELSE TCDD1 END
	+ CASE L_PECDF1  WHEN '<' THEN PECDF1/2 ELSE PECDF1 END
	+ CASE L_PECDF2  WHEN '<' THEN PECDF2/2 ELSE PECDF2 END
	+ CASE L_PECDD1  WHEN '<' THEN PECDD1/2 ELSE PECDD1 END
	+ CASE L_HXCDF1  WHEN '<' THEN HXCDF1/2 ELSE HXCDF1 END
	+ CASE L_HXCDF2  WHEN '<' THEN HXCDF2/2 ELSE HXCDF2 END
	+ CASE L_HXCDF3  WHEN '<' THEN HXCDF3/2 ELSE HXCDF3 END
	+ CASE L_HXCDF4  WHEN '<' THEN HXCDF4/2 ELSE HXCDF4 END
	+ CASE L_HXCDD1  WHEN '<' THEN HXCDD1/2 ELSE HXCDD1 END
	+ CASE L_HXCDD2  WHEN '<' THEN HXCDD2/2 ELSE HXCDD2 END
	+ CASE L_HXCDD3  WHEN '<' THEN HXCDD3/2 ELSE HXCDD3 END
	+ CASE L_HPCDF1  WHEN '<' THEN HPCDF1/2 ELSE HPCDF1 END
	+ CASE L_HPCDF2  WHEN '<' THEN HPCDF2/2 ELSE HPCDF2 END
	+ CASE L_HPCDD1  WHEN '<' THEN HPCDD1/2 ELSE HPCDD1 END
	+ CASE L_OCDF  WHEN '<' THEN OCDF/2 ELSE OCDF END
	+ CASE L_OCDD  WHEN '<' THEN OCDD/2 ELSE OCDD END
	CDD
FROM		WPG.TB_CLAB_CDD;


-- WPG.TB_CLAB_DLPCB_CAL source

CREATE VIEW [WPG].[TB_CLAB_DLPCB_CAL] AS
SELECT 
	TBVISIT_ID,
	TYPE,
	TEQ_TYPE,
	L_DLPCB81, DLPCB81,
	L_DLPCB77, DLPCB77,
	L_DLPCB123, DLPCB123,
	L_DLPCB118, DLPCB118,
	L_DLPCB114, DLPCB114,
	L_DLPCB105, DLPCB105,
	L_DLPCB126, DLPCB126,
	L_DLPCB167, DLPCB167,
	L_DLPCB156, DLPCB156,
	L_DLPCB157, DLPCB157,
	L_DLPCB169, DLPCB169,
	L_DLPCB189, DLPCB189,	
	CASE L_DLPCB81  WHEN '<' THEN DLPCB81/2 ELSE DLPCB81 END
	+ CASE L_DLPCB77  WHEN '<' THEN DLPCB77/2 ELSE DLPCB77 END
	+ CASE L_DLPCB123  WHEN '<' THEN DLPCB123/2 ELSE DLPCB123 END
	+ CASE L_DLPCB118  WHEN '<' THEN DLPCB118/2 ELSE DLPCB118 END
	+ CASE L_DLPCB114  WHEN '<' THEN DLPCB114/2 ELSE DLPCB114 END
	+ CASE L_DLPCB105  WHEN '<' THEN DLPCB105/2 ELSE DLPCB105 END
	+ CASE L_DLPCB126  WHEN '<' THEN DLPCB126/2 ELSE DLPCB126 END
	+ CASE L_DLPCB167  WHEN '<' THEN DLPCB167/2 ELSE DLPCB167 END
	+ CASE L_DLPCB156  WHEN '<' THEN DLPCB156/2 ELSE DLPCB156 END
	+ CASE L_DLPCB157  WHEN '<' THEN DLPCB157/2 ELSE DLPCB157 END
	+ CASE L_DLPCB169  WHEN '<' THEN DLPCB169/2 ELSE DLPCB169 END
	+ CASE L_DLPCB189  WHEN '<' THEN DLPCB189/2 ELSE DLPCB189 END
	DLPCB
FROM		WPG.TB_CLAB_DLPCB;


-- WPG.TB_CLAB_OC_CAL source

CREATE VIEW [WPG].[TB_CLAB_OC_CAL] AS
SELECT 
	TBVISIT_ID,
	TYPE,
	L_GBHC, GBHC,
	L_ABHC, ABHC,
	L_BBHC, BBHC,
	L_DBHC, DBHC,
	CASE L_GBHC  WHEN '<' THEN GBHC/2 ELSE GBHC END
	+ CASE L_ABHC  WHEN '<' THEN ABHC/2 ELSE ABHC END
	+ CASE L_BBHC  WHEN '<' THEN BBHC/2 ELSE BBHC END
	+ CASE L_DBHC  WHEN '<' THEN DBHC/2 ELSE DBHC END
	HCH,
	L_ALDR, ALDR,
	L_CH, CH,
	L_DIEL, DIEL,
	L_ENDR, ENDR,
	L_END1, END1,
	L_END2, END2,
	N'' L_HEPO, NULL HEPO,
	L_HEPT, HEPT,
	L_HCB, HCB,
	L_MIRX, MIRX,
	L_TOX, TOX,
	L_ENDSS, ENDSS,
	L_PECB, PECB,
	L_ODDD, ODDD,
	L_PDDD, PDDD,
	L_ODDE, ODDE,
	L_PDDE, PDDE,
	L_ODDT, ODDT,
	L_PDDT, PDDT,
	CASE L_ODDD  WHEN '<' THEN ODDD/2 ELSE ODDD END
	+ CASE L_PDDD  WHEN '<' THEN PDDD/2 ELSE PDDD END
	+ CASE L_ODDE  WHEN '<' THEN ODDE/2 ELSE ODDE END
	+ CASE L_PDDE  WHEN '<' THEN PDDE/2 ELSE PDDE END
	+ CASE L_ODDT  WHEN '<' THEN ODDT/2 ELSE ODDT END
	+ CASE L_PDDT  WHEN '<' THEN PDDT/2 ELSE PDDT END
	DDT
FROM		WPG.TB_CLAB_OC;


-- WPG.TB_CLAB_PAH_CAL source

CREATE VIEW [WPG].[TB_CLAB_PAH_CAL] AS
SELECT 
	TBVISIT_ID,
	TYPE,
	L_NAPH, NAPH,
	L_ACPH, ACPH,
	L_ACEN, ACEN,
	L_FLUO, FLUO,
	L_PHEN, PHEN,
	L_ANTH, ANTH,
	L_FLUT, FLUT,
	L_PYRE, PYRE,
	L_BANT, BANT,
	L_CHRY, CHRY,
	L_BBFL, BBFL,
	L_BKFL, BKFL,
	L_BAPY, BAPY,
	L_INPY, INPY,
	L_DAAN, DAAN,
	L_BGPE, BGPE,
	CASE L_NAPH  WHEN '<' THEN NAPH/2 ELSE NAPH END
	+ CASE L_ACPH  WHEN '<' THEN ACPH/2 ELSE ACPH END
	+ CASE L_ACEN  WHEN '<' THEN ACEN/2 ELSE ACEN END
	+ CASE L_FLUO  WHEN '<' THEN FLUO/2 ELSE FLUO END
	+ CASE L_PHEN  WHEN '<' THEN PHEN/2 ELSE PHEN END
	+ CASE L_ANTH  WHEN '<' THEN ANTH/2 ELSE ANTH END
	+ CASE L_FLUT  WHEN '<' THEN FLUT/2 ELSE FLUT END
	+ CASE L_PYRE  WHEN '<' THEN PYRE/2 ELSE PYRE END
	+ CASE L_BANT  WHEN '<' THEN BANT/2 ELSE BANT END
	+ CASE L_CHRY  WHEN '<' THEN CHRY/2 ELSE CHRY END
	+ CASE L_BBFL  WHEN '<' THEN BBFL/2 ELSE BBFL END
	+ CASE L_BKFL  WHEN '<' THEN BKFL/2 ELSE BKFL END
	+ CASE L_BAPY  WHEN '<' THEN BAPY/2 ELSE BAPY END
	+ CASE L_INPY  WHEN '<' THEN INPY/2 ELSE INPY END
	+ CASE L_DAAN  WHEN '<' THEN DAAN/2 ELSE DAAN END
	+ CASE L_BGPE  WHEN '<' THEN BGPE/2 ELSE BGPE END
	PAH,
	L_PFOS, PFOS,
	L_PFOA, PFOA
FROM		WPG.TB_CLAB_PAH;


-- WPG.TB_CLAB_PBDE_CAL source

CREATE VIEW [WPG].[TB_CLAB_PBDE_CAL] AS
SELECT 
	TBVISIT_ID,
	TYPE,
	L_PBDE17, PBDE17,
	L_PBDE28, PBDE28,
	L_PBDE47, PBDE47,
	L_PBDE99, PBDE99,
	L_PBDE100, PBDE100,
	L_PBDE153, PBDE153,
	L_PBDE154, PBDE154,
	L_PBDE183, PBDE183,
	L_PBDE197, PBDE197,
	L_PBDE209, PBDE209,
	CASE L_PBDE17  WHEN '<' THEN PBDE17/2 ELSE PBDE17 END
	+ CASE L_PBDE28  WHEN '<' THEN PBDE28/2 ELSE PBDE28 END
	+ CASE L_PBDE47  WHEN '<' THEN PBDE47/2 ELSE PBDE47 END
	+ CASE L_PBDE99  WHEN '<' THEN PBDE99/2 ELSE PBDE99 END
	+ CASE L_PBDE100  WHEN '<' THEN PBDE100/2 ELSE PBDE100 END
	+ CASE L_PBDE153  WHEN '<' THEN PBDE153/2 ELSE PBDE153 END
	+ CASE L_PBDE154  WHEN '<' THEN PBDE154/2 ELSE PBDE154 END
	+ CASE L_PBDE183  WHEN '<' THEN PBDE183/2 ELSE PBDE183 END
	+ CASE L_PBDE197  WHEN '<' THEN PBDE197/2 ELSE PBDE197 END
	+ CASE L_PBDE209  WHEN '<' THEN PBDE209/2 ELSE PBDE209 END
	PBDE
FROM		WPG.TB_CLAB_PBDE;


-- WPG.TB_CLAB_PCB_CAL source

CREATE VIEW [WPG].[TB_CLAB_PCB_CAL] AS
SELECT 
	TBVISIT_ID,
	TYPE,
	TYPE_PCB,
    TSO_DWR,
	L_PCB1, PCB1,
	L_PCB5, PCB5,
	L_PCB8, PCB8,
	L_PCB18, PCB18,
	L_PCB31, PCB31,
	L_PCB28, PCB28,
	L_PCB52, PCB52,
	L_PCB44, PCB44,
	L_PCB66, PCB66,
	L_PCB81, PCB81,
	L_PCB77, PCB77,
	L_PCB101, PCB101,
	L_PCB87, PCB87,
	L_PCB110, PCB110,
	L_PCB123, PCB123,
	L_PCB118, PCB118,
	L_PCB114, PCB114,
	L_PCB105, PCB105,
	L_PCB126, PCB126,
	L_PCB128, PCB128,
	L_PCB151, PCB151,
	L_PCB153, PCB153,
	L_PCB141, PCB141,
	L_PCB149, PCB149,
	L_PCB138, PCB138,
	L_PCB167, PCB167,
	L_PCB156, PCB156,
	L_PCB157, PCB157,
	L_PCB169, PCB169,
	L_PCB187, PCB187,
	L_PCB183, PCB183,
	L_PCB180, PCB180,
	L_PCB170, PCB170,
	L_PCB189, PCB189,
	L_PCB206, PCB206,
	CASE L_PCB1  WHEN '<' THEN PCB1/2 ELSE PCB1 END
	+ CASE L_PCB5  WHEN '<' THEN PCB5/2 ELSE PCB5 END
	+ CASE L_PCB8  WHEN '<' THEN PCB8/2 ELSE PCB8 END
	+ CASE L_PCB18  WHEN '<' THEN PCB18/2 ELSE PCB18 END
	+ CASE L_PCB31  WHEN '<' THEN PCB31/2 ELSE PCB31 END
	+ CASE L_PCB28  WHEN '<' THEN PCB28/2 ELSE PCB28 END
	+ CASE L_PCB52  WHEN '<' THEN PCB52/2 ELSE PCB52 END
	+ CASE L_PCB44  WHEN '<' THEN PCB44/2 ELSE PCB44 END
	+ CASE L_PCB66  WHEN '<' THEN PCB66/2 ELSE PCB66 END
	+ CASE L_PCB81  WHEN '<' THEN PCB81/2 ELSE PCB81 END
	+ CASE L_PCB77  WHEN '<' THEN PCB77/2 ELSE PCB77 END
	+ CASE L_PCB101  WHEN '<' THEN PCB101/2 ELSE PCB101 END
	+ CASE L_PCB87  WHEN '<' THEN PCB87/2 ELSE PCB87 END
	+ CASE L_PCB110  WHEN '<' THEN PCB110/2 ELSE PCB110 END
	+ CASE L_PCB123  WHEN '<' THEN PCB123/2 ELSE PCB123 END
	+ CASE L_PCB118  WHEN '<' THEN PCB118/2 ELSE PCB118 END
	+ CASE L_PCB114  WHEN '<' THEN PCB114/2 ELSE PCB114 END
	+ CASE L_PCB105  WHEN '<' THEN PCB105/2 ELSE PCB105 END
	+ CASE L_PCB126  WHEN '<' THEN PCB126/2 ELSE PCB126 END
	+ CASE L_PCB128  WHEN '<' THEN PCB128/2 ELSE PCB128 END
	+ CASE L_PCB151  WHEN '<' THEN PCB151/2 ELSE PCB151 END
	+ CASE L_PCB153  WHEN '<' THEN PCB153/2 ELSE PCB153 END
	+ CASE L_PCB141  WHEN '<' THEN PCB141/2 ELSE PCB141 END
	+ CASE L_PCB149  WHEN '<' THEN PCB149/2 ELSE PCB149 END
	+ CASE L_PCB138  WHEN '<' THEN PCB138/2 ELSE PCB138 END
	+ CASE L_PCB167  WHEN '<' THEN PCB167/2 ELSE PCB167 END
	+ CASE L_PCB156  WHEN '<' THEN PCB156/2 ELSE PCB156 END
	+ CASE L_PCB157  WHEN '<' THEN PCB157/2 ELSE PCB157 END
	+ CASE L_PCB169  WHEN '<' THEN PCB169/2 ELSE PCB169 END
	+ CASE L_PCB187  WHEN '<' THEN PCB187/2 ELSE PCB187 END
	+ CASE L_PCB183  WHEN '<' THEN PCB183/2 ELSE PCB183 END
	+ CASE L_PCB180  WHEN '<' THEN PCB180/2 ELSE PCB180 END
	+ CASE L_PCB170  WHEN '<' THEN PCB170/2 ELSE PCB170 END
	+ CASE L_PCB189  WHEN '<' THEN PCB189/2 ELSE PCB189 END
	+ CASE L_PCB206  WHEN '<' THEN PCB206/2 ELSE PCB206 END
	PCB,
	NULL LIPID
FROM		WPG.TB_CLAB_PCB;


-- WPG.TB_GLAB_CDD_CAL source

CREATE VIEW [WPG].[TB_GLAB_CDD_CAL] AS
SELECT 
	TBVISIT_ID,
	TYPE,
	N''	TEQ_TYPE,
    TSD_DWR,
	L_TCDF1, TCDF1,
	L_TCDD1, TCDD1,
	L_PECDF1, PECDF1,
	L_PECDF2, PECDF2,
	L_PECDD1, PECDD1,
	L_HXCDF1, HXCDF1,
	L_HXCDF2, HXCDF2,
	L_HXCDF3, HXCDF3,
	L_HXCDF4, HXCDF4,
	L_HXCDD1, HXCDD1,
	L_HXCDD2, HXCDD2,
	L_HXCDD3, HXCDD3,
	L_HPCDF1, HPCDF1,
	L_HPCDF2, HPCDF2,
	L_HPCDD1, HPCDD1,
	L_OCDF, OCDF,
	L_OCDD, OCDD,
	CASE L_TCDF1  WHEN '<' THEN TCDF1/2 ELSE TCDF1 END
	+ CASE L_TCDD1  WHEN '<' THEN TCDD1/2 ELSE TCDD1 END
	+ CASE L_PECDF1  WHEN '<' THEN PECDF1/2 ELSE PECDF1 END
	+ CASE L_PECDF2  WHEN '<' THEN PECDF2/2 ELSE PECDF2 END
	+ CASE L_PECDD1  WHEN '<' THEN PECDD1/2 ELSE PECDD1 END
	+ CASE L_HXCDF1  WHEN '<' THEN HXCDF1/2 ELSE HXCDF1 END
	+ CASE L_HXCDF2  WHEN '<' THEN HXCDF2/2 ELSE HXCDF2 END
	+ CASE L_HXCDF3  WHEN '<' THEN HXCDF3/2 ELSE HXCDF3 END
	+ CASE L_HXCDF4  WHEN '<' THEN HXCDF4/2 ELSE HXCDF4 END
	+ CASE L_HXCDD1  WHEN '<' THEN HXCDD1/2 ELSE HXCDD1 END
	+ CASE L_HXCDD2  WHEN '<' THEN HXCDD2/2 ELSE HXCDD2 END
	+ CASE L_HXCDD3  WHEN '<' THEN HXCDD3/2 ELSE HXCDD3 END
	+ CASE L_HPCDF1  WHEN '<' THEN HPCDF1/2 ELSE HPCDF1 END
	+ CASE L_HPCDF2  WHEN '<' THEN HPCDF2/2 ELSE HPCDF2 END
	+ CASE L_HPCDD1  WHEN '<' THEN HPCDD1/2 ELSE HPCDD1 END
	+ CASE L_OCDF  WHEN '<' THEN OCDF/2 ELSE OCDF END
	+ CASE L_OCDD  WHEN '<' THEN OCDD/2 ELSE OCDD END
	CDD
FROM		WPG.TB_GLAB_CDD;


-- WPG.TB_GLAB_DLPCB_CAL source

CREATE VIEW [WPG].[TB_GLAB_DLPCB_CAL] AS
SELECT 
	TBVISIT_ID,
	TYPE,
	N''	TEQ_TYPE,
	L_DLPCB81, DLPCB81,
	L_DLPCB77, DLPCB77,
	L_DLPCB123, DLPCB123,
	L_DLPCB118, DLPCB118,
	L_DLPCB114, DLPCB114,
	L_DLPCB105, DLPCB105,
	L_DLPCB126, DLPCB126,
	L_DLPCB167, DLPCB167,
	L_DLPCB156, DLPCB156,
	L_DLPCB157, DLPCB157,
	L_DLPCB169, DLPCB169,
	L_DLPCB189, DLPCB189,	
	CASE L_DLPCB81  WHEN '<' THEN DLPCB81/2 ELSE DLPCB81 END
	+ CASE L_DLPCB77  WHEN '<' THEN DLPCB77/2 ELSE DLPCB77 END
	+ CASE L_DLPCB123  WHEN '<' THEN DLPCB123/2 ELSE DLPCB123 END
	+ CASE L_DLPCB118  WHEN '<' THEN DLPCB118/2 ELSE DLPCB118 END
	+ CASE L_DLPCB114  WHEN '<' THEN DLPCB114/2 ELSE DLPCB114 END
	+ CASE L_DLPCB105  WHEN '<' THEN DLPCB105/2 ELSE DLPCB105 END
	+ CASE L_DLPCB126  WHEN '<' THEN DLPCB126/2 ELSE DLPCB126 END
	+ CASE L_DLPCB167  WHEN '<' THEN DLPCB167/2 ELSE DLPCB167 END
	+ CASE L_DLPCB156  WHEN '<' THEN DLPCB156/2 ELSE DLPCB156 END
	+ CASE L_DLPCB157  WHEN '<' THEN DLPCB157/2 ELSE DLPCB157 END
	+ CASE L_DLPCB169  WHEN '<' THEN DLPCB169/2 ELSE DLPCB169 END
	+ CASE L_DLPCB189  WHEN '<' THEN DLPCB189/2 ELSE DLPCB189 END
	DLPCB
FROM		WPG.TB_GLAB_DLPCB;


-- WPG.TB_GLAB_HH_CAL source

CREATE VIEW [WPG].[TB_GLAB_HH_CAL] AS
SELECT 
	TBVISIT_ID,
	TYPE,
	L_TCM, TCM,
	L_TCE, TCE,
	L_BDCM, BDCM,
	L_BTCM, BTCM,
	L_TRCE, TRCE,
	L_CDBM, CDBM,
	L_BROM, BROM,
	L_MDCB, MDCB,
	L_ODCB, ODCB,
	L_THMS, THMS
FROM		WPG.TB_GLAB_HH;


-- WPG.TB_GLAB_OC_CAL source

CREATE VIEW [WPG].[TB_GLAB_OC_CAL] AS
SELECT 
	TBVISIT_ID,
	TYPE,
	L_GBHC, GBHC,
	L_ABHC, ABHC,
	L_BBHC, BBHC,
	L_DBHC, DBHC,
	CASE L_GBHC  WHEN '<' THEN GBHC/2 ELSE GBHC END
	+ CASE L_ABHC  WHEN '<' THEN ABHC/2 ELSE ABHC END
	+ CASE L_BBHC  WHEN '<' THEN BBHC/2 ELSE BBHC END
	+ CASE L_DBHC  WHEN '<' THEN DBHC/2 ELSE DBHC END
	HCH,
	L_ALDR, ALDR,
	L_CH, CH,
	L_DIEL, DIEL,
	L_ENDR, ENDR,
	L_END1, END1,
	L_END2, END2,
	L_HEPO, HEPO,
	L_HEPT, HEPT,
	L_HCB, HCB,
	L_MIRX, MIRX,
	L_TOX, TOX,
	N'' L_ENDSS, NULL ENDSS,
	N'' L_PECB, NULL PECB,
	L_ODDD, ODDD,
	L_PDDD, PDDD,
	L_ODDE, ODDE,
	L_PDDE, PDDE,
	L_ODDT, ODDT,
	L_PDDT, PDDT,
	CASE L_ODDD  WHEN '<' THEN ODDD/2 ELSE ODDD END
	+ CASE L_PDDD  WHEN '<' THEN PDDD/2 ELSE PDDD END
	+ CASE L_ODDE  WHEN '<' THEN ODDE/2 ELSE ODDE END
	+ CASE L_PDDE  WHEN '<' THEN PDDE/2 ELSE PDDE END
	+ CASE L_ODDT  WHEN '<' THEN ODDT/2 ELSE ODDT END
	+ CASE L_PDDT  WHEN '<' THEN PDDT/2 ELSE PDDT END
	DDT
FROM		WPG.TB_GLAB_OC;


-- WPG.TB_GLAB_PAH_CAL source

CREATE VIEW [WPG].[TB_GLAB_PAH_CAL] AS
SELECT 
	TBVISIT_ID,
	TYPE,
	L_NAPH, NAPH,
	L_ACPH, ACPH,
	L_ACEN, ACEN,
	L_FLUO, FLUO,
	L_PHEN, PHEN,
	L_ANTH, ANTH,
	L_FLUT, FLUT,
	L_PYRE, PYRE,
	L_BANT, BANT,
	L_CHRY, CHRY,
	L_BBFL, BBFL,
	L_BKFL, BKFL,
	L_BAPY, BAPY,
	L_INPY, INPY,
	L_DAAN, DAAN,
	L_BGPE, BGPE,
	CASE L_NAPH  WHEN '<' THEN NAPH/2 ELSE NAPH END
	+ CASE L_ACPH  WHEN '<' THEN ACPH/2 ELSE ACPH END
	+ CASE L_ACEN  WHEN '<' THEN ACEN/2 ELSE ACEN END
	+ CASE L_FLUO  WHEN '<' THEN FLUO/2 ELSE FLUO END
	+ CASE L_PHEN  WHEN '<' THEN PHEN/2 ELSE PHEN END
	+ CASE L_ANTH  WHEN '<' THEN ANTH/2 ELSE ANTH END
	+ CASE L_FLUT  WHEN '<' THEN FLUT/2 ELSE FLUT END
	+ CASE L_PYRE  WHEN '<' THEN PYRE/2 ELSE PYRE END
	+ CASE L_BANT  WHEN '<' THEN BANT/2 ELSE BANT END
	+ CASE L_CHRY  WHEN '<' THEN CHRY/2 ELSE CHRY END
	+ CASE L_BBFL  WHEN '<' THEN BBFL/2 ELSE BBFL END
	+ CASE L_BKFL  WHEN '<' THEN BKFL/2 ELSE BKFL END
	+ CASE L_BAPY  WHEN '<' THEN BAPY/2 ELSE BAPY END
	+ CASE L_INPY  WHEN '<' THEN INPY/2 ELSE INPY END
	+ CASE L_DAAN  WHEN '<' THEN DAAN/2 ELSE DAAN END
	+ CASE L_BGPE  WHEN '<' THEN BGPE/2 ELSE BGPE END
	PAH,
	N'' L_PFOS, NULL PFOS,
	N'' L_PFOA, NULL PFOA
FROM		WPG.TB_GLAB_PAH;


-- WPG.TB_GLAB_PCB_CAL source

CREATE VIEW [WPG].[TB_GLAB_PCB_CAL] AS
SELECT 
	TBVISIT_ID,
	TYPE,
	N''	TYPE_PCB,
    TSO_DWR,
	L_PCB1, PCB1,
	L_PCB5, PCB5,
	L_PCB8, PCB8,
	L_PCB18, PCB18,
	L_PCB31, PCB31,
	L_PCB28, PCB28,
	L_PCB52, PCB52,
	L_PCB44, PCB44,
	L_PCB66, PCB66,
	L_PCB81, PCB81,
	L_PCB77, PCB77,
	L_PCB101, PCB101,
	L_PCB87, PCB87,
	L_PCB110, PCB110,
	L_PCB123, PCB123,
	L_PCB118, PCB118,
	L_PCB114, PCB114,
	L_PCB105, PCB105,
	L_PCB126, PCB126,
	L_PCB128, PCB128,
	L_PCB151, PCB151,
	L_PCB153, PCB153,
	L_PCB141, PCB141,
	L_PCB149, PCB149,
	L_PCB138, PCB138,
	L_PCB167, PCB167,
	L_PCB156, PCB156,
	L_PCB157, PCB157,
	L_PCB169, PCB169,
	L_PCB187, PCB187,
	L_PCB183, PCB183,
	L_PCB180, PCB180,
	L_PCB170, PCB170,
	L_PCB189, PCB189,
	L_PCB206, PCB206,
	CASE L_PCB1  WHEN '<' THEN PCB1/2 ELSE PCB1 END
	+ CASE L_PCB5  WHEN '<' THEN PCB5/2 ELSE PCB5 END
	+ CASE L_PCB8  WHEN '<' THEN PCB8/2 ELSE PCB8 END
	+ CASE L_PCB18  WHEN '<' THEN PCB18/2 ELSE PCB18 END
	+ CASE L_PCB31  WHEN '<' THEN PCB31/2 ELSE PCB31 END
	+ CASE L_PCB28  WHEN '<' THEN PCB28/2 ELSE PCB28 END
	+ CASE L_PCB52  WHEN '<' THEN PCB52/2 ELSE PCB52 END
	+ CASE L_PCB44  WHEN '<' THEN PCB44/2 ELSE PCB44 END
	+ CASE L_PCB66  WHEN '<' THEN PCB66/2 ELSE PCB66 END
	+ CASE L_PCB81  WHEN '<' THEN PCB81/2 ELSE PCB81 END
	+ CASE L_PCB77  WHEN '<' THEN PCB77/2 ELSE PCB77 END
	+ CASE L_PCB101  WHEN '<' THEN PCB101/2 ELSE PCB101 END
	+ CASE L_PCB87  WHEN '<' THEN PCB87/2 ELSE PCB87 END
	+ CASE L_PCB110  WHEN '<' THEN PCB110/2 ELSE PCB110 END
	+ CASE L_PCB123  WHEN '<' THEN PCB123/2 ELSE PCB123 END
	+ CASE L_PCB118  WHEN '<' THEN PCB118/2 ELSE PCB118 END
	+ CASE L_PCB114  WHEN '<' THEN PCB114/2 ELSE PCB114 END
	+ CASE L_PCB105  WHEN '<' THEN PCB105/2 ELSE PCB105 END
	+ CASE L_PCB126  WHEN '<' THEN PCB126/2 ELSE PCB126 END
	+ CASE L_PCB128  WHEN '<' THEN PCB128/2 ELSE PCB128 END
	+ CASE L_PCB151  WHEN '<' THEN PCB151/2 ELSE PCB151 END
	+ CASE L_PCB153  WHEN '<' THEN PCB153/2 ELSE PCB153 END
	+ CASE L_PCB141  WHEN '<' THEN PCB141/2 ELSE PCB141 END
	+ CASE L_PCB149  WHEN '<' THEN PCB149/2 ELSE PCB149 END
	+ CASE L_PCB138  WHEN '<' THEN PCB138/2 ELSE PCB138 END
	+ CASE L_PCB167  WHEN '<' THEN PCB167/2 ELSE PCB167 END
	+ CASE L_PCB156  WHEN '<' THEN PCB156/2 ELSE PCB156 END
	+ CASE L_PCB157  WHEN '<' THEN PCB157/2 ELSE PCB157 END
	+ CASE L_PCB169  WHEN '<' THEN PCB169/2 ELSE PCB169 END
	+ CASE L_PCB187  WHEN '<' THEN PCB187/2 ELSE PCB187 END
	+ CASE L_PCB183  WHEN '<' THEN PCB183/2 ELSE PCB183 END
	+ CASE L_PCB180  WHEN '<' THEN PCB180/2 ELSE PCB180 END
	+ CASE L_PCB170  WHEN '<' THEN PCB170/2 ELSE PCB170 END
	+ CASE L_PCB189  WHEN '<' THEN PCB189/2 ELSE PCB189 END
	+ CASE L_PCB206  WHEN '<' THEN PCB206/2 ELSE PCB206 END
	PCB,
	LIPID
FROM		WPG.TB_GLAB_PCB;


-- WPG.TEST_RW_NH3_MED source

CREATE VIEW WPG.TEST_RW_NH3_MED AS 
SELECT	SITE_ID,
	YEAR(MDATE)	YYYY,
	YR,
	AVG(CASE WHEN R_NH3 * 2 IN (N_NH3, N_NH3 + 1, N_NH3 + 2) THEN NH3 ELSE NULL END)	NH3_MED 	
FROM	(
	SELECT	A.RWVISIT_ID,
		A.SITE_ID,
		A.MDATE,
		A.YR,
		A.NH3,
		COUNT(CASE WHEN A.NH3 < B.NH3 THEN 1
			WHEN A.NH3 = B.NH3 AND A.RWVISIT_ID <= B.RWVISIT_ID THEN 1
			ELSE NULL END)		R_NH3,
		COUNT(B.NH3)			N_NH3
	FROM	(SELECT	VI.RWVISIT_ID, 
			VI.SITE_ID, 
			VI.MDATE,
			YEAR(VI.MDATE)	YR, 
			NH.NH3
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_NH3	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	A
	JOIN	(SELECT	VI.RWVISIT_ID, 
			VI.SITE_ID, 
			YEAR(VI.MDATE)	YR,  
			NH.NH3
		FROM	WPG.RW_VISIT	VI	
		LEFT OUTER JOIN	WPG.RW_NH3	NH	ON VI.RWVISIT_ID = NH.RWVISIT_ID)	B
	ON A.SITE_ID = B.SITE_ID AND A.YR = B.YR
	GROUP BY A.RWVISIT_ID, A.SITE_ID, A.MDATE, A.YR, A.NH3
	) C
GROUP BY SITE_ID, YEAR(MDATE), YR;


-- WPG.TOXIC_BIOTA1 source

CREATE VIEW [WPG].[TOXIC_BIOTA1] AS
SELECT	ZONE,
		WCZ,
		SP_NAME,
		MDATE,
		STIME,
		SAM_NO,
		TYPE,
		TSO_DWR,
		TSD_DWR,
	L_AS_INORG, AS_INORG,
	L_AS, [AS],
	L_SE, SE,
	L_MEHG, MEHG,
	L_PBB, PBB,
	L_MBT, MBT,
	L_DBT, DBT,
	L_TBT, TBT,
	OSN,
	TYPE_PCB,
	L_PCB1, PCB1,
	L_PCB5, PCB5,
	L_PCB8, PCB8,
	L_PCB18, PCB18,
	L_PCB31, PCB31,
	L_PCB28, PCB28,
	L_PCB52, PCB52,
	L_PCB44, PCB44,
	L_PCB66, PCB66,
	L_PCB81, PCB81,
	L_PCB77, PCB77,
	L_PCB101, PCB101,
	L_PCB87, PCB87,
	L_PCB110, PCB110,
	L_PCB123, PCB123,
	L_PCB118, PCB118,
	L_PCB114, PCB114,
	L_PCB105, PCB105,
	L_PCB126, PCB126,
	L_PCB128, PCB128,
	L_PCB151, PCB151,
	L_PCB153, PCB153,
	L_PCB141, PCB141,
	L_PCB149, PCB149,
	L_PCB138, PCB138,
	L_PCB167, PCB167,
	L_PCB156, PCB156,
	L_PCB157, PCB157,
	L_PCB169, PCB169,
	L_PCB187, PCB187,
	L_PCB183, PCB183,
	L_PCB180, PCB180,
	L_PCB170, PCB170,
	L_PCB189, PCB189,
	L_PCB206, PCB206,
	PCB,
	LIPID,
	L_NAPH, NAPH,
	L_ACPH, ACPH,
	L_ACEN, ACEN,
	L_FLUO, FLUO,
	L_PHEN, PHEN,
	L_ANTH, ANTH,
	L_FLUT, FLUT,
	L_PYRE, PYRE,
	L_BANT, BANT,
	L_CHRY, CHRY,
	L_BBFL, BBFL,
	L_BKFL, BKFL,
	L_BAPY, BAPY,
	L_DAAN, DAAN,
	L_BGPE, BGPE,
	L_INPY, INPY,
    PAH,
    	L_PFOS, PFOS,
	L_PFOA, PFOA,
	L_GBHC, GBHC,
	L_ABHC, ABHC,
	L_BBHC, BBHC,
	L_DBHC, DBHC,
	HCH,
	L_ALDR, ALDR,
	L_CH, CH,
	L_DIEL, DIEL,
	L_ENDR, ENDR,
	L_END1, END1,
	L_END2, END2,
	L_HEPO, HEPO,
	L_HEPT, HEPT,
	L_HCB, HCB,
	L_MIRX, MIRX,
	L_TOX, TOX,
	L_ENDSS, ENDSS,
	L_PECB, PECB,
	L_ODDD, ODDD,
	L_PDDD, PDDD,
	L_ODDE, ODDE,
	L_PDDE, PDDE,
	L_ODDT, ODDT,
	L_PDDT, PDDT,
    DDT,
	TEQ_TYPE,
	L_TCDF1, TCDF1,
	L_TCDD1, TCDD1,
	L_PECDF1, PECDF1,
	L_PECDF2, PECDF2,
	L_PECDD1, PECDD1,
	L_HXCDF1, HXCDF1,
	L_HXCDF2, HXCDF2,
	L_HXCDF3, HXCDF3,
	L_HXCDF4, HXCDF4,
	L_HXCDD1, HXCDD1,
	L_HXCDD2, HXCDD2,
	L_HXCDD3, HXCDD3,
	L_HPCDF1, HPCDF1,
	L_HPCDF2, HPCDF2,
	L_HPCDD1, HPCDD1,
	L_OCDF, OCDF,
	L_OCDD, OCDD,
    CDD,
	L_PBDE17, PBDE17,
	L_PBDE28, PBDE28,
	L_PBDE47, PBDE47,
	L_PBDE99, PBDE99,
	L_PBDE100, PBDE100,
	L_PBDE153, PBDE153,
	L_PBDE154, PBDE154,
	L_PBDE183, PBDE183,
	L_PBDE197, PBDE197,
	L_PBDE209, PBDE209,
	PBDE,
    L_DLPCB77, DLPCB77,
    L_DLPCB81, DLPCB81,
    L_DLPCB105, DLPCB105,
    L_DLPCB114, DLPCB114,
    L_DLPCB118, DLPCB118,
    L_DLPCB123, DLPCB123,
    L_DLPCB126, DLPCB126,
    L_DLPCB156, DLPCB156,
    L_DLPCB157, DLPCB157,
    L_DLPCB167, DLPCB167,
    L_DLPCB169, DLPCB169,
    L_DLPCB189, DLPCB189,
    DLPCB,
	L_TCM, TCM,
	L_TCE, TCE,
	L_BDCM, BDCM,
	L_BTCM, BTCM,
	L_TRCE, TRCE,
	L_CDBM, CDBM,
	L_BROM, BROM,
	L_MDCB, MDCB,
	L_ODCB, ODCB,
	L_THMS, THMS,
	L_KEPONE, KEPONE,
	L_PFOSF, PFOSF
FROM	WPG.TOXIC_BIOTA_X1
UNION ALL
SELECT	ZONE,
		WCZ,
		SP_NAME,
		MDATE,
		STIME,
		SAM_NO,
		TYPE,
		TSO_DWR,
		TSD_DWR,
	L_AS_INORG, AS_INORG,
	L_AS, [AS],
	L_SE, SE,
	L_MEHG, MEHG,
	L_PBB, PBB,
	L_MBT, MBT,
	L_DBT, DBT,
	L_TBT, TBT,
	OSN,
	TYPE_PCB,
	L_PCB1, PCB1,
	L_PCB5, PCB5,
	L_PCB8, PCB8,
	L_PCB18, PCB18,
	L_PCB31, PCB31,
	L_PCB28, PCB28,
	L_PCB52, PCB52,
	L_PCB44, PCB44,
	L_PCB66, PCB66,
	L_PCB81, PCB81,
	L_PCB77, PCB77,
	L_PCB101, PCB101,
	L_PCB87, PCB87,
	L_PCB110, PCB110,
	L_PCB123, PCB123,
	L_PCB118, PCB118,
	L_PCB114, PCB114,
	L_PCB105, PCB105,
	L_PCB126, PCB126,
	L_PCB128, PCB128,
	L_PCB151, PCB151,
	L_PCB153, PCB153,
	L_PCB141, PCB141,
	L_PCB149, PCB149,
	L_PCB138, PCB138,
	L_PCB167, PCB167,
	L_PCB156, PCB156,
	L_PCB157, PCB157,
	L_PCB169, PCB169,
	L_PCB187, PCB187,
	L_PCB183, PCB183,
	L_PCB180, PCB180,
	L_PCB170, PCB170,
	L_PCB189, PCB189,
	L_PCB206, PCB206,
	PCB,
	LIPID,
	L_NAPH, NAPH,
	L_ACPH, ACPH,
	L_ACEN, ACEN,
	L_FLUO, FLUO,
	L_PHEN, PHEN,
	L_ANTH, ANTH,
	L_FLUT, FLUT,
	L_PYRE, PYRE,
	L_BANT, BANT,
	L_CHRY, CHRY,
	L_BBFL, BBFL,
	L_BKFL, BKFL,
	L_BAPY, BAPY,
	L_DAAN, DAAN,
	L_BGPE, BGPE,
	L_INPY, INPY,
    PAH,
    	L_PFOS, PFOS,
	L_PFOA, PFOA,
	L_GBHC, GBHC,
	L_ABHC, ABHC,
	L_BBHC, BBHC,
	L_DBHC, DBHC,
	HCH,
	L_ALDR, ALDR,
	L_CH, CH,
	L_DIEL, DIEL,
	L_ENDR, ENDR,
	L_END1, END1,
	L_END2, END2,
	L_HEPO, HEPO,
	L_HEPT, HEPT,
	L_HCB, HCB,
	L_MIRX, MIRX,
	L_TOX, TOX,
	L_ENDSS, ENDSS,
	L_PECB, PECB,
	L_ODDD, ODDD,
	L_PDDD, PDDD,
	L_ODDE, ODDE,
	L_PDDE, PDDE,
	L_ODDT, ODDT,
	L_PDDT, PDDT,
    DDT,
	TEQ_TYPE,
	L_TCDF1, TCDF1,
	L_TCDD1, TCDD1,
	L_PECDF1, PECDF1,
	L_PECDF2, PECDF2,
	L_PECDD1, PECDD1,
	L_HXCDF1, HXCDF1,
	L_HXCDF2, HXCDF2,
	L_HXCDF3, HXCDF3,
	L_HXCDF4, HXCDF4,
	L_HXCDD1, HXCDD1,
	L_HXCDD2, HXCDD2,
	L_HXCDD3, HXCDD3,
	L_HPCDF1, HPCDF1,
	L_HPCDF2, HPCDF2,
	L_HPCDD1, HPCDD1,
	L_OCDF, OCDF,
	L_OCDD, OCDD,
    CDD,
	L_PBDE17, PBDE17,
	L_PBDE28, PBDE28,
	L_PBDE47, PBDE47,
	L_PBDE99, PBDE99,
	L_PBDE100, PBDE100,
	L_PBDE153, PBDE153,
	L_PBDE154, PBDE154,
	L_PBDE183, PBDE183,
	L_PBDE197, PBDE197,
	L_PBDE209, PBDE209,
	PBDE,
    L_DLPCB77, DLPCB77,
    L_DLPCB81, DLPCB81,
    L_DLPCB105, DLPCB105,
    L_DLPCB114, DLPCB114,
    L_DLPCB118, DLPCB118,
    L_DLPCB123, DLPCB123,
    L_DLPCB126, DLPCB126,
    L_DLPCB156, DLPCB156,
    L_DLPCB157, DLPCB157,
    L_DLPCB167, DLPCB167,
    L_DLPCB169, DLPCB169,
    L_DLPCB189, DLPCB189,
    DLPCB,
	L_TCM, TCM,
	L_TCE, TCE,
	L_BDCM, BDCM,
	L_BTCM, BTCM,
	L_TRCE, TRCE,
	L_CDBM, CDBM,
	L_BROM, BROM,
	L_MDCB, MDCB,
	L_ODCB, ODCB,
	L_THMS, THMS,
	L_KEPONE, KEPONE,
	L_PFOSF, PFOSF
FROM	WPG.TOXIC_BIOTA_Y1;


-- WPG.TOXIC_BIOTA2 source

CREATE VIEW [WPG].[TOXIC_BIOTA2] AS
SELECT	ZONE,
		WCZ,
		SP_NAME,
		MDATE,
		STIME,
		SAM_NO,
		TYPE,
		TSO_DWR,
		TSD_DWR,
	L_AS_INORG, AS_INORG,
	L_AS, [AS],
	L_SE, SE,
	L_MEHG, MEHG,
	L_PBB, PBB,
	L_MBT, MBT,
	L_DBT, DBT,
	L_TBT, TBT,
	OSN,
	TYPE_PCB,
	L_PCB1, PCB1,
	L_PCB5, PCB5,
	L_PCB8, PCB8,
	L_PCB18, PCB18,
	L_PCB31, PCB31,
	L_PCB28, PCB28,
	L_PCB52, PCB52,
	L_PCB44, PCB44,
	L_PCB66, PCB66,
	L_PCB81, PCB81,
	L_PCB77, PCB77,
	L_PCB101, PCB101,
	L_PCB87, PCB87,
	L_PCB110, PCB110,
	L_PCB123, PCB123,
	L_PCB118, PCB118,
	L_PCB114, PCB114,
	L_PCB105, PCB105,
	L_PCB126, PCB126,
	L_PCB128, PCB128,
	L_PCB151, PCB151,
	L_PCB153, PCB153,
	L_PCB141, PCB141,
	L_PCB149, PCB149,
	L_PCB138, PCB138,
	L_PCB167, PCB167,
	L_PCB156, PCB156,
	L_PCB157, PCB157,
	L_PCB169, PCB169,
	L_PCB187, PCB187,
	L_PCB183, PCB183,
	L_PCB180, PCB180,
	L_PCB170, PCB170,
	L_PCB189, PCB189,
	L_PCB206, PCB206,
	PCB,
	LIPID,
	L_NAPH, NAPH,
	L_ACPH, ACPH,
	L_ACEN, ACEN,
	L_FLUO, FLUO,
	L_PHEN, PHEN,
	L_ANTH, ANTH,
	L_FLUT, FLUT,
	L_PYRE, PYRE,
	L_BANT, BANT,
	L_CHRY, CHRY,
	L_BBFL, BBFL,
	L_BKFL, BKFL,
	L_BAPY, BAPY,
	L_DAAN, DAAN,
	L_BGPE, BGPE,
	L_INPY, INPY,
    PAH,
    	L_PFOS, PFOS,
	L_PFOA, PFOA,
	L_GBHC, GBHC,
	L_ABHC, ABHC,
	L_BBHC, BBHC,
	L_DBHC, DBHC,
	HCH,
	L_ALDR, ALDR,
	L_CH, CH,
	L_DIEL, DIEL,
	L_ENDR, ENDR,
	L_END1, END1,
	L_END2, END2,
	L_HEPO, HEPO,
	L_HEPT, HEPT,
	L_HCB, HCB,
	L_MIRX, MIRX,
	L_TOX, TOX,
	L_ENDSS, ENDSS,
	L_PECB, PECB,
	L_ODDD, ODDD,
	L_PDDD, PDDD,
	L_ODDE, ODDE,
	L_PDDE, PDDE,
	L_ODDT, ODDT,
	L_PDDT, PDDT,
    DDT,
	TEQ_TYPE,
	L_TCDF1, TCDF1,
	L_TCDD1, TCDD1,
	L_PECDF1, PECDF1,
	L_PECDF2, PECDF2,
	L_PECDD1, PECDD1,
	L_HXCDF1, HXCDF1,
	L_HXCDF2, HXCDF2,
	L_HXCDF3, HXCDF3,
	L_HXCDF4, HXCDF4,
	L_HXCDD1, HXCDD1,
	L_HXCDD2, HXCDD2,
	L_HXCDD3, HXCDD3,
	L_HPCDF1, HPCDF1,
	L_HPCDF2, HPCDF2,
	L_HPCDD1, HPCDD1,
	L_OCDF, OCDF,
	L_OCDD, OCDD,
    CDD,
	L_PBDE17, PBDE17,
	L_PBDE28, PBDE28,
	L_PBDE47, PBDE47,
	L_PBDE99, PBDE99,
	L_PBDE100, PBDE100,
	L_PBDE153, PBDE153,
	L_PBDE154, PBDE154,
	L_PBDE183, PBDE183,
	L_PBDE197, PBDE197,
	L_PBDE209, PBDE209,
	PBDE,
    L_DLPCB77, DLPCB77,
    L_DLPCB81, DLPCB81,
    L_DLPCB105, DLPCB105,
    L_DLPCB114, DLPCB114,
    L_DLPCB118, DLPCB118,
    L_DLPCB123, DLPCB123,
    L_DLPCB126, DLPCB126,
    L_DLPCB156, DLPCB156,
    L_DLPCB157, DLPCB157,
    L_DLPCB167, DLPCB167,
    L_DLPCB169, DLPCB169,
    L_DLPCB189, DLPCB189,
    DLPCB,
	L_TCM, TCM,
	L_TCE, TCE,
	L_BDCM, BDCM,
	L_BTCM, BTCM,
	L_TRCE, TRCE,
	L_CDBM, CDBM,
	L_BROM, BROM,
	L_MDCB, MDCB,
	L_ODCB, ODCB,
	L_THMS, THMS,
	L_KEPONE, KEPONE,
	L_PFOSF, PFOSF
FROM 	WPG.TOXIC_BIOTA_X1
WHERE mdate <= getdate();


-- WPG.TOXIC_BIOTA_AVG2 source

CREATE VIEW [WPG].[TOXIC_BIOTA_AVG2] AS
SELECT	ZONE,
	WCZ,
	SP_NAME,
	YR,
	TOTAL,
	TYPE,
	TSO_DWR,
	TSD_DWR,
	AS_INORG,
	[AS],
	SE,
	MEHG,
	PBB,
	MBT,
	DBT,
	TBT,
	OSN,
	TYPE_PCB,
	PCB1,
	PCB5,
	PCB8,
	PCB18,
	PCB31,
	PCB28,
	PCB52,
	PCB44,
	PCB66,
	PCB81,
	PCB77,
	PCB101,
	PCB87,
	PCB110,
	PCB123,
	PCB118,
	PCB114,
	PCB105,
	PCB126,
	PCB128,
	PCB151,
	PCB153,
	PCB141,
	PCB149,
	PCB138,
	PCB167,
	PCB156,
	PCB157,
	PCB169,
	PCB187,
	PCB183,
	PCB180,
	PCB170,
	PCB189,
	PCB206,
	PCB,
	LIPID,
	NAPH,
	ACPH,
	ACEN,
	FLUO,
	PHEN,
	ANTH,
	FLUT,
	PYRE,
	BANT,
	CHRY,
	BBFL,
	BKFL,
	BAPY,
	DAAN,
	BGPE,
	INPY,
	PAH,
	PFOS,
	PFOA,
	GBHC,
	ABHC,
	BBHC,
	DBHC,
	HCH,
	ALDR,
	CH,
	DIEL,
	ENDR,
	END1,
	END2,
	HEPO,
	HEPT,
	HCB,
	MIRX,
	TOX,
	ENDSS,
	PECB,
	ODDD,
	PDDD,
	ODDE,
	PDDE,
	ODDT,
	PDDT,
	DDT,
	TEQ_TYPE,
	TCDF1,
	TCDD1,
	PECDF1,
	PECDF2,
	PECDD1,
	HXCDF1,
	HXCDF2,
	HXCDF3,
	HXCDF4,
	HXCDD1,
	HXCDD2,
	HXCDD3,
	HPCDF1,
	HPCDF2,
	HPCDD1,
	OCDF,
	OCDD,
	CDD,
	PBDE17,
	PBDE28,
	PBDE47,
	PBDE99,
	PBDE100,
	PBDE153,
	PBDE154,
	PBDE183,
	PBDE197,
	PBDE209,
	PBDE,
	DLPCB77,
	DLPCB81,
	DLPCB105,
	DLPCB114,
	DLPCB118,
	DLPCB123,
	DLPCB126,
	DLPCB156,
	DLPCB157,
	DLPCB167,
	DLPCB169,
	DLPCB189,
	DLPCB,
	TCM,
	TCE,
	BDCM,
	BTCM,
	TRCE,
	CDBM,
	BROM,
	MDCB,
	ODCB,
	THMS,
	KEPONE,
	PFOSF
FROM 	WPG.TOXIC_BIOTA_X_AVG1
WHERE	YR <= YEAR(GETDATE());


-- WPG.TOXIC_BIOTA_CDD1 source

CREATE VIEW [WPG].[TOXIC_BIOTA_CDD1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
    SP.SP_NAME  SP_NAME,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	CD.TYPE	 	TYPE,
	CD.TEQ_TYPE	TEQ_TYPE,
	CD.TSD_DWR   TSD_DWR,
	CD.L_TCDF1, CD.TCDF1,
	CD.L_TCDD1, CD.TCDD1,
	CD.L_PECDF1, CD.PECDF1,
	CD.L_PECDF2, CD.PECDF2,
	CD.L_PECDD1, CD.PECDD1,
	CD.L_HXCDF1, CD.HXCDF1,
	CD.L_HXCDF2, CD.HXCDF2,
	CD.L_HXCDF3, CD.HXCDF3,
	CD.L_HXCDF4, CD.HXCDF4,
	CD.L_HXCDD1, CD.HXCDD1,
	CD.L_HXCDD2, CD.HXCDD2,
	CD.L_HXCDD3, CD.HXCDD3,
	CD.L_HPCDF1, CD.HPCDF1,
	CD.L_HPCDF2, CD.HPCDF2,
	CD.L_HPCDD1, CD.HPCDD1,
	CD.L_OCDF, CD.OCDF,
	CD.L_OCDD, CD.OCDD,
    CD.CDD
FROM		WPG.TB_VISIT	V
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_CDD_CAL
	UNION	SELECT * FROM WPG.TB_CLAB_CDD_CAL)	CD	ON V.TBVISIT_ID = CD.TBVISIT_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON V.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID
LEFT OUTER JOIN	WPG.TB_SPCODE	SP	ON V.TB_SPCODE_ID = SP.TB_SPCODE_ID;


-- WPG.TOXIC_BIOTA_CLAB1 source

CREATE VIEW [WPG].[TOXIC_BIOTA_CLAB1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
    SP.SP_NAME  SP_NAME,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	M.TYPE	 	TYPE,
	M.L_AS_INORG, M.AS_INORG,
	M.L_AS, M.[AS],
	M.L_SE, M.SE,
	M.L_MEHG, M.MEHG,
	M.L_PBB, M.PBB,
	M.L_MBT, M.MBT,
	M.L_DBT, M.DBT,
	M.L_TBT, M.TBT,
	M.OSN
FROM		WPG.TB_VISIT	V
LEFT OUTER JOIN	WPG.TB_CLAB_CAL	M	ON V.TBVISIT_ID = M.TBVISIT_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON V.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID
LEFT OUTER JOIN	WPG.TB_SPCODE	SP	ON V.TB_SPCODE_ID = SP.TB_SPCODE_ID;


-- WPG.TOXIC_BIOTA_DLPCB1 source

CREATE VIEW [WPG].[TOXIC_BIOTA_DLPCB1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
    SP.SP_NAME  SP_NAME,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	DL.TYPE	 	TYPE,
	DL.TEQ_TYPE	TEQ_TYPE,
    DL.L_DLPCB77, DL.DLPCB77,
    DL.L_DLPCB81, DL.DLPCB81,
    DL.L_DLPCB105, DL.DLPCB105,
    DL.L_DLPCB114, DL.DLPCB114,
    DL.L_DLPCB118, DL.DLPCB118,
    DL.L_DLPCB123, DL.DLPCB123,
    DL.L_DLPCB126, DL.DLPCB126,
    DL.L_DLPCB156, DL.DLPCB156,
    DL.L_DLPCB157, DL.DLPCB157,
    DL.L_DLPCB167, DL.DLPCB167,
    DL.L_DLPCB169, DL.DLPCB169,
    DL.L_DLPCB189, DL.DLPCB189,
    DL.DLPCB
FROM		WPG.TB_VISIT	V
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_DLPCB_CAL
	UNION	SELECT * FROM WPG.TB_CLAB_DLPCB_CAL)	DL	ON V.TBVISIT_ID = DL.TBVISIT_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON V.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID
LEFT OUTER JOIN	WPG.TB_SPCODE	SP	ON V.TB_SPCODE_ID = SP.TB_SPCODE_ID;


-- WPG.TOXIC_BIOTA_OC1 source

CREATE VIEW [WPG].[TOXIC_BIOTA_OC1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
    SP.SP_NAME  SP_NAME,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	O3.TYPE	 	TYPE,
	O3.L_GBHC, O3.GBHC,
	O3.L_ABHC, O3.ABHC,
	O3.L_BBHC, O3.BBHC,
	O3.L_DBHC, O3.DBHC,
	O3.HCH,
	O3.L_ALDR, O3.ALDR,
	O3.L_CH, O3.CH,
	O3.L_DIEL, O3.DIEL,
	O3.L_ENDR, O3.ENDR,
	O3.L_END1, O3.END1,
	O3.L_END2, O3.END2,
	O3.L_HEPO, O3.HEPO,
	O3.L_HEPT, O3.HEPT,
	O3.L_HCB, O3.HCB,
	O3.L_MIRX, O3.MIRX,
	O3.L_TOX, O3.TOX,
	O3.L_ENDSS, O3.ENDSS,
	O3.L_PECB, O3.PECB,
	O3.L_ODDD, O3.ODDD,
	O3.L_PDDD, O3.PDDD,
	O3.L_ODDE, O3.ODDE,
	O3.L_PDDE, O3.PDDE,
	O3.L_ODDT, O3.ODDT,
	O3.L_PDDT, O3.PDDT,
    O3.DDT
FROM		WPG.TB_VISIT		V
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_OC_CAL
	UNION	SELECT * FROM WPG.TB_CLAB_OC_CAL)	O3	ON V.TBVISIT_ID = O3.TBVISIT_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON V.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID
LEFT OUTER JOIN	WPG.TB_SPCODE	SP	ON V.TB_SPCODE_ID = SP.TB_SPCODE_ID;


-- WPG.TOXIC_BIOTA_PAH1 source

CREATE VIEW [WPG].[TOXIC_BIOTA_PAH1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
    SP.SP_NAME  SP_NAME,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	O2.TYPE	 	TYPE,
	O2.L_NAPH, O2.NAPH,
	O2.L_ACPH, O2.ACPH,
	O2.L_ACEN, O2.ACEN,
	O2.L_FLUO, O2.FLUO,
	O2.L_PHEN, O2.PHEN,
	O2.L_ANTH, O2.ANTH,
	O2.L_FLUT, O2.FLUT,
	O2.L_PYRE, O2.PYRE,
	O2.L_BANT, O2.BANT,
	O2.L_CHRY, O2.CHRY,
	O2.L_BBFL, O2.BBFL,
	O2.L_BKFL, O2.BKFL,
	O2.L_BAPY, O2.BAPY,
	O2.L_DAAN, O2.DAAN,
	O2.L_BGPE, O2.BGPE,
	O2.L_INPY, O2.INPY,
    O2.PAH,
    	O2.L_PFOS, O2.PFOS,
	O2.L_PFOA, O2.PFOA
FROM		WPG.TB_VISIT		V
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_PAH_CAL
	UNION	SELECT * FROM WPG.TB_CLAB_PAH_CAL)	O2	ON V.TBVISIT_ID = O2.TBVISIT_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON V.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID
LEFT OUTER JOIN	WPG.TB_SPCODE	SP	ON V.TB_SPCODE_ID = SP.TB_SPCODE_ID;


-- WPG.TOXIC_BIOTA_PBDE1 source

CREATE VIEW [WPG].[TOXIC_BIOTA_PBDE1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
    SP.SP_NAME  SP_NAME,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	BD.TYPE	 	TYPE,
	BD.L_PBDE17, BD.PBDE17,
	BD.L_PBDE28, BD.PBDE28,
	BD.L_PBDE47, BD.PBDE47,
	BD.L_PBDE99, BD.PBDE99,
	BD.L_PBDE100, BD.PBDE100,
	BD.L_PBDE153, BD.PBDE153,
	BD.L_PBDE154, BD.PBDE154,
	BD.L_PBDE183, BD.PBDE183,
	BD.L_PBDE197, BD.PBDE197,
	BD.L_PBDE209, BD.PBDE209,
	BD.PBDE
FROM		WPG.TB_VISIT	V
LEFT OUTER JOIN	WPG.TB_CLAB_PBDE_CAL	BD	ON V.TBVISIT_ID = BD.TBVISIT_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON V.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID
LEFT OUTER JOIN	WPG.TB_SPCODE	SP	ON V.TB_SPCODE_ID = SP.TB_SPCODE_ID;


-- WPG.TOXIC_BIOTA_PCB1 source

CREATE VIEW [WPG].[TOXIC_BIOTA_PCB1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
    SP.SP_NAME  SP_NAME,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	O1.TYPE	 	TYPE,
	O1.TYPE_PCB	 	TYPE_PCB,
	O1.TSO_DWR   TSO_DWR,
	O1.L_PCB1, O1.PCB1,
	O1.L_PCB5, O1.PCB5,
	O1.L_PCB8, O1.PCB8,
	O1.L_PCB18, O1.PCB18,
	O1.L_PCB31, O1.PCB31,
	O1.L_PCB28, O1.PCB28,
	O1.L_PCB52, O1.PCB52,
	O1.L_PCB44, O1.PCB44,
	O1.L_PCB66, O1.PCB66,
	O1.L_PCB81, O1.PCB81,
	O1.L_PCB77, O1.PCB77,
	O1.L_PCB101, O1.PCB101,
	O1.L_PCB87, O1.PCB87,
	O1.L_PCB110, O1.PCB110,
	O1.L_PCB123, O1.PCB123,
	O1.L_PCB118, O1.PCB118,
	O1.L_PCB114, O1.PCB114,
	O1.L_PCB105, O1.PCB105,
	O1.L_PCB126, O1.PCB126,
	O1.L_PCB128, O1.PCB128,
	O1.L_PCB151, O1.PCB151,
	O1.L_PCB153, O1.PCB153,
	O1.L_PCB141, O1.PCB141,
	O1.L_PCB149, O1.PCB149,
	O1.L_PCB138, O1.PCB138,
	O1.L_PCB167, O1.PCB167,
	O1.L_PCB156, O1.PCB156,
	O1.L_PCB157, O1.PCB157,
	O1.L_PCB169, O1.PCB169,
	O1.L_PCB187, O1.PCB187,
	O1.L_PCB183, O1.PCB183,
	O1.L_PCB180, O1.PCB180,
	O1.L_PCB170, O1.PCB170,
	O1.L_PCB189, O1.PCB189,
	O1.L_PCB206, O1.PCB206,
	O1.PCB,
	O1.LIPID
FROM		WPG.TB_VISIT	V
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_PCB_CAL
	UNION	SELECT * FROM WPG.TB_CLAB_PCB_CAL)	O1	ON V.TBVISIT_ID = O1.TBVISIT_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON V.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID
LEFT OUTER JOIN	WPG.TB_SPCODE	SP	ON V.TB_SPCODE_ID = SP.TB_SPCODE_ID;


-- WPG.TOXIC_BIOTA_VISIT1 source

CREATE VIEW [WPG].[TOXIC_BIOTA_VISIT1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
    SP.SP_NAME  SP_NAME,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO
FROM		WPG.TB_VISIT	V
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON V.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID
LEFT OUTER JOIN	WPG.TB_SPCODE	SP	ON V.TB_SPCODE_ID = SP.TB_SPCODE_ID;


-- WPG.TOXIC_BIOTA_X1 source

CREATE VIEW [WPG].[TOXIC_BIOTA_X1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
    SP.SP_NAME  SP_NAME,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	'X'	 	TYPE,
	O1.TSO_DWR 	TSO_DWR,
	CD.TSD_DWR 	TSD_DWR,
	M.L_AS_INORG, M.AS_INORG,
	M.L_AS, M.[AS],
	M.L_SE, M.SE,
	M.L_MEHG, M.MEHG,
	M.L_PBB, M.PBB,
	M.L_MBT, M.MBT,
	M.L_DBT, M.DBT,
	M.L_TBT, M.TBT,
	M.OSN,
	O1.TYPE_PCB,
	O1.L_PCB1, O1.PCB1,
	O1.L_PCB5, O1.PCB5,
	O1.L_PCB8, O1.PCB8,
	O1.L_PCB18, O1.PCB18,
	O1.L_PCB31, O1.PCB31,
	O1.L_PCB28, O1.PCB28,
	O1.L_PCB52, O1.PCB52,
	O1.L_PCB44, O1.PCB44,
	O1.L_PCB66, O1.PCB66,
	O1.L_PCB81, O1.PCB81,
	O1.L_PCB77, O1.PCB77,
	O1.L_PCB101, O1.PCB101,
	O1.L_PCB87, O1.PCB87,
	O1.L_PCB110, O1.PCB110,
	O1.L_PCB123, O1.PCB123,
	O1.L_PCB118, O1.PCB118,
	O1.L_PCB114, O1.PCB114,
	O1.L_PCB105, O1.PCB105,
	O1.L_PCB126, O1.PCB126,
	O1.L_PCB128, O1.PCB128,
	O1.L_PCB151, O1.PCB151,
	O1.L_PCB153, O1.PCB153,
	O1.L_PCB141, O1.PCB141,
	O1.L_PCB149, O1.PCB149,
	O1.L_PCB138, O1.PCB138,
	O1.L_PCB167, O1.PCB167,
	O1.L_PCB156, O1.PCB156,
	O1.L_PCB157, O1.PCB157,
	O1.L_PCB169, O1.PCB169,
	O1.L_PCB187, O1.PCB187,
	O1.L_PCB183, O1.PCB183,
	O1.L_PCB180, O1.PCB180,
	O1.L_PCB170, O1.PCB170,
	O1.L_PCB189, O1.PCB189,
	O1.L_PCB206, O1.PCB206,
	O1.PCB,
	O1.LIPID,
	O2.L_NAPH, O2.NAPH,
	O2.L_ACPH, O2.ACPH,
	O2.L_ACEN, O2.ACEN,
	O2.L_FLUO, O2.FLUO,
	O2.L_PHEN, O2.PHEN,
	O2.L_ANTH, O2.ANTH,
	O2.L_FLUT, O2.FLUT,
	O2.L_PYRE, O2.PYRE,
	O2.L_BANT, O2.BANT,
	O2.L_CHRY, O2.CHRY,
	O2.L_BBFL, O2.BBFL,
	O2.L_BKFL, O2.BKFL,
	O2.L_BAPY, O2.BAPY,
	O2.L_DAAN, O2.DAAN,
	O2.L_BGPE, O2.BGPE,
	O2.L_INPY, O2.INPY,
    O2.PAH,
    	O2.L_PFOS, O2.PFOS,
	O2.L_PFOA, O2.PFOA,
	O3.L_GBHC, O3.GBHC,
	O3.L_ABHC, O3.ABHC,
	O3.L_BBHC, O3.BBHC,
	O3.L_DBHC, O3.DBHC,
	O3.HCH,
	O3.L_ALDR, O3.ALDR,
	O3.L_CH, O3.CH,
	O3.L_DIEL, O3.DIEL,
	O3.L_ENDR, O3.ENDR,
	O3.L_END1, O3.END1,
	O3.L_END2, O3.END2,
	O3.L_HEPO, O3.HEPO,
	O3.L_HEPT, O3.HEPT,
	O3.L_HCB, O3.HCB,
	O3.L_MIRX, O3.MIRX,
	O3.L_TOX, O3.TOX,
	O3.L_ENDSS, O3.ENDSS,
	O3.L_PECB, O3.PECB,
	O3.L_ODDD, O3.ODDD,
	O3.L_PDDD, O3.PDDD,
	O3.L_ODDE, O3.ODDE,
	O3.L_PDDE, O3.PDDE,
	O3.L_ODDT, O3.ODDT,
	O3.L_PDDT, O3.PDDT,
    O3.DDT,
	COALESCE(CD.TEQ_TYPE, DL.TEQ_TYPE) TEQ_TYPE,
	CD.L_TCDF1, CD.TCDF1,
	CD.L_TCDD1, CD.TCDD1,
	CD.L_PECDF1, CD.PECDF1,
	CD.L_PECDF2, CD.PECDF2,
	CD.L_PECDD1, CD.PECDD1,
	CD.L_HXCDF1, CD.HXCDF1,
	CD.L_HXCDF2, CD.HXCDF2,
	CD.L_HXCDF3, CD.HXCDF3,
	CD.L_HXCDF4, CD.HXCDF4,
	CD.L_HXCDD1, CD.HXCDD1,
	CD.L_HXCDD2, CD.HXCDD2,
	CD.L_HXCDD3, CD.HXCDD3,
	CD.L_HPCDF1, CD.HPCDF1,
	CD.L_HPCDF2, CD.HPCDF2,
	CD.L_HPCDD1, CD.HPCDD1,
	CD.L_OCDF, CD.OCDF,
	CD.L_OCDD, CD.OCDD,
    CD.CDD,
	BD.L_PBDE17, BD.PBDE17,
	BD.L_PBDE28, BD.PBDE28,
	BD.L_PBDE47, BD.PBDE47,
	BD.L_PBDE99, BD.PBDE99,
	BD.L_PBDE100, BD.PBDE100,
	BD.L_PBDE153, BD.PBDE153,
	BD.L_PBDE154, BD.PBDE154,
	BD.L_PBDE183, BD.PBDE183,
	BD.L_PBDE197, BD.PBDE197,
	BD.L_PBDE209, BD.PBDE209,
	BD.PBDE,
    DL.L_DLPCB77, DL.DLPCB77,
    DL.L_DLPCB81, DL.DLPCB81,
    DL.L_DLPCB105, DL.DLPCB105,
    DL.L_DLPCB114, DL.DLPCB114,
    DL.L_DLPCB118, DL.DLPCB118,
    DL.L_DLPCB123, DL.DLPCB123,
    DL.L_DLPCB126, DL.DLPCB126,
    DL.L_DLPCB156, DL.DLPCB156,
    DL.L_DLPCB157, DL.DLPCB157,
    DL.L_DLPCB167, DL.DLPCB167,
    DL.L_DLPCB169, DL.DLPCB169,
    DL.L_DLPCB189, DL.DLPCB189,
    DL.DLPCB,
	HH.L_TCM, HH.TCM,
	HH.L_TCE, HH.TCE,
	HH.L_BDCM, HH.BDCM,
	HH.L_BTCM, HH.BTCM,
	HH.L_TRCE, HH.TRCE,
	HH.L_CDBM, HH.CDBM,
	HH.L_BROM, HH.BROM,
	HH.L_MDCB, HH.MDCB,
	HH.L_ODCB, HH.ODCB,
	HH.L_THMS, HH.THMS,
	BU.L_KEPONE, BU.KEPONE,
	BU.L_PFOSF, BU.PFOSF
FROM		WPG.TB_VISIT					V
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_CLAB_CAL WHERE TYPE = 'X') M
	ON V.TBVISIT_ID = M.TBVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_PCB_CAL WHERE TYPE = 'X'
	UNION	 SELECT * FROM WPG.TB_CLAB_PCB_CAL WHERE TYPE = 'X')	O1
	ON V.TBVISIT_ID = O1.TBVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_PAH_CAL WHERE TYPE = 'X'
	UNION	 SELECT * FROM WPG.TB_CLAB_PAH_CAL WHERE TYPE = 'X')	O2
	ON V.TBVISIT_ID = O2.TBVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_OC_CAL WHERE TYPE = 'X'
	UNION	 SELECT * FROM WPG.TB_CLAB_OC_CAL WHERE TYPE = 'X') O3
	ON V.TBVISIT_ID = O3.TBVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_CLAB_PBDE_CAL WHERE TYPE = 'X') BD
	ON V.TBVISIT_ID = BD.TBVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_CDD_CAL WHERE TYPE = 'X'
	UNION	 SELECT * FROM WPG.TB_CLAB_CDD_CAL WHERE TYPE = 'X') CD
	ON V.TBVISIT_ID = CD.TBVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_DLPCB_CAL WHERE TYPE = 'X'
	UNION	 SELECT * FROM WPG.TB_CLAB_DLPCB_CAL WHERE TYPE = 'X') DL
	ON V.TBVISIT_ID = DL.TBVISIT_ID AND CD.TEQ_TYPE = DL.TEQ_TYPE
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_HH_CAL WHERE TYPE = 'X')	HH
	ON V.TBVISIT_ID = HH.TBVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_CLAB_BU_CAL WHERE TYPE = 'X')	BU
	ON V.TBVISIT_ID = BU.TBVISIT_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ					CZ
	ON V.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE					TZ
	ON CZ.ZONE_ID = TZ.ZONE_ID
LEFT OUTER JOIN	WPG.TB_SPCODE					SP
	ON V.TB_SPCODE_ID = SP.TB_SPCODE_ID
WHERE M.TYPE IS NOT NULL OR O1.TYPE IS NOT NULL OR O2.TYPE IS NOT NULL OR O3.TYPE IS NOT NULL OR BD.TYPE IS NOT NULL 
OR CD.TYPE IS NOT NULL OR DL.TYPE IS NOT NULL;


-- WPG.TOXIC_BIOTA_X_AVG1 source

CREATE VIEW [WPG].[TOXIC_BIOTA_X_AVG1] AS
SELECT	ZONE,
	WCZ,
	SP_NAME,
	YEAR(MDATE)	YR,
	COUNT(*)	TOTAL,
	TYPE,
	AVG(TSO_DWR)	TSO_DWR,
	AVG(TSD_DWR)	TSD_DWR,
	AVG(AS_INORG)	AS_INORG,
	AVG( [AS])	 [AS],
	AVG(SE)	SE,
	AVG(MEHG)	MEHG,
	AVG(PBB)	PBB,
	AVG(MBT)	MBT,
	AVG(DBT)	DBT,
	AVG(TBT)	TBT,
	AVG(OSN)	OSN,
	TYPE_PCB,
	AVG(PCB1)	PCB1,
	AVG(PCB5)	PCB5,
	AVG(PCB8)	PCB8,
	AVG(PCB18)	PCB18,
	AVG(PCB31)	PCB31,
	AVG(PCB28)	PCB28,
	AVG(PCB52)	PCB52,
	AVG(PCB44)	PCB44,
	AVG(PCB66)	PCB66,
	AVG(PCB81)	PCB81,
	AVG(PCB77)	PCB77,
	AVG(PCB101)	PCB101,
	AVG(PCB87)	PCB87,
	AVG(PCB110)	PCB110,
	AVG(PCB123)	PCB123,
	AVG(PCB118)	PCB118,
	AVG(PCB114)	PCB114,
	AVG(PCB105)	PCB105,
	AVG(PCB126)	PCB126,
	AVG(PCB128)	PCB128,
	AVG(PCB151)	PCB151,
	AVG(PCB153)	PCB153,
	AVG(PCB141)	PCB141,
	AVG(PCB149)	PCB149,
	AVG(PCB138)	PCB138,
	AVG(PCB167)	PCB167,
	AVG(PCB156)	PCB156,
	AVG(PCB157)	PCB157,
	AVG(PCB169)	PCB169,
	AVG(PCB187)	PCB187,
	AVG(PCB183)	PCB183,
	AVG(PCB180)	PCB180,
	AVG(PCB170)	PCB170,
	AVG(PCB189)	PCB189,
	AVG(PCB206)	PCB206,
	AVG(PCB)	PCB,
	AVG(LIPID)	LIPID,
	AVG(NAPH)	NAPH,
	AVG(ACPH)	ACPH,
	AVG(ACEN)	ACEN,
	AVG(FLUO)	FLUO,
	AVG(PHEN)	PHEN,
	AVG(ANTH)	ANTH,
	AVG(FLUT)	FLUT,
	AVG(PYRE)	PYRE,
	AVG(BANT)	BANT,
	AVG(CHRY)	CHRY,
	AVG(BBFL)	BBFL,
	AVG(BKFL)	BKFL,
	AVG(BAPY)	BAPY,
	AVG(DAAN)	DAAN,
	AVG(BGPE)	BGPE,
	AVG(INPY)	INPY,
	AVG(PAH)	PAH,
	AVG(PFOS)	PFOS,
	AVG(PFOA)	PFOA,
	AVG(GBHC)	GBHC,
	AVG(ABHC)	ABHC,
	AVG(BBHC)	BBHC,
	AVG(DBHC)	DBHC,
	AVG(HCH)	HCH,
	AVG(ALDR)	ALDR,
	AVG(CH)	CH,
	AVG(DIEL)	DIEL,
	AVG(ENDR)	ENDR,
	AVG(END1) 	END1,
	AVG(END2) 	END2,
	AVG(HEPO) 	HEPO,
	AVG(HEPT)	HEPT,
	AVG(HCB)	HCB,
	AVG(MIRX)	MIRX,
	AVG(TOX)	TOX,
	AVG(ENDSS) 	ENDSS,
	AVG(PECB) 	PECB,
	AVG(ODDD)	ODDD,
	AVG(PDDD)	PDDD,
	AVG(ODDE)	ODDE,
	AVG(PDDE)	PDDE,
	AVG(ODDT)	ODDT,
	AVG(PDDT)	PDDT,
	AVG(DDT)	DDT,
	TEQ_TYPE,
	AVG(TCDF1)	TCDF1,
	AVG(TCDD1)	TCDD1,
	AVG(PECDF1)	PECDF1,
	AVG(PECDF2)	PECDF2,
	AVG(PECDD1)	PECDD1,
	AVG(HXCDF1)	HXCDF1,
	AVG(HXCDF2)	HXCDF2,
	AVG(HXCDF3)	HXCDF3,
	AVG(HXCDF4)	HXCDF4,
	AVG(HXCDD1)	HXCDD1,
	AVG(HXCDD2)	HXCDD2,
	AVG(HXCDD3)	HXCDD3,
	AVG(HPCDF1)	HPCDF1,
	AVG(HPCDF2)	HPCDF2,
	AVG(HPCDD1)	HPCDD1,
	AVG(OCDF)	OCDF,
	AVG(OCDD)	OCDD,
	AVG(CDD)	CDD,
	AVG(PBDE17)	PBDE17,
	AVG(PBDE28)	PBDE28,
	AVG(PBDE47)	PBDE47,
	AVG(PBDE99)	PBDE99,
	AVG(PBDE100)	PBDE100,
	AVG(PBDE153)	PBDE153,
	AVG(PBDE154)	PBDE154,
	AVG(PBDE183)	PBDE183,
	AVG(PBDE197)	PBDE197,
	AVG(PBDE209)	PBDE209,
	AVG(PBDE)	PBDE,
	AVG(DLPCB77)	DLPCB77,
	AVG(DLPCB81)	DLPCB81,
	AVG(DLPCB105)	DLPCB105,
	AVG(DLPCB114)	DLPCB114,
	AVG(DLPCB118)	DLPCB118,
	AVG(DLPCB123)	DLPCB123,
	AVG(DLPCB126)	DLPCB126,
	AVG(DLPCB156)	DLPCB156,
	AVG(DLPCB157)	DLPCB157,
	AVG(DLPCB167)	DLPCB167,
	AVG(DLPCB169)	DLPCB169,
	AVG(DLPCB189)	DLPCB189,
	AVG(DLPCB)	DLPCB,
	AVG(TCM) 	TCM,
	AVG(TCE) 	TCE,
	AVG(BDCM) 	BDCM,
	AVG(BTCM) 	BTCM,
	AVG(TRCE) 	TRCE,
	AVG(CDBM) 	CDBM,
	AVG(BROM) 	BROM,
	AVG(MDCB) 	MDCB,
	AVG(ODCB) 	ODCB,
	AVG(THMS) 	THMS,
	AVG(KEPONE) 	KEPONE,
	AVG(PFOSF) 	PFOSF
FROM	WPG.TOXIC_BIOTA_X1
GROUP BY ZONE, WCZ, SP_NAME, YEAR(MDATE), TYPE, TYPE_PCB, TEQ_TYPE;


-- WPG.TOXIC_BIOTA_Y1 source

CREATE VIEW [WPG].[TOXIC_BIOTA_Y1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
    SP.SP_NAME  SP_NAME,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	'Y'	 	TYPE,
	O1.TSO_DWR 	TSO_DWR,
	CD.TSD_DWR 	TSD_DWR,
	M.L_AS_INORG, M.AS_INORG,
	M.L_AS, M.[AS],
	M.L_SE, M.SE,
	M.L_MEHG, M.MEHG,
	M.L_PBB, M.PBB,
	M.L_MBT, M.MBT,
	M.L_DBT, M.DBT,
	M.L_TBT, M.TBT,
	M.OSN,
	O1.TYPE_PCB,
	O1.L_PCB1, O1.PCB1,
	O1.L_PCB5, O1.PCB5,
	O1.L_PCB8, O1.PCB8,
	O1.L_PCB18, O1.PCB18,
	O1.L_PCB31, O1.PCB31,
	O1.L_PCB28, O1.PCB28,
	O1.L_PCB52, O1.PCB52,
	O1.L_PCB44, O1.PCB44,
	O1.L_PCB66, O1.PCB66,
	O1.L_PCB81, O1.PCB81,
	O1.L_PCB77, O1.PCB77,
	O1.L_PCB101, O1.PCB101,
	O1.L_PCB87, O1.PCB87,
	O1.L_PCB110, O1.PCB110,
	O1.L_PCB123, O1.PCB123,
	O1.L_PCB118, O1.PCB118,
	O1.L_PCB114, O1.PCB114,
	O1.L_PCB105, O1.PCB105,
	O1.L_PCB126, O1.PCB126,
	O1.L_PCB128, O1.PCB128,
	O1.L_PCB151, O1.PCB151,
	O1.L_PCB153, O1.PCB153,
	O1.L_PCB141, O1.PCB141,
	O1.L_PCB149, O1.PCB149,
	O1.L_PCB138, O1.PCB138,
	O1.L_PCB167, O1.PCB167,
	O1.L_PCB156, O1.PCB156,
	O1.L_PCB157, O1.PCB157,
	O1.L_PCB169, O1.PCB169,
	O1.L_PCB187, O1.PCB187,
	O1.L_PCB183, O1.PCB183,
	O1.L_PCB180, O1.PCB180,
	O1.L_PCB170, O1.PCB170,
	O1.L_PCB189, O1.PCB189,
	O1.L_PCB206, O1.PCB206,
	O1.PCB,
	O1.LIPID,
	O2.L_NAPH, O2.NAPH,
	O2.L_ACPH, O2.ACPH,
	O2.L_ACEN, O2.ACEN,
	O2.L_FLUO, O2.FLUO,
	O2.L_PHEN, O2.PHEN,
	O2.L_ANTH, O2.ANTH,
	O2.L_FLUT, O2.FLUT,
	O2.L_PYRE, O2.PYRE,
	O2.L_BANT, O2.BANT,
	O2.L_CHRY, O2.CHRY,
	O2.L_BBFL, O2.BBFL,
	O2.L_BKFL, O2.BKFL,
	O2.L_BAPY, O2.BAPY,
	O2.L_DAAN, O2.DAAN,
	O2.L_BGPE, O2.BGPE,
	O2.L_INPY, O2.INPY,
    O2.PAH,
    	O2.L_PFOS, O2.PFOS,
	O2.L_PFOA, O2.PFOA,
	O3.L_GBHC, O3.GBHC,
	O3.L_ABHC, O3.ABHC,
	O3.L_BBHC, O3.BBHC,
	O3.L_DBHC, O3.DBHC,
	O3.HCH,
	O3.L_ALDR, O3.ALDR,
	O3.L_CH, O3.CH,
	O3.L_DIEL, O3.DIEL,
	O3.L_ENDR, O3.ENDR,
	O3.L_END1, O3.END1,
	O3.L_END2, O3.END2,
	O3.L_HEPO, O3.HEPO,
	O3.L_HEPT, O3.HEPT,
	O3.L_HCB, O3.HCB,
	O3.L_MIRX, O3.MIRX,
	O3.L_TOX, O3.TOX,
	O3.L_ENDSS, O3.ENDSS,
	O3.L_PECB, O3.PECB,
	O3.L_ODDD, O3.ODDD,
	O3.L_PDDD, O3.PDDD,
	O3.L_ODDE, O3.ODDE,
	O3.L_PDDE, O3.PDDE,
	O3.L_ODDT, O3.ODDT,
	O3.L_PDDT, O3.PDDT,
    O3.DDT,
	COALESCE(CD.TEQ_TYPE, DL.TEQ_TYPE) TEQ_TYPE,
	CD.L_TCDF1, CD.TCDF1,
	CD.L_TCDD1, CD.TCDD1,
	CD.L_PECDF1, CD.PECDF1,
	CD.L_PECDF2, CD.PECDF2,
	CD.L_PECDD1, CD.PECDD1,
	CD.L_HXCDF1, CD.HXCDF1,
	CD.L_HXCDF2, CD.HXCDF2,
	CD.L_HXCDF3, CD.HXCDF3,
	CD.L_HXCDF4, CD.HXCDF4,
	CD.L_HXCDD1, CD.HXCDD1,
	CD.L_HXCDD2, CD.HXCDD2,
	CD.L_HXCDD3, CD.HXCDD3,
	CD.L_HPCDF1, CD.HPCDF1,
	CD.L_HPCDF2, CD.HPCDF2,
	CD.L_HPCDD1, CD.HPCDD1,
	CD.L_OCDF, CD.OCDF,
	CD.L_OCDD, CD.OCDD,
    CD.CDD,
	BD.L_PBDE17, BD.PBDE17,
	BD.L_PBDE28, BD.PBDE28,
	BD.L_PBDE47, BD.PBDE47,
	BD.L_PBDE99, BD.PBDE99,
	BD.L_PBDE100, BD.PBDE100,
	BD.L_PBDE153, BD.PBDE153,
	BD.L_PBDE154, BD.PBDE154,
	BD.L_PBDE183, BD.PBDE183,
	BD.L_PBDE197, BD.PBDE197,
	BD.L_PBDE209, BD.PBDE209,
	BD.PBDE,
    DL.L_DLPCB77, DL.DLPCB77,
    DL.L_DLPCB81, DL.DLPCB81,
    DL.L_DLPCB105, DL.DLPCB105,
    DL.L_DLPCB114, DL.DLPCB114,
    DL.L_DLPCB118, DL.DLPCB118,
    DL.L_DLPCB123, DL.DLPCB123,
    DL.L_DLPCB126, DL.DLPCB126,
    DL.L_DLPCB156, DL.DLPCB156,
    DL.L_DLPCB157, DL.DLPCB157,
    DL.L_DLPCB167, DL.DLPCB167,
    DL.L_DLPCB169, DL.DLPCB169,
    DL.L_DLPCB189, DL.DLPCB189,
    DL.DLPCB,
	HH.L_TCM, HH.TCM,
	HH.L_TCE, HH.TCE,
	HH.L_BDCM, HH.BDCM,
	HH.L_BTCM, HH.BTCM,
	HH.L_TRCE, HH.TRCE,
	HH.L_CDBM, HH.CDBM,
	HH.L_BROM, HH.BROM,
	HH.L_MDCB, HH.MDCB,
	HH.L_ODCB, HH.ODCB,
	HH.L_THMS, HH.THMS,
	BU.L_KEPONE, BU.KEPONE,
	BU.L_PFOSF, BU.PFOSF
FROM		WPG.TB_VISIT					V
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_CLAB_CAL WHERE TYPE = 'Y') M
	ON V.TBVISIT_ID = M.TBVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_PCB_CAL WHERE TYPE = 'Y'
	UNION	 SELECT * FROM WPG.TB_CLAB_PCB_CAL WHERE TYPE = 'Y')	O1
	ON V.TBVISIT_ID = O1.TBVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_PAH_CAL WHERE TYPE = 'Y'
	UNION	 SELECT * FROM WPG.TB_CLAB_PAH_CAL WHERE TYPE = 'Y')	O2
	ON V.TBVISIT_ID = O2.TBVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_OC_CAL WHERE TYPE = 'Y'
	UNION	 SELECT * FROM WPG.TB_CLAB_OC_CAL WHERE TYPE = 'Y') O3
	ON V.TBVISIT_ID = O3.TBVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_CLAB_PBDE_CAL WHERE TYPE = 'Y') BD
	ON V.TBVISIT_ID = BD.TBVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_CDD_CAL WHERE TYPE = 'Y'
	UNION	 SELECT * FROM WPG.TB_CLAB_CDD_CAL WHERE TYPE = 'Y') CD
	ON V.TBVISIT_ID = CD.TBVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_DLPCB_CAL WHERE TYPE = 'Y'
	UNION	 SELECT * FROM WPG.TB_CLAB_DLPCB_CAL WHERE TYPE = 'Y') DL
	ON V.TBVISIT_ID = DL.TBVISIT_ID AND CD.TEQ_TYPE = DL.TEQ_TYPE
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_GLAB_HH_CAL WHERE TYPE = 'Y')	HH
	ON V.TBVISIT_ID = HH.TBVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TB_CLAB_BU_CAL WHERE TYPE = 'Y')	BU
	ON V.TBVISIT_ID = BU.TBVISIT_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ					CZ
	ON V.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE					TZ
	ON CZ.ZONE_ID = TZ.ZONE_ID
LEFT OUTER JOIN	WPG.TB_SPCODE					SP
	ON V.TB_SPCODE_ID = SP.TB_SPCODE_ID
WHERE M.TYPE IS NOT NULL OR O1.TYPE IS NOT NULL OR O2.TYPE IS NOT NULL OR O3.TYPE IS NOT NULL OR BD.TYPE IS NOT NULL 
OR CD.TYPE IS NOT NULL OR DL.TYPE IS NOT NULL;


-- WPG.TOXIC_SEDIMENT1 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT1] AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	TYPE,
	TSM_DWR 	TSM_DWR,
	TSO_DWR 	TSO_DWR,
	TSD_DWR 	TSD_DWR,
	L_TOC, TOC,
	L_TIC, TIC,
	L_TC, TC,
	L_AL, AL,
	L_AG, AG,
	L_AS, [AS],
	L_AS_INORG, AS_INORG,
	L_BA, BA,
	L_BE, BE,
	L_CU, CU,
	L_HG, HG,
	L_SE, SE,
	L_SN, SN,
	L_TL, TL,
	L_B, B,
	L_CD, CD,
	L_CR, CR,
	L_FE, FE,
	L_MN, MN,
	L_NI, NI,
	L_PB, PB,
	L_V, V,
	L_ZN, ZN,
	L_MO, MO,
	L_SB, SB,
	L_PCB8, PCB8,
	L_PCB18, PCB18,
	L_PCB28, PCB28,
	L_PCB31, PCB31,
	L_PCB44, PCB44,
	L_PCB52, PCB52,
	L_PCB66, PCB66,
	L_PCB77, PCB77,
	L_PCB81, PCB81,
	L_PCB101, PCB101,
	L_PCB105, PCB105,
	L_PCB114, PCB114,
	L_PCB118, PCB118,
	L_PCB123, PCB123,
	L_PCB126, PCB126,
	L_PCB128, PCB128,
	L_PCB138, PCB138,
	L_PCB149, PCB149,
	L_PCB153, PCB153,
	L_PCB156, PCB156,
	L_PCB157, PCB157,
	L_PCB167, PCB167,
	L_PCB169, PCB169,
	L_PCB170, PCB170,
	L_PCB180, PCB180,
	L_PCB187, PCB187,
	L_PCB189, PCB189,
	PCB,
    L_NAPH, NAPH,
	L_ACPH, ACPH,
	L_ACEN, ACEN,
	L_FLUO, FLUO,
	L_PHEN, PHEN,
	L_ANTH, ANTH,
	L_FLUT, FLUT,
	L_PYRE, PYRE,
	L_BANT, BANT,
	L_CHRY, CHRY,
	L_BBFL, BBFL,
	L_BKFL, BKFL,
	L_BAPY, BAPY,
	L_DAAN, DAAN,
	L_BGPE, BGPE,
	L_INPY, INPY,
	PAH,
	L_PFOA, PFOA,
	L_PFOS, PFOS,
	PFOS_DWR,
	L_PECB, PECB,
	L_ALDR, ALDR,
	L_CH, CH,
	L_DIEL, DIEL,
	L_ENDR, ENDR,
	L_END1, END1,
	L_END2, END2,
	L_HEPO, HEPO,
	L_HEPT, HEPT,
	L_HCB, HCB,
	L_MIRX, MIRX,
	L_GBHC, GBHC,
	L_ABHC, ABHC,
	L_BBHC, BBHC,
	L_DBHC, DBHC,
	L_HCH, HCH,
	L_ODDD, ODDD,
	L_PDDD, PDDD,
	L_ODDE, ODDE,
	L_PDDE, PDDE,
	L_ODDT, ODDT,
	L_PDDT, PDDT,
	DDT,
	L_KEPONE, KEPONE,
	L_TOX, TOX,
	L_TOX_P26, TOX_P26,
	L_TOX_P50, TOX_P50,
	L_TOX_P62, TOX_P62,
	L_PBDE17, PBDE17,
	L_PBDE28, PBDE28,
	L_PBDE47, PBDE47,
	L_PBDE99, PBDE99,
	L_PBDE100, PBDE100,
	L_PBDE153, PBDE153,
	L_PBDE154, PBDE154,
	L_PBDE183, PBDE183,
	L_PBDE197, PBDE197,
	L_PBDE209, PBDE209,
	PBDE,
	L_PBB, PBB,
	L_F4, F4,
	L_PF, PF,
	L_NP, NP,
	L_NPME, NPME,
	L_NPDE, NPDE,
	L_NPE, NPE,
	L_MBT, MBT,
	L_DBT, DBT,
	L_TBT, TBT,
	OSN,
	L_E1, E1,
	L_E2_17A, E2_17A,
	L_E2_17B, E2_17B,
	L_E3, E3,
	L_EE2, EE2,
	L_BPA, BPA,
    L_TCDF1, TCDF1,
	L_TCDD1, TCDD1,
	L_PECDF1, PECDF1,
	L_PECDF2, PECDF2,
	L_PECDD1, PECDD1,
	L_HXCDF1, HXCDF1,
	L_HXCDF2, HXCDF2,
	L_HXCDF3, HXCDF3,
	L_HXCDF4, HXCDF4,
	L_HXCDD1, HXCDD1,
	L_HXCDD2, HXCDD2,
	L_HXCDD3, HXCDD3,
	L_HPCDF1, HPCDF1,
	L_HPCDF2, HPCDF2,
	L_HPCDD1, HPCDD1,
	L_OCDF, OCDF,
	L_OCDD, OCDD,
    CDD,
	L_DLPCB77, DLPCB77,
    L_DLPCB81, DLPCB81,
    L_DLPCB105, DLPCB105,
    L_DLPCB114, DLPCB114,
    L_DLPCB118, DLPCB118,
    L_DLPCB123, DLPCB123,
    L_DLPCB126, DLPCB126,
    L_DLPCB156, DLPCB156,
    L_DLPCB157, DLPCB157,
    L_DLPCB167, DLPCB167,
    L_DLPCB169, DLPCB169,
    L_DLPCB189, DLPCB189,
    DLPCB,
    L_PFOSF, PFOSF,
	VIEW_NO
FROM	WPG.TOXIC_SEDIMENT_X1
UNION ALL
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	TYPE,
	TSM_DWR 	TSM_DWR,
	TSO_DWR 	TSO_DWR,
	TSD_DWR 	TSD_DWR,
	L_TOC, TOC,
	L_TIC, TIC,
	L_TC, TC,
	L_AL, AL,
	L_AG, AG,
	L_AS, [AS],
	L_AS_INORG, AS_INORG,
	L_BA, BA,
	L_BE, BE,
	L_CU, CU,
	L_HG, HG,
	L_SE, SE,
	L_SN, SN,
	L_TL, TL,
	L_B, B,
	L_CD, CD,
	L_CR, CR,
	L_FE, FE,
	L_MN, MN,
	L_NI, NI,
	L_PB, PB,
	L_V, V,
	L_ZN, ZN,
	L_MO, MO,
	L_SB, SB,
	L_PCB8, PCB8,
	L_PCB18, PCB18,
	L_PCB28, PCB28,
	L_PCB31, PCB31,
	L_PCB44, PCB44,
	L_PCB52, PCB52,
	L_PCB66, PCB66,
	L_PCB77, PCB77,
	L_PCB81, PCB81,
	L_PCB101, PCB101,
	L_PCB105, PCB105,
	L_PCB114, PCB114,
	L_PCB118, PCB118,
	L_PCB123, PCB123,
	L_PCB126, PCB126,
	L_PCB128, PCB128,
	L_PCB138, PCB138,
	L_PCB149, PCB149,
	L_PCB153, PCB153,
	L_PCB156, PCB156,
	L_PCB157, PCB157,
	L_PCB167, PCB167,
	L_PCB169, PCB169,
	L_PCB170, PCB170,
	L_PCB180, PCB180,
	L_PCB187, PCB187,
	L_PCB189, PCB189,
	PCB,
    L_NAPH, NAPH,
	L_ACPH, ACPH,
	L_ACEN, ACEN,
	L_FLUO, FLUO,
	L_PHEN, PHEN,
	L_ANTH, ANTH,
	L_FLUT, FLUT,
	L_PYRE, PYRE,
	L_BANT, BANT,
	L_CHRY, CHRY,
	L_BBFL, BBFL,
	L_BKFL, BKFL,
	L_BAPY, BAPY,
	L_DAAN, DAAN,
	L_BGPE, BGPE,
	L_INPY, INPY,
	PAH,
	L_PFOA, PFOA,
	L_PFOS, PFOS,
	PFOS_DWR,
	L_PECB, PECB,
	L_ALDR, ALDR,
	L_CH, CH,
	L_DIEL, DIEL,
	L_ENDR, ENDR,
	L_END1, END1,
	L_END2, END2,
	L_HEPO, HEPO,
	L_HEPT, HEPT,
	L_HCB, HCB,
	L_MIRX, MIRX,
	L_GBHC, GBHC,
	L_ABHC, ABHC,
	L_BBHC, BBHC,
	L_DBHC, DBHC,
	L_HCH, HCH,
	L_ODDD, ODDD,
	L_PDDD, PDDD,
	L_ODDE, ODDE,
	L_PDDE, PDDE,
	L_ODDT, ODDT,
	L_PDDT, PDDT,
	DDT,
	L_KEPONE, KEPONE,
	L_TOX, TOX,
	L_TOX_P26, TOX_P26,
	L_TOX_P50, TOX_P50,
	L_TOX_P62, TOX_P62,
	L_PBDE17, PBDE17,
	L_PBDE28, PBDE28,
	L_PBDE47, PBDE47,
	L_PBDE99, PBDE99,
	L_PBDE100, PBDE100,
	L_PBDE153, PBDE153,
	L_PBDE154, PBDE154,
	L_PBDE183, PBDE183,
	L_PBDE197, PBDE197,
	L_PBDE209, PBDE209,
	PBDE,
	L_PBB, PBB,
	L_F4, F4,
	L_PF, PF,
	L_NP, NP,
	L_NPME, NPME,
	L_NPDE, NPDE,
	L_NPE, NPE,
	L_MBT, MBT,
	L_DBT, DBT,
	L_TBT, TBT,
	OSN,
	L_E1, E1,
	L_E2_17A, E2_17A,
	L_E2_17B, E2_17B,
	L_E3, E3,
	L_EE2, EE2,
	L_BPA, BPA,
    L_TCDF1, TCDF1,
	L_TCDD1, TCDD1,
	L_PECDF1, PECDF1,
	L_PECDF2, PECDF2,
	L_PECDD1, PECDD1,
	L_HXCDF1, HXCDF1,
	L_HXCDF2, HXCDF2,
	L_HXCDF3, HXCDF3,
	L_HXCDF4, HXCDF4,
	L_HXCDD1, HXCDD1,
	L_HXCDD2, HXCDD2,
	L_HXCDD3, HXCDD3,
	L_HPCDF1, HPCDF1,
	L_HPCDF2, HPCDF2,
	L_HPCDD1, HPCDD1,
	L_OCDF, OCDF,
	L_OCDD, OCDD,
    CDD,
	L_DLPCB77, DLPCB77,
    L_DLPCB81, DLPCB81,
    L_DLPCB105, DLPCB105,
    L_DLPCB114, DLPCB114,
    L_DLPCB118, DLPCB118,
    L_DLPCB123, DLPCB123,
    L_DLPCB126, DLPCB126,
    L_DLPCB156, DLPCB156,
    L_DLPCB157, DLPCB157,
    L_DLPCB167, DLPCB167,
    L_DLPCB169, DLPCB169,
    L_DLPCB189, DLPCB189,
    DLPCB,
    L_PFOSF, PFOSF,
	VIEW_NO
FROM	WPG.TOXIC_SEDIMENT_Y1;


-- WPG.TOXIC_SEDIMENT2 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT2] AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	TYPE,
	TSM_DWR 	TSM_DWR,
	TSO_DWR 	TSO_DWR,
	TSD_DWR 	TSD_DWR,
	L_TOC, TOC,
	L_TIC, TIC,
	L_TC, TC,
	L_AL, AL,
	L_AG, AG,
	L_AS, [AS],
	L_AS_INORG, AS_INORG,
	L_BA, BA,
	L_BE, BE,
	L_CU, CU,
	L_HG, HG,
	L_SE, SE,
	L_SN, SN,
	L_TL, TL,
	L_B, B,
	L_CD, CD,
	L_CR, CR,
	L_FE, FE,
	L_MN, MN,
	L_NI, NI,
	L_PB, PB,
	L_V, V,
	L_ZN, ZN,
	L_MO, MO,
	L_SB, SB,
	L_PCB8, PCB8,
	L_PCB18, PCB18,
	L_PCB28, PCB28,
	L_PCB31, PCB31,
	L_PCB44, PCB44,
	L_PCB52, PCB52,
	L_PCB66, PCB66,
	L_PCB77, PCB77,
	L_PCB81, PCB81,
	L_PCB101, PCB101,
	L_PCB105, PCB105,
	L_PCB114, PCB114,
	L_PCB118, PCB118,
	L_PCB123, PCB123,
	L_PCB126, PCB126,
	L_PCB128, PCB128,
	L_PCB138, PCB138,
	L_PCB149, PCB149,
	L_PCB153, PCB153,
	L_PCB156, PCB156,
	L_PCB157, PCB157,
	L_PCB167, PCB167,
	L_PCB169, PCB169,
	L_PCB170, PCB170,
	L_PCB180, PCB180,
	L_PCB187, PCB187,
	L_PCB189, PCB189,
	PCB,
    L_NAPH, NAPH,
	L_ACPH, ACPH,
	L_ACEN, ACEN,
	L_FLUO, FLUO,
	L_PHEN, PHEN,
	L_ANTH, ANTH,
	L_FLUT, FLUT,
	L_PYRE, PYRE,
	L_BANT, BANT,
	L_CHRY, CHRY,
	L_BBFL, BBFL,
	L_BKFL, BKFL,
	L_BAPY, BAPY,
	L_DAAN, DAAN,
	L_BGPE, BGPE,
	L_INPY, INPY,
	PAH,
	L_PFOA, PFOA,
	L_PFOS, PFOS,
	PFOS_DWR,
	L_PECB, PECB,
	L_ALDR, ALDR,
	L_CH, CH,
	L_DIEL, DIEL,
	L_ENDR, ENDR,
	L_END1, END1,
	L_END2, END2,
	L_HEPO, HEPO,
	L_HEPT, HEPT,
	L_HCB, HCB,
	L_MIRX, MIRX,
	L_GBHC, GBHC,
	L_ABHC, ABHC,
	L_BBHC, BBHC,
	L_DBHC, DBHC,
	L_HCH, HCH,
	L_ODDD, ODDD,
	L_PDDD, PDDD,
	L_ODDE, ODDE,
	L_PDDE, PDDE,
	L_ODDT, ODDT,
	L_PDDT, PDDT,
	DDT,
	L_KEPONE, KEPONE,
	L_TOX, TOX,
	L_TOX_P26, TOX_P26,
	L_TOX_P50, TOX_P50,
	L_TOX_P62, TOX_P62,
	L_PBDE17, PBDE17,
	L_PBDE28, PBDE28,
	L_PBDE47, PBDE47,
	L_PBDE99, PBDE99,
	L_PBDE100, PBDE100,
	L_PBDE153, PBDE153,
	L_PBDE154, PBDE154,
	L_PBDE183, PBDE183,
	L_PBDE197, PBDE197,
	L_PBDE209, PBDE209,
	PBDE,
	L_PBB, PBB,
	L_F4, F4,
	L_PF, PF,
	L_NP, NP,
	L_NPME, NPME,
	L_NPDE, NPDE,
	L_NPE, NPE,
	L_MBT, MBT,
	L_DBT, DBT,
	L_TBT, TBT,
	OSN,
	L_E1, E1,
	L_E2_17A, E2_17A,
	L_E2_17B, E2_17B,
	L_E3, E3,
	L_EE2, EE2,
	L_BPA, BPA,
    L_TCDF1, TCDF1,
	L_TCDD1, TCDD1,
	L_PECDF1, PECDF1,
	L_PECDF2, PECDF2,
	L_PECDD1, PECDD1,
	L_HXCDF1, HXCDF1,
	L_HXCDF2, HXCDF2,
	L_HXCDF3, HXCDF3,
	L_HXCDF4, HXCDF4,
	L_HXCDD1, HXCDD1,
	L_HXCDD2, HXCDD2,
	L_HXCDD3, HXCDD3,
	L_HPCDF1, HPCDF1,
	L_HPCDF2, HPCDF2,
	L_HPCDD1, HPCDD1,
	L_OCDF, OCDF,
	L_OCDD, OCDD,
    CDD,
	L_DLPCB77, DLPCB77,
    L_DLPCB81, DLPCB81,
    L_DLPCB105, DLPCB105,
    L_DLPCB114, DLPCB114,
    L_DLPCB118, DLPCB118,
    L_DLPCB123, DLPCB123,
    L_DLPCB126, DLPCB126,
    L_DLPCB156, DLPCB156,
    L_DLPCB157, DLPCB157,
    L_DLPCB167, DLPCB167,
    L_DLPCB169, DLPCB169,
    L_DLPCB189, DLPCB189,
    DLPCB,
    L_PFOSF, PFOSF
FROM 	WPG.TOXIC_SEDIMENT_X1
WHERE	VIEW_NO >= 2
and mdate <= getdate();


-- WPG.TOXIC_SEDIMENT2_PT1_NO_PCB source

CREATE VIEW [WPG].[TOXIC_SEDIMENT2_PT1_NO_PCB] AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	TYPE,
	TSM_DWR 	TSM_DWR,
	TSO_DWR 	TSO_DWR,
	TSD_DWR 	TSD_DWR,
	L_TOC, TOC,
	L_TIC, TIC,
	L_TC, TC,
	L_AL, AL,
	L_AG, AG,
	L_AS, [AS],
	L_AS_INORG, AS_INORG,
	L_BA, BA,
	L_BE, BE,
	L_CU, CU,
	L_HG, HG,
	L_SE, SE,
	L_SN, SN,
	L_TL, TL,
    L_NAPH, NAPH,
	L_ACPH, ACPH,
	L_ACEN, ACEN,
	L_FLUO, FLUO,
	L_PHEN, PHEN,
	L_ANTH, ANTH,
	L_FLUT, FLUT,
	L_PYRE, PYRE,
	L_BANT, BANT,
	L_CHRY, CHRY,
	L_BBFL, BBFL,
	L_BKFL, BKFL,
	L_BAPY, BAPY,
	L_DAAN, DAAN,
	L_BGPE, BGPE,
	L_INPY, INPY,
	PAH,
	L_ODDE, ODDE,
	L_PDDE, PDDE,
	L_ODDD, ODDD,
	L_ODDT, ODDT,
	L_PDDD, PDDD,
	L_PDDT, PDDT,
	DDT,
	L_TOX, TOX,
	L_TOX_P26, TOX_P26,
	L_TOX_P50, TOX_P50,
	L_TOX_P62, TOX_P62,
	L_ALDR, ALDR,
	L_CH, CH,
	L_DIEL, DIEL,
	L_ENDR, ENDR,
	L_HEPT, HEPT,
	L_HCB, HCB,
	L_MIRX, MIRX,
	L_TOX_CL, TOX_CL,
	L_ODDD_CL, ODDD_CL,
	L_PDDD_CL, PDDD_CL,
	L_ODDE_CL, ODDE_CL,
	L_PDDE_CL, PDDE_CL,
	L_ODDT_CL, ODDT_CL,
	L_PDDT_CL, PDDT_CL,
	DDT_CL,
	L_GBHC, GBHC,
	L_ABHC, ABHC,
	L_BBHC, BBHC,
	L_DBHC, DBHC,
    HCH,
	L_PBDE17, PBDE17,
	L_PBDE28, PBDE28,
	L_PBDE47, PBDE47,
	L_PBDE99, PBDE99,
	L_PBDE100, PBDE100,
	L_PBDE153, PBDE153,
	L_PBDE154, PBDE154,
	L_PBDE183, PBDE183,
	L_PBDE197, PBDE197,
	L_PBDE209, PBDE209,
	PBDE,
	L_PBB, PBB,
	L_F4, F4,
	L_PF, PF,
	L_NP, NP,
	L_NPME, NPME,
	L_NPDE, NPDE,
	L_NPE, NPE,
	L_MBT, MBT,
	L_DBT, DBT,
	L_TBT, TBT,
	OSN,
    L_TCDF1, TCDF1,
	L_TCDD1, TCDD1,
	L_PECDF1, PECDF1,
	L_PECDF2, PECDF2,
	L_PECDD1, PECDD1,
	L_HXCDF1, HXCDF1,
	L_HXCDF2, HXCDF2,
	L_HXCDF3, HXCDF3,
	L_HXCDF4, HXCDF4,
	L_HXCDD1, HXCDD1,
	L_HXCDD2, HXCDD2,
	L_HXCDD3, HXCDD3,
	L_HPCDF1, HPCDF1,
	L_HPCDF2, HPCDF2,
	L_HPCDD1, HPCDD1,
	L_OCDF, OCDF,
	L_OCDD, OCDD,
    CDD
	
FROM 	WPG.TOXIC_SEDIMENT_X1
WHERE	VIEW_NO >= 2
and mdate <= getdate();


-- WPG.TOXIC_SEDIMENT2_PT2_ONLY_PCB source

CREATE VIEW [WPG].[TOXIC_SEDIMENT2_PT2_ONLY_PCB] AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	TYPE,
	L_PCB8, PCB8,
	L_PCB18, PCB18,
	L_PCB28, PCB28,
	L_PCB31, PCB31,
	L_PCB44, PCB44,
	L_PCB52, PCB52,
	L_PCB66, PCB66,
	L_PCB77, PCB77,
	L_PCB81, PCB81,
	L_PCB101, PCB101,
	L_PCB105, PCB105,
	L_PCB114, PCB114,
	L_PCB118, PCB118,
	L_PCB123, PCB123,
	L_PCB126, PCB126,
	L_PCB128, PCB128,
	L_PCB138, PCB138,
	L_PCB149, PCB149,
	L_PCB153, PCB153,
	L_PCB156, PCB156,
	L_PCB157, PCB157,
	L_PCB167, PCB167,
	L_PCB169, PCB169,
	L_PCB170, PCB170,
	L_PCB180, PCB180,
	L_PCB187, PCB187,
	L_PCB189, PCB189,
	PCB,
    L_DLPCB77, DLPCB77,
    L_DLPCB81, DLPCB81,
    L_DLPCB105, DLPCB105,
    L_DLPCB114, DLPCB114,
    L_DLPCB118, DLPCB118,
    L_DLPCB123, DLPCB123,
    L_DLPCB126, DLPCB126,
    L_DLPCB156, DLPCB156,
    L_DLPCB157, DLPCB157,
    L_DLPCB167, DLPCB167,
    L_DLPCB169, DLPCB169,
    L_DLPCB189, DLPCB189,
    DLPCB
FROM 	WPG.TOXIC_SEDIMENT_X1
WHERE	VIEW_NO >= 2
and mdate <= getdate();


-- WPG.TOXIC_SEDIMENT_AVG2 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT_AVG2] AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	YR,
	TOTAL,
	TYPE,
	TSM_DWR,
	TSO_DWR,
	TSD_DWR,
	TOC,
	TIC,
	TC,
	AL,
	AG,
	[AS],
	AS_INORG,
	BA,
	BE,
	CU,
	HG,
	SE,
	SN,
	TL,
	B,
	CD,
	CR,
	FE,
	MN,
	NI,
	PB,
	V,
	ZN,
	MO,
	SB,
	PCB8,
	PCB18,
	PCB28,
	PCB31,
	PCB44,
	PCB52,
	PCB66,
	PCB77,
	PCB81,
	PCB101,
	PCB105,
	PCB114,
	PCB118,
	PCB123,
	PCB126,
	PCB128,
	PCB138,
	PCB149,
	PCB153,
	PCB156,
	PCB157,
	PCB167,
	PCB169,
	PCB170,
	PCB180,
	PCB187,
	PCB189,
	PCB,
	NAPH,
	ACPH,
	ACEN,
	FLUO,
	PHEN,
	ANTH,
	FLUT,
	PYRE,
	BANT,
	CHRY,
	BBFL,
	BKFL,
	BAPY,
	DAAN,
	BGPE,
	INPY,
	PAH,
	PFOA,
	PFOS,
	PFOS_DWR,
	PECB,
	ALDR,
	CH,
	DIEL,
	ENDR,
	END1,
	END2,
	HEPO,
	HEPT,
	HCB,
	MIRX,
	GBHC,
	ABHC,
	BBHC,
	DBHC,
	HCH,
	ODDD,
	PDDD,
	ODDE,
	PDDE,
	ODDT,
	PDDT,
	DDT,
	KEPONE,
	TOX,
	TOX_P26,
	TOX_P50,
	TOX_P62,
	PBDE17,
	PBDE28,
	PBDE47,
	PBDE99,
	PBDE100,
	PBDE153,
	PBDE154,
	PBDE183,
	PBDE197,
	PBDE209,
	PBDE,
	PBB,
	F4,
	PF,
	NP,
	NPME,
	NPDE,
	NPE,
	MBT,
	DBT,
	TBT,
	OSN,
	E1,
	E2_17A,
	E2_17B,
	E3,
	EE2,
	BPA,
	TCDF1,
	TCDD1,
	PECDF1,
	PECDF2,
	PECDD1,
	HXCDF1,
	HXCDF2,
	HXCDF3,
	HXCDF4,
	HXCDD1,
	HXCDD2,
	HXCDD3,
	HPCDF1,
	HPCDF2,
	HPCDD1,
	OCDF,
	OCDD,
	CDD,
	DLPCB77,
	DLPCB81,
	DLPCB105,
	DLPCB114,
	DLPCB118,
	DLPCB123,
	DLPCB126,
	DLPCB156,
	DLPCB157,
	DLPCB167,
	DLPCB169,
	DLPCB189,
	DLPCB,
	PFOSF
FROM 	WPG.TOXIC_SEDIMENT_X_AVG1
WHERE	VIEW_NO >= 2
AND		YR <= YEAR(GETDATE());


-- WPG.TOXIC_SEDIMENT_CDD1 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT_CDD1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	CD.TYPE	 	TYPE,
	CD.L_TCDF1, CD.TCDF1,
	CD.L_TCDD1, CD.TCDD1,
	CD.L_PECDF1, CD.PECDF1,
	CD.L_PECDF2, CD.PECDF2,
	CD.L_PECDD1, CD.PECDD1,
	CD.L_HXCDF1, CD.HXCDF1,
	CD.L_HXCDF2, CD.HXCDF2,
	CD.L_HXCDF3, CD.HXCDF3,
	CD.L_HXCDF4, CD.HXCDF4,
	CD.L_HXCDD1, CD.HXCDD1,
	CD.L_HXCDD2, CD.HXCDD2,
	CD.L_HXCDD3, CD.HXCDD3,
	CD.L_HPCDF1, CD.HPCDF1,
	CD.L_HPCDF2, CD.HPCDF2,
	CD.L_HPCDD1, CD.HPCDD1,
	CD.L_OCDF, CD.OCDF,
	CD.L_OCDD, CD.OCDD,
    CD.CDD,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TS_VISIT	V
LEFT OUTER JOIN	WPG.TS_GLAB_CDD_CAL	CD	ON V.TSVISIT_ID = CD.TSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_SEDIMENT_CLAB1 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT_CLAB1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	CL.TYPE	 	TYPE,
	CL.L_PBB, CL.PBB,
	CL.L_F4, CL.F4,
	CL.L_PF, CL.PF,
	CL.L_NP, CL.NP,
	CL.L_NPME, CL.NPME,
	CL.L_NPDE, CL.NPDE,
	CL.L_NPE, CL.NPE,
	CL.L_MBT, CL.MBT,
	CL.L_DBT, CL.DBT,
	CL.L_TBT, CL.TBT,
	CL.OSN,
	CL.L_E1, CL.E1,
	CL.L_E2_17A, CL.E2_17A,
	CL.L_E2_17B, CL.E2_17B,
	CL.L_E3, CL.E3,
	CL.L_EE2, CL.EE2,
	CL.L_BPA, CL.BPA,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TS_VISIT	V
LEFT OUTER JOIN	WPG.TS_CLAB_CAL	CL	ON V.TSVISIT_ID = CL.TSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_SEDIMENT_CLABOC1 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT_CLABOC1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	OC.TYPE	 	TYPE,
	OC.L_ALDR, OC.ALDR,
	OC.L_CH, OC.CH,
	OC.L_DIEL, OC.DIEL,
	OC.L_ENDR, OC.ENDR,
	OC.L_HEPT, OC.HEPT,
	OC.L_HCB, OC.HCB,
	OC.L_MIRX, OC.MIRX,
	OC.L_TOX, OC.TOX,
	OC.L_ODDD, OC.ODDD,
	OC.L_PDDD, OC.PDDD,
	OC.L_ODDE, OC.ODDE,
	OC.L_PDDE, OC.PDDE,
	OC.L_ODDT, OC.ODDT,
	OC.L_PDDT, OC.PDDT,
	OC.DDT,
	OC.L_GBHC, OC.GBHC,
	OC.L_ABHC, OC.ABHC,
	OC.L_BBHC, OC.BBHC,
	OC.L_DBHC, OC.DBHC,
    OC.HCH,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TS_VISIT	V
LEFT OUTER JOIN	WPG.TS_CLAB_OC_CAL	OC	ON V.TSVISIT_ID = OC.TSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_SEDIMENT_DLPCB1 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT_DLPCB1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	DL.TYPE	 	TYPE,
    DL.L_DLPCB77, DL.DLPCB77,
    DL.L_DLPCB81, DL.DLPCB81,
    DL.L_DLPCB105, DL.DLPCB105,
    DL.L_DLPCB114, DL.DLPCB114,
    DL.L_DLPCB118, DL.DLPCB118,
    DL.L_DLPCB123, DL.DLPCB123,
    DL.L_DLPCB126, DL.DLPCB126,
    DL.L_DLPCB156, DL.DLPCB156,
    DL.L_DLPCB157, DL.DLPCB157,
    DL.L_DLPCB167, DL.DLPCB167,
    DL.L_DLPCB169, DL.DLPCB169,
    DL.L_DLPCB189, DL.DLPCB189,
    DL.DLPCB,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TS_VISIT	V
LEFT OUTER JOIN	WPG.TS_GLAB_DLPCB_CAL	DL	ON V.TSVISIT_ID = DL.TSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_SEDIMENT_GLABM1 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT_GLABM1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	M.TYPE	 	TYPE,
	M.TSM_DWR   TSM_DWR,
	M.L_AL, M.AL,
	M.L_AG, M.AG,
	M.L_AS, M.[AS],
	M.L_AS_INORG, M.AS_INORG,
	M.L_BA, M.BA,
	M.L_BE, M.BE,
	M.L_CU, M.CU,
	M.L_HG, M.HG,
	M.L_SE, M.SE,
	M.L_SN, M.SN,
	M.L_TL, M.TL,
	M.L_B, M.B,
	M.L_CD, M.CD,
	M.L_CR, M.CR,
	M.L_FE, M.FE,
	M.L_MN, M.MN,
	M.L_NI, M.NI,
	M.L_PB, M.PB,
	M.L_V, M.V,
	M.L_ZN, M.ZN,
	M.L_MO, M.MO,
	M.L_SB, M.SB,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TS_VISIT	V
LEFT OUTER JOIN	WPG.TS_GLABM_CAL	M	ON V.TSVISIT_ID = M.TSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_SEDIMENT_GLABN1 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT_GLABN1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	N.TYPE	 	TYPE,
	N.L_TOC, N.TOC,
	N.L_TIC, N.TIC,
	N.L_TC, N.TC,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TS_VISIT	V
LEFT OUTER JOIN	WPG.TS_GLABN_CAL 	N	ON V.TSVISIT_ID = N.TSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_SEDIMENT_OC1 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT_OC1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	OC.TYPE	 	TYPE,
	OC.L_PECB, OC.PECB,
	OC.L_ALDR, OC.ALDR,
	OC.L_CH, OC.CH,
	OC.L_DIEL, OC.DIEL,
	OC.L_ENDR, OC.ENDR,
	OC.L_END1, OC.END1,
	OC.L_END2, OC.END2,
	OC.L_HEPO, OC.HEPO,
	OC.L_HEPT, OC.HEPT,
	OC.L_HCB, OC.HCB,
	OC.L_MIRX, OC.MIRX,
	OC.L_GBHC, OC.GBHC,
	OC.L_ABHC, OC.ABHC,
	OC.L_BBHC, OC.BBHC,
	OC.L_DBHC, OC.DBHC,
	OC.L_HCH, OC.HCH,
	OC.L_ODDD, OC.ODDD,
	OC.L_PDDD, OC.PDDD,
	OC.L_ODDE, OC.ODDE,
	OC.L_PDDE, OC.PDDE,
	OC.L_ODDT, OC.ODDT,
	OC.L_PDDT, OC.PDDT,
	OC.DDT,
	OC.L_KEPONE, OC.KEPONE,
	OC.L_TOX, OC.TOX,
	OC.L_TOX_P26, OC.TOX_P26,
	OC.L_TOX_P50, OC.TOX_P50,
	OC.L_TOX_P62, OC.TOX_P62,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TS_VISIT	V
LEFT OUTER JOIN	
(SELECT * FROM WPG.TS_GLAB_OC_CAL UNION SELECT * FROM WPG.TS_CLAB_OC_CAL)	OC	ON V.TSVISIT_ID = OC.TSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_SEDIMENT_PAH1 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT_PAH1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME 	STIME,
	V.SAMPLE_NO 	SAM_NO,
	O2.TYPE	 	TYPE,
	O2.L_NAPH, O2.NAPH,
	O2.L_ACPH, O2.ACPH,
	O2.L_ACEN, O2.ACEN,
	O2.L_FLUO, O2.FLUO,
	O2.L_PHEN, O2.PHEN,
	O2.L_ANTH, O2.ANTH,
	O2.L_FLUT, O2.FLUT,
	O2.L_PYRE, O2.PYRE,
	O2.L_BANT, O2.BANT,
	O2.L_CHRY, O2.CHRY,
	O2.L_BBFL, O2.BBFL,
	O2.L_BKFL, O2.BKFL,
	O2.L_BAPY, O2.BAPY,
	O2.L_DAAN, O2.DAAN,
	O2.L_BGPE, O2.BGPE,
	O2.L_INPY, O2.INPY,
	O2.PAH,
	O2.L_PFOA, O2.PFOA,
	O2.L_PFOS, O2.PFOS,
	O2.PFOS_DWR,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TS_VISIT		V
LEFT OUTER JOIN	WPG.TS_GLAB_PAH_CAL		O2	ON V.TSVISIT_ID = O2.TSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION		ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ		SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ		CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE		TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_SEDIMENT_PBDE1 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT_PBDE1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	BD.TYPE	 	TYPE,
	BD.L_PBDE17, BD.PBDE17,
	BD.L_PBDE28, BD.PBDE28,
	BD.L_PBDE47, BD.PBDE47,
	BD.L_PBDE99, BD.PBDE99,
	BD.L_PBDE100, BD.PBDE100,
	BD.L_PBDE153, BD.PBDE153,
	BD.L_PBDE154, BD.PBDE154,
	BD.L_PBDE183, BD.PBDE183,
	BD.L_PBDE197, BD.PBDE197,
	BD.L_PBDE209, BD.PBDE209,
	BD.PBDE,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TS_VISIT	V
LEFT OUTER JOIN	WPG.TS_CLAB_PBDE_CAL	BD	ON V.TSVISIT_ID = BD.TSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_SEDIMENT_PCB1 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT_PCB1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	O1.TYPE	 	TYPE,
	O1.TSO_DWR   TSO_DWR,
	O1.L_PCB8, O1.PCB8,
	O1.L_PCB18, O1.PCB18,
	O1.L_PCB28, O1.PCB28,
	O1.L_PCB31, O1.PCB31,
	O1.L_PCB44, O1.PCB44,
	O1.L_PCB52, O1.PCB52,
	O1.L_PCB66, O1.PCB66,
	O1.L_PCB77, O1.PCB77,
	O1.L_PCB81, O1.PCB81,
	O1.L_PCB101, O1.PCB101,
	O1.L_PCB105, O1.PCB105,
	O1.L_PCB114, O1.PCB114,
	O1.L_PCB118, O1.PCB118,
	O1.L_PCB123, O1.PCB123,
	O1.L_PCB126, O1.PCB126,
	O1.L_PCB128, O1.PCB128,
	O1.L_PCB138, O1.PCB138,
	O1.L_PCB149, O1.PCB149,
	O1.L_PCB153, O1.PCB153,
	O1.L_PCB156, O1.PCB156,
	O1.L_PCB157, O1.PCB157,
	O1.L_PCB167, O1.PCB167,
	O1.L_PCB169, O1.PCB169,
	O1.L_PCB170, O1.PCB170,
	O1.L_PCB180, O1.PCB180,
	O1.L_PCB187, O1.PCB187,
	O1.L_PCB189, O1.PCB189,
	PCB,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TS_VISIT	V
LEFT OUTER JOIN	WPG.TS_GLAB_PCB_CAL	O1	ON V.TSVISIT_ID = O1.TSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_SEDIMENT_VISIT1 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT_VISIT1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO
FROM		WPG.TS_VISIT	V
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_SEDIMENT_X1 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT_X1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	'X'	 	TYPE,
	M.TSM_DWR 	TSM_DWR,
	O1.TSO_DWR 	TSO_DWR,
	CD.TSD_DWR 	TSD_DWR,
	N.L_TOC, N.TOC,
	N.L_TIC, N.TIC,
	N.L_TC, N.TC,
	M.L_AL, M.AL,
	M.L_AG, M.AG,
	M.L_AS, M.[AS],
	M.L_AS_INORG, M.AS_INORG,
	M.L_BA, M.BA,
	M.L_BE, M.BE,
	M.L_CU, M.CU,
	M.L_HG, M.HG,
	M.L_SE, M.SE,
	M.L_SN, M.SN,
	M.L_TL, M.TL,
	M.L_B, M.B,
	M.L_CD, M.CD,
	M.L_CR, M.CR,
	M.L_FE, M.FE,
	M.L_MN, M.MN,
	M.L_NI, M.NI,
	M.L_PB, M.PB,
	M.L_V, M.V,
	M.L_ZN, M.ZN,
	M.L_MO, M.MO,
	M.L_SB, M.SB,
	O1.L_PCB8, O1.PCB8,
	O1.L_PCB18, O1.PCB18,
	O1.L_PCB28, O1.PCB28,
	O1.L_PCB31, O1.PCB31,
	O1.L_PCB44, O1.PCB44,
	O1.L_PCB52, O1.PCB52,
	O1.L_PCB66, O1.PCB66,
	O1.L_PCB77, O1.PCB77,
	O1.L_PCB81, O1.PCB81,
	O1.L_PCB101, O1.PCB101,
	O1.L_PCB105, O1.PCB105,
	O1.L_PCB114, O1.PCB114,
	O1.L_PCB118, O1.PCB118,
	O1.L_PCB123, O1.PCB123,
	O1.L_PCB126, O1.PCB126,
	O1.L_PCB128, O1.PCB128,
	O1.L_PCB138, O1.PCB138,
	O1.L_PCB149, O1.PCB149,
	O1.L_PCB153, O1.PCB153,
	O1.L_PCB156, O1.PCB156,
	O1.L_PCB157, O1.PCB157,
	O1.L_PCB167, O1.PCB167,
	O1.L_PCB169, O1.PCB169,
	O1.L_PCB170, O1.PCB170,
	O1.L_PCB180, O1.PCB180,
	O1.L_PCB187, O1.PCB187,
	O1.L_PCB189, O1.PCB189,
	PCB,
    O2.L_NAPH, O2.NAPH,
	O2.L_ACPH, O2.ACPH,
	O2.L_ACEN, O2.ACEN,
	O2.L_FLUO, O2.FLUO,
	O2.L_PHEN, O2.PHEN,
	O2.L_ANTH, O2.ANTH,
	O2.L_FLUT, O2.FLUT,
	O2.L_PYRE, O2.PYRE,
	O2.L_BANT, O2.BANT,
	O2.L_CHRY, O2.CHRY,
	O2.L_BBFL, O2.BBFL,
	O2.L_BKFL, O2.BKFL,
	O2.L_BAPY, O2.BAPY,
	O2.L_DAAN, O2.DAAN,
	O2.L_BGPE, O2.BGPE,
	O2.L_INPY, O2.INPY,
	O2.PAH,
	O2.L_PFOA, O2.PFOA,
	O2.L_PFOS, O2.PFOS,
	O2.PFOS_DWR,
	OC.L_PECB, OC.PECB,
	OC.L_ALDR, OC.ALDR,
	OC.L_CH, OC.CH,
	OC.L_DIEL, OC.DIEL,
	OC.L_ENDR, OC.ENDR,
	OC.L_END1, OC.END1,
	OC.L_END2, OC.END2,
	OC.L_HEPO, OC.HEPO,
	OC.L_HEPT, OC.HEPT,
	OC.L_HCB, OC.HCB,
	OC.L_MIRX, OC.MIRX,
	OC.L_GBHC, OC.GBHC,
	OC.L_ABHC, OC.ABHC,
	OC.L_BBHC, OC.BBHC,
	OC.L_DBHC, OC.DBHC,
	OC.L_HCH, OC.HCH,
	OC.L_ODDD, OC.ODDD,
	OC.L_PDDD, OC.PDDD,
	OC.L_ODDE, OC.ODDE,
	OC.L_PDDE, OC.PDDE,
	OC.L_ODDT, OC.ODDT,
	OC.L_PDDT, OC.PDDT,
	OC.DDT,
	OC.L_KEPONE, OC.KEPONE,
	OC.L_TOX, OC.TOX,
	OC.L_TOX_P26, OC.TOX_P26,
	OC.L_TOX_P50, OC.TOX_P50,
	OC.L_TOX_P62, OC.TOX_P62,
	BD.L_PBDE17, BD.PBDE17,
	BD.L_PBDE28, BD.PBDE28,
	BD.L_PBDE47, BD.PBDE47,
	BD.L_PBDE99, BD.PBDE99,
	BD.L_PBDE100, BD.PBDE100,
	BD.L_PBDE153, BD.PBDE153,
	BD.L_PBDE154, BD.PBDE154,
	BD.L_PBDE183, BD.PBDE183,
	BD.L_PBDE197, BD.PBDE197,
	BD.L_PBDE209, BD.PBDE209,
	BD.PBDE,
	CL.L_PBB, CL.PBB,
	CL.L_F4, CL.F4,
	CL.L_PF, CL.PF,
	CL.L_NP, CL.NP,
	CL.L_NPME, CL.NPME,
	CL.L_NPDE, CL.NPDE,
	CL.L_NPE, CL.NPE,
	CL.L_MBT, CL.MBT,
	CL.L_DBT, CL.DBT,
	CL.L_TBT, CL.TBT,
	CL.OSN,
	CL.L_E1, CL.E1,
	CL.L_E2_17A, CL.E2_17A,
	CL.L_E2_17B, CL.E2_17B,
	CL.L_E3, CL.E3,
	CL.L_EE2, CL.EE2,
	CL.L_BPA, CL.BPA,
    CD.L_TCDF1, CD.TCDF1,
	CD.L_TCDD1, CD.TCDD1,
	CD.L_PECDF1, CD.PECDF1,
	CD.L_PECDF2, CD.PECDF2,
	CD.L_PECDD1, CD.PECDD1,
	CD.L_HXCDF1, CD.HXCDF1,
	CD.L_HXCDF2, CD.HXCDF2,
	CD.L_HXCDF3, CD.HXCDF3,
	CD.L_HXCDF4, CD.HXCDF4,
	CD.L_HXCDD1, CD.HXCDD1,
	CD.L_HXCDD2, CD.HXCDD2,
	CD.L_HXCDD3, CD.HXCDD3,
	CD.L_HPCDF1, CD.HPCDF1,
	CD.L_HPCDF2, CD.HPCDF2,
	CD.L_HPCDD1, CD.HPCDD1,
	CD.L_OCDF, CD.OCDF,
	CD.L_OCDD, CD.OCDD,
    CD.CDD,
	DL.L_DLPCB77, DL.DLPCB77,
    DL.L_DLPCB81, DL.DLPCB81,
    DL.L_DLPCB105, DL.DLPCB105,
    DL.L_DLPCB114, DL.DLPCB114,
    DL.L_DLPCB118, DL.DLPCB118,
    DL.L_DLPCB123, DL.DLPCB123,
    DL.L_DLPCB126, DL.DLPCB126,
    DL.L_DLPCB156, DL.DLPCB156,
    DL.L_DLPCB157, DL.DLPCB157,
    DL.L_DLPCB167, DL.DLPCB167,
    DL.L_DLPCB169, DL.DLPCB169,
    DL.L_DLPCB189, DL.DLPCB189,
    DL.DLPCB,
    BU.L_PFOSF, BU.PFOSF,
    ST.CMMVIEW	VIEW_NO
FROM	WPG.TS_VISIT						V
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_GLABM_CAL WHERE TYPE = 'X') 	M
	ON V.TSVISIT_ID = M.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_GLABN_CAL WHERE TYPE = 'X')	N
	ON V.TSVISIT_ID = N.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_GLAB_PCB_CAL WHERE TYPE = 'X')	O1
	ON V.TSVISIT_ID = O1.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_GLAB_PAH_CAL WHERE TYPE = 'X')	O2
	ON V.TSVISIT_ID = O2.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_GLAB_CDD_CAL WHERE TYPE = 'X') CD
	ON V.TSVISIT_ID = CD.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_CLAB_PBDE_CAL WHERE TYPE = 'X') BD
	ON V.TSVISIT_ID = BD.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_CLAB_OC_CAL WHERE TYPE = 'X'
	UNION	SELECT * FROM WPG.TS_GLAB_OC_CAL WHERE TYPE = 'X') OC
	ON V.TSVISIT_ID = OC.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_CLAB_CAL WHERE TYPE = 'X') CL
	ON V.TSVISIT_ID = CL.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_GLAB_DLPCB_CAL WHERE TYPE = 'X') DL
	ON V.TSVISIT_ID = DL.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_CLAB_BU_CAL WHERE TYPE = 'X')	BU
	ON V.TSVISIT_ID = BU.TSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION					ST
	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ					SZ
	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ					CZ
	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE					TZ
	ON CZ.ZONE_ID = TZ.ZONE_ID
WHERE M.TYPE IS NOT NULL OR N.TYPE IS NOT NULL OR O1.TYPE IS NOT NULL OR O2.TYPE IS NOT NULL 
OR OC.TYPE IS NOT NULL OR  BD.TYPE IS NOT NULL OR CL.TYPE IS NOT NULL OR CD.TYPE IS NOT NULL OR DL.TYPE IS NOT NULL;


-- WPG.TOXIC_SEDIMENT_X_AVG1 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT_X_AVG1] AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	YEAR(MDATE)	YR,
	COUNT(*)	TOTAL,
	TYPE,
	AVG(TSM_DWR)	TSM_DWR,
	AVG(TSO_DWR)	TSO_DWR,
	AVG(TSD_DWR)	TSD_DWR,
	AVG(TOC)	TOC,
	AVG(TIC)	TIC,
	AVG(TC)	TC,
	AVG(AL)	AL,
	AVG(AG)	AG,
	AVG([AS])	[AS],
	AVG(AS_INORG)	AS_INORG,
	AVG(BA)	BA,
	AVG(BE)	BE,
	AVG(CU)	CU,
	AVG(HG)	HG,
	AVG(SE)	SE,
	AVG(SN)	SN,
	AVG(TL)	TL,
	AVG(B) B,
	AVG(CD) CD,
	AVG(CR) CR,
	AVG(FE) FE,
	AVG(MN) MN,
	AVG(NI) NI,
	AVG(PB) PB,
	AVG(V) V,
	AVG(ZN) ZN,
	AVG(MO) MO,
	AVG(SB) SB,
	AVG(PCB8)	PCB8,
	AVG(PCB18)	PCB18,
	AVG(PCB28)	PCB28,
	AVG(PCB31)	PCB31,
	AVG(PCB44)	PCB44,
	AVG(PCB52)	PCB52,
	AVG(PCB66)	PCB66,
	AVG(PCB77)	PCB77,
	AVG(PCB81)	PCB81,
	AVG(PCB101)	PCB101,
	AVG(PCB105)	PCB105,
	AVG(PCB114)	PCB114,
	AVG(PCB118)	PCB118,
	AVG(PCB123)	PCB123,
	AVG(PCB126)	PCB126,
	AVG(PCB128)	PCB128,
	AVG(PCB138)	PCB138,
	AVG(PCB149)	PCB149,
	AVG(PCB153)	PCB153,
	AVG(PCB156)	PCB156,
	AVG(PCB157)	PCB157,
	AVG(PCB167)	PCB167,
	AVG(PCB169)	PCB169,
	AVG(PCB170)	PCB170,
	AVG(PCB180)	PCB180,
	AVG(PCB187)	PCB187,
	AVG(PCB189)	PCB189,
	AVG(PCB)	PCB,
	AVG(NAPH)	NAPH,
	AVG(ACPH)	ACPH,
	AVG(ACEN)	ACEN,
	AVG(FLUO)	FLUO,
	AVG(PHEN)	PHEN,
	AVG(ANTH)	ANTH,
	AVG(FLUT)	FLUT,
	AVG(PYRE)	PYRE,
	AVG(BANT)	BANT,
	AVG(CHRY)	CHRY,
	AVG(BBFL)	BBFL,
	AVG(BKFL)	BKFL,
	AVG(BAPY)	BAPY,
	AVG(DAAN)	DAAN,
	AVG(BGPE)	BGPE,
	AVG(INPY)	INPY,
	AVG(PAH)	PAH,
	AVG(PFOA)	PFOA,
	AVG(PFOS)	PFOS,
	AVG(PFOS_DWR)	PFOS_DWR,
	AVG(PECB)	PECB,
	AVG(ALDR)	ALDR,
	AVG(CH)		CH,
	AVG(DIEL)	DIEL,
	AVG(ENDR)	ENDR,
	AVG(END1)	END1,
	AVG(END2)	END2,
	AVG(HEPO)	HEPO,
	AVG(HEPT)	HEPT,
	AVG(HCB)	HCB,
	AVG(MIRX)	MIRX,
	AVG(GBHC)	GBHC,
	AVG(ABHC)	ABHC,
	AVG(BBHC)	BBHC,
	AVG(DBHC)	DBHC,
	AVG(HCH)	HCH,
	AVG(ODDD)	ODDD,
	AVG(PDDD)	PDDD,
	AVG(ODDE)	ODDE,
	AVG(PDDE)	PDDE,
	AVG(ODDT)	ODDT,
	AVG(PDDT)	PDDT,
	AVG(DDT)	DDT,
	AVG(KEPONE)	KEPONE,
	AVG(TOX)	TOX,
	AVG(TOX_P26)	TOX_P26,
	AVG(TOX_P50)	TOX_P50,
	AVG(TOX_P62)	TOX_P62,
	AVG(PBDE17)	PBDE17,
	AVG(PBDE28)	PBDE28,
	AVG(PBDE47)	PBDE47,
	AVG(PBDE99)	PBDE99,
	AVG(PBDE100)	PBDE100,
	AVG(PBDE153)	PBDE153,
	AVG(PBDE154)	PBDE154,
	AVG(PBDE183)	PBDE183,
	AVG(PBDE197)	PBDE197,
	AVG(PBDE209)	PBDE209,
	AVG(PBDE)	PBDE,
	AVG(PBB)	PBB,
	AVG(F4)	F4,
	AVG(PF)	PF,
	AVG(NP)	NP,
	AVG(NPME)	NPME,
	AVG(NPDE)	NPDE,
	AVG(NPE)	NPE,
	AVG(MBT)	MBT,
	AVG(DBT)	DBT,
	AVG(TBT)	TBT,
	AVG(OSN)	OSN,
	AVG(E1) 	E1,
	AVG(E2_17A) 	E2_17A,
	AVG(E2_17B) 	E2_17B,
	AVG(E3) 	E3,
	AVG(EE2) 	EE2,
	AVG(BPA) 	BPA,
	AVG(TCDF1)	TCDF1,
	AVG(TCDD1)	TCDD1,
	AVG(PECDF1)	PECDF1,
	AVG(PECDF2)	PECDF2,
	AVG(PECDD1)	PECDD1,
	AVG(HXCDF1)	HXCDF1,
	AVG(HXCDF2)	HXCDF2,
	AVG(HXCDF3)	HXCDF3,
	AVG(HXCDF4)	HXCDF4,
	AVG(HXCDD1)	HXCDD1,
	AVG(HXCDD2)	HXCDD2,
	AVG(HXCDD3)	HXCDD3,
	AVG(HPCDF1)	HPCDF1,
	AVG(HPCDF2)	HPCDF2,
	AVG(HPCDD1)	HPCDD1,
	AVG(OCDF)	OCDF,
	AVG(OCDD)	OCDD,
	AVG(CDD)	CDD,
	AVG(DLPCB77)	DLPCB77,
	AVG(DLPCB81)	DLPCB81,
	AVG(DLPCB105)	DLPCB105,
	AVG(DLPCB114)	DLPCB114,
	AVG(DLPCB118)	DLPCB118,
	AVG(DLPCB123)	DLPCB123,
	AVG(DLPCB126)	DLPCB126,
	AVG(DLPCB156)	DLPCB156,
	AVG(DLPCB157)	DLPCB157,
	AVG(DLPCB167)	DLPCB167,
	AVG(DLPCB169)	DLPCB169,
	AVG(DLPCB189)	DLPCB189,
	AVG(DLPCB)	DLPCB,
	AVG(PFOSF)	PFOSF,
	VIEW_NO	
FROM	WPG.TOXIC_SEDIMENT_X1
GROUP BY ZONE, WCZ, SUBZONE, STATION, YEAR(MDATE), TYPE, VIEW_NO;


-- WPG.TOXIC_SEDIMENT_Y1 source

CREATE VIEW [WPG].[TOXIC_SEDIMENT_Y1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MS_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	'Y'	 	TYPE,
	M.TSM_DWR 	TSM_DWR,
	O1.TSO_DWR 	TSO_DWR,
	CD.TSD_DWR 	TSD_DWR,
	N.L_TOC, N.TOC,
	N.L_TIC, N.TIC,
	N.L_TC, N.TC,
	M.L_AL, M.AL,
	M.L_AG, M.AG,
	M.L_AS, M.[AS],
	M.L_AS_INORG, M.AS_INORG,
	M.L_BA, M.BA,
	M.L_BE, M.BE,
	M.L_CU, M.CU,
	M.L_HG, M.HG,
	M.L_SE, M.SE,
	M.L_SN, M.SN,
	M.L_TL, M.TL,
	M.L_B, M.B,
	M.L_CD, M.CD,
	M.L_CR, M.CR,
	M.L_FE, M.FE,
	M.L_MN, M.MN,
	M.L_NI, M.NI,
	M.L_PB, M.PB,
	M.L_V, M.V,
	M.L_ZN, M.ZN,
	M.L_MO, M.MO,
	M.L_SB, M.SB,
	O1.L_PCB8, O1.PCB8,
	O1.L_PCB18, O1.PCB18,
	O1.L_PCB28, O1.PCB28,
	O1.L_PCB31, O1.PCB31,
	O1.L_PCB44, O1.PCB44,
	O1.L_PCB52, O1.PCB52,
	O1.L_PCB66, O1.PCB66,
	O1.L_PCB77, O1.PCB77,
	O1.L_PCB81, O1.PCB81,
	O1.L_PCB101, O1.PCB101,
	O1.L_PCB105, O1.PCB105,
	O1.L_PCB114, O1.PCB114,
	O1.L_PCB118, O1.PCB118,
	O1.L_PCB123, O1.PCB123,
	O1.L_PCB126, O1.PCB126,
	O1.L_PCB128, O1.PCB128,
	O1.L_PCB138, O1.PCB138,
	O1.L_PCB149, O1.PCB149,
	O1.L_PCB153, O1.PCB153,
	O1.L_PCB156, O1.PCB156,
	O1.L_PCB157, O1.PCB157,
	O1.L_PCB167, O1.PCB167,
	O1.L_PCB169, O1.PCB169,
	O1.L_PCB170, O1.PCB170,
	O1.L_PCB180, O1.PCB180,
	O1.L_PCB187, O1.PCB187,
	O1.L_PCB189, O1.PCB189,
	PCB,
    O2.L_NAPH, O2.NAPH,
	O2.L_ACPH, O2.ACPH,
	O2.L_ACEN, O2.ACEN,
	O2.L_FLUO, O2.FLUO,
	O2.L_PHEN, O2.PHEN,
	O2.L_ANTH, O2.ANTH,
	O2.L_FLUT, O2.FLUT,
	O2.L_PYRE, O2.PYRE,
	O2.L_BANT, O2.BANT,
	O2.L_CHRY, O2.CHRY,
	O2.L_BBFL, O2.BBFL,
	O2.L_BKFL, O2.BKFL,
	O2.L_BAPY, O2.BAPY,
	O2.L_DAAN, O2.DAAN,
	O2.L_BGPE, O2.BGPE,
	O2.L_INPY, O2.INPY,
	O2.PAH,
	O2.L_PFOA, O2.PFOA,
	O2.L_PFOS, O2.PFOS,
	O2.PFOS_DWR,
	OC.L_PECB, OC.PECB,
	OC.L_ALDR, OC.ALDR,
	OC.L_CH, OC.CH,
	OC.L_DIEL, OC.DIEL,
	OC.L_ENDR, OC.ENDR,
	OC.L_END1, OC.END1,
	OC.L_END2, OC.END2,
	OC.L_HEPO, OC.HEPO,
	OC.L_HEPT, OC.HEPT,
	OC.L_HCB, OC.HCB,
	OC.L_MIRX, OC.MIRX,
	OC.L_GBHC, OC.GBHC,
	OC.L_ABHC, OC.ABHC,
	OC.L_BBHC, OC.BBHC,
	OC.L_DBHC, OC.DBHC,
	OC.L_HCH, OC.HCH,
	OC.L_ODDD, OC.ODDD,
	OC.L_PDDD, OC.PDDD,
	OC.L_ODDE, OC.ODDE,
	OC.L_PDDE, OC.PDDE,
	OC.L_ODDT, OC.ODDT,
	OC.L_PDDT, OC.PDDT,
	OC.DDT,
	OC.L_KEPONE, OC.KEPONE,
	OC.L_TOX, OC.TOX,
	OC.L_TOX_P26, OC.TOX_P26,
	OC.L_TOX_P50, OC.TOX_P50,
	OC.L_TOX_P62, OC.TOX_P62,
	BD.L_PBDE17, BD.PBDE17,
	BD.L_PBDE28, BD.PBDE28,
	BD.L_PBDE47, BD.PBDE47,
	BD.L_PBDE99, BD.PBDE99,
	BD.L_PBDE100, BD.PBDE100,
	BD.L_PBDE153, BD.PBDE153,
	BD.L_PBDE154, BD.PBDE154,
	BD.L_PBDE183, BD.PBDE183,
	BD.L_PBDE197, BD.PBDE197,
	BD.L_PBDE209, BD.PBDE209,
	BD.PBDE,
	CL.L_PBB, CL.PBB,
	CL.L_F4, CL.F4,
	CL.L_PF, CL.PF,
	CL.L_NP, CL.NP,
	CL.L_NPME, CL.NPME,
	CL.L_NPDE, CL.NPDE,
	CL.L_NPE, CL.NPE,
	CL.L_MBT, CL.MBT,
	CL.L_DBT, CL.DBT,
	CL.L_TBT, CL.TBT,
	CL.OSN,
	CL.L_E1, CL.E1,
	CL.L_E2_17A, CL.E2_17A,
	CL.L_E2_17B, CL.E2_17B,
	CL.L_E3, CL.E3,
	CL.L_EE2, CL.EE2,
	CL.L_BPA, CL.BPA,
    CD.L_TCDF1, CD.TCDF1,
	CD.L_TCDD1, CD.TCDD1,
	CD.L_PECDF1, CD.PECDF1,
	CD.L_PECDF2, CD.PECDF2,
	CD.L_PECDD1, CD.PECDD1,
	CD.L_HXCDF1, CD.HXCDF1,
	CD.L_HXCDF2, CD.HXCDF2,
	CD.L_HXCDF3, CD.HXCDF3,
	CD.L_HXCDF4, CD.HXCDF4,
	CD.L_HXCDD1, CD.HXCDD1,
	CD.L_HXCDD2, CD.HXCDD2,
	CD.L_HXCDD3, CD.HXCDD3,
	CD.L_HPCDF1, CD.HPCDF1,
	CD.L_HPCDF2, CD.HPCDF2,
	CD.L_HPCDD1, CD.HPCDD1,
	CD.L_OCDF, CD.OCDF,
	CD.L_OCDD, CD.OCDD,
    CD.CDD,
	DL.L_DLPCB77, DL.DLPCB77,
    DL.L_DLPCB81, DL.DLPCB81,
    DL.L_DLPCB105, DL.DLPCB105,
    DL.L_DLPCB114, DL.DLPCB114,
    DL.L_DLPCB118, DL.DLPCB118,
    DL.L_DLPCB123, DL.DLPCB123,
    DL.L_DLPCB126, DL.DLPCB126,
    DL.L_DLPCB156, DL.DLPCB156,
    DL.L_DLPCB157, DL.DLPCB157,
    DL.L_DLPCB167, DL.DLPCB167,
    DL.L_DLPCB169, DL.DLPCB169,
    DL.L_DLPCB189, DL.DLPCB189,
    DL.DLPCB,
    BU.L_PFOSF, BU.PFOSF,
    ST.CMMVIEW	VIEW_NO
FROM	WPG.TS_VISIT						V
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_GLABM_CAL WHERE TYPE = 'Y') 	M
	ON V.TSVISIT_ID = M.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_GLABN_CAL WHERE TYPE = 'Y')	N
	ON V.TSVISIT_ID = N.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_GLAB_PCB_CAL WHERE TYPE = 'Y')	O1
	ON V.TSVISIT_ID = O1.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_GLAB_PAH_CAL WHERE TYPE = 'Y')	O2
	ON V.TSVISIT_ID = O2.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_GLAB_CDD_CAL WHERE TYPE = 'Y') CD
	ON V.TSVISIT_ID = CD.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_CLAB_PBDE_CAL WHERE TYPE = 'Y') BD
	ON V.TSVISIT_ID = CD.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_CLAB_OC_CAL WHERE TYPE = 'Y'
	UNION	SELECT * FROM WPG.TS_GLAB_OC_CAL WHERE TYPE = 'Y') OC
	ON V.TSVISIT_ID = OC.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_CLAB_CAL WHERE TYPE = 'Y') CL
	ON V.TSVISIT_ID = CL.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_GLAB_DLPCB_CAL WHERE TYPE = 'Y') DL
	ON V.TSVISIT_ID = DL.TSVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TS_CLAB_BU_CAL WHERE TYPE = 'Y')	BU
	ON V.TSVISIT_ID = BU.TSVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION					ST
	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ					SZ
	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ					CZ
	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE					TZ
	ON CZ.ZONE_ID = TZ.ZONE_ID
WHERE M.TYPE IS NOT NULL OR N.TYPE IS NOT NULL OR O1.TYPE IS NOT NULL OR O2.TYPE IS NOT NULL
OR OC.TYPE IS NOT NULL OR  BD.TYPE IS NOT NULL OR CL.TYPE IS NOT NULL OR CD.TYPE IS NOT NULL OR DL.TYPE IS NOT NULL;


-- WPG.TOXIC_WATER1 source

CREATE VIEW [WPG].[TOXIC_WATER1] AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	TYPE,
	L_AS_INORG, AS_INORG,
	L_AS, [AS],
	L_CD, CD,
	L_ZN, ZN,
	L_PCB8, PCB8,
	L_PCB18, PCB18,
	L_PCB28, PCB28,
	L_PCB31, PCB31,
	L_PCB44, PCB44,
	L_PCB52, PCB52,
	L_PCB66, PCB66,
	L_PCB77, PCB77,
	L_PCB81, PCB81,
	L_PCB101, PCB101,
	L_PCB105, PCB105,
	L_PCB114, PCB114,
	L_PCB118, PCB118,
	L_PCB123, PCB123,
	L_PCB126, PCB126,
	L_PCB128, PCB128,
	L_PCB138, PCB138,
	L_PCB149, PCB149,
	L_PCB153, PCB153,
	L_PCB156, PCB156,
	L_PCB157, PCB157,
	L_PCB167, PCB167,
	L_PCB169, PCB169,
	L_PCB170, PCB170,
	L_PCB180, PCB180,
	L_PCB187, PCB187,
	L_PCB189, PCB189,
	PCB,
	L_NAPH, NAPH,
	L_ACPH, ACPH,
	L_ACEN, ACEN,
	L_FLUO, FLUO,
	L_PHEN, PHEN,
	L_ANTH, ANTH,
	L_FLUT, FLUT,
	L_PYRE, PYRE,
	L_BANT, BANT,
	L_CHRY, CHRY,
	L_BBFL, BBFL,
	L_BKFL, BKFL,
	L_BAPY, BAPY,
	L_DAAN, DAAN,
	L_BGPE, BGPE,
	L_INPY, INPY,
	PAH,
	L_PFOA, PFOA,
	L_PFOS, PFOS,
	L_ABHC, ABHC,
	L_GBHC, GBHC,
	L_BBHC, BBHC,
	L_DBHC, DBHC,
	L_ODDE, ODDE,
	L_PDDE, PDDE,
	L_ODDD, ODDD,
	L_ODDT, ODDT,
	L_PDDD, PDDD,
	L_PDDT, PDDT,
	L_HCB, HCB,
	L_HEPT, HEPT,
	L_ALDR, ALDR,
	L_HEPO, HEPO,
	L_DIEL, DIEL,
	L_ENDR, ENDR,
	L_OCHD, OCHD,
	L_GCHD, GCHD,
	L_ACHD, ACHD,
	L_TNON, TNON,
	L_CNON, CNON,
	L_MIRX, MIRX,
	L_END1, END1, 
	L_END2, END2, 
	L_PECB, PECB, 
	L_KEPONE, KEPONE, 
	TOX,
	L_TOX_P26, TOX_P26,
	L_TOX_P50, TOX_P50,
	L_TOX_P62, TOX_P62,
	L_PBDE17, PBDE17,
	L_PBDE28, PBDE28,
	L_PBDE47, PBDE47,
	L_PBDE99, PBDE99,
	L_PBDE100, PBDE100,
	L_PBDE153, PBDE153,
	L_PBDE154, PBDE154,
	L_PBDE183, PBDE183,
	L_PBDE197, PBDE197,
	L_PBDE209, PBDE209,
	PBDE,
	L_PBB, PBB,
	L_PF, PF,
	L_NP, NP,
	L_NPME, NPME,
	L_NPDE, NPDE,
	L_NPE, NPE,
	L_MBT, MBT,
	L_DBT, DBT,
	L_TBT, TBT,
	OSN,
    TEQ_TYPE,
    L_TCDF1, TCDF1,
    L_TCDD1, TCDD1,
    L_PECDF1, PECDF1,
    L_PECDF2, PECDF2,
    L_PECDD1, PECDD1,
    L_HXCDF1, HXCDF1,
    L_HXCDF2, HXCDF2,
    L_HXCDF3, HXCDF3,
    L_HXCDF4, HXCDF4,
    L_HXCDD1, HXCDD1,
    L_HXCDD2, HXCDD2,
    L_HXCDD3, HXCDD3,
    L_HPCDF1, HPCDF1,
    L_HPCDF2, HPCDF2,
    L_HPCDD1, HPCDD1,
    L_OCDF, OCDF,
    L_OCDD, OCDD,
    CDD, 
    L_DLPCB81, DLPCB81,
    L_DLPCB77, DLPCB77,
    L_DLPCB123, DLPCB123,
    L_DLPCB118, DLPCB118,
    L_DLPCB114, DLPCB114,
    L_DLPCB105, DLPCB105,
    L_DLPCB126, DLPCB126,
    L_DLPCB167, DLPCB167,
    L_DLPCB156, DLPCB156,
    L_DLPCB157, DLPCB157,
    L_DLPCB169, DLPCB169,
    L_DLPCB189, DLPCB189,
    L_PFOSF, PFOSF,
	VIEW_NO
FROM	WPG.TOXIC_WATER_X1
UNION ALL
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	TYPE,
	L_AS_INORG, AS_INORG,
	L_AS, [AS],
	L_CD, CD,
	L_ZN, ZN,
	L_PCB8, PCB8,
	L_PCB18, PCB18,
	L_PCB28, PCB28,
	L_PCB31, PCB31,
	L_PCB44, PCB44,
	L_PCB52, PCB52,
	L_PCB66, PCB66,
	L_PCB77, PCB77,
	L_PCB81, PCB81,
	L_PCB101, PCB101,
	L_PCB105, PCB105,
	L_PCB114, PCB114,
	L_PCB118, PCB118,
	L_PCB123, PCB123,
	L_PCB126, PCB126,
	L_PCB128, PCB128,
	L_PCB138, PCB138,
	L_PCB149, PCB149,
	L_PCB153, PCB153,
	L_PCB156, PCB156,
	L_PCB157, PCB157,
	L_PCB167, PCB167,
	L_PCB169, PCB169,
	L_PCB170, PCB170,
	L_PCB180, PCB180,
	L_PCB187, PCB187,
	L_PCB189, PCB189,
	PCB,
	L_NAPH, NAPH,
	L_ACPH, ACPH,
	L_ACEN, ACEN,
	L_FLUO, FLUO,
	L_PHEN, PHEN,
	L_ANTH, ANTH,
	L_FLUT, FLUT,
	L_PYRE, PYRE,
	L_BANT, BANT,
	L_CHRY, CHRY,
	L_BBFL, BBFL,
	L_BKFL, BKFL,
	L_BAPY, BAPY,
	L_DAAN, DAAN,
	L_BGPE, BGPE,
	L_INPY, INPY,
	PAH,
	L_PFOA, PFOA,
	L_PFOS, PFOS,
	L_ABHC, ABHC,
	L_GBHC, GBHC,
	L_BBHC, BBHC,
	L_DBHC, DBHC,
	L_ODDE, ODDE,
	L_PDDE, PDDE,
	L_ODDD, ODDD,
	L_ODDT, ODDT,
	L_PDDD, PDDD,
	L_PDDT, PDDT,
	L_HCB, HCB,
	L_HEPT, HEPT,
	L_ALDR, ALDR,
	L_HEPO, HEPO,
	L_DIEL, DIEL,
	L_ENDR, ENDR,
	L_OCHD, OCHD,
	L_GCHD, GCHD,
	L_ACHD, ACHD,
	L_TNON, TNON,
	L_CNON, CNON,
	L_MIRX, MIRX,
	L_END1, END1, 
	L_END2, END2, 
	L_PECB, PECB, 
	L_KEPONE, KEPONE, 
	TOX,
	L_TOX_P26, TOX_P26,
	L_TOX_P50, TOX_P50,
	L_TOX_P62, TOX_P62,
	L_PBDE17, PBDE17,
	L_PBDE28, PBDE28,
	L_PBDE47, PBDE47,
	L_PBDE99, PBDE99,
	L_PBDE100, PBDE100,
	L_PBDE153, PBDE153,
	L_PBDE154, PBDE154,
	L_PBDE183, PBDE183,
	L_PBDE197, PBDE197,
	L_PBDE209, PBDE209,
	PBDE,
	L_PBB, PBB,
	L_PF, PF,
	L_NP, NP,
	L_NPME, NPME,
	L_NPDE, NPDE,
	L_NPE, NPE,
	L_MBT, MBT,
	L_DBT, DBT,
	L_TBT, TBT,
	OSN,
    TEQ_TYPE,
    L_TCDF1, TCDF1,
    L_TCDD1, TCDD1,
    L_PECDF1, PECDF1,
    L_PECDF2, PECDF2,
    L_PECDD1, PECDD1,
    L_HXCDF1, HXCDF1,
    L_HXCDF2, HXCDF2,
    L_HXCDF3, HXCDF3,
    L_HXCDF4, HXCDF4,
    L_HXCDD1, HXCDD1,
    L_HXCDD2, HXCDD2,
    L_HXCDD3, HXCDD3,
    L_HPCDF1, HPCDF1,
    L_HPCDF2, HPCDF2,
    L_HPCDD1, HPCDD1,
    L_OCDF, OCDF,
    L_OCDD, OCDD,
    CDD, 
    L_DLPCB81, DLPCB81,
    L_DLPCB77, DLPCB77,
    L_DLPCB123, DLPCB123,
    L_DLPCB118, DLPCB118,
    L_DLPCB114, DLPCB114,
    L_DLPCB105, DLPCB105,
    L_DLPCB126, DLPCB126,
    L_DLPCB167, DLPCB167,
    L_DLPCB156, DLPCB156,
    L_DLPCB157, DLPCB157,
    L_DLPCB169, DLPCB169,
    L_DLPCB189, DLPCB189,
    L_PFOSF, PFOSF,
    VIEW_NO
FROM	WPG.TOXIC_WATER_Y1;


-- WPG.TOXIC_WATER2 source

CREATE VIEW [WPG].[TOXIC_WATER2] AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	MDATE,
	STIME,
	SAM_NO,
	TYPE,
	L_AS_INORG, AS_INORG,
	L_AS, [AS],
	L_CD, CD,
	L_ZN, ZN,
	L_PCB8, PCB8,
	L_PCB18, PCB18,
	L_PCB28, PCB28,
	L_PCB31, PCB31,
	L_PCB44, PCB44,
	L_PCB52, PCB52,
	L_PCB66, PCB66,
	L_PCB77, PCB77,
	L_PCB81, PCB81,
	L_PCB101, PCB101,
	L_PCB105, PCB105,
	L_PCB114, PCB114,
	L_PCB118, PCB118,
	L_PCB123, PCB123,
	L_PCB126, PCB126,
	L_PCB128, PCB128,
	L_PCB138, PCB138,
	L_PCB149, PCB149,
	L_PCB153, PCB153,
	L_PCB156, PCB156,
	L_PCB157, PCB157,
	L_PCB167, PCB167,
	L_PCB169, PCB169,
	L_PCB170, PCB170,
	L_PCB180, PCB180,
	L_PCB187, PCB187,
	L_PCB189, PCB189,
	PCB,
	L_NAPH, NAPH,
	L_ACPH, ACPH,
	L_ACEN, ACEN,
	L_FLUO, FLUO,
	L_PHEN, PHEN,
	L_ANTH, ANTH,
	L_FLUT, FLUT,
	L_PYRE, PYRE,
	L_BANT, BANT,
	L_CHRY, CHRY,
	L_BBFL, BBFL,
	L_BKFL, BKFL,
	L_BAPY, BAPY,
	L_DAAN, DAAN,
	L_BGPE, BGPE,
	L_INPY, INPY,
	PAH,
	L_PFOA, PFOA,
	L_PFOS, PFOS,
	L_ABHC, ABHC,
	L_GBHC, GBHC,
	L_BBHC, BBHC,
	L_DBHC, DBHC,
	L_ODDE, ODDE,
	L_PDDE, PDDE,
	L_ODDD, ODDD,
	L_ODDT, ODDT,
	L_PDDD, PDDD,
	L_PDDT, PDDT,
	L_HCB, HCB,
	L_HEPT, HEPT,
	L_ALDR, ALDR,
	L_HEPO, HEPO,
	L_DIEL, DIEL,
	L_ENDR, ENDR,
	L_OCHD, OCHD,
	L_GCHD, GCHD,
	L_ACHD, ACHD,
	L_TNON, TNON,
	L_CNON, CNON,
	L_MIRX, MIRX,
	L_END1, END1, 
	L_END2, END2, 
	L_PECB, PECB, 
	L_KEPONE, KEPONE, 
	TOX,
	L_TOX_P26, TOX_P26,
	L_TOX_P50, TOX_P50,
	L_TOX_P62, TOX_P62,
	L_PBDE17, PBDE17,
	L_PBDE28, PBDE28,
	L_PBDE47, PBDE47,
	L_PBDE99, PBDE99,
	L_PBDE100, PBDE100,
	L_PBDE153, PBDE153,
	L_PBDE154, PBDE154,
	L_PBDE183, PBDE183,
	L_PBDE197, PBDE197,
	L_PBDE209, PBDE209,
	PBDE,
	L_PBB, PBB,
	L_PF, PF,
	L_NP, NP,
	L_NPME, NPME,
	L_NPDE, NPDE,
	L_NPE, NPE,
	L_MBT, MBT,
	L_DBT, DBT,
	L_TBT, TBT,
	OSN,
    TEQ_TYPE,
    L_TCDF1, TCDF1,
    L_TCDD1, TCDD1,
    L_PECDF1, PECDF1,
    L_PECDF2, PECDF2,
    L_PECDD1, PECDD1,
    L_HXCDF1, HXCDF1,
    L_HXCDF2, HXCDF2,
    L_HXCDF3, HXCDF3,
    L_HXCDF4, HXCDF4,
    L_HXCDD1, HXCDD1,
    L_HXCDD2, HXCDD2,
    L_HXCDD3, HXCDD3,
    L_HPCDF1, HPCDF1,
    L_HPCDF2, HPCDF2,
    L_HPCDD1, HPCDD1,
    L_OCDF, OCDF,
    L_OCDD, OCDD,
    CDD, 
    L_DLPCB81, DLPCB81,
    L_DLPCB77, DLPCB77,
    L_DLPCB123, DLPCB123,
    L_DLPCB118, DLPCB118,
    L_DLPCB114, DLPCB114,
    L_DLPCB105, DLPCB105,
    L_DLPCB126, DLPCB126,
    L_DLPCB167, DLPCB167,
    L_DLPCB156, DLPCB156,
    L_DLPCB157, DLPCB157,
    L_DLPCB169, DLPCB169,
    L_DLPCB189, DLPCB189,
    L_PFOSF, PFOSF
FROM 	WPG.TOXIC_WATER_X1
WHERE	VIEW_NO >= 2
and mdate <= getdate();


-- WPG.TOXIC_WATER_AVG2 source

CREATE VIEW [WPG].[TOXIC_WATER_AVG2] AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	YR,
	TOTAL,
	TYPE,
	AS_INORG,
	[AS],
	CD,
	ZN,
	PCB8,
	PCB18,
	PCB28,
	PCB31,
	PCB44,
	PCB52,
	PCB66,
	PCB77,
	PCB81,
	PCB101,
	PCB105,
	PCB114,
	PCB118,
	PCB123,
	PCB126,
	PCB128,
	PCB138,
	PCB149,
	PCB153,
	PCB156,
	PCB157,
	PCB167,
	PCB169,
	PCB170,
	PCB180,
	PCB187,
	PCB189,
	PCB,
	NAPH,
	ACPH,
	ACEN,
	FLUO,
	PHEN,
	ANTH,
	FLUT,
	PYRE,
	BANT,
	CHRY,
	BBFL,
	BKFL,
	BAPY,
	DAAN,
	BGPE,
	INPY,
	PAH,
	PFOA,
	PFOS,
	ABHC,
	GBHC,
	BBHC,
	DBHC,
	ODDE,
	PDDE,
	ODDD,
	ODDT,
	PDDD,
	PDDT,
	HCB,
	HEPT,
	ALDR,
	HEPO,
	DIEL,
	ENDR,
	OCHD,
	GCHD,
	ACHD,
	TNON,
	CNON,
	MIRX,
	END1, 
	END2, 
	PECB, 
	KEPONE, 
	TOX,
	TOX_P26,
	TOX_P50,
	TOX_P62,
	PBDE17,
	PBDE28,
	PBDE47,
	PBDE99,
	PBDE100,
	PBDE153,
	PBDE154,
	PBDE183,
	PBDE197,
	PBDE209,
	PBDE,
	PBB,
	PF,
	NP,
	NPME,
	NPDE,
	NPE,
	MBT,
	DBT,
	TBT,
	OSN,
	TCDF1,
	TCDD1,
	PECDF1,
	PECDF2,
	PECDD1,
	HXCDF1,
	HXCDF2,
	HXCDF3,
	HXCDF4,
	HXCDD1,
	HXCDD2,
	HXCDD3,
	HPCDF1,
	HPCDF2,
	HPCDD1,
	OCDF,
	OCDD,
	CDD,
	DLPCB81,
	DLPCB77,
	DLPCB123,
	DLPCB118,
	DLPCB114,
	DLPCB105,
	DLPCB126,
	DLPCB167,
	DLPCB156,
	DLPCB157,
	DLPCB169,
	DLPCB189,
	PFOSF
FROM 	WPG.TOXIC_WATER_X_AVG1
WHERE	VIEW_NO >= 2
AND		YR <= YEAR(GETDATE());


-- WPG.TOXIC_WATER_CDD1 source

CREATE VIEW [WPG].[TOXIC_WATER_CDD1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MW_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	CD.TYPE	 	TYPE,
	CD.TEQ_TYPE	TEQ_TYPE,
	CD.L_TCDF1, CD.TCDF1,
	CD.L_TCDD1, CD.TCDD1,
	CD.L_PECDF1, CD.PECDF1,
	CD.L_PECDF2, CD.PECDF2,
	CD.L_PECDD1, CD.PECDD1,
	CD.L_HXCDF1, CD.HXCDF1,
	CD.L_HXCDF2, CD.HXCDF2,
	CD.L_HXCDF3, CD.HXCDF3,
	CD.L_HXCDF4, CD.HXCDF4,
	CD.L_HXCDD1, CD.HXCDD1,
	CD.L_HXCDD2, CD.HXCDD2,
	CD.L_HXCDD3, CD.HXCDD3,
	CD.L_HPCDF1, CD.HPCDF1,
	CD.L_HPCDF2, CD.HPCDF2,
	CD.L_HPCDD1, CD.HPCDD1,
	CD.L_OCDF, CD.OCDF,
	CD.L_OCDD, CD.OCDD,
	CD.CDD,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TW_VISIT	V
LEFT OUTER JOIN	
(SELECT * FROM WPG.TW_CLAB_CDD_CAL	UNION	SELECT * FROM WPG.TW_GLAB_CDD_CAL	) CD	ON V.TWVISIT_ID = CD.TWVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_WATER_CLAB1 source

CREATE VIEW [WPG].[TOXIC_WATER_CLAB1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MW_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	CL.TYPE	 	TYPE,
	CL.L_PBB, CL.PBB,
	CL.L_PF, CL.PF,
	CL.L_NP, CL.NP,
	CL.L_NPME, CL.NPME,
	CL.L_NPDE, CL.NPDE,
	CL.L_NPE, CL.NPE,
	CL.L_MBT, CL.MBT,
	CL.L_DBT, CL.DBT,
	CL.L_TBT, CL.TBT,
	CL.OSN,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TW_VISIT	V
LEFT OUTER JOIN	WPG.TW_CLAB_CAL	CL	ON V.TWVISIT_ID = CL.TWVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_WATER_DLPCB1 source

CREATE VIEW [WPG].[TOXIC_WATER_DLPCB1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MW_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	DL.TYPE	 	TYPE,
    DL.L_DLPCB81, DL.DLPCB81,
    DL.L_DLPCB77, DL.DLPCB77,
    DL.L_DLPCB123, DL.DLPCB123,
    DL.L_DLPCB118, DL.DLPCB118,
    DL.L_DLPCB114, DL.DLPCB114,
    DL.L_DLPCB105, DL.DLPCB105,
    DL.L_DLPCB126, DL.DLPCB126,
    DL.L_DLPCB167, DL.DLPCB167,
    DL.L_DLPCB156, DL.DLPCB156,
    DL.L_DLPCB157, DL.DLPCB157,
    DL.L_DLPCB169, DL.DLPCB169,
    DL.L_DLPCB189, DL.DLPCB189,
    DL.DLPCB,
    ST.CMMVIEW	VIEW_NO
FROM		WPG.TW_VISIT	V
LEFT OUTER JOIN	WPG.TW_GLAB_DLPCB_CAL	DL	ON V.TWVISIT_ID = DL.TWVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_WATER_GLABM1 source

CREATE VIEW [WPG].[TOXIC_WATER_GLABM1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MW_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	M.TYPE	 	TYPE,
	M.L_CD, M.CD,
	M.L_ZN, M.ZN,
	M.L_AS, M.[AS],
	M.L_AS_INORG, M.AS_INORG,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TW_VISIT	V
LEFT OUTER JOIN	WPG.TW_GLABM_CAL	M	ON V.TWVISIT_ID = M.TWVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_WATER_OC1 source

CREATE VIEW [WPG].[TOXIC_WATER_OC1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MW_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME 	STIME,
	V.SAMPLE_NO 	SAM_NO,
	O3.TYPE	 	TYPE,
	O3.L_ABHC, O3.ABHC,
	O3.L_GBHC, O3.GBHC,
	O3.L_BBHC, O3.BBHC,
	O3.L_DBHC, O3.DBHC,
	O3.L_ODDE, O3.ODDE,
	O3.L_PDDE, O3.PDDE,
	O3.L_ODDD, O3.ODDD,
	O3.L_ODDT, O3.ODDT,
	O3.L_PDDD, O3.PDDD,
	O3.L_PDDT, O3.PDDT,
	O3.L_HCB, O3.HCB,
	O3.L_HEPT, O3.HEPT,
	O3.L_ALDR, O3.ALDR,
	O3.L_HEPO, O3.HEPO,
	O3.L_DIEL, O3.DIEL,
	O3.L_ENDR, O3.ENDR,
	O3.L_OCHD, O3.OCHD,
	O3.L_GCHD, O3.GCHD,
	O3.L_ACHD, O3.ACHD,
	O3.L_TNON, O3.TNON,
	O3.L_CNON, O3.CNON,
	O3.L_MIRX, O3.MIRX,
	O3.L_END1, O3.END1, 
	O3.L_END2, O3.END2, 
	O3.L_PECB, O3.PECB, 
	O3.L_KEPONE, O3.KEPONE, 
	O3.L_TOX, O3.TOX,
	O3.L_TOX_P26, O3.TOX_P26,
	O3.L_TOX_P50, O3.TOX_P50,
	O3.L_TOX_P62, O3.TOX_P62,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TW_VISIT		V
LEFT OUTER JOIN	WPG.TW_GLAB_OC_CAL		O3	ON V.TWVISIT_ID = O3.TWVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION		ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ		SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ		CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE		TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_WATER_PAH1 source

CREATE VIEW [WPG].[TOXIC_WATER_PAH1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MW_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME 	STIME,
	V.SAMPLE_NO 	SAM_NO,
	O2.TYPE	 	TYPE,
	O2.L_NAPH, O2.NAPH,
	O2.L_ACPH, O2.ACPH,
	O2.L_ACEN, O2.ACEN,
	O2.L_FLUO, O2.FLUO,
	O2.L_PHEN, O2.PHEN,
	O2.L_ANTH, O2.ANTH,
	O2.L_FLUT, O2.FLUT,
	O2.L_PYRE, O2.PYRE,
	O2.L_BANT, O2.BANT,
	O2.L_CHRY, O2.CHRY,
	O2.L_BBFL, O2.BBFL,
	O2.L_BKFL, O2.BKFL,
	O2.L_BAPY, O2.BAPY,
	O2.L_DAAN, O2.DAAN,
	O2.L_BGPE, O2.BGPE,
	O2.L_INPY, O2.INPY,
    O2.PAH,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TW_VISIT		V
LEFT OUTER JOIN	WPG.TW_GLAB_PAH_CAL		O2	ON V.TWVISIT_ID = O2.TWVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION		ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ		SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ		CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE		TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_WATER_PBDE1 source

CREATE VIEW [WPG].[TOXIC_WATER_PBDE1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MW_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	BD.TYPE	 	TYPE,
	BD.L_PBDE17, BD.PBDE17,
	BD.L_PBDE28, BD.PBDE28,
	BD.L_PBDE47, BD.PBDE47,
	BD.L_PBDE99, BD.PBDE99,
	BD.L_PBDE100, BD.PBDE100,
	BD.L_PBDE153, BD.PBDE153,
	BD.L_PBDE154, BD.PBDE154,
	BD.L_PBDE183, BD.PBDE183,
	BD.L_PBDE197, BD.PBDE197,
	BD.L_PBDE209, BD.PBDE209,
	BD.PBDE,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TW_VISIT	V
LEFT OUTER JOIN	WPG.TW_CLAB_PBDE_CAL BD	ON V.TWVISIT_ID = BD.TWVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_WATER_PCB1 source

CREATE VIEW [WPG].[TOXIC_WATER_PCB1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MW_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	O1.TYPE	 	TYPE,
	O1.L_PCB8, O1.PCB8,
	O1.L_PCB18, O1.PCB18,
	O1.L_PCB28, O1.PCB28,
	O1.L_PCB31, O1.PCB31,
	O1.L_PCB44, O1.PCB44,
	O1.L_PCB52, O1.PCB52,
	O1.L_PCB66, O1.PCB66,
	O1.L_PCB77, O1.PCB77,
	O1.L_PCB81, O1.PCB81,
	O1.L_PCB101, O1.PCB101,
	O1.L_PCB105, O1.PCB105,
	O1.L_PCB114, O1.PCB114,
	O1.L_PCB118, O1.PCB118,
	O1.L_PCB123, O1.PCB123,
	O1.L_PCB126, O1.PCB126,
	O1.L_PCB128, O1.PCB128,
	O1.L_PCB138, O1.PCB138,
	O1.L_PCB149, O1.PCB149,
	O1.L_PCB153, O1.PCB153,
	O1.L_PCB156, O1.PCB156,
	O1.L_PCB157, O1.PCB157,
	O1.L_PCB167, O1.PCB167,
	O1.L_PCB169, O1.PCB169,
	O1.L_PCB170, O1.PCB170,
	O1.L_PCB180, O1.PCB180,
	O1.L_PCB187, O1.PCB187,
	O1.L_PCB189, O1.PCB189,
	O1.PCB,
	ST.CMMVIEW	VIEW_NO
FROM		WPG.TW_VISIT	V
LEFT OUTER JOIN	WPG.TW_GLAB_PCB_CAL	O1	ON V.TWVISIT_ID = O1.TWVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_WATER_VISIT1 source

CREATE VIEW [WPG].[TOXIC_WATER_VISIT1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MW_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO
FROM		WPG.TW_VISIT	V
LEFT OUTER JOIN	WPG.MSTATION	ST	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ	SZ	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID = TZ.ZONE_ID;


-- WPG.TOXIC_WATER_X1 source

CREATE VIEW [WPG].[TOXIC_WATER_X1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MW_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	'X'	 	TYPE,
	M.L_AS_INORG, M.AS_INORG,
	M.L_AS, M.[AS],
	M.L_CD, M.CD,
	M.L_ZN, M.ZN,
	O1.L_PCB8, O1.PCB8,
	O1.L_PCB18, O1.PCB18,
	O1.L_PCB28, O1.PCB28,
	O1.L_PCB31, O1.PCB31,
	O1.L_PCB44, O1.PCB44,
	O1.L_PCB52, O1.PCB52,
	O1.L_PCB66, O1.PCB66,
	O1.L_PCB77, O1.PCB77,
	O1.L_PCB81, O1.PCB81,
	O1.L_PCB101, O1.PCB101,
	O1.L_PCB105, O1.PCB105,
	O1.L_PCB114, O1.PCB114,
	O1.L_PCB118, O1.PCB118,
	O1.L_PCB123, O1.PCB123,
	O1.L_PCB126, O1.PCB126,
	O1.L_PCB128, O1.PCB128,
	O1.L_PCB138, O1.PCB138,
	O1.L_PCB149, O1.PCB149,
	O1.L_PCB153, O1.PCB153,
	O1.L_PCB156, O1.PCB156,
	O1.L_PCB157, O1.PCB157,
	O1.L_PCB167, O1.PCB167,
	O1.L_PCB169, O1.PCB169,
	O1.L_PCB170, O1.PCB170,
	O1.L_PCB180, O1.PCB180,
	O1.L_PCB187, O1.PCB187,
	O1.L_PCB189, O1.PCB189,
	O1.PCB,
	O2.L_NAPH, O2.NAPH,
	O2.L_ACPH, O2.ACPH,
	O2.L_ACEN, O2.ACEN,
	O2.L_FLUO, O2.FLUO,
	O2.L_PHEN, O2.PHEN,
	O2.L_ANTH, O2.ANTH,
	O2.L_FLUT, O2.FLUT,
	O2.L_PYRE, O2.PYRE,
	O2.L_BANT, O2.BANT,
	O2.L_CHRY, O2.CHRY,
	O2.L_BBFL, O2.BBFL,
	O2.L_BKFL, O2.BKFL,
	O2.L_BAPY, O2.BAPY,
	O2.L_DAAN, O2.DAAN,
	O2.L_BGPE, O2.BGPE,
	O2.L_INPY, O2.INPY,
	O2.PAH,
	O2.L_PFOA, O2.PFOA,
	O2.L_PFOS, O2.PFOS,
	O3.L_ABHC, O3.ABHC,
	O3.L_GBHC, O3.GBHC,
	O3.L_BBHC, O3.BBHC,
	O3.L_DBHC, O3.DBHC,
	O3.L_ODDE, O3.ODDE,
	O3.L_PDDE, O3.PDDE,
	O3.L_ODDD, O3.ODDD,
	O3.L_ODDT, O3.ODDT,
	O3.L_PDDD, O3.PDDD,
	O3.L_PDDT, O3.PDDT,
	O3.L_HCB, O3.HCB,
	O3.L_HEPT, O3.HEPT,
	O3.L_ALDR, O3.ALDR,
	O3.L_HEPO, O3.HEPO,
	O3.L_DIEL, O3.DIEL,
	O3.L_ENDR, O3.ENDR,
	O3.L_OCHD, O3.OCHD,
	O3.L_GCHD, O3.GCHD,
	O3.L_ACHD, O3.ACHD,
	O3.L_TNON, O3.TNON,
	O3.L_CNON, O3.CNON,
	O3.L_MIRX, O3.MIRX,
	O3.L_END1, O3.END1, 
	O3.L_END2, O3.END2, 
	O3.L_PECB, O3.PECB, 
	O3.L_KEPONE, O3.KEPONE, 
	O3.TOX,
	O3.L_TOX_P26, O3.TOX_P26,
	O3.L_TOX_P50, O3.TOX_P50,
	O3.L_TOX_P62, O3.TOX_P62,
	BD.L_PBDE17, BD.PBDE17,
	BD.L_PBDE28, BD.PBDE28,
	BD.L_PBDE47, BD.PBDE47,
	BD.L_PBDE99, BD.PBDE99,
	BD.L_PBDE100, BD.PBDE100,
	BD.L_PBDE153, BD.PBDE153,
	BD.L_PBDE154, BD.PBDE154,
	BD.L_PBDE183, BD.PBDE183,
	BD.L_PBDE197, BD.PBDE197,
	BD.L_PBDE209, BD.PBDE209,
	BD.PBDE,
	CL.L_PBB, CL.PBB,
	CL.L_PF, CL.PF,
	CL.L_NP, CL.NP,
	CL.L_NPME, CL.NPME,
	CL.L_NPDE, CL.NPDE,
	CL.L_NPE, CL.NPE,
	CL.L_MBT, CL.MBT,
	CL.L_DBT, CL.DBT,
	CL.L_TBT, CL.TBT,
	CL.OSN,
    CD.TEQ_TYPE,
    CD.L_TCDF1, CD.TCDF1,
    CD.L_TCDD1, CD.TCDD1,
    CD.L_PECDF1, CD.PECDF1,
    CD.L_PECDF2, CD.PECDF2,
    CD.L_PECDD1, CD.PECDD1,
    CD.L_HXCDF1, CD.HXCDF1,
    CD.L_HXCDF2, CD.HXCDF2,
    CD.L_HXCDF3, CD.HXCDF3,
    CD.L_HXCDF4, CD.HXCDF4,
    CD.L_HXCDD1, CD.HXCDD1,
    CD.L_HXCDD2, CD.HXCDD2,
    CD.L_HXCDD3, CD.HXCDD3,
    CD.L_HPCDF1, CD.HPCDF1,
    CD.L_HPCDF2, CD.HPCDF2,
    CD.L_HPCDD1, CD.HPCDD1,
    CD.L_OCDF, CD.OCDF,
    CD.L_OCDD, CD.OCDD,
    CD.CDD, 
    DL.L_DLPCB81, DL.DLPCB81,
    DL.L_DLPCB77, DL.DLPCB77,
    DL.L_DLPCB123, DL.DLPCB123,
    DL.L_DLPCB118, DL.DLPCB118,
    DL.L_DLPCB114, DL.DLPCB114,
    DL.L_DLPCB105, DL.DLPCB105,
    DL.L_DLPCB126, DL.DLPCB126,
    DL.L_DLPCB167, DL.DLPCB167,
    DL.L_DLPCB156, DL.DLPCB156,
    DL.L_DLPCB157, DL.DLPCB157,
    DL.L_DLPCB169, DL.DLPCB169,
    DL.L_DLPCB189, DL.DLPCB189,
    BU.L_PFOSF, BU.PFOSF,
	ST.CMMVIEW	VIEW_NO
FROM	WPG.TW_VISIT						V
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_GLABM_CAL WHERE TYPE = 'X') 	M
	ON V.TWVISIT_ID = M.TWVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_GLAB_PCB_CAL WHERE TYPE = 'X')	O1
	ON V.TWVISIT_ID = O1.TWVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_GLAB_PAH_CAL WHERE TYPE = 'X')	O2
	ON V.TWVISIT_ID = O2.TWVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_GLAB_OC_CAL WHERE TYPE = 'X')	O3
	ON V.TWVISIT_ID = O3.TWVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_GLAB_CDD_CAL WHERE TYPE = 'X'
	UNION	 SELECT * FROM WPG.TW_CLAB_CDD_CAL WHERE TYPE = 'X')	CD
	ON V.TWVISIT_ID = CD.TWVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_GLAB_DLPCB_CAL WHERE TYPE = 'X')	DL
	ON V.TWVISIT_ID = DL.TWVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_CLAB_CAL WHERE TYPE = 'X')	CL
	ON V.TWVISIT_ID = CL.TWVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_CLAB_PBDE_CAL WHERE TYPE = 'X')	BD
	ON V.TWVISIT_ID = BD.TWVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_CLAB_BU_CAL WHERE TYPE = 'X')	BU
	ON V.TWVISIT_ID = BU.TWVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION					ST
	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ					SZ
	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ					CZ
	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE					TZ
	ON CZ.ZONE_ID = TZ.ZONE_ID
WHERE M.TYPE IS NOT NULL OR O1.TYPE IS NOT NULL OR O2.TYPE IS NOT NULL OR O3.TYPE IS NOT NULL;


-- WPG.TOXIC_WATER_X_AVG1 source

CREATE VIEW [WPG].[TOXIC_WATER_X_AVG1] AS
SELECT	ZONE,
	WCZ,
	SUBZONE,
	STATION,
	YEAR(MDATE)	YR,
	COUNT(*)	TOTAL,
	TYPE,
	AVG(AS_INORG)	AS_INORG,
	AVG([AS])	[AS],
	AVG(CD)	CD,
	AVG(ZN)	ZN,
	AVG(PCB8)	PCB8,
	AVG(PCB18)	PCB18,
	AVG(PCB28)	PCB28,
	AVG(PCB31)	PCB31,
	AVG(PCB44)	PCB44,
	AVG(PCB52)	PCB52,
	AVG(PCB66)	PCB66,
	AVG(PCB77)	PCB77,
	AVG(PCB81)	PCB81,
	AVG(PCB101)	PCB101,
	AVG(PCB105)	PCB105,
	AVG(PCB114)	PCB114,
	AVG(PCB118)	PCB118,
	AVG(PCB123)	PCB123,
	AVG(PCB126)	PCB126,
	AVG(PCB128)	PCB128,
	AVG(PCB138)	PCB138,
	AVG(PCB149)	PCB149,
	AVG(PCB153)	PCB153,
	AVG(PCB156)	PCB156,
	AVG(PCB157)	PCB157,
	AVG(PCB167)	PCB167,
	AVG(PCB169)	PCB169,
	AVG(PCB170)	PCB170,
	AVG(PCB180)	PCB180,
	AVG(PCB187)	PCB187,
	AVG(PCB189)	PCB189,
	AVG(PCB)	PCB,
	AVG(NAPH)	NAPH,
	AVG(ACPH)	ACPH,
	AVG(ACEN)	ACEN,
	AVG(FLUO)	FLUO,
	AVG(PHEN)	PHEN,
	AVG(ANTH)	ANTH,
	AVG(FLUT)	FLUT,
	AVG(PYRE)	PYRE,
	AVG(BANT)	BANT,
	AVG(CHRY)	CHRY,
	AVG(BBFL)	BBFL,
	AVG(BKFL)	BKFL,
	AVG(BAPY)	BAPY,
	AVG(DAAN)	DAAN,
	AVG(BGPE)	BGPE,
	AVG(INPY)	INPY,
	AVG(PAH)	PAH,
	AVG(PFOA)	PFOA,
	AVG(PFOS)	PFOS,
	AVG(ABHC)	ABHC,
	AVG(GBHC)	GBHC,
	AVG(BBHC)	BBHC,
	AVG(DBHC)	DBHC,
	AVG(ODDE)	ODDE,
	AVG(PDDE)	PDDE,
	AVG(ODDD)	ODDD,
	AVG(ODDT)	ODDT,
	AVG(PDDD)	PDDD,
	AVG(PDDT)	PDDT,
	AVG(HCB)	HCB,
	AVG(HEPT)	HEPT,
	AVG(ALDR)	ALDR,
	AVG(HEPO)	HEPO,
	AVG(DIEL)	DIEL,
	AVG(ENDR)	ENDR,
	AVG(OCHD)	OCHD,
	AVG(GCHD)	GCHD,
	AVG(ACHD)	ACHD,
	AVG(TNON)	TNON,
	AVG(CNON)	CNON,
	AVG(MIRX)	MIRX,
	AVG(END1)	END1, 
	AVG(END2)	END2, 
	AVG(PECB)	PECB, 
	AVG(KEPONE)	KEPONE, 
	AVG(TOX)	TOX,
	AVG(TOX_P26)	TOX_P26,
	AVG(TOX_P50)	TOX_P50,
	AVG(TOX_P62)	TOX_P62,
	AVG(PBDE17)	PBDE17,
	AVG(PBDE28)	PBDE28,
	AVG(PBDE47)	PBDE47,
	AVG(PBDE99)	PBDE99,
	AVG(PBDE100)	PBDE100,
	AVG(PBDE153)	PBDE153,
	AVG(PBDE154)	PBDE154,
	AVG(PBDE183)	PBDE183,
	AVG(PBDE197)	PBDE197,
	AVG(PBDE209)	PBDE209,
	AVG(PBDE)	PBDE,
	AVG(PBB)	PBB,
	AVG(PF)	PF,
	AVG(NP)	NP,
	AVG(NPME)	NPME,
	AVG(NPDE)	NPDE,
	AVG(NPE)	NPE,
	AVG(MBT)	MBT,
	AVG(DBT)	DBT,
	AVG(TBT)	TBT,
	AVG(OSN)	OSN,
	AVG(TCDF1)	TCDF1,
	AVG(TCDD1)	TCDD1,
	AVG(PECDF1)	PECDF1,
	AVG(PECDF2)	PECDF2,
	AVG(PECDD1)	PECDD1,
	AVG(HXCDF1)	HXCDF1,
	AVG(HXCDF2)	HXCDF2,
	AVG(HXCDF3)	HXCDF3,
	AVG(HXCDF4)	HXCDF4,
	AVG(HXCDD1)	HXCDD1,
	AVG(HXCDD2)	HXCDD2,
	AVG(HXCDD3)	HXCDD3,
	AVG(HPCDF1)	HPCDF1,
	AVG(HPCDF2)	HPCDF2,
	AVG(HPCDD1)	HPCDD1,
	AVG(OCDF)	OCDF,
	AVG(OCDD)	OCDD,
	AVG(CDD)	CDD,
	AVG(DLPCB81)	DLPCB81,
	AVG(DLPCB77)	DLPCB77,
	AVG(DLPCB123)	DLPCB123,
	AVG(DLPCB118)	DLPCB118,
	AVG(DLPCB114)	DLPCB114,
	AVG(DLPCB105)	DLPCB105,
	AVG(DLPCB126)	DLPCB126,
	AVG(DLPCB167)	DLPCB167,
	AVG(DLPCB156)	DLPCB156,
	AVG(DLPCB157)	DLPCB157,
	AVG(DLPCB169)	DLPCB169,
	AVG(DLPCB189)	DLPCB189,
	AVG(PFOSF)	PFOSF,
	VIEW_NO	
FROM	WPG.TOXIC_WATER_X1
GROUP BY ZONE, WCZ, SUBZONE, STATION, YEAR(MDATE), TYPE, VIEW_NO;


-- WPG.TOXIC_WATER_Y1 source

CREATE VIEW [WPG].[TOXIC_WATER_Y1] AS
SELECT 
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_NAME	WCZ,
	SZ.SZ_NAME 	SUBZONE,
	ST.MW_TS_NAME 	STATION,
	V.MDATE 	MDATE,
	V.STIME		STIME,
	V.SAMPLE_NO 	SAM_NO,
	'Y'	 	TYPE,
	M.L_AS_INORG, M.AS_INORG,
	M.L_AS, M.[AS],
	M.L_CD, M.CD,
	M.L_ZN, M.ZN,
	O1.L_PCB8, O1.PCB8,
	O1.L_PCB18, O1.PCB18,
	O1.L_PCB28, O1.PCB28,
	O1.L_PCB31, O1.PCB31,
	O1.L_PCB44, O1.PCB44,
	O1.L_PCB52, O1.PCB52,
	O1.L_PCB66, O1.PCB66,
	O1.L_PCB77, O1.PCB77,
	O1.L_PCB81, O1.PCB81,
	O1.L_PCB101, O1.PCB101,
	O1.L_PCB105, O1.PCB105,
	O1.L_PCB114, O1.PCB114,
	O1.L_PCB118, O1.PCB118,
	O1.L_PCB123, O1.PCB123,
	O1.L_PCB126, O1.PCB126,
	O1.L_PCB128, O1.PCB128,
	O1.L_PCB138, O1.PCB138,
	O1.L_PCB149, O1.PCB149,
	O1.L_PCB153, O1.PCB153,
	O1.L_PCB156, O1.PCB156,
	O1.L_PCB157, O1.PCB157,
	O1.L_PCB167, O1.PCB167,
	O1.L_PCB169, O1.PCB169,
	O1.L_PCB170, O1.PCB170,
	O1.L_PCB180, O1.PCB180,
	O1.L_PCB187, O1.PCB187,
	O1.L_PCB189, O1.PCB189,
	O1.PCB,
	O2.L_NAPH, O2.NAPH,
	O2.L_ACPH, O2.ACPH,
	O2.L_ACEN, O2.ACEN,
	O2.L_FLUO, O2.FLUO,
	O2.L_PHEN, O2.PHEN,
	O2.L_ANTH, O2.ANTH,
	O2.L_FLUT, O2.FLUT,
	O2.L_PYRE, O2.PYRE,
	O2.L_BANT, O2.BANT,
	O2.L_CHRY, O2.CHRY,
	O2.L_BBFL, O2.BBFL,
	O2.L_BKFL, O2.BKFL,
	O2.L_BAPY, O2.BAPY,
	O2.L_DAAN, O2.DAAN,
	O2.L_BGPE, O2.BGPE,
	O2.L_INPY, O2.INPY,
	O2.PAH,
	O2.L_PFOA, O2.PFOA,
	O2.L_PFOS, O2.PFOS,
	O3.L_ABHC, O3.ABHC,
	O3.L_GBHC, O3.GBHC,
	O3.L_BBHC, O3.BBHC,
	O3.L_DBHC, O3.DBHC,
	O3.L_ODDE, O3.ODDE,
	O3.L_PDDE, O3.PDDE,
	O3.L_ODDD, O3.ODDD,
	O3.L_ODDT, O3.ODDT,
	O3.L_PDDD, O3.PDDD,
	O3.L_PDDT, O3.PDDT,
	O3.L_HCB, O3.HCB,
	O3.L_HEPT, O3.HEPT,
	O3.L_ALDR, O3.ALDR,
	O3.L_HEPO, O3.HEPO,
	O3.L_DIEL, O3.DIEL,
	O3.L_ENDR, O3.ENDR,
	O3.L_OCHD, O3.OCHD,
	O3.L_GCHD, O3.GCHD,
	O3.L_ACHD, O3.ACHD,
	O3.L_TNON, O3.TNON,
	O3.L_CNON, O3.CNON,
	O3.L_MIRX, O3.MIRX,
	O3.L_END1, O3.END1, 
	O3.L_END2, O3.END2, 
	O3.L_PECB, O3.PECB, 
	O3.L_KEPONE, O3.KEPONE, 
	O3.TOX,
	O3.L_TOX_P26, O3.TOX_P26,
	O3.L_TOX_P50, O3.TOX_P50,
	O3.L_TOX_P62, O3.TOX_P62,
	BD.L_PBDE17, BD.PBDE17,
	BD.L_PBDE28, BD.PBDE28,
	BD.L_PBDE47, BD.PBDE47,
	BD.L_PBDE99, BD.PBDE99,
	BD.L_PBDE100, BD.PBDE100,
	BD.L_PBDE153, BD.PBDE153,
	BD.L_PBDE154, BD.PBDE154,
	BD.L_PBDE183, BD.PBDE183,
	BD.L_PBDE197, BD.PBDE197,
	BD.L_PBDE209, BD.PBDE209,
	BD.PBDE,
	CL.L_PBB, CL.PBB,
	CL.L_PF, CL.PF,
	CL.L_NP, CL.NP,
	CL.L_NPME, CL.NPME,
	CL.L_NPDE, CL.NPDE,
	CL.L_NPE, CL.NPE,
	CL.L_MBT, CL.MBT,
	CL.L_DBT, CL.DBT,
	CL.L_TBT, CL.TBT,
	CL.OSN,
    CD.TEQ_TYPE,    	
    CD.L_TCDF1, CD.TCDF1,
    CD.L_TCDD1, CD.TCDD1,
    CD.L_PECDF1, CD.PECDF1,
    CD.L_PECDF2, CD.PECDF2,
    CD.L_PECDD1, CD.PECDD1,
    CD.L_HXCDF1, CD.HXCDF1,
    CD.L_HXCDF2, CD.HXCDF2,
    CD.L_HXCDF3, CD.HXCDF3,
    CD.L_HXCDF4, CD.HXCDF4,
    CD.L_HXCDD1, CD.HXCDD1,
    CD.L_HXCDD2, CD.HXCDD2,
    CD.L_HXCDD3, CD.HXCDD3,
    CD.L_HPCDF1, CD.HPCDF1,
    CD.L_HPCDF2, CD.HPCDF2,
    CD.L_HPCDD1, CD.HPCDD1,
    CD.L_OCDF, CD.OCDF,
    CD.L_OCDD, CD.OCDD,
    CD.CDD, 
    DL.L_DLPCB81, DL.DLPCB81,
    DL.L_DLPCB77, DL.DLPCB77,
    DL.L_DLPCB123, DL.DLPCB123,
    DL.L_DLPCB118, DL.DLPCB118,
    DL.L_DLPCB114, DL.DLPCB114,
    DL.L_DLPCB105, DL.DLPCB105,
    DL.L_DLPCB126, DL.DLPCB126,
    DL.L_DLPCB167, DL.DLPCB167,
    DL.L_DLPCB156, DL.DLPCB156,
    DL.L_DLPCB157, DL.DLPCB157,
    DL.L_DLPCB169, DL.DLPCB169,
    DL.L_DLPCB189, DL.DLPCB189,
    BU.L_PFOSF, BU.PFOSF,
	ST.CMMVIEW	VIEW_NO
FROM	WPG.TW_VISIT						V
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_GLABM_CAL WHERE TYPE = 'Y') 	M
	ON V.TWVISIT_ID = M.TWVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_GLAB_PCB_CAL WHERE TYPE = 'Y')	O1
	ON V.TWVISIT_ID = O1.TWVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_GLAB_PAH_CAL WHERE TYPE = 'Y')	O2
	ON V.TWVISIT_ID = O2.TWVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_GLAB_OC_CAL WHERE TYPE = 'Y')	O3
	ON V.TWVISIT_ID = O3.TWVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_GLAB_CDD_CAL WHERE TYPE = 'Y'
	UNION	 SELECT * FROM WPG.TW_CLAB_CDD_CAL WHERE TYPE = 'Y')	CD
	ON V.TWVISIT_ID = CD.TWVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_GLAB_DLPCB_CAL WHERE TYPE = 'Y')	DL
	ON V.TWVISIT_ID = DL.TWVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_CLAB_CAL WHERE TYPE = 'Y')	CL
	ON V.TWVISIT_ID = CL.TWVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_CLAB_PBDE_CAL WHERE TYPE = 'Y')	BD
	ON V.TWVISIT_ID = BD.TWVISIT_ID
LEFT OUTER JOIN	(SELECT * FROM WPG.TW_CLAB_BU_CAL WHERE TYPE = 'Y')	BU
	ON V.TWVISIT_ID = BU.TWVISIT_ID
LEFT OUTER JOIN	WPG.MSTATION					ST
	ON V.SITE_ID = ST.SITE_ID
LEFT OUTER JOIN	WPG.WPCO_SZ					SZ
	ON ST.SZ_ID = SZ.SZ_ID
LEFT OUTER JOIN	WPG.WPCO_WCZ					CZ
	ON SZ.WCZ_ID = CZ.WCZ_ID
LEFT OUTER JOIN	WPG.TEN_ZONE					TZ
	ON CZ.ZONE_ID = TZ.ZONE_ID
WHERE M.TYPE IS NOT NULL OR O1.TYPE IS NOT NULL OR O2.TYPE IS NOT NULL OR O3.TYPE IS NOT NULL;


-- WPG.TS_CLAB_BU_CAL source

CREATE VIEW [WPG].[TS_CLAB_BU_CAL] AS
SELECT 
	TSVISIT_ID,
	TYPE,
	L_PFOSF, PFOSF
FROM		WPG.TS_CLAB_BU;


-- WPG.TS_CLAB_CAL source

CREATE VIEW [WPG].[TS_CLAB_CAL] AS
SELECT 
	TSVISIT_ID,
	TYPE,
	L_PBB, PBB,
	L_F4, F4,
	L_PF, PF,
	L_NP, NP,
	L_NPME, NPME,
	L_NPDE, NPDE,
	L_NPE, NPE,
	L_MBT, MBT,
	L_DBT, DBT,
	L_TBT, TBT,
	CASE L_MBT  WHEN '<' THEN MBT/2 ELSE MBT END
	+ CASE L_DBT  WHEN '<' THEN DBT/2 ELSE DBT END
	+ CASE L_TBT  WHEN '<' THEN TBT/2 ELSE TBT END
	OSN,
	L_E1, E1,
	L_E2_17A, E2_17A,
	L_E2_17B, E2_17B,
	L_E3, E3,
	L_EE2, EE2,
	L_BPA, BPA
FROM		WPG.TS_CLAB;


-- WPG.TS_CLAB_OC_CAL source

CREATE VIEW [WPG].[TS_CLAB_OC_CAL] AS
SELECT 
	TSVISIT_ID,
	TYPE,
	N'' L_PECB, NULL PECB,
	L_ALDR, ALDR,
	L_CH, CH,
	L_DIEL, DIEL,
	L_ENDR, ENDR,
	N'' L_END1, NULL END1,
	N'' L_END2, NULL END2,
	N'' L_HEPO, NULL HEPO,
	L_HEPT, HEPT,
	L_HCB, HCB,
	L_MIRX, MIRX,
	L_GBHC, GBHC,
	L_ABHC, ABHC,
	L_BBHC, BBHC,
	L_DBHC, DBHC,
	N'' L_HCH, 
	CASE L_GBHC  WHEN '<' THEN GBHC/2 ELSE GBHC END
	+ CASE L_ABHC  WHEN '<' THEN ABHC/2 ELSE ABHC END
	+ CASE L_BBHC  WHEN '<' THEN BBHC/2 ELSE BBHC END
	+ CASE L_DBHC  WHEN '<' THEN DBHC/2 ELSE DBHC END
	HCH,
	L_ODDD, ODDD,	
	L_PDDD, PDDD,	
	L_ODDE, ODDE,	
	L_PDDE, PDDE,	
	L_ODDT, ODDT,	
	L_PDDT, PDDT,	
	CASE L_ODDD  WHEN '<' THEN ODDD/2 ELSE ODDD END
	+ CASE L_PDDD  WHEN '<' THEN PDDD/2 ELSE PDDD END
	+ CASE L_ODDE  WHEN '<' THEN ODDE/2 ELSE ODDE END
	+ CASE L_PDDE  WHEN '<' THEN PDDE/2 ELSE PDDE END
	+ CASE L_ODDT  WHEN '<' THEN ODDT/2 ELSE ODDT END
	+ CASE L_PDDT  WHEN '<' THEN PDDT/2 ELSE PDDT END
	DDT,
	N'' L_KEPONE, NULL KEPONE,
    L_TOX, TOX,
	N'' L_TOX_P26, NULL TOX_P26,
	N'' L_TOX_P50, NULL TOX_P50,
	N'' L_TOX_P62, NULL TOX_P62
FROM		WPG.TS_CLAB_OC;


-- WPG.TS_CLAB_PBDE_CAL source

CREATE VIEW [WPG].[TS_CLAB_PBDE_CAL] AS
SELECT 
	TSVISIT_ID,
	TYPE,
	L_PBDE17, PBDE17,
	L_PBDE28, PBDE28,
	L_PBDE47, PBDE47,
	L_PBDE99, PBDE99,
	L_PBDE100, PBDE100,
	L_PBDE153, PBDE153,
	L_PBDE154, PBDE154,
	L_PBDE183, PBDE183,
	L_PBDE197, PBDE197,
	L_PBDE209, PBDE209,
	CASE L_PBDE17  WHEN '<' THEN PBDE17/2 ELSE PBDE17 END
	+ CASE L_PBDE28  WHEN '<' THEN PBDE28/2 ELSE PBDE28 END
	+ CASE L_PBDE47  WHEN '<' THEN PBDE47/2 ELSE PBDE47 END
	+ CASE L_PBDE99  WHEN '<' THEN PBDE99/2 ELSE PBDE99 END
	+ CASE L_PBDE100  WHEN '<' THEN PBDE100/2 ELSE PBDE100 END
	+ CASE L_PBDE153  WHEN '<' THEN PBDE153/2 ELSE PBDE153 END
	+ CASE L_PBDE154  WHEN '<' THEN PBDE154/2 ELSE PBDE154 END
	+ CASE L_PBDE183  WHEN '<' THEN PBDE183/2 ELSE PBDE183 END
	+ CASE L_PBDE197  WHEN '<' THEN PBDE197/2 ELSE PBDE197 END
	+ CASE L_PBDE209  WHEN '<' THEN PBDE209/2 ELSE PBDE209 END
	PBDE
FROM		WPG.TS_CLAB_PBDE;


-- WPG.TS_GLABM_CAL source

CREATE VIEW [WPG].[TS_GLABM_CAL] AS
SELECT  *
FROM		WPG.TS_GLABM;


-- WPG.TS_GLABN_CAL source

CREATE VIEW [WPG].[TS_GLABN_CAL] AS
SELECT  *
FROM		WPG.TS_GLABN;


-- WPG.TS_GLAB_CDD_CAL source

CREATE VIEW [WPG].[TS_GLAB_CDD_CAL] AS
SELECT 
	TSVISIT_ID,
	TYPE,
    TSD_DWR,
	L_TCDF1, TCDF1,	
	L_TCDD1, TCDD1,	
	L_PECDF1, PECDF1,	
	L_PECDF2, PECDF2,	
	L_PECDD1, PECDD1,	
	L_HXCDF1, HXCDF1,	
	L_HXCDF2, HXCDF2,	
	L_HXCDF3, HXCDF3,	
	L_HXCDF4, HXCDF4,	
	L_HXCDD1, HXCDD1,	
	L_HXCDD2, HXCDD2,	
	L_HXCDD3, HXCDD3,	
	L_HPCDF1, HPCDF1,	
	L_HPCDF2, HPCDF2,	
	L_HPCDD1, HPCDD1,	
	L_OCDF, OCDF,	
	L_OCDD, OCDD,	
	CASE L_TCDF1  WHEN '<' THEN TCDF1/2 ELSE TCDF1 END
	+ CASE L_TCDD1  WHEN '<' THEN TCDD1/2 ELSE TCDD1 END
	+ CASE L_PECDF1  WHEN '<' THEN PECDF1/2 ELSE PECDF1 END
	+ CASE L_PECDF2  WHEN '<' THEN PECDF2/2 ELSE PECDF2 END
	+ CASE L_PECDD1  WHEN '<' THEN PECDD1/2 ELSE PECDD1 END
	+ CASE L_HXCDF1  WHEN '<' THEN HXCDF1/2 ELSE HXCDF1 END
	+ CASE L_HXCDF2  WHEN '<' THEN HXCDF2/2 ELSE HXCDF2 END
	+ CASE L_HXCDF3  WHEN '<' THEN HXCDF3/2 ELSE HXCDF3 END
	+ CASE L_HXCDF4  WHEN '<' THEN HXCDF4/2 ELSE HXCDF4 END
	+ CASE L_HXCDD1  WHEN '<' THEN HXCDD1/2 ELSE HXCDD1 END
	+ CASE L_HXCDD2  WHEN '<' THEN HXCDD2/2 ELSE HXCDD2 END
	+ CASE L_HXCDD3  WHEN '<' THEN HXCDD3/2 ELSE HXCDD3 END
	+ CASE L_HPCDF1  WHEN '<' THEN HPCDF1/2 ELSE HPCDF1 END
	+ CASE L_HPCDF2  WHEN '<' THEN HPCDF2/2 ELSE HPCDF2 END
	+ CASE L_HPCDD1  WHEN '<' THEN HPCDD1/2 ELSE HPCDD1 END
	+ CASE L_OCDF  WHEN '<' THEN OCDF/2 ELSE OCDF END
	+ CASE L_OCDD  WHEN '<' THEN OCDD/2 ELSE OCDD END
	CDD
FROM		WPG.TS_GLAB_CDD;


-- WPG.TS_GLAB_DLPCB_CAL source

CREATE VIEW [WPG].[TS_GLAB_DLPCB_CAL] AS
SELECT 
	TSVISIT_ID,
	TYPE,
	L_DLPCB77, DLPCB77,
	L_DLPCB81, DLPCB81,
	L_DLPCB105, DLPCB105,
	L_DLPCB114, DLPCB114,
	L_DLPCB118, DLPCB118,
	L_DLPCB123, DLPCB123,
	L_DLPCB126, DLPCB126,
	L_DLPCB156, DLPCB156,
	L_DLPCB157, DLPCB157,
	L_DLPCB167, DLPCB167,
	L_DLPCB169, DLPCB169,
	L_DLPCB189, DLPCB189,
	CASE L_DLPCB77  WHEN '<' THEN DLPCB77/2 ELSE DLPCB77 END
	+ CASE L_DLPCB81  WHEN '<' THEN DLPCB81/2 ELSE DLPCB81 END
	+ CASE L_DLPCB105  WHEN '<' THEN DLPCB105/2 ELSE DLPCB105 END
	+ CASE L_DLPCB114  WHEN '<' THEN DLPCB114/2 ELSE DLPCB114 END
	+ CASE L_DLPCB118  WHEN '<' THEN DLPCB118/2 ELSE DLPCB118 END
	+ CASE L_DLPCB123  WHEN '<' THEN DLPCB123/2 ELSE DLPCB123 END
	+ CASE L_DLPCB126  WHEN '<' THEN DLPCB126/2 ELSE DLPCB126 END
	+ CASE L_DLPCB156  WHEN '<' THEN DLPCB156/2 ELSE DLPCB156 END
	+ CASE L_DLPCB157  WHEN '<' THEN DLPCB157/2 ELSE DLPCB157 END
	+ CASE L_DLPCB167  WHEN '<' THEN DLPCB167/2 ELSE DLPCB167 END
	+ CASE L_DLPCB169  WHEN '<' THEN DLPCB169/2 ELSE DLPCB169 END
	+ CASE L_DLPCB189  WHEN '<' THEN DLPCB189/2 ELSE DLPCB189 END
	DLPCB
FROM		WPG.TS_GLAB_DLPCB;


-- WPG.TS_GLAB_OC_CAL source

CREATE VIEW [WPG].[TS_GLAB_OC_CAL] AS
SELECT 
	TSVISIT_ID,
	TYPE,
	L_PECB, PECB,
	L_ALDR, ALDR,
	L_CH, CH,
	L_DIEL, DIEL,
	L_ENDR, ENDR,
	L_END1, END1,
	L_END2, END2,
	L_HEPO, HEPO,
	L_HEPT, HEPT,
	L_HCB, HCB,
	L_MIRX, MIRX,
	L_GBHC, GBHC,
	L_ABHC, ABHC,
	L_BBHC, BBHC,
	L_DBHC, DBHC,
    L_HCH,
    CASE WHEN (HCH IS NOT NULL) AND HCH <> 0 THEN HCH ELSE (	
        CASE L_GBHC  WHEN '<' THEN GBHC/2 ELSE GBHC END
	+ CASE L_ABHC  WHEN '<' THEN ABHC/2 ELSE ABHC END
	+ CASE L_BBHC  WHEN '<' THEN BBHC/2 ELSE BBHC END
	+ CASE L_DBHC  WHEN '<' THEN DBHC/2 ELSE DBHC END
    ) END	HCH,
	L_ODDD, ODDD,	
	L_PDDD, PDDD,	
	L_ODDE, ODDE,	
	L_PDDE, PDDE,	
	L_ODDT, ODDT,	
	L_PDDT, PDDT,	
	CASE L_ODDD  WHEN '<' THEN ODDD/2 ELSE ODDD END
	+ CASE L_PDDD  WHEN '<' THEN PDDD/2 ELSE PDDD END
	+ CASE L_ODDE  WHEN '<' THEN ODDE/2 ELSE ODDE END
	+ CASE L_PDDE  WHEN '<' THEN PDDE/2 ELSE PDDE END
	+ CASE L_ODDT  WHEN '<' THEN ODDT/2 ELSE ODDT END
	+ CASE L_PDDT  WHEN '<' THEN PDDT/2 ELSE PDDT END
	DDT,
	L_KEPONE, KEPONE,
    L_TOX,
    CASE WHEN (TOX IS NOT NULL) AND TOX <> 0 THEN TOX ELSE (	
        CASE L_TOX_P26  WHEN '<' THEN TOX_P26/2 ELSE TOX_P26 END
        + CASE L_TOX_P50  WHEN '<' THEN TOX_P50/2 ELSE TOX_P50 END
        + CASE L_TOX_P62  WHEN '<' THEN TOX_P62/2 ELSE TOX_P62 END
    ) END	TOX,
	L_TOX_P26, TOX_P26,
	L_TOX_P50, TOX_P50,
	L_TOX_P62, TOX_P62
FROM		WPG.TS_GLAB_OC;


-- WPG.TS_GLAB_PAH_CAL source

CREATE VIEW [WPG].[TS_GLAB_PAH_CAL] AS
SELECT 
	TSVISIT_ID,
	TYPE,
	L_NAPH, NAPH,
	L_ACPH, ACPH,
	L_ACEN, ACEN,
	L_FLUO, FLUO,
	L_PHEN, PHEN,
	L_ANTH, ANTH,
	L_FLUT, FLUT,
	L_PYRE, PYRE,
	L_BANT, BANT,
	L_CHRY, CHRY,
	L_BBFL, BBFL,
	L_BKFL, BKFL,
	L_BAPY, BAPY,
	L_DAAN, DAAN,
	L_BGPE, BGPE,
	L_INPY, INPY,
	CASE L_NAPH  WHEN '<' THEN NAPH/2 ELSE NAPH END
	+ CASE L_ACPH  WHEN '<' THEN ACPH/2 ELSE ACPH END
	+ CASE L_ACEN  WHEN '<' THEN ACEN/2 ELSE ACEN END
	+ CASE L_FLUO  WHEN '<' THEN FLUO/2 ELSE FLUO END
	+ CASE L_PHEN  WHEN '<' THEN PHEN/2 ELSE PHEN END
	+ CASE L_ANTH  WHEN '<' THEN ANTH/2 ELSE ANTH END
	+ CASE L_FLUT  WHEN '<' THEN FLUT/2 ELSE FLUT END
	+ CASE L_PYRE  WHEN '<' THEN PYRE/2 ELSE PYRE END
	+ CASE L_BANT  WHEN '<' THEN BANT/2 ELSE BANT END
	+ CASE L_CHRY  WHEN '<' THEN CHRY/2 ELSE CHRY END
	+ CASE L_BBFL  WHEN '<' THEN BBFL/2 ELSE BBFL END
	+ CASE L_BKFL  WHEN '<' THEN BKFL/2 ELSE BKFL END
	+ CASE L_BAPY  WHEN '<' THEN BAPY/2 ELSE BAPY END
	+ CASE L_DAAN  WHEN '<' THEN DAAN/2 ELSE DAAN END
	+ CASE L_BGPE  WHEN '<' THEN BGPE/2 ELSE BGPE END
	+ CASE L_INPY  WHEN '<' THEN INPY/2 ELSE INPY END
	PAH,
	L_PFOA, PFOA,
	L_PFOS, PFOS,
	PFOS_DWR
FROM		WPG.TS_GLAB_PAH;


-- WPG.TS_GLAB_PCB_CAL source

CREATE VIEW [WPG].[TS_GLAB_PCB_CAL] AS
SELECT 
	TSVISIT_ID,
	TYPE,
    TSO_DWR,
	L_PCB8, PCB8,
	L_PCB18, PCB18,
	L_PCB28, PCB28,
	L_PCB31, PCB31,
	L_PCB44, PCB44,
	L_PCB52, PCB52,
	L_PCB66, PCB66,
	L_PCB77, PCB77,
	L_PCB81, PCB81,
	L_PCB101, PCB101,
	L_PCB105, PCB105,
	L_PCB114, PCB114,
	L_PCB118, PCB118,
	L_PCB123, PCB123,
	L_PCB126, PCB126,
	L_PCB128, PCB128,
	L_PCB138, PCB138,
	L_PCB149, PCB149,
	L_PCB153, PCB153,
	L_PCB156, PCB156,
	L_PCB157, PCB157,
	L_PCB167, PCB167,
	L_PCB169, PCB169,
	L_PCB170, PCB170,
	L_PCB180, PCB180,
	L_PCB187, PCB187,
	L_PCB189, PCB189,
	CASE L_PCB8  WHEN '<' THEN PCB8/2 ELSE PCB8 END
	+ CASE L_PCB18  WHEN '<' THEN PCB18/2 ELSE PCB18 END
	+ CASE L_PCB28  WHEN '<' THEN PCB28/2 ELSE PCB28 END
	+ CASE L_PCB31  WHEN '<' THEN PCB31/2 ELSE PCB31 END
	+ CASE L_PCB44  WHEN '<' THEN PCB44/2 ELSE PCB44 END
	+ CASE L_PCB52  WHEN '<' THEN PCB52/2 ELSE PCB52 END
	+ CASE L_PCB66  WHEN '<' THEN PCB66/2 ELSE PCB66 END
	+ CASE L_PCB77  WHEN '<' THEN PCB77/2 ELSE PCB77 END
	+ CASE L_PCB81  WHEN '<' THEN PCB81/2 ELSE PCB81 END
	+ CASE L_PCB101  WHEN '<' THEN PCB101/2 ELSE PCB101 END
	+ CASE L_PCB105  WHEN '<' THEN PCB105/2 ELSE PCB105 END
	+ CASE L_PCB114  WHEN '<' THEN PCB114/2 ELSE PCB114 END
	+ CASE L_PCB118  WHEN '<' THEN PCB118/2 ELSE PCB118 END
	+ CASE L_PCB123  WHEN '<' THEN PCB123/2 ELSE PCB123 END
	+ CASE L_PCB126  WHEN '<' THEN PCB126/2 ELSE PCB126 END
	+ CASE L_PCB128  WHEN '<' THEN PCB128/2 ELSE PCB128 END
	+ CASE L_PCB138  WHEN '<' THEN PCB138/2 ELSE PCB138 END
	+ CASE L_PCB149  WHEN '<' THEN PCB149/2 ELSE PCB149 END
	+ CASE L_PCB153  WHEN '<' THEN PCB153/2 ELSE PCB153 END
	+ CASE L_PCB156  WHEN '<' THEN PCB156/2 ELSE PCB156 END
	+ CASE L_PCB157  WHEN '<' THEN PCB157/2 ELSE PCB157 END
	+ CASE L_PCB167  WHEN '<' THEN PCB167/2 ELSE PCB167 END
	+ CASE L_PCB169  WHEN '<' THEN PCB169/2 ELSE PCB169 END
	+ CASE L_PCB170  WHEN '<' THEN PCB170/2 ELSE PCB170 END
	+ CASE L_PCB180  WHEN '<' THEN PCB180/2 ELSE PCB180 END
	+ CASE L_PCB187  WHEN '<' THEN PCB187/2 ELSE PCB187 END
	+ CASE L_PCB189  WHEN '<' THEN PCB189/2 ELSE PCB189 END
	PCB
FROM		WPG.TS_GLAB_PCB;


-- WPG.TW_CLAB_BU_CAL source

CREATE VIEW [WPG].[TW_CLAB_BU_CAL] AS
SELECT 
	TWVISIT_ID,
	TYPE,
	L_PFOSF, PFOSF
FROM		WPG.TW_CLAB_BU;


-- WPG.TW_CLAB_CAL source

CREATE VIEW [WPG].[TW_CLAB_CAL] AS
SELECT 
	TWVISIT_ID,
	TYPE,
	L_PBB, PBB,
	L_PF, PF,
	L_NP, NP,
	L_NPME, NPME,
	L_NPDE, NPDE,
	L_NPE, NPE,
	L_MBT, MBT,
	L_DBT, DBT,
	L_TBT, TBT,
	CASE L_MBT  WHEN '<' THEN MBT/2 ELSE MBT END
	+ CASE L_DBT  WHEN '<' THEN DBT/2 ELSE DBT END
	+ CASE L_TBT  WHEN '<' THEN TBT/2 ELSE TBT END
	OSN
FROM		WPG.TW_CLAB;


-- WPG.TW_CLAB_CDD_CAL source

CREATE VIEW [WPG].[TW_CLAB_CDD_CAL] AS
SELECT 
	TWVISIT_ID,
	TYPE,
	TEQ_TYPE,
	L_TCDF1, TCDF1,
	L_TCDD1, TCDD1,
	L_PECDF1, PECDF1,
	L_PECDF2, PECDF2,
	L_PECDD1, PECDD1,
	L_HXCDF1, HXCDF1,
	L_HXCDF2, HXCDF2,
	L_HXCDF3, HXCDF3,
	L_HXCDF4, HXCDF4,
	L_HXCDD1, HXCDD1,
	L_HXCDD2, HXCDD2,
	L_HXCDD3, HXCDD3,
	L_HPCDF1, HPCDF1,
	L_HPCDF2, HPCDF2,
	L_HPCDD1, HPCDD1,
	L_OCDF, OCDF,
	L_OCDD, OCDD,
	CASE L_TCDF1  WHEN '<' THEN TCDF1/2 ELSE TCDF1 END
	+ CASE L_TCDD1  WHEN '<' THEN TCDD1/2 ELSE TCDD1 END
	+ CASE L_PECDF1  WHEN '<' THEN PECDF1/2 ELSE PECDF1 END
	+ CASE L_PECDF2  WHEN '<' THEN PECDF2/2 ELSE PECDF2 END
	+ CASE L_PECDD1  WHEN '<' THEN PECDD1/2 ELSE PECDD1 END
	+ CASE L_HXCDF1  WHEN '<' THEN HXCDF1/2 ELSE HXCDF1 END
	+ CASE L_HXCDF2  WHEN '<' THEN HXCDF2/2 ELSE HXCDF2 END
	+ CASE L_HXCDF3  WHEN '<' THEN HXCDF3/2 ELSE HXCDF3 END
	+ CASE L_HXCDF4  WHEN '<' THEN HXCDF4/2 ELSE HXCDF4 END
	+ CASE L_HXCDD1  WHEN '<' THEN HXCDD1/2 ELSE HXCDD1 END
	+ CASE L_HXCDD2  WHEN '<' THEN HXCDD2/2 ELSE HXCDD2 END
	+ CASE L_HXCDD3  WHEN '<' THEN HXCDD3/2 ELSE HXCDD3 END
	+ CASE L_HPCDF1  WHEN '<' THEN HPCDF1/2 ELSE HPCDF1 END
	+ CASE L_HPCDF2  WHEN '<' THEN HPCDF2/2 ELSE HPCDF2 END
	+ CASE L_HPCDD1  WHEN '<' THEN HPCDD1/2 ELSE HPCDD1 END
	+ CASE L_OCDF  WHEN '<' THEN OCDF/2 ELSE OCDF END
	+ CASE L_OCDD  WHEN '<' THEN OCDD/2 ELSE OCDD END
	CDD
FROM		WPG.TW_CLAB_CDD;


-- WPG.TW_CLAB_PBDE_CAL source

CREATE VIEW [WPG].[TW_CLAB_PBDE_CAL] AS
SELECT 
	TWVISIT_ID,
	TYPE,
	L_PBDE17, PBDE17,
	L_PBDE28, PBDE28,
	L_PBDE47, PBDE47,
	L_PBDE99, PBDE99,
	L_PBDE100, PBDE100,
	L_PBDE153, PBDE153,
	L_PBDE154, PBDE154,
	L_PBDE183, PBDE183,
	L_PBDE197, PBDE197,
	L_PBDE209, PBDE209,
	CASE L_PBDE17  WHEN '<' THEN PBDE17/2 ELSE PBDE17 END
	+ CASE L_PBDE28  WHEN '<' THEN PBDE28/2 ELSE PBDE28 END
	+ CASE L_PBDE47  WHEN '<' THEN PBDE47/2 ELSE PBDE47 END
	+ CASE L_PBDE99  WHEN '<' THEN PBDE99/2 ELSE PBDE99 END
	+ CASE L_PBDE100  WHEN '<' THEN PBDE100/2 ELSE PBDE100 END
	+ CASE L_PBDE153  WHEN '<' THEN PBDE153/2 ELSE PBDE153 END
	+ CASE L_PBDE154  WHEN '<' THEN PBDE154/2 ELSE PBDE154 END
	+ CASE L_PBDE183  WHEN '<' THEN PBDE183/2 ELSE PBDE183 END
	+ CASE L_PBDE197  WHEN '<' THEN PBDE197/2 ELSE PBDE197 END
	+ CASE L_PBDE209  WHEN '<' THEN PBDE209/2 ELSE PBDE209 END
	PBDE
FROM		WPG.TW_CLAB_PBDE;


-- WPG.TW_GLABM_CAL source

CREATE VIEW [WPG].[TW_GLABM_CAL] AS
SELECT  *
FROM		WPG.TW_GLABM;


-- WPG.TW_GLAB_CDD_CAL source

CREATE VIEW [WPG].[TW_GLAB_CDD_CAL] AS
SELECT 
	TWVISIT_ID,
	TYPE,
	N'' TEQ_TYPE,
	L_TCDF1, TCDF1,
	L_TCDD1, TCDD1,
	L_PECDF1, PECDF1,
	L_PECDF2, PECDF2,
	L_PECDD1, PECDD1,
	L_HXCDF1, HXCDF1,
	L_HXCDF2, HXCDF2,
	L_HXCDF3, HXCDF3,
	L_HXCDF4, HXCDF4,
	L_HXCDD1, HXCDD1,
	L_HXCDD2, HXCDD2,
	L_HXCDD3, HXCDD3,
	L_HPCDF1, HPCDF1,
	L_HPCDF2, HPCDF2,
	L_HPCDD1, HPCDD1,
	L_OCDF, OCDF,
	L_OCDD, OCDD,
	CASE L_TCDF1  WHEN '<' THEN TCDF1/2 ELSE TCDF1 END
	+ CASE L_TCDD1  WHEN '<' THEN TCDD1/2 ELSE TCDD1 END
	+ CASE L_PECDF1  WHEN '<' THEN PECDF1/2 ELSE PECDF1 END
	+ CASE L_PECDF2  WHEN '<' THEN PECDF2/2 ELSE PECDF2 END
	+ CASE L_PECDD1  WHEN '<' THEN PECDD1/2 ELSE PECDD1 END
	+ CASE L_HXCDF1  WHEN '<' THEN HXCDF1/2 ELSE HXCDF1 END
	+ CASE L_HXCDF2  WHEN '<' THEN HXCDF2/2 ELSE HXCDF2 END
	+ CASE L_HXCDF3  WHEN '<' THEN HXCDF3/2 ELSE HXCDF3 END
	+ CASE L_HXCDF4  WHEN '<' THEN HXCDF4/2 ELSE HXCDF4 END
	+ CASE L_HXCDD1  WHEN '<' THEN HXCDD1/2 ELSE HXCDD1 END
	+ CASE L_HXCDD2  WHEN '<' THEN HXCDD2/2 ELSE HXCDD2 END
	+ CASE L_HXCDD3  WHEN '<' THEN HXCDD3/2 ELSE HXCDD3 END
	+ CASE L_HPCDF1  WHEN '<' THEN HPCDF1/2 ELSE HPCDF1 END
	+ CASE L_HPCDF2  WHEN '<' THEN HPCDF2/2 ELSE HPCDF2 END
	+ CASE L_HPCDD1  WHEN '<' THEN HPCDD1/2 ELSE HPCDD1 END
	+ CASE L_OCDF  WHEN '<' THEN OCDF/2 ELSE OCDF END
	+ CASE L_OCDD  WHEN '<' THEN OCDD/2 ELSE OCDD END
	CDD
FROM		WPG.TW_GLAB_CDD;


-- WPG.TW_GLAB_DLPCB_CAL source

CREATE VIEW [WPG].[TW_GLAB_DLPCB_CAL] AS
SELECT 
	TWVISIT_ID,
	TYPE,
	L_DLPCB81, DLPCB81,
	L_DLPCB77, DLPCB77,
	L_DLPCB123, DLPCB123,
	L_DLPCB118, DLPCB118,
	L_DLPCB114, DLPCB114,
	L_DLPCB105, DLPCB105,
	L_DLPCB126, DLPCB126,
	L_DLPCB167, DLPCB167,
	L_DLPCB156, DLPCB156,
	L_DLPCB157, DLPCB157,
	L_DLPCB169, DLPCB169,
	L_DLPCB189, DLPCB189,	
	CASE L_DLPCB81  WHEN '<' THEN DLPCB81/2 ELSE DLPCB81 END
	+ CASE L_DLPCB77  WHEN '<' THEN DLPCB77/2 ELSE DLPCB77 END
	+ CASE L_DLPCB123  WHEN '<' THEN DLPCB123/2 ELSE DLPCB123 END
	+ CASE L_DLPCB118  WHEN '<' THEN DLPCB118/2 ELSE DLPCB118 END
	+ CASE L_DLPCB114  WHEN '<' THEN DLPCB114/2 ELSE DLPCB114 END
	+ CASE L_DLPCB105  WHEN '<' THEN DLPCB105/2 ELSE DLPCB105 END
	+ CASE L_DLPCB126  WHEN '<' THEN DLPCB126/2 ELSE DLPCB126 END
	+ CASE L_DLPCB167  WHEN '<' THEN DLPCB167/2 ELSE DLPCB167 END
	+ CASE L_DLPCB156  WHEN '<' THEN DLPCB156/2 ELSE DLPCB156 END
	+ CASE L_DLPCB157  WHEN '<' THEN DLPCB157/2 ELSE DLPCB157 END
	+ CASE L_DLPCB169  WHEN '<' THEN DLPCB169/2 ELSE DLPCB169 END
	+ CASE L_DLPCB189  WHEN '<' THEN DLPCB189/2 ELSE DLPCB189 END
	DLPCB
FROM		WPG.TW_GLAB_DLPCB;


-- WPG.TW_GLAB_OC_CAL source

CREATE VIEW [WPG].[TW_GLAB_OC_CAL] AS
SELECT 
	TWVISIT_ID,
	TYPE,
	L_GBHC, GBHC,
	L_HCB, HCB,
	L_HEPT, HEPT,
	L_ALDR, ALDR,
	L_HEPO, HEPO,
	L_ODDE, ODDE,
	L_PDDE, PDDE,
	L_DIEL, DIEL,
	L_ODDD, ODDD,
	L_ENDR, ENDR,
	L_PDDD, PDDD,
	L_ODDT, ODDT,
	L_PDDT, PDDT,
	L_ABHC, ABHC,
	L_BBHC, BBHC,
	L_DBHC, DBHC,
	L_OCHD, OCHD,
	L_GCHD, GCHD,
	L_ACHD, ACHD,
	L_TNON, TNON,
	L_CNON, CNON,
	L_MIRX, MIRX,
	L_END1, END1, 
	L_END2, END2, 
	L_PECB, PECB, 
	L_KEPONE, KEPONE, 
    L_TOX,
	CASE WHEN (TOX IS NOT NULL) AND TOX <> 0 THEN TOX ELSE (	
        CASE L_TOX_P26  WHEN '<' THEN TOX_P26/2 ELSE TOX_P26 END
        + CASE L_TOX_P50  WHEN '<' THEN TOX_P50/2 ELSE TOX_P50 END
        + CASE L_TOX_P62  WHEN '<' THEN TOX_P62/2 ELSE TOX_P62 END
    ) END	TOX,
	L_TOX_P26, TOX_P26,
	L_TOX_P50, TOX_P50,
	L_TOX_P62, TOX_P62
FROM		WPG.TW_GLAB_OC;


-- WPG.TW_GLAB_PAH_CAL source

CREATE VIEW [WPG].[TW_GLAB_PAH_CAL] AS
SELECT 
	TWVISIT_ID,
	TYPE,
	L_NAPH, NAPH,
	L_ACPH, ACPH,
	L_ACEN, ACEN,
	L_FLUO, FLUO,
	L_PHEN, PHEN,
	L_ANTH, ANTH,
	L_FLUT, FLUT,
	L_PYRE, PYRE,
	L_BANT, BANT,
	L_CHRY, CHRY,
	L_BBFL, BBFL,
	L_BKFL, BKFL,
	L_BAPY, BAPY,
	L_DAAN, DAAN,
	L_BGPE, BGPE,
	L_INPY, INPY,
	CASE L_NAPH  WHEN '<' THEN NAPH/2 ELSE NAPH END
	+ CASE L_ACPH  WHEN '<' THEN ACPH/2 ELSE ACPH END
	+ CASE L_ACEN  WHEN '<' THEN ACEN/2 ELSE ACEN END
	+ CASE L_FLUO  WHEN '<' THEN FLUO/2 ELSE FLUO END
	+ CASE L_PHEN  WHEN '<' THEN PHEN/2 ELSE PHEN END
	+ CASE L_ANTH  WHEN '<' THEN ANTH/2 ELSE ANTH END
	+ CASE L_FLUT  WHEN '<' THEN FLUT/2 ELSE FLUT END
	+ CASE L_PYRE  WHEN '<' THEN PYRE/2 ELSE PYRE END
	+ CASE L_BANT  WHEN '<' THEN BANT/2 ELSE BANT END
	+ CASE L_CHRY  WHEN '<' THEN CHRY/2 ELSE CHRY END
	+ CASE L_BBFL  WHEN '<' THEN BBFL/2 ELSE BBFL END
	+ CASE L_BKFL  WHEN '<' THEN BKFL/2 ELSE BKFL END
	+ CASE L_BAPY  WHEN '<' THEN BAPY/2 ELSE BAPY END
	+ CASE L_DAAN  WHEN '<' THEN DAAN/2 ELSE DAAN END
	+ CASE L_BGPE  WHEN '<' THEN BGPE/2 ELSE BGPE END
	+ CASE L_INPY  WHEN '<' THEN INPY/2 ELSE INPY END
	PAH,
	L_PFOA, PFOA,
	L_PFOS, PFOS
FROM		WPG.TW_GLAB_PAH;


-- WPG.TW_GLAB_PCB_CAL source

CREATE VIEW [WPG].[TW_GLAB_PCB_CAL] AS
SELECT 
	TWVISIT_ID,
	TYPE,
	L_PCB8, PCB8,
	L_PCB18, PCB18,
	L_PCB28, PCB28,
	L_PCB31, PCB31,
	L_PCB44, PCB44,
	L_PCB52, PCB52,
	L_PCB66, PCB66,
	L_PCB77, PCB77,
	L_PCB81, PCB81,
	L_PCB101, PCB101,
	L_PCB105, PCB105,
	L_PCB114, PCB114,
	L_PCB118, PCB118,
	L_PCB123, PCB123,
	L_PCB126, PCB126,
	L_PCB128, PCB128,
	L_PCB138, PCB138,
	L_PCB149, PCB149,
	L_PCB153, PCB153,
	L_PCB156, PCB156,
	L_PCB157, PCB157,
	L_PCB167, PCB167,
	L_PCB169, PCB169,
	L_PCB170, PCB170,
	L_PCB180, PCB180,
	L_PCB187, PCB187,
	L_PCB189, PCB189,
	CASE L_PCB8  WHEN '<' THEN PCB8/2 ELSE PCB8 END
	+ CASE L_PCB18  WHEN '<' THEN PCB18/2 ELSE PCB18 END
	+ CASE L_PCB28  WHEN '<' THEN PCB28/2 ELSE PCB28 END
	+ CASE L_PCB31  WHEN '<' THEN PCB31/2 ELSE PCB31 END
	+ CASE L_PCB44  WHEN '<' THEN PCB44/2 ELSE PCB44 END
	+ CASE L_PCB52  WHEN '<' THEN PCB52/2 ELSE PCB52 END
	+ CASE L_PCB66  WHEN '<' THEN PCB66/2 ELSE PCB66 END
	+ CASE L_PCB77  WHEN '<' THEN PCB77/2 ELSE PCB77 END
	+ CASE L_PCB81  WHEN '<' THEN PCB81/2 ELSE PCB81 END
	+ CASE L_PCB101  WHEN '<' THEN PCB101/2 ELSE PCB101 END
	+ CASE L_PCB105  WHEN '<' THEN PCB105/2 ELSE PCB105 END
	+ CASE L_PCB114  WHEN '<' THEN PCB114/2 ELSE PCB114 END
	+ CASE L_PCB118  WHEN '<' THEN PCB118/2 ELSE PCB118 END
	+ CASE L_PCB123  WHEN '<' THEN PCB123/2 ELSE PCB123 END
	+ CASE L_PCB126  WHEN '<' THEN PCB126/2 ELSE PCB126 END
	+ CASE L_PCB128  WHEN '<' THEN PCB128/2 ELSE PCB128 END
	+ CASE L_PCB138  WHEN '<' THEN PCB138/2 ELSE PCB138 END
	+ CASE L_PCB149  WHEN '<' THEN PCB149/2 ELSE PCB149 END
	+ CASE L_PCB153  WHEN '<' THEN PCB153/2 ELSE PCB153 END
	+ CASE L_PCB156  WHEN '<' THEN PCB156/2 ELSE PCB156 END
	+ CASE L_PCB157  WHEN '<' THEN PCB157/2 ELSE PCB157 END
	+ CASE L_PCB167  WHEN '<' THEN PCB167/2 ELSE PCB167 END
	+ CASE L_PCB169  WHEN '<' THEN PCB169/2 ELSE PCB169 END
	+ CASE L_PCB170  WHEN '<' THEN PCB170/2 ELSE PCB170 END
	+ CASE L_PCB180  WHEN '<' THEN PCB180/2 ELSE PCB180 END
	+ CASE L_PCB187  WHEN '<' THEN PCB187/2 ELSE PCB187 END
	+ CASE L_PCB189  WHEN '<' THEN PCB189/2 ELSE PCB189 END
	PCB
FROM		WPG.TW_GLAB_PCB;


-- WPG.VIEW_M2_GLAB source

CREATE VIEW WPG.VIEW_M2_GLAB
AS
select mwvisit_id as mwvisit_id , depth_code   as depth_code , L_NH4 AS quNH4_N,
NH4 AS NH4_N
,L_NO2 AS quNO2_N, NO2 AS NO2_N,
L_NO3 AS quNO3_N, NO3 AS NO3_N,
L_TKN_S AS qutkns,TKN_S AS tkns,
L_PHAE AS quPHAE,PHAE AS PHAE,
L_PO4 AS quPO4_P ,  PO4 AS PO4_P,
L_TVS AS quTVS , TVS AS TVS,
L_SS AS quss, SS AS SS ,
L_TP_S AS  qtp_ps , TP_S   AS qutp_ps,
L_TKN_SP AS  qutkn_s_ps, TKN_SP AS tkn_s_ps,
L_CHL as quCHY, CHL as CHY
 from WPG.MW_GLABN;


-- WPG.View_ALL_SD source

create view WPG.View_ALL_SD
as
select mwvisit_id,sd    from wpg.mw_a 
union
select mwvisit_id,sd    from wpg.mw_b
union
select mwvisit_id,sd    from wpg.mw_c 
union
select mwvisit_id,sd    from wpg.mw_m 
union
select mwvisit_id,sd    from wpg.mw_n 
union
select mwvisit_id,sd    from wpg.mw_s;


-- WPG.WB_BC_G source

CREATE VIEW WPG.WB_BC_G AS
SELECT	C.STATION_ID,
	C.M_DATE,
	C.S_TIME,
	D.SP_GROUP,
	COUNT(*)									NO_SP,
	(COUNT(*) -1)/E.POPULATION								SP_RICH,
	-SUM(C.ABUNDANCE/E.POPULATION * LOG(C.ABUNDANCE/E.POPULATION))			SP_DIV,
	-SUM(C.ABUNDANCE/E.POPULATION * LOG(C.ABUNDANCE/E.POPULATION))/E.POPULATION	SP_EVEN,
	E.POPULATION									POPULATION,
	SUM(C.WEIGHT)									BIOMASS
FROM	WPG.WB_BC_B	C
JOIN	WPG.wb_SL	D	ON	C.SP_NAME = D.SP_NAME
JOIN	(-- GROUP POPULATION
	SELECT 	A.STATION_ID,
		A.M_DATE,
		A.S_TIME,
		B.SP_GROUP,
		SUM(A.ABUNDANCE)	POPULATION
	FROM	WPG.WB_BC_B	A
	JOIN	WPG.wb_SL	B	ON A.SP_NAME = B.SP_NAME
	GROUP BY	A.STATION_ID, A.M_DATE, A.S_TIME, B.SP_GROUP
	)	E		ON	C.STATION_ID	= E.STATION_ID
				AND	C.M_DATE	= E.M_DATE
				AND	C.S_TIME		= E.S_TIME
				AND	D.SP_GROUP	 = E.SP_GROUP	
GROUP BY C.STATION_ID, C.M_DATE, C.S_TIME, D.SP_GROUP, E.POPULATION;


-- WPG.view_marine_1 source

CREATE view wpg.view_marine_1 as
select 
v.mwvisit_id ,
f.secchidisc SD,
st.station_id station,
v.mdate MDATE,
g.L_NH4 quNH4_N, 
g.NH4 NH4_N,
g.L_NO2 quNO2_N,
g.NO2 NO2_N,
g.L_NO3 quNO3_N
,g.NO3  NO3_N,
g.L_TKN_S,g.TKN_S,
g.L_TKN_P,g.TKN_P,
g. L_TKN_SP,g.TKN_SP,
g. L_PO4 ,g. PO4 ,
g.L_TP_S ,g.TP_S ,
g.L_TP_P,g.TP_P,
g.L_TP_SP,g.TP_SP,
g.L_SIO2,g.SIO2,
g.L_SS,g.SS,
g.L_TVS,g.TVS,
g.L_CHL,g.CHL,
g.L_PHAE,g.PHAE
from wpg.mstation st 
left outer join wpg.mw_visit v on st.site_id  = v.site_id
left outer join wpg.mw_mlab m on v.mwvisit_id   =  m.mwvisit_id
left outer join wpg.mw_field f on v.mwvisit_id   =  f.mwvisit_id
left outer join wpg.mw_glabn g on v.mwvisit_id   =  g.mwvisit_id;


-- WPG.view_river_1 source

CREATE view WPG.view_river_1 as 
SELECT
	WQ.RWVISIT_ID  VISIT_ID ,
	TZ.ZONE_NAME	ZONE,
	CZ.WCZ_ABBR		WCZ,
	SZ.SZ_NAME		SUBZONE,
	RI.RIVER_NAME	RIVER,
	ST.STATNAME		STATION,
	st.station_id,
	WQ.MDATE MDATE,
	WQ.STIME TIME,
	WQ.SAMPLE_NO,
	FI.L_SAL,
	FI.SAL,
	FI.L_COND,
	FI.COND,
	FI.L_DO,
	FI.DO DO,
	FI.L_DOS,
	FI.DOS,
	FI.L_PH,
	FI.PH  PH_FIELD ,
	FI.TEMPER,
	GN.L_SS,
	GN.SS SS,
	GN.L_TS,
	GN.TS,
	GN.L_TVS,
	GN.TVS,
	FI.L_TURB,
	FI.TURB,
	ML.L_BOD5,
	ML.BOD5 BOD5,
	GN.L_COD,
	GN.COD COD,
	GN.L_TOC,
	GN.TOC,
	GN.L_OIL,
	GN.OIL,
	ML.L_EC,
	ML.EC,
	ML.L_FC,
	ML.FC,
	GN.L_NH4,
	GN.NH4,
	GN.L_NO2,
	GN.NO2,
	GN.L_NO3,
	GN.NO3,
	GN.L_TKNS,
	GN.TKNS,
	GN.L_TKNSP,
	GN.TKNSP,
	GN.L_PO4,
	GN.PO4,
	GN.L_TPS,
	GN.TPS,
	GN.L_TPSP,
	GN.TPSP,
	GN.L_SIL,
	GN.SIL,
	GN.L_TCYN,
	GN.TCYN,
	GN.L_DETERG,
	GN.DETERG,
	GN.L_FL,
	GN.FL,
	GN.L_CL,
	GN.CL,
	GN.L_H2S,
	GN.H2S,
	GN.L_SULP,
	GN.SULP,
	GN.L_SSP,
	GN.SSP,
	GN.L_CHL,
	GN.CHL,
	GN.L_PHEO,
	GN.PHEO,
	GM.L_AL,
	GM.AL,
	GM.L_SB,
	GM.SB,
	GM.L_ARSENIC,
	GM.ARSENIC,
	GM.L_BA,
	GM.BA,
	GM.L_BE,
	GM.BE,
	GM.L_B,
	GM.B,
	GM.L_CD,
	GM.CD,
	GM.L_CR,
	GM.CR,
	GM.L_CU,
	GM.CU,
	GM.L_FE,
	GM.FE,
	GM.L_PB,
	GM.PB,
	GM.L_MN,
	GM.MN,
	GM.L_HG,
	GM.HG,
	GM.L_MO,
	GM.MO,
	GM.L_NI,
	GM.NI,
	GM.L_AG,
	GM.AG,
	GM.L_TL,
	GM.TL,
	GM.L_V,
	GM.V,
	GM.L_ZN,
	GM.ZN,
	FL.DEPTH,
	FL.WIDTH,
	FL.VEL,
	FL.FLOW,
	WQ.BOD5_PT,
	WQ.NH4_PT,
	WQ.DOS_PT,
	WQ.WQI_PT,
	WQ.WQI_GRADE,
	NH.L_NH3,
	NH.NH3,
	GN.TIN,
	GN.TN,
	FI.WEATHER,
	FI.COLOR,
	FI.SMELL,
	FI.RAINFALL,
	FI.TIDE,
	ST.CMMVIEW		VIEW_NO
FROM			WPG.RW_WQI		WQ
LEFT OUTER JOIN	WPG.RW_FIELD 	FI 	ON WQ.RWVISIT_ID 	= FI.RWVISIT_ID
LEFT OUTER JOIN	WPG.RW_MLAB	ML 	ON WQ.RWVISIT_ID 	= ML.RWVISIT_ID
LEFT OUTER JOIN	WPG.RW_GLABM 	GM	ON WQ.RWVISIT_ID 	= GM.RWVISIT_ID
LEFT OUTER JOIN	WPG.RW_GLABN_CAL	GN 	ON WQ.RWVISIT_ID	= GN.RWVISIT_ID
LEFT OUTER JOIN	WPG.RW_FLOW_SUM	FL	ON WQ.RWVISIT_ID 	= FL.RWVISIT_ID
LEFT OUTER JOIN	WPG.RW_NH3		NH	ON WQ.RWVISIT_ID	= NH.RWVISIT_ID
JOIN			WPG.RSTATION	ST	ON WQ.SITE_ID	= ST.SITE_ID
JOIN			WPG.RIVER		RI	ON ST.R_ID		= RI.R_ID
JOIN			WPG.WPCO_SZ	SZ	ON ST.SZ_ID		= SZ.SZ_ID
JOIN			WPG.WPCO_WCZ	CZ	ON SZ.WCZ_ID		= CZ.WCZ_ID 
JOIN			WPG.TEN_ZONE	TZ	ON CZ.ZONE_ID	= TZ.ZONE_ID;
